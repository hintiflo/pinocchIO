
pinocchIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073a8  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f84  080074d8  080074d8  000174d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a45c  0800a45c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800a45c  0800a45c  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a45c  0800a45c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a45c  0800a45c  0001a45c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a460  0800a460  0001a460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800a464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e8  200001d4  0800a638  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  200006bc  0800a638  000206bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000866b  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000010eb  00000000  00000000  00028868  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000048df  00000000  00000000  00029953  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000006f8  00000000  00000000  0002e232  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000788  00000000  00000000  0002e92a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000026a7  00000000  00000000  0002f0b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00001ea6  00000000  00000000  00031759  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000335ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002768  00000000  00000000  0003367c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      000000a9  00000000  00000000  00035de4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200001d4 	.word	0x200001d4
 800014c:	00000000 	.word	0x00000000
 8000150:	080074c0 	.word	0x080074c0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200001d8 	.word	0x200001d8
 800016c:	080074c0 	.word	0x080074c0

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2iz>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a60:	d215      	bcs.n	8000a8e <__aeabi_d2iz+0x36>
 8000a62:	d511      	bpl.n	8000a88 <__aeabi_d2iz+0x30>
 8000a64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d912      	bls.n	8000a94 <__aeabi_d2iz+0x3c>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_d2iz+0x48>
 8000a94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a98:	bf08      	it	eq
 8000a9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_d2uiz>:
 8000aa8:	004a      	lsls	r2, r1, #1
 8000aaa:	d211      	bcs.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d211      	bcs.n	8000ad6 <__aeabi_d2uiz+0x2e>
 8000ab2:	d50d      	bpl.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d40e      	bmi.n	8000adc <__aeabi_d2uiz+0x34>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	fa23 f002 	lsr.w	r0, r3, r2
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_d2uiz+0x3a>
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0000 	mov.w	r0, #0
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_d2f>:
 8000ae8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af0:	bf24      	itt	cs
 8000af2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000af6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000afa:	d90d      	bls.n	8000b18 <__aeabi_d2f+0x30>
 8000afc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b10:	bf08      	it	eq
 8000b12:	f020 0001 	biceq.w	r0, r0, #1
 8000b16:	4770      	bx	lr
 8000b18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b1c:	d121      	bne.n	8000b62 <__aeabi_d2f+0x7a>
 8000b1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b22:	bfbc      	itt	lt
 8000b24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	4770      	bxlt	lr
 8000b2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b32:	f1c2 0218 	rsb	r2, r2, #24
 8000b36:	f1c2 0c20 	rsb	ip, r2, #32
 8000b3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b42:	bf18      	it	ne
 8000b44:	f040 0001 	orrne.w	r0, r0, #1
 8000b48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b54:	ea40 000c 	orr.w	r0, r0, ip
 8000b58:	fa23 f302 	lsr.w	r3, r3, r2
 8000b5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b60:	e7cc      	b.n	8000afc <__aeabi_d2f+0x14>
 8000b62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b66:	d107      	bne.n	8000b78 <__aeabi_d2f+0x90>
 8000b68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b6c:	bf1e      	ittt	ne
 8000b6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b76:	4770      	bxne	lr
 8000b78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <__aeabi_frsub>:
 8000b88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b8c:	e002      	b.n	8000b94 <__addsf3>
 8000b8e:	bf00      	nop

08000b90 <__aeabi_fsub>:
 8000b90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b94 <__addsf3>:
 8000b94:	0042      	lsls	r2, r0, #1
 8000b96:	bf1f      	itttt	ne
 8000b98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b9c:	ea92 0f03 	teqne	r2, r3
 8000ba0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ba4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba8:	d06a      	beq.n	8000c80 <__addsf3+0xec>
 8000baa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bb2:	bfc1      	itttt	gt
 8000bb4:	18d2      	addgt	r2, r2, r3
 8000bb6:	4041      	eorgt	r1, r0
 8000bb8:	4048      	eorgt	r0, r1
 8000bba:	4041      	eorgt	r1, r0
 8000bbc:	bfb8      	it	lt
 8000bbe:	425b      	neglt	r3, r3
 8000bc0:	2b19      	cmp	r3, #25
 8000bc2:	bf88      	it	hi
 8000bc4:	4770      	bxhi	lr
 8000bc6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bda:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bde:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4249      	negne	r1, r1
 8000be6:	ea92 0f03 	teq	r2, r3
 8000bea:	d03f      	beq.n	8000c6c <__addsf3+0xd8>
 8000bec:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bf4:	eb10 000c 	adds.w	r0, r0, ip
 8000bf8:	f1c3 0320 	rsb	r3, r3, #32
 8000bfc:	fa01 f103 	lsl.w	r1, r1, r3
 8000c00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c04:	d502      	bpl.n	8000c0c <__addsf3+0x78>
 8000c06:	4249      	negs	r1, r1
 8000c08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c10:	d313      	bcc.n	8000c3a <__addsf3+0xa6>
 8000c12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c16:	d306      	bcc.n	8000c26 <__addsf3+0x92>
 8000c18:	0840      	lsrs	r0, r0, #1
 8000c1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c1e:	f102 0201 	add.w	r2, r2, #1
 8000c22:	2afe      	cmp	r2, #254	; 0xfe
 8000c24:	d251      	bcs.n	8000cca <__addsf3+0x136>
 8000c26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c2e:	bf08      	it	eq
 8000c30:	f020 0001 	biceq.w	r0, r0, #1
 8000c34:	ea40 0003 	orr.w	r0, r0, r3
 8000c38:	4770      	bx	lr
 8000c3a:	0049      	lsls	r1, r1, #1
 8000c3c:	eb40 0000 	adc.w	r0, r0, r0
 8000c40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c44:	f1a2 0201 	sub.w	r2, r2, #1
 8000c48:	d1ed      	bne.n	8000c26 <__addsf3+0x92>
 8000c4a:	fab0 fc80 	clz	ip, r0
 8000c4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c52:	ebb2 020c 	subs.w	r2, r2, ip
 8000c56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c5a:	bfaa      	itet	ge
 8000c5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c60:	4252      	neglt	r2, r2
 8000c62:	4318      	orrge	r0, r3
 8000c64:	bfbc      	itt	lt
 8000c66:	40d0      	lsrlt	r0, r2
 8000c68:	4318      	orrlt	r0, r3
 8000c6a:	4770      	bx	lr
 8000c6c:	f092 0f00 	teq	r2, #0
 8000c70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c74:	bf06      	itte	eq
 8000c76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c7a:	3201      	addeq	r2, #1
 8000c7c:	3b01      	subne	r3, #1
 8000c7e:	e7b5      	b.n	8000bec <__addsf3+0x58>
 8000c80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c88:	bf18      	it	ne
 8000c8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c8e:	d021      	beq.n	8000cd4 <__addsf3+0x140>
 8000c90:	ea92 0f03 	teq	r2, r3
 8000c94:	d004      	beq.n	8000ca0 <__addsf3+0x10c>
 8000c96:	f092 0f00 	teq	r2, #0
 8000c9a:	bf08      	it	eq
 8000c9c:	4608      	moveq	r0, r1
 8000c9e:	4770      	bx	lr
 8000ca0:	ea90 0f01 	teq	r0, r1
 8000ca4:	bf1c      	itt	ne
 8000ca6:	2000      	movne	r0, #0
 8000ca8:	4770      	bxne	lr
 8000caa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cae:	d104      	bne.n	8000cba <__addsf3+0x126>
 8000cb0:	0040      	lsls	r0, r0, #1
 8000cb2:	bf28      	it	cs
 8000cb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cb8:	4770      	bx	lr
 8000cba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cbe:	bf3c      	itt	cc
 8000cc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bxcc	lr
 8000cc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd2:	4770      	bx	lr
 8000cd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cd8:	bf16      	itet	ne
 8000cda:	4608      	movne	r0, r1
 8000cdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ce0:	4601      	movne	r1, r0
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	bf06      	itte	eq
 8000ce6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cea:	ea90 0f01 	teqeq	r0, r1
 8000cee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cf2:	4770      	bx	lr

08000cf4 <__aeabi_ui2f>:
 8000cf4:	f04f 0300 	mov.w	r3, #0
 8000cf8:	e004      	b.n	8000d04 <__aeabi_i2f+0x8>
 8000cfa:	bf00      	nop

08000cfc <__aeabi_i2f>:
 8000cfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d00:	bf48      	it	mi
 8000d02:	4240      	negmi	r0, r0
 8000d04:	ea5f 0c00 	movs.w	ip, r0
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d10:	4601      	mov	r1, r0
 8000d12:	f04f 0000 	mov.w	r0, #0
 8000d16:	e01c      	b.n	8000d52 <__aeabi_l2f+0x2a>

08000d18 <__aeabi_ul2f>:
 8000d18:	ea50 0201 	orrs.w	r2, r0, r1
 8000d1c:	bf08      	it	eq
 8000d1e:	4770      	bxeq	lr
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	e00a      	b.n	8000d3c <__aeabi_l2f+0x14>
 8000d26:	bf00      	nop

08000d28 <__aeabi_l2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d34:	d502      	bpl.n	8000d3c <__aeabi_l2f+0x14>
 8000d36:	4240      	negs	r0, r0
 8000d38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3c:	ea5f 0c01 	movs.w	ip, r1
 8000d40:	bf02      	ittt	eq
 8000d42:	4684      	moveq	ip, r0
 8000d44:	4601      	moveq	r1, r0
 8000d46:	2000      	moveq	r0, #0
 8000d48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d4c:	bf08      	it	eq
 8000d4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d56:	fabc f28c 	clz	r2, ip
 8000d5a:	3a08      	subs	r2, #8
 8000d5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d60:	db10      	blt.n	8000d84 <__aeabi_l2f+0x5c>
 8000d62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d66:	4463      	add	r3, ip
 8000d68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d74:	fa20 f202 	lsr.w	r2, r0, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	f020 0001 	biceq.w	r0, r0, #1
 8000d82:	4770      	bx	lr
 8000d84:	f102 0220 	add.w	r2, r2, #32
 8000d88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d8c:	f1c2 0220 	rsb	r2, r2, #32
 8000d90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d94:	fa21 f202 	lsr.w	r2, r1, r2
 8000d98:	eb43 0002 	adc.w	r0, r3, r2
 8000d9c:	bf08      	it	eq
 8000d9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da2:	4770      	bx	lr

08000da4 <__aeabi_fmul>:
 8000da4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000da8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dac:	bf1e      	ittt	ne
 8000dae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000db2:	ea92 0f0c 	teqne	r2, ip
 8000db6:	ea93 0f0c 	teqne	r3, ip
 8000dba:	d06f      	beq.n	8000e9c <__aeabi_fmul+0xf8>
 8000dbc:	441a      	add	r2, r3
 8000dbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000dc2:	0240      	lsls	r0, r0, #9
 8000dc4:	bf18      	it	ne
 8000dc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dca:	d01e      	beq.n	8000e0a <__aeabi_fmul+0x66>
 8000dcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000ddc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000de0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000de4:	bf3e      	ittt	cc
 8000de6:	0049      	lslcc	r1, r1, #1
 8000de8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dec:	005b      	lslcc	r3, r3, #1
 8000dee:	ea40 0001 	orr.w	r0, r0, r1
 8000df2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000df6:	2afd      	cmp	r2, #253	; 0xfd
 8000df8:	d81d      	bhi.n	8000e36 <__aeabi_fmul+0x92>
 8000dfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e02:	bf08      	it	eq
 8000e04:	f020 0001 	biceq.w	r0, r0, #1
 8000e08:	4770      	bx	lr
 8000e0a:	f090 0f00 	teq	r0, #0
 8000e0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e12:	bf08      	it	eq
 8000e14:	0249      	lsleq	r1, r1, #9
 8000e16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e1e:	3a7f      	subs	r2, #127	; 0x7f
 8000e20:	bfc2      	ittt	gt
 8000e22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e2a:	4770      	bxgt	lr
 8000e2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	3a01      	subs	r2, #1
 8000e36:	dc5d      	bgt.n	8000ef4 <__aeabi_fmul+0x150>
 8000e38:	f112 0f19 	cmn.w	r2, #25
 8000e3c:	bfdc      	itt	le
 8000e3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e42:	4770      	bxle	lr
 8000e44:	f1c2 0200 	rsb	r2, r2, #0
 8000e48:	0041      	lsls	r1, r0, #1
 8000e4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e4e:	f1c2 0220 	rsb	r2, r2, #32
 8000e52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e5a:	f140 0000 	adc.w	r0, r0, #0
 8000e5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e62:	bf08      	it	eq
 8000e64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e68:	4770      	bx	lr
 8000e6a:	f092 0f00 	teq	r2, #0
 8000e6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e72:	bf02      	ittt	eq
 8000e74:	0040      	lsleq	r0, r0, #1
 8000e76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e7a:	3a01      	subeq	r2, #1
 8000e7c:	d0f9      	beq.n	8000e72 <__aeabi_fmul+0xce>
 8000e7e:	ea40 000c 	orr.w	r0, r0, ip
 8000e82:	f093 0f00 	teq	r3, #0
 8000e86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0049      	lsleq	r1, r1, #1
 8000e8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e92:	3b01      	subeq	r3, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xe6>
 8000e96:	ea41 010c 	orr.w	r1, r1, ip
 8000e9a:	e78f      	b.n	8000dbc <__aeabi_fmul+0x18>
 8000e9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ea0:	ea92 0f0c 	teq	r2, ip
 8000ea4:	bf18      	it	ne
 8000ea6:	ea93 0f0c 	teqne	r3, ip
 8000eaa:	d00a      	beq.n	8000ec2 <__aeabi_fmul+0x11e>
 8000eac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000eb0:	bf18      	it	ne
 8000eb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eb6:	d1d8      	bne.n	8000e6a <__aeabi_fmul+0xc6>
 8000eb8:	ea80 0001 	eor.w	r0, r0, r1
 8000ebc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	bf17      	itett	ne
 8000ec8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ecc:	4608      	moveq	r0, r1
 8000ece:	f091 0f00 	teqne	r1, #0
 8000ed2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ed6:	d014      	beq.n	8000f02 <__aeabi_fmul+0x15e>
 8000ed8:	ea92 0f0c 	teq	r2, ip
 8000edc:	d101      	bne.n	8000ee2 <__aeabi_fmul+0x13e>
 8000ede:	0242      	lsls	r2, r0, #9
 8000ee0:	d10f      	bne.n	8000f02 <__aeabi_fmul+0x15e>
 8000ee2:	ea93 0f0c 	teq	r3, ip
 8000ee6:	d103      	bne.n	8000ef0 <__aeabi_fmul+0x14c>
 8000ee8:	024b      	lsls	r3, r1, #9
 8000eea:	bf18      	it	ne
 8000eec:	4608      	movne	r0, r1
 8000eee:	d108      	bne.n	8000f02 <__aeabi_fmul+0x15e>
 8000ef0:	ea80 0001 	eor.w	r0, r0, r1
 8000ef4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ef8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f00:	4770      	bx	lr
 8000f02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f0a:	4770      	bx	lr

08000f0c <__aeabi_fdiv>:
 8000f0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f14:	bf1e      	ittt	ne
 8000f16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f1a:	ea92 0f0c 	teqne	r2, ip
 8000f1e:	ea93 0f0c 	teqne	r3, ip
 8000f22:	d069      	beq.n	8000ff8 <__aeabi_fdiv+0xec>
 8000f24:	eba2 0203 	sub.w	r2, r2, r3
 8000f28:	ea80 0c01 	eor.w	ip, r0, r1
 8000f2c:	0249      	lsls	r1, r1, #9
 8000f2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f32:	d037      	beq.n	8000fa4 <__aeabi_fdiv+0x98>
 8000f34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f44:	428b      	cmp	r3, r1
 8000f46:	bf38      	it	cc
 8000f48:	005b      	lslcc	r3, r3, #1
 8000f4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f52:	428b      	cmp	r3, r1
 8000f54:	bf24      	itt	cs
 8000f56:	1a5b      	subcs	r3, r3, r1
 8000f58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f60:	bf24      	itt	cs
 8000f62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f6e:	bf24      	itt	cs
 8000f70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f7c:	bf24      	itt	cs
 8000f7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	bf18      	it	ne
 8000f8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f8e:	d1e0      	bne.n	8000f52 <__aeabi_fdiv+0x46>
 8000f90:	2afd      	cmp	r2, #253	; 0xfd
 8000f92:	f63f af50 	bhi.w	8000e36 <__aeabi_fmul+0x92>
 8000f96:	428b      	cmp	r3, r1
 8000f98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f9c:	bf08      	it	eq
 8000f9e:	f020 0001 	biceq.w	r0, r0, #1
 8000fa2:	4770      	bx	lr
 8000fa4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fa8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fac:	327f      	adds	r2, #127	; 0x7f
 8000fae:	bfc2      	ittt	gt
 8000fb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fb8:	4770      	bxgt	lr
 8000fba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fbe:	f04f 0300 	mov.w	r3, #0
 8000fc2:	3a01      	subs	r2, #1
 8000fc4:	e737      	b.n	8000e36 <__aeabi_fmul+0x92>
 8000fc6:	f092 0f00 	teq	r2, #0
 8000fca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fce:	bf02      	ittt	eq
 8000fd0:	0040      	lsleq	r0, r0, #1
 8000fd2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fd6:	3a01      	subeq	r2, #1
 8000fd8:	d0f9      	beq.n	8000fce <__aeabi_fdiv+0xc2>
 8000fda:	ea40 000c 	orr.w	r0, r0, ip
 8000fde:	f093 0f00 	teq	r3, #0
 8000fe2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0049      	lsleq	r1, r1, #1
 8000fea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fee:	3b01      	subeq	r3, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xda>
 8000ff2:	ea41 010c 	orr.w	r1, r1, ip
 8000ff6:	e795      	b.n	8000f24 <__aeabi_fdiv+0x18>
 8000ff8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ffc:	ea92 0f0c 	teq	r2, ip
 8001000:	d108      	bne.n	8001014 <__aeabi_fdiv+0x108>
 8001002:	0242      	lsls	r2, r0, #9
 8001004:	f47f af7d 	bne.w	8000f02 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	f47f af70 	bne.w	8000ef0 <__aeabi_fmul+0x14c>
 8001010:	4608      	mov	r0, r1
 8001012:	e776      	b.n	8000f02 <__aeabi_fmul+0x15e>
 8001014:	ea93 0f0c 	teq	r3, ip
 8001018:	d104      	bne.n	8001024 <__aeabi_fdiv+0x118>
 800101a:	024b      	lsls	r3, r1, #9
 800101c:	f43f af4c 	beq.w	8000eb8 <__aeabi_fmul+0x114>
 8001020:	4608      	mov	r0, r1
 8001022:	e76e      	b.n	8000f02 <__aeabi_fmul+0x15e>
 8001024:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001028:	bf18      	it	ne
 800102a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800102e:	d1ca      	bne.n	8000fc6 <__aeabi_fdiv+0xba>
 8001030:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001034:	f47f af5c 	bne.w	8000ef0 <__aeabi_fmul+0x14c>
 8001038:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800103c:	f47f af3c 	bne.w	8000eb8 <__aeabi_fmul+0x114>
 8001040:	e75f      	b.n	8000f02 <__aeabi_fmul+0x15e>
 8001042:	bf00      	nop

08001044 <__gesf2>:
 8001044:	f04f 3cff 	mov.w	ip, #4294967295
 8001048:	e006      	b.n	8001058 <__cmpsf2+0x4>
 800104a:	bf00      	nop

0800104c <__lesf2>:
 800104c:	f04f 0c01 	mov.w	ip, #1
 8001050:	e002      	b.n	8001058 <__cmpsf2+0x4>
 8001052:	bf00      	nop

08001054 <__cmpsf2>:
 8001054:	f04f 0c01 	mov.w	ip, #1
 8001058:	f84d cd04 	str.w	ip, [sp, #-4]!
 800105c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001060:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001064:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001068:	bf18      	it	ne
 800106a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800106e:	d011      	beq.n	8001094 <__cmpsf2+0x40>
 8001070:	b001      	add	sp, #4
 8001072:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001076:	bf18      	it	ne
 8001078:	ea90 0f01 	teqne	r0, r1
 800107c:	bf58      	it	pl
 800107e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001082:	bf88      	it	hi
 8001084:	17c8      	asrhi	r0, r1, #31
 8001086:	bf38      	it	cc
 8001088:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800108c:	bf18      	it	ne
 800108e:	f040 0001 	orrne.w	r0, r0, #1
 8001092:	4770      	bx	lr
 8001094:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001098:	d102      	bne.n	80010a0 <__cmpsf2+0x4c>
 800109a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800109e:	d105      	bne.n	80010ac <__cmpsf2+0x58>
 80010a0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010a4:	d1e4      	bne.n	8001070 <__cmpsf2+0x1c>
 80010a6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010aa:	d0e1      	beq.n	8001070 <__cmpsf2+0x1c>
 80010ac:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop

080010b4 <__aeabi_cfrcmple>:
 80010b4:	4684      	mov	ip, r0
 80010b6:	4608      	mov	r0, r1
 80010b8:	4661      	mov	r1, ip
 80010ba:	e7ff      	b.n	80010bc <__aeabi_cfcmpeq>

080010bc <__aeabi_cfcmpeq>:
 80010bc:	b50f      	push	{r0, r1, r2, r3, lr}
 80010be:	f7ff ffc9 	bl	8001054 <__cmpsf2>
 80010c2:	2800      	cmp	r0, #0
 80010c4:	bf48      	it	mi
 80010c6:	f110 0f00 	cmnmi.w	r0, #0
 80010ca:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010cc <__aeabi_fcmpeq>:
 80010cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d0:	f7ff fff4 	bl	80010bc <__aeabi_cfcmpeq>
 80010d4:	bf0c      	ite	eq
 80010d6:	2001      	moveq	r0, #1
 80010d8:	2000      	movne	r0, #0
 80010da:	f85d fb08 	ldr.w	pc, [sp], #8
 80010de:	bf00      	nop

080010e0 <__aeabi_fcmplt>:
 80010e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e4:	f7ff ffea 	bl	80010bc <__aeabi_cfcmpeq>
 80010e8:	bf34      	ite	cc
 80010ea:	2001      	movcc	r0, #1
 80010ec:	2000      	movcs	r0, #0
 80010ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f2:	bf00      	nop

080010f4 <__aeabi_fcmple>:
 80010f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f8:	f7ff ffe0 	bl	80010bc <__aeabi_cfcmpeq>
 80010fc:	bf94      	ite	ls
 80010fe:	2001      	movls	r0, #1
 8001100:	2000      	movhi	r0, #0
 8001102:	f85d fb08 	ldr.w	pc, [sp], #8
 8001106:	bf00      	nop

08001108 <__aeabi_fcmpge>:
 8001108:	f84d ed08 	str.w	lr, [sp, #-8]!
 800110c:	f7ff ffd2 	bl	80010b4 <__aeabi_cfrcmple>
 8001110:	bf94      	ite	ls
 8001112:	2001      	movls	r0, #1
 8001114:	2000      	movhi	r0, #0
 8001116:	f85d fb08 	ldr.w	pc, [sp], #8
 800111a:	bf00      	nop

0800111c <__aeabi_fcmpgt>:
 800111c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001120:	f7ff ffc8 	bl	80010b4 <__aeabi_cfrcmple>
 8001124:	bf34      	ite	cc
 8001126:	2001      	movcc	r0, #1
 8001128:	2000      	movcs	r0, #0
 800112a:	f85d fb08 	ldr.w	pc, [sp], #8
 800112e:	bf00      	nop

08001130 <__aeabi_f2uiz>:
 8001130:	0042      	lsls	r2, r0, #1
 8001132:	d20e      	bcs.n	8001152 <__aeabi_f2uiz+0x22>
 8001134:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001138:	d30b      	bcc.n	8001152 <__aeabi_f2uiz+0x22>
 800113a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800113e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001142:	d409      	bmi.n	8001158 <__aeabi_f2uiz+0x28>
 8001144:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001148:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800114c:	fa23 f002 	lsr.w	r0, r3, r2
 8001150:	4770      	bx	lr
 8001152:	f04f 0000 	mov.w	r0, #0
 8001156:	4770      	bx	lr
 8001158:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800115c:	d101      	bne.n	8001162 <__aeabi_f2uiz+0x32>
 800115e:	0242      	lsls	r2, r0, #9
 8001160:	d102      	bne.n	8001168 <__aeabi_f2uiz+0x38>
 8001162:	f04f 30ff 	mov.w	r0, #4294967295
 8001166:	4770      	bx	lr
 8001168:	f04f 0000 	mov.w	r0, #0
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop

08001170 <setRisingCycles>:
	static bool fallingEdge[MAX_EXTI_CNT];

	static int risingCycles[MAX_EXTI_CNT];
	static int fallingCycles[MAX_EXTI_CNT];

	void setRisingCycles(int extiIdx)	{	risingCycles[extiIdx]++;		}
 8001170:	4a03      	ldr	r2, [pc, #12]	; (8001180 <setRisingCycles+0x10>)
 8001172:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8001176:	3301      	adds	r3, #1
 8001178:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	200001f0 	.word	0x200001f0

08001184 <setFallingCycles>:
	void setFallingCycles(int extiIdx)	{	fallingCycles[extiIdx]++;	}
 8001184:	4b03      	ldr	r3, [pc, #12]	; (8001194 <setFallingCycles+0x10>)
 8001186:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800118a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800118c:	3301      	adds	r3, #1
 800118e:	6503      	str	r3, [r0, #80]	; 0x50
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	200001f0 	.word	0x200001f0

08001198 <clrRisingCycles>:
	void clrRisingCycles(int extiIdx)	{	risingCycles[extiIdx]  = 0;	}
 8001198:	4b02      	ldr	r3, [pc, #8]	; (80011a4 <clrRisingCycles+0xc>)
 800119a:	2200      	movs	r2, #0
 800119c:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	200001f0 	.word	0x200001f0

080011a8 <clrFallingCycles>:
	void clrFallingCycles(int extiIdx)	{	fallingCycles[extiIdx] = 0;	}
 80011a8:	4b02      	ldr	r3, [pc, #8]	; (80011b4 <clrFallingCycles+0xc>)
 80011aa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80011ae:	2300      	movs	r3, #0
 80011b0:	6503      	str	r3, [r0, #80]	; 0x50
 80011b2:	4770      	bx	lr
 80011b4:	200001f0 	.word	0x200001f0

080011b8 <getRisingCycles>:
	int getRisingCycles(int extiIdx)	{    return risingCycles[extiIdx];}
 80011b8:	4b01      	ldr	r3, [pc, #4]	; (80011c0 <getRisingCycles+0x8>)
 80011ba:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80011be:	4770      	bx	lr
 80011c0:	200001f0 	.word	0x200001f0

080011c4 <getFallingCycles>:
	int getFallingCycles(int extiIdx)	{    return fallingCycles[extiIdx];}
 80011c4:	4b02      	ldr	r3, [pc, #8]	; (80011d0 <getFallingCycles+0xc>)
 80011c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80011ca:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	200001f0 	.word	0x200001f0

080011d4 <setRisingEdge>:

	void setRisingEdge(int extiIdx)		{	risingEdge[extiIdx]  = true;		}
 80011d4:	4b02      	ldr	r3, [pc, #8]	; (80011e0 <setRisingEdge+0xc>)
 80011d6:	4418      	add	r0, r3
 80011d8:	2301      	movs	r3, #1
 80011da:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 80011de:	4770      	bx	lr
 80011e0:	200001f0 	.word	0x200001f0

080011e4 <setFallingEdge>:
	void setFallingEdge(int extiIdx)	{	fallingEdge[extiIdx] = true;		}
 80011e4:	4b02      	ldr	r3, [pc, #8]	; (80011f0 <setFallingEdge+0xc>)
 80011e6:	4418      	add	r0, r3
 80011e8:	2301      	movs	r3, #1
 80011ea:	f880 30b4 	strb.w	r3, [r0, #180]	; 0xb4
 80011ee:	4770      	bx	lr
 80011f0:	200001f0 	.word	0x200001f0

080011f4 <clrRisingEdge>:
	void clrRisingEdge(int extiIdx)		{	risingEdge[extiIdx]  = false;		}
 80011f4:	4b02      	ldr	r3, [pc, #8]	; (8001200 <clrRisingEdge+0xc>)
 80011f6:	4418      	add	r0, r3
 80011f8:	2300      	movs	r3, #0
 80011fa:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 80011fe:	4770      	bx	lr
 8001200:	200001f0 	.word	0x200001f0

08001204 <clrFallingEdge>:
	void clrFallingEdge(int extiIdx)	{	fallingEdge[extiIdx] = false;		}
 8001204:	4b02      	ldr	r3, [pc, #8]	; (8001210 <clrFallingEdge+0xc>)
 8001206:	4418      	add	r0, r3
 8001208:	2300      	movs	r3, #0
 800120a:	f880 30b4 	strb.w	r3, [r0, #180]	; 0xb4
 800120e:	4770      	bx	lr
 8001210:	200001f0 	.word	0x200001f0

08001214 <getRisingEdge>:
	bool getRisingEdge(int extiIdx)		{    return risingEdge[extiIdx];}
 8001214:	4b02      	ldr	r3, [pc, #8]	; (8001220 <getRisingEdge+0xc>)
 8001216:	4418      	add	r0, r3
 8001218:	f890 00a0 	ldrb.w	r0, [r0, #160]	; 0xa0
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	200001f0 	.word	0x200001f0

08001224 <getFallingEdge>:
	bool getFallingEdge(int extiIdx)	{    return fallingEdge[extiIdx];}
 8001224:	4b02      	ldr	r3, [pc, #8]	; (8001230 <getFallingEdge+0xc>)
 8001226:	4418      	add	r0, r3
 8001228:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	200001f0 	.word	0x200001f0

08001234 <setRisingEdges>:

	void setRisingEdges(int extiIdx)	{	risingEdges[extiIdx]++;		}
 8001234:	4b04      	ldr	r3, [pc, #16]	; (8001248 <setRisingEdges+0x14>)
 8001236:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800123a:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
 800123e:	3301      	adds	r3, #1
 8001240:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	200001f0 	.word	0x200001f0

0800124c <setFallingEdges>:
	void setFallingEdges(int extiIdx)	{	fallingEdges[extiIdx]++;	}
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <setFallingEdges+0x14>)
 800124e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001252:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 8001256:	3301      	adds	r3, #1
 8001258:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	200001f0 	.word	0x200001f0

08001264 <clrRisingEdges>:
	void clrRisingEdges(int extiIdx)	{	risingEdges[extiIdx]  = 0;	}
 8001264:	4b03      	ldr	r3, [pc, #12]	; (8001274 <clrRisingEdges+0x10>)
 8001266:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800126a:	2300      	movs	r3, #0
 800126c:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	200001f0 	.word	0x200001f0

08001278 <clrFallingEdges>:
	void clrFallingEdges(int extiIdx)	{	fallingEdges[extiIdx] = 0;	}
 8001278:	4b03      	ldr	r3, [pc, #12]	; (8001288 <clrFallingEdges+0x10>)
 800127a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800127e:	2300      	movs	r3, #0
 8001280:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	200001f0 	.word	0x200001f0

0800128c <getRisingEdges>:
	int getRisingEdges(int extiIdx)		{    return risingEdges[extiIdx];}
 800128c:	4b02      	ldr	r3, [pc, #8]	; (8001298 <getRisingEdges+0xc>)
 800128e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001292:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 8001296:	4770      	bx	lr
 8001298:	200001f0 	.word	0x200001f0

0800129c <getFallingEdges>:
	int getFallingEdges(int extiIdx)	{    return fallingEdges[extiIdx];}
 800129c:	4b02      	ldr	r3, [pc, #8]	; (80012a8 <getFallingEdges+0xc>)
 800129e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80012a2:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
 80012a6:	4770      	bx	lr
 80012a8:	200001f0 	.word	0x200001f0

080012ac <getGpioPinFromPortPin>:
{
	gpioPin gpiopin;
	gpiopin.pinNr = -1;
	gpiopin.GPIOx = 0;

	if( !( 'A' == port || 'B' == port || 'C' == port	) )
 80012ac:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d813      	bhi.n	80012de <getGpioPinFromPortPin+0x32>
{
 80012b6:	b430      	push	{r4, r5}
		return gpiopin;	// stop this nonsense here and now

	if('A' == port && (0 <= pinNr && pinNr <= 15) )
 80012b8:	2941      	cmp	r1, #65	; 0x41
 80012ba:	d016      	beq.n	80012ea <getGpioPinFromPortPin+0x3e>
			gpiopin.GPIOx = GPIOA;
		else
			gpiopin.GPIOx = GPIOB;
	}

	if('B' == port && 0 == pinNr)
 80012bc:	2942      	cmp	r1, #66	; 0x42
 80012be:	d11d      	bne.n	80012fc <getGpioPinFromPortPin+0x50>
 80012c0:	b352      	cbz	r2, 8001318 <getGpioPinFromPortPin+0x6c>
		gpiopin.pinNr = 9;
	}

	if('B' == port && 1 == pinNr)
	{	gpiopin.GPIOx = GPIOA;
		gpiopin.pinNr = 10;
 80012c2:	2a01      	cmp	r2, #1
 80012c4:	bf14      	ite	ne
 80012c6:	f04f 34ff 	movne.w	r4, #4294967295
 80012ca:	240a      	moveq	r4, #10
 80012cc:	4b17      	ldr	r3, [pc, #92]	; (800132c <getGpioPinFromPortPin+0x80>)
 80012ce:	bf18      	it	ne
 80012d0:	2300      	movne	r3, #0
	if('C' == port && 0 == pinNr)
	{	gpiopin.GPIOx = GPIOA;
		gpiopin.pinNr = 8;
	}

	if('C' == port && 1 == pinNr)
 80012d2:	2943      	cmp	r1, #67	; 0x43
 80012d4:	d018      	beq.n	8001308 <getGpioPinFromPortPin+0x5c>
	{	gpiopin.GPIOx = GPIOB;
		gpiopin.pinNr = 7;
	}

	return gpiopin;
 80012d6:	6003      	str	r3, [r0, #0]
 80012d8:	6044      	str	r4, [r0, #4]
}
 80012da:	bc30      	pop	{r4, r5}
 80012dc:	4770      	bx	lr
		return gpiopin;	// stop this nonsense here and now
 80012de:	2300      	movs	r3, #0
 80012e0:	6003      	str	r3, [r0, #0]
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295
 80012e6:	6043      	str	r3, [r0, #4]
}
 80012e8:	4770      	bx	lr
	if('A' == port && (0 <= pinNr && pinNr <= 15) )
 80012ea:	2a0f      	cmp	r2, #15
 80012ec:	d81a      	bhi.n	8001324 <getGpioPinFromPortPin+0x78>
	{	gpiopin.pinNr = pinNr;
 80012ee:	4614      	mov	r4, r2
 80012f0:	4b0e      	ldr	r3, [pc, #56]	; (800132c <getGpioPinFromPortPin+0x80>)
 80012f2:	4d0f      	ldr	r5, [pc, #60]	; (8001330 <getGpioPinFromPortPin+0x84>)
 80012f4:	2a07      	cmp	r2, #7
 80012f6:	bfc8      	it	gt
 80012f8:	462b      	movgt	r3, r5
 80012fa:	e002      	b.n	8001302 <getGpioPinFromPortPin+0x56>
	gpiopin.pinNr = -1;
 80012fc:	f04f 34ff 	mov.w	r4, #4294967295
	gpiopin.GPIOx = 0;
 8001300:	2300      	movs	r3, #0
	if('C' == port && 0 == pinNr)
 8001302:	2943      	cmp	r1, #67	; 0x43
 8001304:	d1e7      	bne.n	80012d6 <getGpioPinFromPortPin+0x2a>
 8001306:	b152      	cbz	r2, 800131e <getGpioPinFromPortPin+0x72>
		gpiopin.pinNr = 7;
 8001308:	2a01      	cmp	r2, #1
 800130a:	bf08      	it	eq
 800130c:	2407      	moveq	r4, #7
 800130e:	4908      	ldr	r1, [pc, #32]	; (8001330 <getGpioPinFromPortPin+0x84>)
 8001310:	2a01      	cmp	r2, #1
 8001312:	bf08      	it	eq
 8001314:	460b      	moveq	r3, r1
 8001316:	e7de      	b.n	80012d6 <getGpioPinFromPortPin+0x2a>
		gpiopin.pinNr = 9;
 8001318:	2409      	movs	r4, #9
	{	gpiopin.GPIOx = GPIOA;
 800131a:	4b04      	ldr	r3, [pc, #16]	; (800132c <getGpioPinFromPortPin+0x80>)
 800131c:	e7db      	b.n	80012d6 <getGpioPinFromPortPin+0x2a>
		gpiopin.pinNr = 8;
 800131e:	2408      	movs	r4, #8
	{	gpiopin.GPIOx = GPIOA;
 8001320:	4b02      	ldr	r3, [pc, #8]	; (800132c <getGpioPinFromPortPin+0x80>)
 8001322:	e7d8      	b.n	80012d6 <getGpioPinFromPortPin+0x2a>
	gpiopin.pinNr = -1;
 8001324:	f04f 34ff 	mov.w	r4, #4294967295
	gpiopin.GPIOx = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	e7ea      	b.n	8001302 <getGpioPinFromPortPin+0x56>
 800132c:	40010800 	.word	0x40010800
 8001330:	40010c00 	.word	0x40010c00

08001334 <initOutputLO>:
	return deinitPullLO(pin.GPIOx, pin.pinNr);
}


bool initOutputLO(GPIO_TypeDef * GPIOx, int Pin)
{	bool retval = false;
 8001334:	b430      	push	{r4, r5}



	if( 0 <= Pin && Pin <= 7 )						// CRL
 8001336:	2907      	cmp	r1, #7
 8001338:	d91f      	bls.n	800137a <initOutputLO+0x46>
		CLEAR_BIT(GPIOx->CRL, gpioCrlCnfX_0);		// output
		CLEAR_BIT(GPIOx->CRL, gpioCrlCnfX_1);

		retval = true;
	}else
	if( 8 <= Pin && Pin <= 15 )						// CRH
 800133a:	3908      	subs	r1, #8
 800133c:	2907      	cmp	r1, #7
 800133e:	d83a      	bhi.n	80013b6 <initOutputLO+0x82>
	{	int gpioCrhModeX_0 = (0x1U << ( (Pin-8)* 4U));
 8001340:	0089      	lsls	r1, r1, #2
		int gpioCrhModeX_1 = (0x2U << ( (Pin-8)* 4U));
		CLEAR_BIT(GPIOx->CRH, gpioCrhModeX_0 );		// low speed
 8001342:	6842      	ldr	r2, [r0, #4]
	{	int gpioCrhModeX_0 = (0x1U << ( (Pin-8)* 4U));
 8001344:	2301      	movs	r3, #1
 8001346:	fa03 f401 	lsl.w	r4, r3, r1
		CLEAR_BIT(GPIOx->CRH, gpioCrhModeX_0 );		// low speed
 800134a:	ea22 0204 	bic.w	r2, r2, r4
 800134e:	6042      	str	r2, [r0, #4]
		SET_BIT(GPIOx->CRH, gpioCrhModeX_1 );
 8001350:	6845      	ldr	r5, [r0, #4]
		int gpioCrhModeX_1 = (0x2U << ( (Pin-8)* 4U));
 8001352:	2202      	movs	r2, #2
 8001354:	fa02 f401 	lsl.w	r4, r2, r1
		SET_BIT(GPIOx->CRH, gpioCrhModeX_1 );
 8001358:	432c      	orrs	r4, r5
 800135a:	6044      	str	r4, [r0, #4]

		int gpioCrhCnfX_0 = (0x1U << (2U + (Pin-8)*4U));
 800135c:	4411      	add	r1, r2
		int gpioCrhCnfX_1 = (0x2U << (2U + (Pin-8)*4U));
		CLEAR_BIT(GPIOx->CRH, gpioCrhCnfX_0);		// output
 800135e:	6844      	ldr	r4, [r0, #4]
		int gpioCrhCnfX_0 = (0x1U << (2U + (Pin-8)*4U));
 8001360:	fa03 f501 	lsl.w	r5, r3, r1
		CLEAR_BIT(GPIOx->CRH, gpioCrhCnfX_0);		// output
 8001364:	ea24 0405 	bic.w	r4, r4, r5
 8001368:	6044      	str	r4, [r0, #4]
		CLEAR_BIT(GPIOx->CRH, gpioCrhCnfX_1);
 800136a:	6844      	ldr	r4, [r0, #4]
		int gpioCrhCnfX_1 = (0x2U << (2U + (Pin-8)*4U));
 800136c:	fa02 f101 	lsl.w	r1, r2, r1
		CLEAR_BIT(GPIOx->CRH, gpioCrhCnfX_1);
 8001370:	ea24 0101 	bic.w	r1, r4, r1
 8001374:	6041      	str	r1, [r0, #4]

		retval = true;
 8001376:	4618      	mov	r0, r3
 8001378:	e01b      	b.n	80013b2 <initOutputLO+0x7e>
	{	int gpioCrlModeX_0 = (0x1U << (Pin * 4U));
 800137a:	0089      	lsls	r1, r1, #2
		CLEAR_BIT(GPIOx->CRL, gpioCrlModeX_0 );		// low speed
 800137c:	6802      	ldr	r2, [r0, #0]
	{	int gpioCrlModeX_0 = (0x1U << (Pin * 4U));
 800137e:	2301      	movs	r3, #1
 8001380:	fa03 f401 	lsl.w	r4, r3, r1
		CLEAR_BIT(GPIOx->CRL, gpioCrlModeX_0 );		// low speed
 8001384:	ea22 0204 	bic.w	r2, r2, r4
 8001388:	6002      	str	r2, [r0, #0]
		SET_BIT(GPIOx->CRL, gpioCrlModeX_1 );
 800138a:	6805      	ldr	r5, [r0, #0]
		int gpioCrlModeX_1 = (0x2U << (Pin * 4U));
 800138c:	2202      	movs	r2, #2
 800138e:	fa02 f401 	lsl.w	r4, r2, r1
		SET_BIT(GPIOx->CRL, gpioCrlModeX_1 );
 8001392:	432c      	orrs	r4, r5
 8001394:	6004      	str	r4, [r0, #0]
		int gpioCrlCnfX_0 = (0x1U << (2U + Pin*4U));
 8001396:	4411      	add	r1, r2
		CLEAR_BIT(GPIOx->CRL, gpioCrlCnfX_0);		// output
 8001398:	6804      	ldr	r4, [r0, #0]
		int gpioCrlCnfX_0 = (0x1U << (2U + Pin*4U));
 800139a:	fa03 f501 	lsl.w	r5, r3, r1
		CLEAR_BIT(GPIOx->CRL, gpioCrlCnfX_0);		// output
 800139e:	ea24 0405 	bic.w	r4, r4, r5
 80013a2:	6004      	str	r4, [r0, #0]
		CLEAR_BIT(GPIOx->CRL, gpioCrlCnfX_1);
 80013a4:	6804      	ldr	r4, [r0, #0]
		int gpioCrlCnfX_1 = (0x2U << (2U + Pin*4U));
 80013a6:	fa02 f101 	lsl.w	r1, r2, r1
		CLEAR_BIT(GPIOx->CRL, gpioCrlCnfX_1);
 80013aa:	ea24 0101 	bic.w	r1, r4, r1
 80013ae:	6001      	str	r1, [r0, #0]
		retval = true;
 80013b0:	4618      	mov	r0, r3
	}

	return retval;
}
 80013b2:	bc30      	pop	{r4, r5}
 80013b4:	4770      	bx	lr
{	bool retval = false;
 80013b6:	2000      	movs	r0, #0
 80013b8:	e7fb      	b.n	80013b2 <initOutputLO+0x7e>

080013ba <getPin>:
	gpioPin pin = getGpioPinFromPortPin(Port, Pin);
	clrPinLO(pin.GPIOx, pin.pinNr);
}

bool getPin(char Port, int Pin)
{	gpioPin pin = getGpioPinFromPortPin(Port, Pin);
 80013ba:	b500      	push	{lr}
 80013bc:	b083      	sub	sp, #12
 80013be:	460a      	mov	r2, r1
 80013c0:	4601      	mov	r1, r0
 80013c2:	4668      	mov	r0, sp
 80013c4:	f7ff ff72 	bl	80012ac <getGpioPinFromPortPin>
	return getPinLO(pin.GPIOx, pin.pinNr);
 80013c8:	9b00      	ldr	r3, [sp, #0]
bool getPinLO(GPIO_TypeDef * GPIOx, int Pin)	{	return READ_BIT(GPIOx->IDR, (0x1U << Pin)) != 0;	}
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	2301      	movs	r3, #1
 80013ce:	9901      	ldr	r1, [sp, #4]
 80013d0:	408b      	lsls	r3, r1
 80013d2:	4213      	tst	r3, r2
}
 80013d4:	bf14      	ite	ne
 80013d6:	2001      	movne	r0, #1
 80013d8:	2000      	moveq	r0, #0
 80013da:	b003      	add	sp, #12
 80013dc:	f85d fb04 	ldr.w	pc, [sp], #4

080013e0 <EXTI4_IRQHandler>:
//	EXTI0_IRQHandler(){};
//	EXTI1_IRQHandler(){};
//	EXTI2_IRQHandler(){};
//	EXTI3_IRQHandler(){};
void EXTI4_IRQHandler()
{
 80013e0:	b508      	push	{r3, lr}
	if ((EXTI->PR & EXTI_PR_PR4) == EXTI_PR_PR4)  /* Check if line 4 has triggered the IRQ */
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <EXTI4_IRQHandler+0x3c>)
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	f013 0f10 	tst.w	r3, #16
 80013ea:	d100      	bne.n	80013ee <EXTI4_IRQHandler+0xe>
		if(getPinLO(GPIOA, 4))
			setRisingEdges(4);
    	if(!getPinLO(GPIOA, 4))
    		setFallingEdges(4);
	}
}
 80013ec:	bd08      	pop	{r3, pc}
	{	SET_BIT(EXTI->PR, EXTI_PR_PR4);			/* Clear the pending bit */
 80013ee:	4a0b      	ldr	r2, [pc, #44]	; (800141c <EXTI4_IRQHandler+0x3c>)
 80013f0:	6953      	ldr	r3, [r2, #20]
 80013f2:	f043 0310 	orr.w	r3, r3, #16
 80013f6:	6153      	str	r3, [r2, #20]
bool getPinLO(GPIO_TypeDef * GPIOx, int Pin)	{	return READ_BIT(GPIOx->IDR, (0x1U << Pin)) != 0;	}
 80013f8:	4b09      	ldr	r3, [pc, #36]	; (8001420 <EXTI4_IRQHandler+0x40>)
 80013fa:	689b      	ldr	r3, [r3, #8]
		if(getPinLO(GPIOA, 4))
 80013fc:	f013 0f10 	tst.w	r3, #16
 8001400:	d108      	bne.n	8001414 <EXTI4_IRQHandler+0x34>
bool getPinLO(GPIO_TypeDef * GPIOx, int Pin)	{	return READ_BIT(GPIOx->IDR, (0x1U << Pin)) != 0;	}
 8001402:	4b07      	ldr	r3, [pc, #28]	; (8001420 <EXTI4_IRQHandler+0x40>)
 8001404:	689b      	ldr	r3, [r3, #8]
    	if(!getPinLO(GPIOA, 4))
 8001406:	f013 0f10 	tst.w	r3, #16
 800140a:	d1ef      	bne.n	80013ec <EXTI4_IRQHandler+0xc>
    		setFallingEdges(4);
 800140c:	2004      	movs	r0, #4
 800140e:	f7ff ff1d 	bl	800124c <setFallingEdges>
}
 8001412:	e7eb      	b.n	80013ec <EXTI4_IRQHandler+0xc>
			setRisingEdges(4);
 8001414:	2004      	movs	r0, #4
 8001416:	f7ff ff0d 	bl	8001234 <setRisingEdges>
 800141a:	e7f2      	b.n	8001402 <EXTI4_IRQHandler+0x22>
 800141c:	40010400 	.word	0x40010400
 8001420:	40010800 	.word	0x40010800

08001424 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler()
{
 8001424:	b508      	push	{r3, lr}
    if ((EXTI->PR & EXTI_PR_PR5) == EXTI_PR_PR5)  /* Check line 5 has triggered the IRQ */
 8001426:	4b46      	ldr	r3, [pc, #280]	; (8001540 <EXTI9_5_IRQHandler+0x11c>)
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	f013 0f20 	tst.w	r3, #32
 800142e:	d114      	bne.n	800145a <EXTI9_5_IRQHandler+0x36>
	    		setFallingEdges(5);


    }

    if ((EXTI->PR & EXTI_PR_PR6) == EXTI_PR_PR6)	/* Check line 6 has triggered the IRQ */
 8001430:	4b43      	ldr	r3, [pc, #268]	; (8001540 <EXTI9_5_IRQHandler+0x11c>)
 8001432:	695b      	ldr	r3, [r3, #20]
 8001434:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001438:	d126      	bne.n	8001488 <EXTI9_5_IRQHandler+0x64>
    	if( !getPinLO(GPIOA, 6) )
    	{	setFallingEdges(6);
    	}
    }

    if ((EXTI->PR & EXTI_PR_PR7) == EXTI_PR_PR7)	/* Check line 7 has triggered the IRQ */
 800143a:	4b41      	ldr	r3, [pc, #260]	; (8001540 <EXTI9_5_IRQHandler+0x11c>)
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001442:	d138      	bne.n	80014b6 <EXTI9_5_IRQHandler+0x92>
    	if( !getPinLO(GPIOA, 7) )
    	{	setFallingEdges(7);
    	}
    }

    if ((EXTI->PR & EXTI_PR_PR8) == EXTI_PR_PR8)  /* Check line 8 has triggered the IRQ */
 8001444:	4b3e      	ldr	r3, [pc, #248]	; (8001540 <EXTI9_5_IRQHandler+0x11c>)
 8001446:	695b      	ldr	r3, [r3, #20]
 8001448:	f413 7f80 	tst.w	r3, #256	; 0x100
 800144c:	d14a      	bne.n	80014e4 <EXTI9_5_IRQHandler+0xc0>
	    		setFallingEdges(8);

    }


    if ((EXTI->PR & EXTI_PR_PR9) == EXTI_PR_PR9)	/* Check line 9 has triggered the IRQ */
 800144e:	4b3c      	ldr	r3, [pc, #240]	; (8001540 <EXTI9_5_IRQHandler+0x11c>)
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001456:	d15c      	bne.n	8001512 <EXTI9_5_IRQHandler+0xee>
    	}
    }

    // Output a trace message
    // TODO: ITM_SendStr("irq 5...9\n");
}
 8001458:	bd08      	pop	{r3, pc}
    {	SET_BIT(EXTI->PR, EXTI_PR_PR5);			/* Clear the pending bit */
 800145a:	4a39      	ldr	r2, [pc, #228]	; (8001540 <EXTI9_5_IRQHandler+0x11c>)
 800145c:	6953      	ldr	r3, [r2, #20]
 800145e:	f043 0320 	orr.w	r3, r3, #32
 8001462:	6153      	str	r3, [r2, #20]
bool getPinLO(GPIO_TypeDef * GPIOx, int Pin)	{	return READ_BIT(GPIOx->IDR, (0x1U << Pin)) != 0;	}
 8001464:	4b37      	ldr	r3, [pc, #220]	; (8001544 <EXTI9_5_IRQHandler+0x120>)
 8001466:	689b      	ldr	r3, [r3, #8]
			if(getPinLO(GPIOA, 5))		// could also be by GPIOB5, but thats occupied by TimerB/TIM3
 8001468:	f013 0f20 	tst.w	r3, #32
 800146c:	d108      	bne.n	8001480 <EXTI9_5_IRQHandler+0x5c>
bool getPinLO(GPIO_TypeDef * GPIOx, int Pin)	{	return READ_BIT(GPIOx->IDR, (0x1U << Pin)) != 0;	}
 800146e:	4b35      	ldr	r3, [pc, #212]	; (8001544 <EXTI9_5_IRQHandler+0x120>)
 8001470:	689b      	ldr	r3, [r3, #8]
	    	if(!getPinLO(GPIOA, 5))
 8001472:	f013 0f20 	tst.w	r3, #32
 8001476:	d1db      	bne.n	8001430 <EXTI9_5_IRQHandler+0xc>
	    		setFallingEdges(5);
 8001478:	2005      	movs	r0, #5
 800147a:	f7ff fee7 	bl	800124c <setFallingEdges>
 800147e:	e7d7      	b.n	8001430 <EXTI9_5_IRQHandler+0xc>
				setRisingEdges(5);
 8001480:	2005      	movs	r0, #5
 8001482:	f7ff fed7 	bl	8001234 <setRisingEdges>
 8001486:	e7f2      	b.n	800146e <EXTI9_5_IRQHandler+0x4a>
    {	SET_BIT(EXTI->PR, EXTI_PR_PR6);				/* Clear the pending bit */
 8001488:	4a2d      	ldr	r2, [pc, #180]	; (8001540 <EXTI9_5_IRQHandler+0x11c>)
 800148a:	6953      	ldr	r3, [r2, #20]
 800148c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001490:	6153      	str	r3, [r2, #20]
bool getPinLO(GPIO_TypeDef * GPIOx, int Pin)	{	return READ_BIT(GPIOx->IDR, (0x1U << Pin)) != 0;	}
 8001492:	4b2c      	ldr	r3, [pc, #176]	; (8001544 <EXTI9_5_IRQHandler+0x120>)
 8001494:	689b      	ldr	r3, [r3, #8]
    	if(getPinLO(GPIOA, 6))		// could also be by GPIOB6, but thats occupied by TimerC
 8001496:	f013 0f40 	tst.w	r3, #64	; 0x40
 800149a:	d108      	bne.n	80014ae <EXTI9_5_IRQHandler+0x8a>
bool getPinLO(GPIO_TypeDef * GPIOx, int Pin)	{	return READ_BIT(GPIOx->IDR, (0x1U << Pin)) != 0;	}
 800149c:	4b29      	ldr	r3, [pc, #164]	; (8001544 <EXTI9_5_IRQHandler+0x120>)
 800149e:	689b      	ldr	r3, [r3, #8]
    	if( !getPinLO(GPIOA, 6) )
 80014a0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80014a4:	d1c9      	bne.n	800143a <EXTI9_5_IRQHandler+0x16>
    	{	setFallingEdges(6);
 80014a6:	2006      	movs	r0, #6
 80014a8:	f7ff fed0 	bl	800124c <setFallingEdges>
 80014ac:	e7c5      	b.n	800143a <EXTI9_5_IRQHandler+0x16>
    	{	setRisingEdges(6);
 80014ae:	2006      	movs	r0, #6
 80014b0:	f7ff fec0 	bl	8001234 <setRisingEdges>
 80014b4:	e7f2      	b.n	800149c <EXTI9_5_IRQHandler+0x78>
    {	SET_BIT(EXTI->PR, EXTI_PR_PR7);				/* Clear the pending bit */
 80014b6:	4a22      	ldr	r2, [pc, #136]	; (8001540 <EXTI9_5_IRQHandler+0x11c>)
 80014b8:	6953      	ldr	r3, [r2, #20]
 80014ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014be:	6153      	str	r3, [r2, #20]
bool getPinLO(GPIO_TypeDef * GPIOx, int Pin)	{	return READ_BIT(GPIOx->IDR, (0x1U << Pin)) != 0;	}
 80014c0:	4b20      	ldr	r3, [pc, #128]	; (8001544 <EXTI9_5_IRQHandler+0x120>)
 80014c2:	689b      	ldr	r3, [r3, #8]
    	if(getPinLO(GPIOA, 7))		// could also be by GPIOB7, but thats occupied by output PortC1
 80014c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80014c8:	d108      	bne.n	80014dc <EXTI9_5_IRQHandler+0xb8>
bool getPinLO(GPIO_TypeDef * GPIOx, int Pin)	{	return READ_BIT(GPIOx->IDR, (0x1U << Pin)) != 0;	}
 80014ca:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <EXTI9_5_IRQHandler+0x120>)
 80014cc:	689b      	ldr	r3, [r3, #8]
    	if( !getPinLO(GPIOA, 7) )
 80014ce:	f013 0f80 	tst.w	r3, #128	; 0x80
 80014d2:	d1b7      	bne.n	8001444 <EXTI9_5_IRQHandler+0x20>
    	{	setFallingEdges(7);
 80014d4:	2007      	movs	r0, #7
 80014d6:	f7ff feb9 	bl	800124c <setFallingEdges>
 80014da:	e7b3      	b.n	8001444 <EXTI9_5_IRQHandler+0x20>
    	{	setRisingEdges(7);
 80014dc:	2007      	movs	r0, #7
 80014de:	f7ff fea9 	bl	8001234 <setRisingEdges>
 80014e2:	e7f2      	b.n	80014ca <EXTI9_5_IRQHandler+0xa6>
    {	SET_BIT(EXTI->PR, EXTI_PR_PR8);			/* Clear the pending bit */
 80014e4:	4a16      	ldr	r2, [pc, #88]	; (8001540 <EXTI9_5_IRQHandler+0x11c>)
 80014e6:	6953      	ldr	r3, [r2, #20]
 80014e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ec:	6153      	str	r3, [r2, #20]
bool getPinLO(GPIO_TypeDef * GPIOx, int Pin)	{	return READ_BIT(GPIOx->IDR, (0x1U << Pin)) != 0;	}
 80014ee:	4b16      	ldr	r3, [pc, #88]	; (8001548 <EXTI9_5_IRQHandler+0x124>)
 80014f0:	689b      	ldr	r3, [r3, #8]
			if(getPinLO(GPIOB, 8))		// could also be by GPIOA8, but thats occupied by output PortC0
 80014f2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80014f6:	d108      	bne.n	800150a <EXTI9_5_IRQHandler+0xe6>
bool getPinLO(GPIO_TypeDef * GPIOx, int Pin)	{	return READ_BIT(GPIOx->IDR, (0x1U << Pin)) != 0;	}
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <EXTI9_5_IRQHandler+0x120>)
 80014fa:	689b      	ldr	r3, [r3, #8]
	    	if(!getPinLO(GPIOA, 8))
 80014fc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001500:	d1a5      	bne.n	800144e <EXTI9_5_IRQHandler+0x2a>
	    		setFallingEdges(8);
 8001502:	2008      	movs	r0, #8
 8001504:	f7ff fea2 	bl	800124c <setFallingEdges>
 8001508:	e7a1      	b.n	800144e <EXTI9_5_IRQHandler+0x2a>
				setRisingEdges(8);
 800150a:	2008      	movs	r0, #8
 800150c:	f7ff fe92 	bl	8001234 <setRisingEdges>
 8001510:	e7f2      	b.n	80014f8 <EXTI9_5_IRQHandler+0xd4>
    {	SET_BIT(EXTI->PR, EXTI_PR_PR9);				/* Clear the pending bit */
 8001512:	4a0b      	ldr	r2, [pc, #44]	; (8001540 <EXTI9_5_IRQHandler+0x11c>)
 8001514:	6953      	ldr	r3, [r2, #20]
 8001516:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800151a:	6153      	str	r3, [r2, #20]
bool getPinLO(GPIO_TypeDef * GPIOx, int Pin)	{	return READ_BIT(GPIOx->IDR, (0x1U << Pin)) != 0;	}
 800151c:	4b09      	ldr	r3, [pc, #36]	; (8001544 <EXTI9_5_IRQHandler+0x120>)
 800151e:	689b      	ldr	r3, [r3, #8]
    	if(getPinLO(GPIOA, 9))
 8001520:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001524:	d108      	bne.n	8001538 <EXTI9_5_IRQHandler+0x114>
bool getPinLO(GPIO_TypeDef * GPIOx, int Pin)	{	return READ_BIT(GPIOx->IDR, (0x1U << Pin)) != 0;	}
 8001526:	4b07      	ldr	r3, [pc, #28]	; (8001544 <EXTI9_5_IRQHandler+0x120>)
 8001528:	689b      	ldr	r3, [r3, #8]
    	if( !getPinLO(GPIOA, 9) )
 800152a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800152e:	d193      	bne.n	8001458 <EXTI9_5_IRQHandler+0x34>
    	{	setFallingEdges(9);
 8001530:	2009      	movs	r0, #9
 8001532:	f7ff fe8b 	bl	800124c <setFallingEdges>
}
 8001536:	e78f      	b.n	8001458 <EXTI9_5_IRQHandler+0x34>
    	{	setRisingEdges(9);
 8001538:	2009      	movs	r0, #9
 800153a:	f7ff fe7b 	bl	8001234 <setRisingEdges>
 800153e:	e7f2      	b.n	8001526 <EXTI9_5_IRQHandler+0x102>
 8001540:	40010400 	.word	0x40010400
 8001544:	40010800 	.word	0x40010800
 8001548:	40010c00 	.word	0x40010c00

0800154c <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler()
{
 800154c:	b508      	push	{r3, lr}
    if ((EXTI->PR & EXTI_PR_PR10) == EXTI_PR_PR10)  /* Check line 10 has triggered the IRQ */
 800154e:	4b17      	ldr	r3, [pc, #92]	; (80015ac <EXTI15_10_IRQHandler+0x60>)
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001556:	d105      	bne.n	8001564 <EXTI15_10_IRQHandler+0x18>
    	{	setFallingEdges(10);
    	}
    }


    if ((EXTI->PR & EXTI_PR_PR12) == EXTI_PR_PR12)  /* Check line 12 has triggered the IRQ */
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <EXTI15_10_IRQHandler+0x60>)
 800155a:	695b      	ldr	r3, [r3, #20]
 800155c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001560:	d117      	bne.n	8001592 <EXTI15_10_IRQHandler+0x46>
	//  	intensitySwitchPressed = true;
	//  }

    // Output a trace message
	// TODO: ITM_SendStr("irq 10...15\n");
}
 8001562:	bd08      	pop	{r3, pc}
    {	SET_BIT(EXTI->PR, EXTI_PR_PR10);			/* Clear the pending bit */
 8001564:	4a11      	ldr	r2, [pc, #68]	; (80015ac <EXTI15_10_IRQHandler+0x60>)
 8001566:	6953      	ldr	r3, [r2, #20]
 8001568:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800156c:	6153      	str	r3, [r2, #20]
bool getPinLO(GPIO_TypeDef * GPIOx, int Pin)	{	return READ_BIT(GPIOx->IDR, (0x1U << Pin)) != 0;	}
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <EXTI15_10_IRQHandler+0x64>)
 8001570:	689b      	ldr	r3, [r3, #8]
    	if(getPinLO(GPIOA, 10))
 8001572:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001576:	d108      	bne.n	800158a <EXTI15_10_IRQHandler+0x3e>
bool getPinLO(GPIO_TypeDef * GPIOx, int Pin)	{	return READ_BIT(GPIOx->IDR, (0x1U << Pin)) != 0;	}
 8001578:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <EXTI15_10_IRQHandler+0x64>)
 800157a:	689b      	ldr	r3, [r3, #8]
		if( !getPinLO(GPIOA, 10) )
 800157c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001580:	d1ea      	bne.n	8001558 <EXTI15_10_IRQHandler+0xc>
    	{	setFallingEdges(10);
 8001582:	200a      	movs	r0, #10
 8001584:	f7ff fe62 	bl	800124c <setFallingEdges>
 8001588:	e7e6      	b.n	8001558 <EXTI15_10_IRQHandler+0xc>
    	{	setRisingEdges(10);
 800158a:	200a      	movs	r0, #10
 800158c:	f7ff fe52 	bl	8001234 <setRisingEdges>
 8001590:	e7f2      	b.n	8001578 <EXTI15_10_IRQHandler+0x2c>
    {	SET_BIT(EXTI->PR, EXTI_PR_PR12);			/* Clear the pending bit */
 8001592:	4a06      	ldr	r2, [pc, #24]	; (80015ac <EXTI15_10_IRQHandler+0x60>)
 8001594:	6953      	ldr	r3, [r2, #20]
 8001596:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800159a:	6153      	str	r3, [r2, #20]
		setRisingEdges(12);
 800159c:	200c      	movs	r0, #12
 800159e:	f7ff fe49 	bl	8001234 <setRisingEdges>
		setFallingEdges(12);
 80015a2:	200c      	movs	r0, #12
 80015a4:	f7ff fe52 	bl	800124c <setFallingEdges>
}
 80015a8:	e7db      	b.n	8001562 <EXTI15_10_IRQHandler+0x16>
 80015aa:	bf00      	nop
 80015ac:	40010400 	.word	0x40010400
 80015b0:	40010800 	.word	0x40010800

080015b4 <initDbgLed>:



void initDbgLed()	{   MODIFY_REG(GPIOC->CRH, GPIO_CRH_CNF13 + GPIO_CRH_MODE13, GPIO_CRH_MODE13_0);	}
 80015b4:	4a03      	ldr	r2, [pc, #12]	; (80015c4 <initDbgLed+0x10>)
 80015b6:	6853      	ldr	r3, [r2, #4]
 80015b8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80015bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80015c0:	6053      	str	r3, [r2, #4]
 80015c2:	4770      	bx	lr
 80015c4:	40011000 	.word	0x40011000

080015c8 <setDbgLED>:
void setDbgLED()	{	WRITE_REG(GPIOC->BSRR, GPIO_BSRR_BS13);	}
 80015c8:	4b02      	ldr	r3, [pc, #8]	; (80015d4 <setDbgLED+0xc>)
 80015ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015ce:	611a      	str	r2, [r3, #16]
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40011000 	.word	0x40011000

080015d8 <clrDbgLED>:
void clrDbgLED()	{	WRITE_REG(GPIOC->BSRR, GPIO_BSRR_BR13);	}
 80015d8:	4b02      	ldr	r3, [pc, #8]	; (80015e4 <clrDbgLED+0xc>)
 80015da:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80015de:	611a      	str	r2, [r3, #16]
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40011000 	.word	0x40011000

080015e8 <initRelays>:

void initRelays()
{

	//	PB0 , 1
	MODIFY_REG(GPIOB->CRL, GPIO_CRL_CNF0 + GPIO_CRL_MODE0, GPIO_CRL_MODE0_0);
 80015e8:	4b07      	ldr	r3, [pc, #28]	; (8001608 <initRelays+0x20>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	f022 020f 	bic.w	r2, r2, #15
 80015f0:	f042 0201 	orr.w	r2, r2, #1
 80015f4:	601a      	str	r2, [r3, #0]
	MODIFY_REG(GPIOB->CRL, GPIO_CRL_CNF1 + GPIO_CRL_MODE1, GPIO_CRL_MODE1_0);
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80015fc:	f042 0210 	orr.w	r2, r2, #16
 8001600:	601a      	str	r2, [r3, #0]

	GPIOB->BRR = 0b0000000000000011; // clear PB0 , 1
 8001602:	2203      	movs	r2, #3
 8001604:	615a      	str	r2, [r3, #20]
}
 8001606:	4770      	bx	lr
 8001608:	40010c00 	.word	0x40010c00

0800160c <setRelay0>:

void setRelay0()
{
	SET_BIT(GPIOB->BSRR, GPIO_BSRR_BS0);
 800160c:	4a02      	ldr	r2, [pc, #8]	; (8001618 <setRelay0+0xc>)
 800160e:	6913      	ldr	r3, [r2, #16]
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6113      	str	r3, [r2, #16]
}
 8001616:	4770      	bx	lr
 8001618:	40010c00 	.word	0x40010c00

0800161c <clrRelay0>:

void clrRelay0()
{	SET_BIT(GPIOB->BRR, GPIO_BRR_BR0);
 800161c:	4a02      	ldr	r2, [pc, #8]	; (8001628 <clrRelay0+0xc>)
 800161e:	6953      	ldr	r3, [r2, #20]
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6153      	str	r3, [r2, #20]

}
 8001626:	4770      	bx	lr
 8001628:	40010c00 	.word	0x40010c00

0800162c <getRelay0>:

bool getRelay0()
{	return READ_BIT(GPIOB->IDR, GPIO_IDR_IDR0) != 0;
 800162c:	4b02      	ldr	r3, [pc, #8]	; (8001638 <getRelay0+0xc>)
 800162e:	6898      	ldr	r0, [r3, #8]
}
 8001630:	f000 0001 	and.w	r0, r0, #1
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40010c00 	.word	0x40010c00

0800163c <setRelay1>:

void setRelay1()
{	// SET_BIT(GPIOB->ODR, GPIO_ODR_ODR1);
	SET_BIT(GPIOB->BSRR, GPIO_BSRR_BS1);
 800163c:	4a02      	ldr	r2, [pc, #8]	; (8001648 <setRelay1+0xc>)
 800163e:	6913      	ldr	r3, [r2, #16]
 8001640:	f043 0302 	orr.w	r3, r3, #2
 8001644:	6113      	str	r3, [r2, #16]
}
 8001646:	4770      	bx	lr
 8001648:	40010c00 	.word	0x40010c00

0800164c <clrRelay1>:

void clrRelay1()
{
	SET_BIT(GPIOB->BRR, GPIO_BRR_BR1);
 800164c:	4a02      	ldr	r2, [pc, #8]	; (8001658 <clrRelay1+0xc>)
 800164e:	6953      	ldr	r3, [r2, #20]
 8001650:	f043 0302 	orr.w	r3, r3, #2
 8001654:	6153      	str	r3, [r2, #20]
	// CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR1);
}
 8001656:	4770      	bx	lr
 8001658:	40010c00 	.word	0x40010c00

0800165c <getRelay1>:

bool getRelay1()
{	return (READ_BIT(GPIOB->IDR, GPIO_IDR_IDR1) != 0);
 800165c:	4b02      	ldr	r3, [pc, #8]	; (8001668 <getRelay1+0xc>)
 800165e:	6898      	ldr	r0, [r3, #8]
}
 8001660:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	40010c00 	.word	0x40010c00

0800166c <initPortC>:
// GPIOA8 => PortC0
// GPIOB7 => PortC1

void initPortC()
{
	MODIFY_REG(GPIOA->CRH, GPIO_CRH_CNF8 + GPIO_CRH_MODE8, GPIO_CRH_MODE8_0);
 800166c:	4a07      	ldr	r2, [pc, #28]	; (800168c <initPortC+0x20>)
 800166e:	6853      	ldr	r3, [r2, #4]
 8001670:	f023 030f 	bic.w	r3, r3, #15
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6053      	str	r3, [r2, #4]
	MODIFY_REG(GPIOB->CRL, GPIO_CRL_CNF7 + GPIO_CRL_MODE7, GPIO_CRL_MODE7_0);
 800167a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800167e:	6813      	ldr	r3, [r2, #0]
 8001680:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001688:	6013      	str	r3, [r2, #0]
}
 800168a:	4770      	bx	lr
 800168c:	40010800 	.word	0x40010800

08001690 <initPortB>:

void initPortB()
{
		// GPIOA9 => PortB0
		// GPIOA10 => PortB1
		MODIFY_REG(GPIOA->CRH, GPIO_CRH_CNF9  + GPIO_CRH_MODE9,  GPIO_CRH_MODE9_0);
 8001690:	4a06      	ldr	r2, [pc, #24]	; (80016ac <initPortB+0x1c>)
 8001692:	6853      	ldr	r3, [r2, #4]
 8001694:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001698:	f043 0310 	orr.w	r3, r3, #16
 800169c:	6053      	str	r3, [r2, #4]
		MODIFY_REG(GPIOA->CRH, GPIO_CRH_CNF10 + GPIO_CRH_MODE10, GPIO_CRH_MODE10_0);
 800169e:	6853      	ldr	r3, [r2, #4]
 80016a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80016a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a8:	6053      	str	r3, [r2, #4]
}
 80016aa:	4770      	bx	lr
 80016ac:	40010800 	.word	0x40010800

080016b0 <initPortA>:

}


void initPortA()
{
 80016b0:	b538      	push	{r3, r4, r5, lr}


	//	PA0 ... 7
	MODIFY_REG(GPIOA->CRL, GPIO_CRL_CNF0 + GPIO_CRL_MODE0, GPIO_CRL_MODE0_0);
 80016b2:	4c39      	ldr	r4, [pc, #228]	; (8001798 <initPortA+0xe8>)
 80016b4:	6823      	ldr	r3, [r4, #0]
 80016b6:	f023 030f 	bic.w	r3, r3, #15
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	6023      	str	r3, [r4, #0]
	MODIFY_REG(GPIOA->CRL, GPIO_CRL_CNF1 + GPIO_CRL_MODE1, GPIO_CRL_MODE1_0);
 80016c0:	6823      	ldr	r3, [r4, #0]
 80016c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016c6:	f043 0310 	orr.w	r3, r3, #16
 80016ca:	6023      	str	r3, [r4, #0]
	MODIFY_REG(GPIOA->CRL, GPIO_CRL_CNF2 + GPIO_CRL_MODE2, GPIO_CRL_MODE2_0);
 80016cc:	6823      	ldr	r3, [r4, #0]
 80016ce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80016d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d6:	6023      	str	r3, [r4, #0]
	MODIFY_REG(GPIOA->CRL, GPIO_CRL_CNF3 + GPIO_CRL_MODE3, GPIO_CRL_MODE3_0);
 80016d8:	6823      	ldr	r3, [r4, #0]
 80016da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80016de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016e2:	6023      	str	r3, [r4, #0]
	MODIFY_REG(GPIOA->CRL, GPIO_CRL_CNF4 + GPIO_CRL_MODE4, GPIO_CRL_MODE4_0);
 80016e4:	6823      	ldr	r3, [r4, #0]
 80016e6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80016ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ee:	6023      	str	r3, [r4, #0]
	MODIFY_REG(GPIOA->CRL, GPIO_CRL_CNF5 + GPIO_CRL_MODE5, GPIO_CRL_MODE5_0);
 80016f0:	6823      	ldr	r3, [r4, #0]
 80016f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80016f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80016fa:	6023      	str	r3, [r4, #0]
	MODIFY_REG(GPIOA->CRL, GPIO_CRL_CNF6 + GPIO_CRL_MODE6, GPIO_CRL_MODE6_0);
 80016fc:	6823      	ldr	r3, [r4, #0]
 80016fe:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001702:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001706:	6023      	str	r3, [r4, #0]
	MODIFY_REG(GPIOA->CRL, GPIO_CRL_CNF7 + GPIO_CRL_MODE7, GPIO_CRL_MODE7_0);
 8001708:	6823      	ldr	r3, [r4, #0]
 800170a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800170e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001712:	6023      	str	r3, [r4, #0]

	// rewiring PA:4 and 5 to GPIOC, to free up GPIOC4 and 5 for DAC
	// PA:4 = PC4
	// PA:5 = PC5
	initOutputLO(GPIOC, 4);
 8001714:	4d21      	ldr	r5, [pc, #132]	; (800179c <initPortA+0xec>)
 8001716:	2104      	movs	r1, #4
 8001718:	4628      	mov	r0, r5
 800171a:	f7ff fe0b 	bl	8001334 <initOutputLO>
	initOutputLO(GPIOC, 5);
 800171e:	2105      	movs	r1, #5
 8001720:	4628      	mov	r0, r5
 8001722:	f7ff fe07 	bl	8001334 <initOutputLO>

	//	PB8 ... 15
	MODIFY_REG(GPIOB->CRH, GPIO_CRH_CNF8  + GPIO_CRH_MODE8 , GPIO_CRH_MODE8_0 );
 8001726:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <initPortA+0xf0>)
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	f022 020f 	bic.w	r2, r2, #15
 800172e:	f042 0201 	orr.w	r2, r2, #1
 8001732:	605a      	str	r2, [r3, #4]
	MODIFY_REG(GPIOB->CRH, GPIO_CRH_CNF9  + GPIO_CRH_MODE9 , GPIO_CRH_MODE9_0 );
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800173a:	f042 0210 	orr.w	r2, r2, #16
 800173e:	605a      	str	r2, [r3, #4]
	MODIFY_REG(GPIOB->CRH, GPIO_CRH_CNF10 + GPIO_CRH_MODE10, GPIO_CRH_MODE10_0);
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8001746:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800174a:	605a      	str	r2, [r3, #4]
	MODIFY_REG(GPIOB->CRH, GPIO_CRH_CNF11 + GPIO_CRH_MODE11, GPIO_CRH_MODE11_0);
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8001752:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001756:	605a      	str	r2, [r3, #4]
	MODIFY_REG(GPIOB->CRH, GPIO_CRH_CNF12 + GPIO_CRH_MODE12, GPIO_CRH_MODE12_0);
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800175e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001762:	605a      	str	r2, [r3, #4]
	MODIFY_REG(GPIOB->CRH, GPIO_CRH_CNF13 + GPIO_CRH_MODE13, GPIO_CRH_MODE13_0);
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800176a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800176e:	605a      	str	r2, [r3, #4]
	MODIFY_REG(GPIOB->CRH, GPIO_CRH_CNF14 + GPIO_CRH_MODE14, GPIO_CRH_MODE14_0);
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001776:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800177a:	605a      	str	r2, [r3, #4]
	MODIFY_REG(GPIOB->CRH, GPIO_CRH_CNF15 + GPIO_CRH_MODE15, GPIO_CRH_MODE15_0);
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8001782:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001786:	605a      	str	r2, [r3, #4]

	GPIOA->BSRR = 0b00000000111111110000000000000000;
 8001788:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800178c:	6122      	str	r2, [r4, #16]
	GPIOB->BSRR = 0b11111111000000000000000000000000;
 800178e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001792:	611a      	str	r2, [r3, #16]
}
 8001794:	bd38      	pop	{r3, r4, r5, pc}
 8001796:	bf00      	nop
 8001798:	40010800 	.word	0x40010800
 800179c:	40011000 	.word	0x40011000
 80017a0:	40010c00 	.word	0x40010c00

080017a4 <initDACs>:
		// Make PA4 analog input (0b0000)
		GPIOA->CRL &= 0xFFF0FFFF;

	#endif

	SET_BIT(RCC->APB1ENR, RCC_APB1ENR_DACEN);	// enable DAC Clock
 80017a4:	4a0f      	ldr	r2, [pc, #60]	; (80017e4 <initDACs+0x40>)
 80017a6:	69d3      	ldr	r3, [r2, #28]
 80017a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80017ac:	61d3      	str	r3, [r2, #28]

	SET_BIT(DAC->CR, DAC_CR_EN1);
 80017ae:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <initDACs+0x44>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	f042 0201 	orr.w	r2, r2, #1
 80017b6:	601a      	str	r2, [r3, #0]
	SET_BIT(DAC->CR, DAC_CR_EN2);
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80017be:	601a      	str	r2, [r3, #0]

	// ensure trigger is turned off and holding regs directly pushed to our regs:
	CLEAR_BIT(DAC->CR, DAC_CR_TEN1);
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	f022 0204 	bic.w	r2, r2, #4
 80017c6:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(DAC->CR, DAC_CR_TEN2);
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017ce:	601a      	str	r2, [r3, #0]

	// ensure output buffer is on
	CLEAR_BIT(DAC->CR, DAC_CR_BOFF1);
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	f022 0202 	bic.w	r2, r2, #2
 80017d6:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(DAC->CR, DAC_CR_BOFF2);
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80017de:	601a      	str	r2, [r3, #0]
//	#define AFIO_MAPR2_TIM67_DAC_DMA_REMAP (11U)
//	SET_BIT(AFIO->MAPR2, AFIO_MAPR2_TIM67_DAC_DMA_REMAP);



}
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	40021000 	.word	0x40021000
 80017e8:	40007400 	.word	0x40007400

080017ec <writeDacRaw>:
 * @return		'true' if correct inputs were supplied, otherwise 'false'.
 *
 */

bool writeDacRaw(int channel, int dacval)
{	if ( 0 <= dacval && dacval <= MAX_DAC_VAL )
 80017ec:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80017f0:	d20c      	bcs.n	800180c <writeDacRaw+0x20>
	{	if ( 1 == channel )
 80017f2:	2801      	cmp	r0, #1
 80017f4:	d003      	beq.n	80017fe <writeDacRaw+0x12>
		{		DAC->DHR12R1 = dacval;
			//	DAC->DOR1;
		}
		else if ( 2 == channel )
 80017f6:	2802      	cmp	r0, #2
 80017f8:	d004      	beq.n	8001804 <writeDacRaw+0x18>
		{		DAC->DHR12R2 = dacval;
			//	DAC->DOR2;
		}
		else
			return false;
 80017fa:	2000      	movs	r0, #0
		return true;
	}else{
		return false;
	}
}
 80017fc:	4770      	bx	lr
		{		DAC->DHR12R1 = dacval;
 80017fe:	4b04      	ldr	r3, [pc, #16]	; (8001810 <writeDacRaw+0x24>)
 8001800:	6099      	str	r1, [r3, #8]
 8001802:	4770      	bx	lr
		{		DAC->DHR12R2 = dacval;
 8001804:	4b02      	ldr	r3, [pc, #8]	; (8001810 <writeDacRaw+0x24>)
 8001806:	6159      	str	r1, [r3, #20]
		return true;
 8001808:	2001      	movs	r0, #1
 800180a:	4770      	bx	lr
		return false;
 800180c:	2000      	movs	r0, #0
 800180e:	4770      	bx	lr
 8001810:	40007400 	.word	0x40007400

08001814 <readDacRaw>:
		return false;
}


int  readDacRaw(int channel)
{	if ( 1 == channel )
 8001814:	2801      	cmp	r0, #1
 8001816:	d005      	beq.n	8001824 <readDacRaw+0x10>
		return	DAC->DOR1;
	else if ( 2 == channel )
 8001818:	2802      	cmp	r0, #2
		return DAC->DOR2;
 800181a:	bf06      	itte	eq
 800181c:	4b03      	ldreq	r3, [pc, #12]	; (800182c <readDacRaw+0x18>)
 800181e:	6b18      	ldreq	r0, [r3, #48]	; 0x30
	else
		return false;
 8001820:	2000      	movne	r0, #0
}
 8001822:	4770      	bx	lr
		return	DAC->DOR1;
 8001824:	4b01      	ldr	r3, [pc, #4]	; (800182c <readDacRaw+0x18>)
 8001826:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	40007400 	.word	0x40007400

08001830 <dacVoltToRaw>:
/*
 * @brief	calculate the raw integer equivalent of a given DAC Voltage
 * 			implements y = k*x + d
 * */
int		dacVoltToRaw(float voltage)
{	return	(MAX_DAC_VAL/2 - voltage*MAX_DAC_VAL/(MAX_DAC_VOLT - MIN_DAC_VOLT));
 8001830:	b508      	push	{r3, lr}
 8001832:	490b      	ldr	r1, [pc, #44]	; (8001860 <dacVoltToRaw+0x30>)
 8001834:	f7ff fab6 	bl	8000da4 <__aeabi_fmul>
 8001838:	f7fe fe06 	bl	8000448 <__aeabi_f2d>
 800183c:	2200      	movs	r2, #0
 800183e:	4b09      	ldr	r3, [pc, #36]	; (8001864 <dacVoltToRaw+0x34>)
 8001840:	f7fe ff84 	bl	800074c <__aeabi_ddiv>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	a103      	add	r1, pc, #12	; (adr r1, 8001858 <dacVoltToRaw+0x28>)
 800184a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800184e:	f7fe fc9b 	bl	8000188 <__aeabi_dsub>
 8001852:	f7ff f901 	bl	8000a58 <__aeabi_d2iz>
}
 8001856:	bd08      	pop	{r3, pc}
 8001858:	00000000 	.word	0x00000000
 800185c:	409ffc00 	.word	0x409ffc00
 8001860:	457ff000 	.word	0x457ff000
 8001864:	40340000 	.word	0x40340000

08001868 <writeDacVolts>:
{
 8001868:	b538      	push	{r3, r4, r5, lr}
 800186a:	4605      	mov	r5, r0
 800186c:	460c      	mov	r4, r1
	if ( MIN_DAC_VOLT <= voltage && voltage <= MAX_DAC_VOLT )
 800186e:	490b      	ldr	r1, [pc, #44]	; (800189c <writeDacVolts+0x34>)
 8001870:	4620      	mov	r0, r4
 8001872:	f7ff fc49 	bl	8001108 <__aeabi_fcmpge>
 8001876:	b178      	cbz	r0, 8001898 <writeDacVolts+0x30>
 8001878:	4909      	ldr	r1, [pc, #36]	; (80018a0 <writeDacVolts+0x38>)
 800187a:	4620      	mov	r0, r4
 800187c:	f7ff fc3a 	bl	80010f4 <__aeabi_fcmple>
 8001880:	b908      	cbnz	r0, 8001886 <writeDacVolts+0x1e>
		return false;
 8001882:	2000      	movs	r0, #0
 8001884:	e009      	b.n	800189a <writeDacVolts+0x32>
	{	writeDacRaw(channel, dacVoltToRaw(voltage));
 8001886:	4620      	mov	r0, r4
 8001888:	f7ff ffd2 	bl	8001830 <dacVoltToRaw>
 800188c:	4601      	mov	r1, r0
 800188e:	4628      	mov	r0, r5
 8001890:	f7ff ffac 	bl	80017ec <writeDacRaw>
		return true;
 8001894:	2001      	movs	r0, #1
 8001896:	e000      	b.n	800189a <writeDacVolts+0x32>
		return false;
 8001898:	2000      	movs	r0, #0
}
 800189a:	bd38      	pop	{r3, r4, r5, pc}
 800189c:	c1200000 	.word	0xc1200000
 80018a0:	41200000 	.word	0x41200000
 80018a4:	00000000 	.word	0x00000000

080018a8 <dacRawToVolt>:

/*
 * @brief	calculate the analogue voltage equivalent of a given DAC raw value
 * */
float	dacRawToVolt(int dacval)
{	return - (dacval - MAX_DAC_VAL/2)*(MAX_DAC_VOLT - MIN_DAC_VOLT)/MAX_DAC_VAL;
 80018a8:	b508      	push	{r3, lr}
 80018aa:	f5c0 60ff 	rsb	r0, r0, #2040	; 0x7f8
 80018ae:	3007      	adds	r0, #7
 80018b0:	f7fe fdb8 	bl	8000424 <__aeabi_i2d>
 80018b4:	2200      	movs	r2, #0
 80018b6:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <dacRawToVolt+0x30>)
 80018b8:	f7fe fe1e 	bl	80004f8 <__aeabi_dmul>
 80018bc:	a304      	add	r3, pc, #16	; (adr r3, 80018d0 <dacRawToVolt+0x28>)
 80018be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c2:	f7fe ff43 	bl	800074c <__aeabi_ddiv>
 80018c6:	f7ff f90f 	bl	8000ae8 <__aeabi_d2f>
}
 80018ca:	bd08      	pop	{r3, pc}
 80018cc:	f3af 8000 	nop.w
 80018d0:	00000000 	.word	0x00000000
 80018d4:	40affe00 	.word	0x40affe00
 80018d8:	40340000 	.word	0x40340000

080018dc <readDacVolts>:

float  readDacVolts(int channel)
{	return	dacRawToVolt(readDacRaw(channel));
 80018dc:	b508      	push	{r3, lr}
 80018de:	f7ff ff99 	bl	8001814 <readDacRaw>
 80018e2:	f7ff ffe1 	bl	80018a8 <dacRawToVolt>
}
 80018e6:	bd08      	pop	{r3, pc}

080018e8 <initHal>:

void initHal()
{
 80018e8:	b508      	push	{r3, lr}
    // Enable clocks for Port A, B and C
    SET_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPAEN + RCC_APB2ENR_IOPBEN + RCC_APB2ENR_IOPCEN);
 80018ea:	4a0f      	ldr	r2, [pc, #60]	; (8001928 <initHal+0x40>)
 80018ec:	6993      	ldr	r3, [r2, #24]
 80018ee:	f043 031c 	orr.w	r3, r3, #28
 80018f2:	6193      	str	r3, [r2, #24]

    // Set State LEDs as outputs
    MODIFY_REG(GPIOA->CRH, GPIO_CRH_CNF9 + GPIO_CRH_MODE9, GPIO_CRH_MODE9_0);
 80018f4:	f5a2 3284 	sub.w	r2, r2, #67584	; 0x10800
 80018f8:	6853      	ldr	r3, [r2, #4]
 80018fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018fe:	f043 0310 	orr.w	r3, r3, #16
 8001902:	6053      	str	r3, [r2, #4]
    MODIFY_REG(GPIOA->CRH, GPIO_CRH_CNF10 + GPIO_CRH_MODE10, GPIO_CRH_MODE10_0);
 8001904:	6853      	ldr	r3, [r2, #4]
 8001906:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800190a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800190e:	6053      	str	r3, [r2, #4]

	initDbgLed();
 8001910:	f7ff fe50 	bl	80015b4 <initDbgLed>
	initRelays();
 8001914:	f7ff fe68 	bl	80015e8 <initRelays>

	//    MODIFY_REG(GPIOA->CRH, GPIO_CRH_CNF8 + GPIO_CRH_MODE8, GPIO_CRH_MODE8_0);
	//    MODIFY_REG(GPIOB->CRL, GPIO_CRL_CNF5 + GPIO_CRL_MODE5, GPIO_CRL_MODE5_0);

	initPortC();
 8001918:	f7ff fea8 	bl	800166c <initPortC>
    initPortB();
 800191c:	f7ff feb8 	bl	8001690 <initPortB>
    initPortA();
 8001920:	f7ff fec6 	bl	80016b0 <initPortA>


}
 8001924:	bd08      	pop	{r3, pc}
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000

0800192c <usbCdcInit>:
 * USB-Setup
 * Clock must be set up already before
 * @retval	TRUE on success, FALSE otherwise
 */
bool usbCdcInit()
{	UsbSetup();		//
 800192c:	b508      	push	{r3, lr}
 800192e:	f001 fa4f 	bl	8002dd0 <UsbSetup>
bool usbCdcActive(){	return UsbActive();	}
 8001932:	f001 fb37 	bl	8002fa4 <UsbActive>
	return usbCdcActive();
}
 8001936:	bd08      	pop	{r3, pc}

08001938 <usbCdcTxEnqueueStrsInt>:
 *
 * */
bool usbCdcTxEnqueueStrsInt(int intt, int num, ...);

bool usbCdcTxEnqueueStrsInt(int intt, int num, ...)
{
 8001938:	b40e      	push	{r1, r2, r3}
 800193a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800193c:	b088      	sub	sp, #32
 800193e:	4607      	mov	r7, r0
 8001940:	ab0d      	add	r3, sp, #52	; 0x34
 8001942:	f853 5b04 	ldr.w	r5, [r3], #4
	va_list valist;
	va_start(valist, num);
 8001946:	9307      	str	r3, [sp, #28]
	for(int idx=0; idx<num; idx++)
 8001948:	2d00      	cmp	r5, #0
 800194a:	dd0b      	ble.n	8001964 <usbCdcTxEnqueueStrsInt+0x2c>
 800194c:	2400      	movs	r4, #0
		strcat(usbTxBuf, va_arg(valist, const char * ));
 800194e:	4e1b      	ldr	r6, [pc, #108]	; (80019bc <usbCdcTxEnqueueStrsInt+0x84>)
 8001950:	9b07      	ldr	r3, [sp, #28]
 8001952:	1d1a      	adds	r2, r3, #4
 8001954:	9207      	str	r2, [sp, #28]
 8001956:	6819      	ldr	r1, [r3, #0]
 8001958:	4630      	mov	r0, r6
 800195a:	f002 fa83 	bl	8003e64 <strcat>
	for(int idx=0; idx<num; idx++)
 800195e:	3401      	adds	r4, #1
 8001960:	42a5      	cmp	r5, r4
 8001962:	d1f5      	bne.n	8001950 <usbCdcTxEnqueueStrsInt+0x18>
	va_end(valist);

	char intBuf[25];
	sprintf(intBuf, " %d", intt);
 8001964:	463a      	mov	r2, r7
 8001966:	4916      	ldr	r1, [pc, #88]	; (80019c0 <usbCdcTxEnqueueStrsInt+0x88>)
 8001968:	4668      	mov	r0, sp
 800196a:	f002 fa2f 	bl	8003dcc <siprintf>

	strcat(usbTxBuf, intBuf);
 800196e:	4c13      	ldr	r4, [pc, #76]	; (80019bc <usbCdcTxEnqueueStrsInt+0x84>)
 8001970:	4669      	mov	r1, sp
 8001972:	4620      	mov	r0, r4
 8001974:	f002 fa76 	bl	8003e64 <strcat>
	strcat(usbTxBuf, "\n");
 8001978:	4620      	mov	r0, r4
 800197a:	f7fe fbf9 	bl	8000170 <strlen>
 800197e:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <usbCdcTxEnqueueStrsInt+0x8c>)
 8001980:	881b      	ldrh	r3, [r3, #0]
 8001982:	5223      	strh	r3, [r4, r0]
int	 usbCdcSendStr(char* str, uint32_t timeout_ms){	return	 UsbSendStr(str, timeout_ms);	}
 8001984:	210a      	movs	r1, #10
 8001986:	4620      	mov	r0, r4
 8001988:	f001 fb40 	bl	800300c <UsbSendStr>
 800198c:	4605      	mov	r5, r0

	int sentChars = usbCdcSendStr(usbTxBuf, STD_TX_TIMEOUT);
	if( strlen(usbTxBuf) == sentChars )
 800198e:	4620      	mov	r0, r4
 8001990:	f7fe fbee 	bl	8000170 <strlen>
 8001994:	42a8      	cmp	r0, r5
 8001996:	d005      	beq.n	80019a4 <usbCdcTxEnqueueStrsInt+0x6c>
	{	usbTxBuf[0] = 0;
		memset(usbTxBuf, 0, strlen(usbTxBuf));
		return true;
	}else

	return false;
 8001998:	2000      	movs	r0, #0
}
 800199a:	b008      	add	sp, #32
 800199c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80019a0:	b003      	add	sp, #12
 80019a2:	4770      	bx	lr
	{	usbTxBuf[0] = 0;
 80019a4:	2500      	movs	r5, #0
 80019a6:	7025      	strb	r5, [r4, #0]
		memset(usbTxBuf, 0, strlen(usbTxBuf));
 80019a8:	4620      	mov	r0, r4
 80019aa:	f7fe fbe1 	bl	8000170 <strlen>
 80019ae:	4602      	mov	r2, r0
 80019b0:	4629      	mov	r1, r5
 80019b2:	4620      	mov	r0, r4
 80019b4:	f001 fbce 	bl	8003154 <memset>
		return true;
 80019b8:	2001      	movs	r0, #1
 80019ba:	e7ee      	b.n	800199a <usbCdcTxEnqueueStrsInt+0x62>
 80019bc:	20000358 	.word	0x20000358
 80019c0:	0800a0cc 	.word	0x0800a0cc
 80019c4:	0800a0d0 	.word	0x0800a0d0

080019c8 <usbCdcTxEnqueueStrsFloat>:


/// \todo move to scpi module, also all other string manipulations
bool usbCdcTxEnqueueStrsFloat(float flott, int num, ...) // ...variable number of strings, then a float
{
 80019c8:	b40e      	push	{r1, r2, r3}
 80019ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019cc:	b088      	sub	sp, #32
 80019ce:	4607      	mov	r7, r0
 80019d0:	ab0d      	add	r3, sp, #52	; 0x34
 80019d2:	f853 5b04 	ldr.w	r5, [r3], #4
	va_list valist;
	va_start(valist, num);
 80019d6:	9307      	str	r3, [sp, #28]
	for(int idx=0; idx<num; idx++)
 80019d8:	2d00      	cmp	r5, #0
 80019da:	dd0b      	ble.n	80019f4 <usbCdcTxEnqueueStrsFloat+0x2c>
 80019dc:	2400      	movs	r4, #0
		strcat(usbTxBuf, va_arg(valist, const char * ));
 80019de:	4e1d      	ldr	r6, [pc, #116]	; (8001a54 <usbCdcTxEnqueueStrsFloat+0x8c>)
 80019e0:	9b07      	ldr	r3, [sp, #28]
 80019e2:	1d1a      	adds	r2, r3, #4
 80019e4:	9207      	str	r2, [sp, #28]
 80019e6:	6819      	ldr	r1, [r3, #0]
 80019e8:	4630      	mov	r0, r6
 80019ea:	f002 fa3b 	bl	8003e64 <strcat>
	for(int idx=0; idx<num; idx++)
 80019ee:	3401      	adds	r4, #1
 80019f0:	42a5      	cmp	r5, r4
 80019f2:	d1f5      	bne.n	80019e0 <usbCdcTxEnqueueStrsFloat+0x18>
	va_end(valist);

	char floatBuf[25];
	sprintf(floatBuf, " %2.3e", flott);
 80019f4:	4638      	mov	r0, r7
 80019f6:	f7fe fd27 	bl	8000448 <__aeabi_f2d>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4916      	ldr	r1, [pc, #88]	; (8001a58 <usbCdcTxEnqueueStrsFloat+0x90>)
 8001a00:	4668      	mov	r0, sp
 8001a02:	f002 f9e3 	bl	8003dcc <siprintf>

	strcat(usbTxBuf, floatBuf);
 8001a06:	4c13      	ldr	r4, [pc, #76]	; (8001a54 <usbCdcTxEnqueueStrsFloat+0x8c>)
 8001a08:	4669      	mov	r1, sp
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	f002 fa2a 	bl	8003e64 <strcat>
	strcat(usbTxBuf, "\n");
 8001a10:	4620      	mov	r0, r4
 8001a12:	f7fe fbad 	bl	8000170 <strlen>
 8001a16:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <usbCdcTxEnqueueStrsFloat+0x94>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	5223      	strh	r3, [r4, r0]
int	 usbCdcSendStr(char* str, uint32_t timeout_ms){	return	 UsbSendStr(str, timeout_ms);	}
 8001a1c:	210a      	movs	r1, #10
 8001a1e:	4620      	mov	r0, r4
 8001a20:	f001 faf4 	bl	800300c <UsbSendStr>
 8001a24:	4605      	mov	r5, r0

	int sentChars = usbCdcSendStr(usbTxBuf, STD_TX_TIMEOUT);
	if( strlen(usbTxBuf) == sentChars )
 8001a26:	4620      	mov	r0, r4
 8001a28:	f7fe fba2 	bl	8000170 <strlen>
 8001a2c:	42a8      	cmp	r0, r5
 8001a2e:	d005      	beq.n	8001a3c <usbCdcTxEnqueueStrsFloat+0x74>
	{	usbTxBuf[0] = 0;
		memset(usbTxBuf, 0, strlen(usbTxBuf));
		return true;
	}else

	return false;
 8001a30:	2000      	movs	r0, #0
}
 8001a32:	b008      	add	sp, #32
 8001a34:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001a38:	b003      	add	sp, #12
 8001a3a:	4770      	bx	lr
	{	usbTxBuf[0] = 0;
 8001a3c:	2500      	movs	r5, #0
 8001a3e:	7025      	strb	r5, [r4, #0]
		memset(usbTxBuf, 0, strlen(usbTxBuf));
 8001a40:	4620      	mov	r0, r4
 8001a42:	f7fe fb95 	bl	8000170 <strlen>
 8001a46:	4602      	mov	r2, r0
 8001a48:	4629      	mov	r1, r5
 8001a4a:	4620      	mov	r0, r4
 8001a4c:	f001 fb82 	bl	8003154 <memset>
		return true;
 8001a50:	2001      	movs	r0, #1
 8001a52:	e7ee      	b.n	8001a32 <usbCdcTxEnqueueStrsFloat+0x6a>
 8001a54:	20000358 	.word	0x20000358
 8001a58:	0800a0d4 	.word	0x0800a0d4
 8001a5c:	0800a0d0 	.word	0x0800a0d0

08001a60 <usbCdcTxEnqueueStrs>:
 *
 *
 *
 * */
bool usbCdcTxEnqueueStrs(int num, ...)
{
 8001a60:	b40f      	push	{r0, r1, r2, r3}
 8001a62:	b570      	push	{r4, r5, r6, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	ab06      	add	r3, sp, #24
 8001a68:	f853 5b04 	ldr.w	r5, [r3], #4

	va_list valist;
	va_start(valist, num);
 8001a6c:	9301      	str	r3, [sp, #4]

	for(int idx=0; idx<num; idx++)
 8001a6e:	2d00      	cmp	r5, #0
 8001a70:	dd0b      	ble.n	8001a8a <usbCdcTxEnqueueStrs+0x2a>
 8001a72:	2400      	movs	r4, #0
		strcat(usbTxBuf, va_arg(valist, const char * ));
 8001a74:	4e16      	ldr	r6, [pc, #88]	; (8001ad0 <usbCdcTxEnqueueStrs+0x70>)
 8001a76:	9b01      	ldr	r3, [sp, #4]
 8001a78:	1d1a      	adds	r2, r3, #4
 8001a7a:	9201      	str	r2, [sp, #4]
 8001a7c:	6819      	ldr	r1, [r3, #0]
 8001a7e:	4630      	mov	r0, r6
 8001a80:	f002 f9f0 	bl	8003e64 <strcat>
	for(int idx=0; idx<num; idx++)
 8001a84:	3401      	adds	r4, #1
 8001a86:	42a5      	cmp	r5, r4
 8001a88:	d1f5      	bne.n	8001a76 <usbCdcTxEnqueueStrs+0x16>
	va_end(valist);

	strcat(usbTxBuf, "\n");
 8001a8a:	4c11      	ldr	r4, [pc, #68]	; (8001ad0 <usbCdcTxEnqueueStrs+0x70>)
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	f7fe fb6f 	bl	8000170 <strlen>
 8001a92:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <usbCdcTxEnqueueStrs+0x74>)
 8001a94:	881b      	ldrh	r3, [r3, #0]
 8001a96:	5223      	strh	r3, [r4, r0]
int	 usbCdcSendStr(char* str, uint32_t timeout_ms){	return	 UsbSendStr(str, timeout_ms);	}
 8001a98:	210a      	movs	r1, #10
 8001a9a:	4620      	mov	r0, r4
 8001a9c:	f001 fab6 	bl	800300c <UsbSendStr>
 8001aa0:	4605      	mov	r5, r0

	int sentChars = usbCdcSendStr(usbTxBuf, STD_TX_TIMEOUT);
	if( strlen(usbTxBuf) == sentChars )
 8001aa2:	4620      	mov	r0, r4
 8001aa4:	f7fe fb64 	bl	8000170 <strlen>
 8001aa8:	42a8      	cmp	r0, r5
 8001aaa:	d005      	beq.n	8001ab8 <usbCdcTxEnqueueStrs+0x58>
	{	usbTxBuf[0] = 0;
		memset(usbTxBuf, 0, strlen(usbTxBuf));
		return true;
	}else

	return false;
 8001aac:	2000      	movs	r0, #0
}
 8001aae:	b002      	add	sp, #8
 8001ab0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001ab4:	b004      	add	sp, #16
 8001ab6:	4770      	bx	lr
	{	usbTxBuf[0] = 0;
 8001ab8:	2500      	movs	r5, #0
 8001aba:	7025      	strb	r5, [r4, #0]
		memset(usbTxBuf, 0, strlen(usbTxBuf));
 8001abc:	4620      	mov	r0, r4
 8001abe:	f7fe fb57 	bl	8000170 <strlen>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	4629      	mov	r1, r5
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	f001 fb44 	bl	8003154 <memset>
		return true;
 8001acc:	2001      	movs	r0, #1
 8001ace:	e7ee      	b.n	8001aae <usbCdcTxEnqueueStrs+0x4e>
 8001ad0:	20000358 	.word	0x20000358
 8001ad4:	0800a0d0 	.word	0x0800a0d0

08001ad8 <usbCdcTxEnqueueStr>:
/**
 * @brief	enqueues strings for transmission
 * @retval	number of transmitted chars
 */
bool usbCdcTxEnqueueStr(const char * str)
{
 8001ad8:	b538      	push	{r3, r4, r5, lr}
		return strcat(usbTxBuf, str);
	#endif // USB_ENQUEUEING

	#ifndef USB_ENQUEUEING
		// strcat(usbTxBuf, "\n");
		sprintf(usbTxBuf, "%s \n", str);
 8001ada:	4c0f      	ldr	r4, [pc, #60]	; (8001b18 <usbCdcTxEnqueueStr+0x40>)
 8001adc:	4602      	mov	r2, r0
 8001ade:	490f      	ldr	r1, [pc, #60]	; (8001b1c <usbCdcTxEnqueueStr+0x44>)
 8001ae0:	4620      	mov	r0, r4
 8001ae2:	f002 f973 	bl	8003dcc <siprintf>
int	 usbCdcSendStr(char* str, uint32_t timeout_ms){	return	 UsbSendStr(str, timeout_ms);	}
 8001ae6:	210a      	movs	r1, #10
 8001ae8:	4620      	mov	r0, r4
 8001aea:	f001 fa8f 	bl	800300c <UsbSendStr>
 8001aee:	4605      	mov	r5, r0
		//		return	 strlen(usbTxBuf) == usbCdcSendStr(usbTxBuf, STD_TX_TIMEOUT);
		int sentChars = usbCdcSendStr(usbTxBuf, STD_TX_TIMEOUT);
		if( strlen(usbTxBuf) == sentChars )
 8001af0:	4620      	mov	r0, r4
 8001af2:	f7fe fb3d 	bl	8000170 <strlen>
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	d001      	beq.n	8001afe <usbCdcTxEnqueueStr+0x26>
		{	usbTxBuf[0] = 0;
			memset(usbTxBuf, 0, strlen(usbTxBuf));
			return true;
		}else
			return false;
 8001afa:	2000      	movs	r0, #0
	#endif // USB_ENQUEUEING

}
 8001afc:	bd38      	pop	{r3, r4, r5, pc}
		{	usbTxBuf[0] = 0;
 8001afe:	2500      	movs	r5, #0
 8001b00:	7025      	strb	r5, [r4, #0]
			memset(usbTxBuf, 0, strlen(usbTxBuf));
 8001b02:	4620      	mov	r0, r4
 8001b04:	f7fe fb34 	bl	8000170 <strlen>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	4629      	mov	r1, r5
 8001b0c:	4620      	mov	r0, r4
 8001b0e:	f001 fb21 	bl	8003154 <memset>
			return true;
 8001b12:	2001      	movs	r0, #1
 8001b14:	e7f2      	b.n	8001afc <usbCdcTxEnqueueStr+0x24>
 8001b16:	bf00      	nop
 8001b18:	20000358 	.word	0x20000358
 8001b1c:	0800a0dc 	.word	0x0800a0dc

08001b20 <usbCdcRxDequeue>:
			return false;
	}
#endif // USB_ENQUEUEING

bool usbCdcRxDequeue(char* buffer, int bufSize, char terminator)
{
 8001b20:	b508      	push	{r3, lr}
int  usbCdcGetStr(char* buffer, int bufSize, char terminator, uint32_t timeout_ms){	return  UsbGetStr(buffer, bufSize, terminator, timeout_ms);	}
 8001b22:	230a      	movs	r3, #10
 8001b24:	f001 f9f0 	bl	8002f08 <UsbGetStr>
	res = usbCdcGetStr(buffer, bufSize, terminator, STD_RX_TIMEOUT);
	if(res > 0)
		return true;
	else
		return false;
}
 8001b28:	2800      	cmp	r0, #0
 8001b2a:	bfd4      	ite	le
 8001b2c:	2000      	movle	r0, #0
 8001b2e:	2001      	movgt	r0, #1
 8001b30:	bd08      	pop	{r3, pc}
	...

08001b34 <getScpiIdfromMsg>:
}scpiTxIDs;



int getScpiIdfromMsg(char * scpiCmd)
{
 8001b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b38:	4680      	mov	r8, r0
 8001b3a:	4d15      	ldr	r5, [pc, #84]	; (8001b90 <getScpiIdfromMsg+0x5c>)
	int scpiID = -1;

	for(int idx = 0; idx < SCPI_IN_STRCNT; idx ++)
 8001b3c:	2400      	movs	r4, #0
	int scpiID = -1;
 8001b3e:	f04f 37ff 	mov.w	r7, #4294967295
 8001b42:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8001b94 <getScpiIdfromMsg+0x60>
 8001b46:	e004      	b.n	8001b52 <getScpiIdfromMsg+0x1e>
 8001b48:	4627      	mov	r7, r4
	for(int idx = 0; idx < SCPI_IN_STRCNT; idx ++)
 8001b4a:	3401      	adds	r4, #1
 8001b4c:	3523      	adds	r5, #35	; 0x23
 8001b4e:	2c8a      	cmp	r4, #138	; 0x8a
 8001b50:	d01a      	beq.n	8001b88 <getScpiIdfromMsg+0x54>
	{
			if ( 0 == strncasecmp(scpiCmd, scpiRxShortMsgs[idx], strlen(scpiRxShortMsgs[idx]) ) )
 8001b52:	4628      	mov	r0, r5
 8001b54:	f7fe fb0c 	bl	8000170 <strlen>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	4629      	mov	r1, r5
 8001b5c:	4640      	mov	r0, r8
 8001b5e:	f002 f990 	bl	8003e82 <strncasecmp>
 8001b62:	2800      	cmp	r0, #0
 8001b64:	d0f0      	beq.n	8001b48 <getScpiIdfromMsg+0x14>
 8001b66:	eb04 0684 	add.w	r6, r4, r4, lsl #2
 8001b6a:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8001b6e:	444e      	add	r6, r9
					scpiID = idx;
			else if ( 0 == strncasecmp(scpiCmd, scpiRxLongMsgs[idx], strlen(scpiRxLongMsgs[idx]) ) )
 8001b70:	4630      	mov	r0, r6
 8001b72:	f7fe fafd 	bl	8000170 <strlen>
 8001b76:	4602      	mov	r2, r0
 8001b78:	4631      	mov	r1, r6
 8001b7a:	4640      	mov	r0, r8
 8001b7c:	f002 f981 	bl	8003e82 <strncasecmp>
 8001b80:	2800      	cmp	r0, #0
 8001b82:	bf08      	it	eq
 8001b84:	4627      	moveq	r7, r4
 8001b86:	e7e0      	b.n	8001b4a <getScpiIdfromMsg+0x16>
			//	else
			//		scpiID = -1;
	}

	return scpiID;
}
 8001b88:	4638      	mov	r0, r7
 8001b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b8e:	bf00      	nop
 8001b90:	08007a54 	.word	0x08007a54
 8001b94:	08008d34 	.word	0x08008d34

08001b98 <TIM1_UP_IRQHandler>:
	NVIC_DisableIRQ( TIM1_UP_IRQn);
	return true;
}

void TIM1_UP_IRQHandler(void)
{
 8001b98:	b508      	push	{r3, lr}

	tim1SetRanout();
 8001b9a:	f000 fc7f 	bl	800249c <tim1SetRanout>


	// keepaliveSetRanout();
	TIM1 -> SR = 0;
 8001b9e:	4b02      	ldr	r3, [pc, #8]	; (8001ba8 <TIM1_UP_IRQHandler+0x10>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	611a      	str	r2, [r3, #16]
}
 8001ba4:	bd08      	pop	{r3, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40012c00 	.word	0x40012c00

08001bac <keepaliveDelayMs>:
bool keepaliveGetRanout();
void keepaliveClrRanout();

void keepaliveDelayMs(int ms)
{
    uint32_t ka_start=systick_count;
 8001bac:	4b03      	ldr	r3, [pc, #12]	; (8001bbc <keepaliveDelayMs+0x10>)
 8001bae:	6819      	ldr	r1, [r3, #0]
    while (systick_count-ka_start<ms);
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	6813      	ldr	r3, [r2, #0]
 8001bb4:	1a5b      	subs	r3, r3, r1
 8001bb6:	4283      	cmp	r3, r0
 8001bb8:	d3fb      	bcc.n	8001bb2 <keepaliveDelayMs+0x6>
}
 8001bba:	4770      	bx	lr
 8001bbc:	20000484 	.word	0x20000484

08001bc0 <initKeepalive>:




bool initKeepalive()
{	keepaliveClrRanout();
 8001bc0:	b570      	push	{r4, r5, r6, lr}
//	return keealiveRanOut;
}
void keepaliveClrRanout()
{

tim1ClrRanout();
 8001bc2:	f000 fc7b 	bl	80024bc <tim1ClrRanout>
	tim1SetRegUpdating();
 8001bc6:	f000 fc5d 	bl	8002484 <tim1SetRegUpdating>
	int psc = getTimerPSC(STD_KEEPALIVE_PERIOD);
 8001bca:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 8001bce:	4628      	mov	r0, r5
 8001bd0:	f000 fb1a 	bl	8002208 <getTimerPSC>
 8001bd4:	4606      	mov	r6, r0
	int arr = getTimerARR(STD_KEEPALIVE_PERIOD, psc);
 8001bd6:	4601      	mov	r1, r0
 8001bd8:	4628      	mov	r0, r5
 8001bda:	f000 fb99 	bl	8002310 <getTimerARR>
	initTIM(TIM1, psc, arr);
 8001bde:	4c0b      	ldr	r4, [pc, #44]	; (8001c0c <initKeepalive+0x4c>)
 8001be0:	4602      	mov	r2, r0
 8001be2:	4631      	mov	r1, r6
 8001be4:	4620      	mov	r0, r4
 8001be6:	f000 fbd5 	bl	8002394 <initTIM>
    setTIM(TIM1, STD_KEEPALIVE_PERIOD);
 8001bea:	4629      	mov	r1, r5
 8001bec:	4620      	mov	r0, r4
 8001bee:	f000 fc1f 	bl	8002430 <setTIM>
    resetTIM(TIM1);
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	f000 fc10 	bl	8002418 <resetTIM>
    updateEventTIM(TIM1);
 8001bf8:	4620      	mov	r0, r4
 8001bfa:	f000 fc14 	bl	8002426 <updateEventTIM>
    keepaliveDelayMs(2);
 8001bfe:	2002      	movs	r0, #2
 8001c00:	f7ff ffd4 	bl	8001bac <keepaliveDelayMs>
    tim1ClrRegUpdating();
 8001c04:	f000 fc44 	bl	8002490 <tim1ClrRegUpdating>
}
 8001c08:	2001      	movs	r0, #1
 8001c0a:	bd70      	pop	{r4, r5, r6, pc}
 8001c0c:	40012c00 	.word	0x40012c00

08001c10 <keepaliveSetPeriod>:
{	tim1SetRegUpdating();
 8001c10:	b538      	push	{r3, r4, r5, lr}
 8001c12:	4605      	mov	r5, r0
 8001c14:	f000 fc36 	bl	8002484 <tim1SetRegUpdating>
	bool resetted = setTIM(TIM1, period);
 8001c18:	4c09      	ldr	r4, [pc, #36]	; (8001c40 <keepaliveSetPeriod+0x30>)
 8001c1a:	4629      	mov	r1, r5
 8001c1c:	4620      	mov	r0, r4
 8001c1e:	f000 fc07 	bl	8002430 <setTIM>
 8001c22:	4605      	mov	r5, r0
	resetTIM(TIM1);
 8001c24:	4620      	mov	r0, r4
 8001c26:	f000 fbf7 	bl	8002418 <resetTIM>
    updateEventTIM(TIM1);
 8001c2a:	4620      	mov	r0, r4
 8001c2c:	f000 fbfb 	bl	8002426 <updateEventTIM>
    keepaliveDelayMs(2);
 8001c30:	2002      	movs	r0, #2
 8001c32:	f7ff ffbb 	bl	8001bac <keepaliveDelayMs>
    tim1ClrRegUpdating();
 8001c36:	f000 fc2b 	bl	8002490 <tim1ClrRegUpdating>
}
 8001c3a:	4628      	mov	r0, r5
 8001c3c:	bd38      	pop	{r3, r4, r5, pc}
 8001c3e:	bf00      	nop
 8001c40:	40012c00 	.word	0x40012c00

08001c44 <keepaliveStart>:
{
 8001c44:	b508      	push	{r3, lr}
	return startTIM(TIM1);
 8001c46:	4802      	ldr	r0, [pc, #8]	; (8001c50 <keepaliveStart+0xc>)
 8001c48:	f000 fbda 	bl	8002400 <startTIM>
}
 8001c4c:	bd08      	pop	{r3, pc}
 8001c4e:	bf00      	nop
 8001c50:	40012c00 	.word	0x40012c00

08001c54 <keepaliveStop>:
{
 8001c54:	b508      	push	{r3, lr}
	stopTIM(TIM1);
 8001c56:	4802      	ldr	r0, [pc, #8]	; (8001c60 <keepaliveStop+0xc>)
 8001c58:	f000 fbc6 	bl	80023e8 <stopTIM>
}
 8001c5c:	bd08      	pop	{r3, pc}
 8001c5e:	bf00      	nop
 8001c60:	40012c00 	.word	0x40012c00

08001c64 <rstMain>:
    deinitHal();
}


static void rstMain()
{
 8001c64:	b510      	push	{r4, lr}

	// keepaliveStart();
	keepaliveStop();
 8001c66:	f7ff fff5 	bl	8001c54 <keepaliveStop>


	writeDacVolts(1, 0.0);
 8001c6a:	2400      	movs	r4, #0
 8001c6c:	4621      	mov	r1, r4
 8001c6e:	2001      	movs	r0, #1
 8001c70:	f7ff fdfa 	bl	8001868 <writeDacVolts>
	writeDacVolts(2, 0.0);
 8001c74:	4621      	mov	r1, r4
 8001c76:	2002      	movs	r0, #2
 8001c78:	f7ff fdf6 	bl	8001868 <writeDacVolts>
	
	clrRelay0();
 8001c7c:	f7ff fcce 	bl	800161c <clrRelay0>
	clrRelay1();
 8001c80:	f7ff fce4 	bl	800164c <clrRelay1>




}
 8001c84:	bd10      	pop	{r4, pc}
	...

08001c88 <keepaliveReset>:
bool keepaliveReset()				{	return resetTIM(TIM1);				}
 8001c88:	b508      	push	{r3, lr}
 8001c8a:	4802      	ldr	r0, [pc, #8]	; (8001c94 <keepaliveReset+0xc>)
 8001c8c:	f000 fbc4 	bl	8002418 <resetTIM>
 8001c90:	bd08      	pop	{r3, pc}
 8001c92:	bf00      	nop
 8001c94:	40012c00 	.word	0x40012c00

08001c98 <keepaliveGetState>:
bool keepaliveGetState()			{	return getTimerState(TIM1);	}
 8001c98:	b508      	push	{r3, lr}
 8001c9a:	4802      	ldr	r0, [pc, #8]	; (8001ca4 <keepaliveGetState+0xc>)
 8001c9c:	f000 fb76 	bl	800238c <getTimerState>
 8001ca0:	bd08      	pop	{r3, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40012c00 	.word	0x40012c00

08001ca8 <SysTick_Handler>:
{
 8001ca8:	b570      	push	{r4, r5, r6, lr}
    systick_count++;
 8001caa:	4a2a      	ldr	r2, [pc, #168]	; (8001d54 <SysTick_Handler+0xac>)
 8001cac:	6813      	ldr	r3, [r2, #0]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	6013      	str	r3, [r2, #0]
    for(int idx = 0; idx <= (MAX_EXTI_CNT-1); idx++)	// loop over all possible EXTIs
 8001cb2:	2400      	movs	r4, #0
			if (getRisingCycles(idx) <= nCycles && getPin('B', pin))
 8001cb4:	2642      	movs	r6, #66	; 0x42
 8001cb6:	e022      	b.n	8001cfe <SysTick_Handler+0x56>
 8001cb8:	4629      	mov	r1, r5
 8001cba:	4630      	mov	r0, r6
 8001cbc:	f7ff fb7d 	bl	80013ba <getPin>
 8001cc0:	b358      	cbz	r0, 8001d1a <SysTick_Handler+0x72>
				setRisingCycles(idx);
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	f7ff fa54 	bl	8001170 <setRisingCycles>
 8001cc8:	e027      	b.n	8001d1a <SysTick_Handler+0x72>
				setRisingEdge(idx);
 8001cca:	4620      	mov	r0, r4
 8001ccc:	f7ff fa82 	bl	80011d4 <setRisingEdge>
				clrRisingEdges(idx);
 8001cd0:	4620      	mov	r0, r4
 8001cd2:	f7ff fac7 	bl	8001264 <clrRisingEdges>
 8001cd6:	e025      	b.n	8001d24 <SysTick_Handler+0x7c>
			clrRisingCycles(idx);
 8001cd8:	4620      	mov	r0, r4
 8001cda:	f7ff fa5d 	bl	8001198 <clrRisingCycles>
 8001cde:	e021      	b.n	8001d24 <SysTick_Handler+0x7c>
			if (getFallingCycles(idx) <= nCycles && !getPin('B', pin))
 8001ce0:	4629      	mov	r1, r5
 8001ce2:	4630      	mov	r0, r6
 8001ce4:	f7ff fb69 	bl	80013ba <getPin>
 8001ce8:	bb30      	cbnz	r0, 8001d38 <SysTick_Handler+0x90>
				setFallingCycles(idx);
 8001cea:	4620      	mov	r0, r4
 8001cec:	f7ff fa4a 	bl	8001184 <setFallingCycles>
 8001cf0:	e022      	b.n	8001d38 <SysTick_Handler+0x90>
		{	clrFallingCycles(idx);
 8001cf2:	4620      	mov	r0, r4
 8001cf4:	f7ff fa58 	bl	80011a8 <clrFallingCycles>
    for(int idx = 0; idx <= (MAX_EXTI_CNT-1); idx++)	// loop over all possible EXTIs
 8001cf8:	3401      	adds	r4, #1
 8001cfa:	2c14      	cmp	r4, #20
 8001cfc:	d028      	beq.n	8001d50 <SysTick_Handler+0xa8>
		(10 == idx) ? pin = 1 : pin;
 8001cfe:	2c0a      	cmp	r4, #10
 8001d00:	bf14      	ite	ne
 8001d02:	2500      	movne	r5, #0
 8001d04:	2501      	moveq	r5, #1
		if(getRisingEdges(idx) > 0 )
 8001d06:	4620      	mov	r0, r4
 8001d08:	f7ff fac0 	bl	800128c <getRisingEdges>
 8001d0c:	2800      	cmp	r0, #0
 8001d0e:	dde3      	ble.n	8001cd8 <SysTick_Handler+0x30>
			if (getRisingCycles(idx) <= nCycles && getPin('B', pin))
 8001d10:	4620      	mov	r0, r4
 8001d12:	f7ff fa51 	bl	80011b8 <getRisingCycles>
 8001d16:	2805      	cmp	r0, #5
 8001d18:	ddce      	ble.n	8001cb8 <SysTick_Handler+0x10>
			if( getRisingCycles(idx)> nCycles)
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	f7ff fa4c 	bl	80011b8 <getRisingCycles>
 8001d20:	2805      	cmp	r0, #5
 8001d22:	dcd2      	bgt.n	8001cca <SysTick_Handler+0x22>
		if(getFallingEdges(idx) > 0 )
 8001d24:	4620      	mov	r0, r4
 8001d26:	f7ff fab9 	bl	800129c <getFallingEdges>
 8001d2a:	2800      	cmp	r0, #0
 8001d2c:	dde1      	ble.n	8001cf2 <SysTick_Handler+0x4a>
			if (getFallingCycles(idx) <= nCycles && !getPin('B', pin))
 8001d2e:	4620      	mov	r0, r4
 8001d30:	f7ff fa48 	bl	80011c4 <getFallingCycles>
 8001d34:	2805      	cmp	r0, #5
 8001d36:	ddd3      	ble.n	8001ce0 <SysTick_Handler+0x38>
			if( getFallingCycles(idx) > nCycles)
 8001d38:	4620      	mov	r0, r4
 8001d3a:	f7ff fa43 	bl	80011c4 <getFallingCycles>
 8001d3e:	2805      	cmp	r0, #5
 8001d40:	ddda      	ble.n	8001cf8 <SysTick_Handler+0x50>
				setFallingEdge(idx);
 8001d42:	4620      	mov	r0, r4
 8001d44:	f7ff fa4e 	bl	80011e4 <setFallingEdge>
				clrFallingEdges(idx);
 8001d48:	4620      	mov	r0, r4
 8001d4a:	f7ff fa95 	bl	8001278 <clrFallingEdges>
 8001d4e:	e7d3      	b.n	8001cf8 <SysTick_Handler+0x50>
}
 8001d50:	bd70      	pop	{r4, r5, r6, pc}
 8001d52:	bf00      	nop
 8001d54:	20000484 	.word	0x20000484

08001d58 <delay_ms>:
    uint32_t start=systick_count;
 8001d58:	4b03      	ldr	r3, [pc, #12]	; (8001d68 <delay_ms+0x10>)
 8001d5a:	6819      	ldr	r1, [r3, #0]
    while (systick_count-start<ms);
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	6813      	ldr	r3, [r2, #0]
 8001d60:	1a5b      	subs	r3, r3, r1
 8001d62:	4283      	cmp	r3, r0
 8001d64:	d3fb      	bcc.n	8001d5e <delay_ms+0x6>
}
 8001d66:	4770      	bx	lr
 8001d68:	20000484 	.word	0x20000484

08001d6c <blinkDbgLed>:
{
 8001d6c:	b508      	push	{r3, lr}
	setDbgLED();	delay_ms(200);	clrDbgLED();	delay_ms(200);
 8001d6e:	f7ff fc2b 	bl	80015c8 <setDbgLED>
 8001d72:	20c8      	movs	r0, #200	; 0xc8
 8001d74:	f7ff fff0 	bl	8001d58 <delay_ms>
 8001d78:	f7ff fc2e 	bl	80015d8 <clrDbgLED>
 8001d7c:	20c8      	movs	r0, #200	; 0xc8
 8001d7e:	f7ff ffeb 	bl	8001d58 <delay_ms>
	setDbgLED();	delay_ms(200);	clrDbgLED();	delay_ms(200);
 8001d82:	f7ff fc21 	bl	80015c8 <setDbgLED>
 8001d86:	20c8      	movs	r0, #200	; 0xc8
 8001d88:	f7ff ffe6 	bl	8001d58 <delay_ms>
 8001d8c:	f7ff fc24 	bl	80015d8 <clrDbgLED>
 8001d90:	20c8      	movs	r0, #200	; 0xc8
 8001d92:	f7ff ffe1 	bl	8001d58 <delay_ms>
	setDbgLED();	delay_ms(75);	clrDbgLED();	delay_ms(75);
 8001d96:	f7ff fc17 	bl	80015c8 <setDbgLED>
 8001d9a:	204b      	movs	r0, #75	; 0x4b
 8001d9c:	f7ff ffdc 	bl	8001d58 <delay_ms>
 8001da0:	f7ff fc1a 	bl	80015d8 <clrDbgLED>
 8001da4:	204b      	movs	r0, #75	; 0x4b
 8001da6:	f7ff ffd7 	bl	8001d58 <delay_ms>
	setDbgLED();	delay_ms(75);	clrDbgLED();	delay_ms(75);
 8001daa:	f7ff fc0d 	bl	80015c8 <setDbgLED>
 8001dae:	204b      	movs	r0, #75	; 0x4b
 8001db0:	f7ff ffd2 	bl	8001d58 <delay_ms>
 8001db4:	f7ff fc10 	bl	80015d8 <clrDbgLED>
 8001db8:	204b      	movs	r0, #75	; 0x4b
 8001dba:	f7ff ffcd 	bl	8001d58 <delay_ms>
	setDbgLED();	delay_ms(75);	clrDbgLED();	delay_ms(75);
 8001dbe:	f7ff fc03 	bl	80015c8 <setDbgLED>
 8001dc2:	204b      	movs	r0, #75	; 0x4b
 8001dc4:	f7ff ffc8 	bl	8001d58 <delay_ms>
 8001dc8:	f7ff fc06 	bl	80015d8 <clrDbgLED>
 8001dcc:	204b      	movs	r0, #75	; 0x4b
 8001dce:	f7ff ffc3 	bl	8001d58 <delay_ms>
	setDbgLED();	// delay_ms(100);	clrDbgLED();	delay_ms(100);
 8001dd2:	f7ff fbf9 	bl	80015c8 <setDbgLED>
	setDbgLED();
 8001dd6:	f7ff fbf7 	bl	80015c8 <setDbgLED>
}
 8001dda:	bd08      	pop	{r3, pc}

08001ddc <init_clock>:
{   SET_BIT(RCC->CR, RCC_CR_HSION);
 8001ddc:	4a23      	ldr	r2, [pc, #140]	; (8001e6c <init_clock+0x90>)
 8001dde:	6813      	ldr	r3, [r2, #0]
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	6013      	str	r3, [r2, #0]
    while(!READ_BIT(RCC->CR, RCC_CR_HSIRDY)) {}
 8001de6:	6813      	ldr	r3, [r2, #0]
 8001de8:	f013 0f02 	tst.w	r3, #2
 8001dec:	d0fb      	beq.n	8001de6 <init_clock+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_CFGR_SW_HSI);
 8001dee:	4a1f      	ldr	r2, [pc, #124]	; (8001e6c <init_clock+0x90>)
 8001df0:	6853      	ldr	r3, [r2, #4]
 8001df2:	f023 0303 	bic.w	r3, r3, #3
 8001df6:	6053      	str	r3, [r2, #4]
    while ((RCC->CFGR & RCC_CFGR_SWS_Msk) != RCC_CFGR_SWS_HSI) {}
 8001df8:	6853      	ldr	r3, [r2, #4]
 8001dfa:	f013 0f0c 	tst.w	r3, #12
 8001dfe:	d1fb      	bne.n	8001df8 <init_clock+0x1c>
    CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001e00:	4a1a      	ldr	r2, [pc, #104]	; (8001e6c <init_clock+0x90>)
 8001e02:	6813      	ldr	r3, [r2, #0]
 8001e04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e08:	6013      	str	r3, [r2, #0]
    while(READ_BIT(RCC->CR, RCC_CR_PLLRDY)) {}
 8001e0a:	6813      	ldr	r3, [r2, #0]
 8001e0c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001e10:	d1fb      	bne.n	8001e0a <init_clock+0x2e>
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, FLASH_ACR_LATENCY_0);
 8001e12:	4a17      	ldr	r2, [pc, #92]	; (8001e70 <init_clock+0x94>)
 8001e14:	6813      	ldr	r3, [r2, #0]
 8001e16:	f023 0307 	bic.w	r3, r3, #7
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	6013      	str	r3, [r2, #0]
    SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001e20:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
 8001e24:	6813      	ldr	r3, [r2, #0]
 8001e26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e2a:	6013      	str	r3, [r2, #0]
    while(!READ_BIT(RCC->CR, RCC_CR_HSERDY)) {}
 8001e2c:	6813      	ldr	r3, [r2, #0]
 8001e2e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001e32:	d0fb      	beq.n	8001e2c <init_clock+0x50>
    WRITE_REG(RCC->CFGR, RCC_CFGR_PLLSRC + RCC_CFGR_PLLMULL6 + RCC_CFGR_PPRE1_DIV2);
 8001e34:	4b0d      	ldr	r3, [pc, #52]	; (8001e6c <init_clock+0x90>)
 8001e36:	4a0f      	ldr	r2, [pc, #60]	; (8001e74 <init_clock+0x98>)
 8001e38:	605a      	str	r2, [r3, #4]
    SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001e40:	601a      	str	r2, [r3, #0]
    while(!READ_BIT(RCC->CR, RCC_CR_PLLRDY)) {}
 8001e42:	461a      	mov	r2, r3
 8001e44:	6813      	ldr	r3, [r2, #0]
 8001e46:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001e4a:	d0fb      	beq.n	8001e44 <init_clock+0x68>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_CFGR_SW_PLL);
 8001e4c:	4a07      	ldr	r2, [pc, #28]	; (8001e6c <init_clock+0x90>)
 8001e4e:	6853      	ldr	r3, [r2, #4]
 8001e50:	f023 0303 	bic.w	r3, r3, #3
 8001e54:	f043 0302 	orr.w	r3, r3, #2
 8001e58:	6053      	str	r3, [r2, #4]
    SystemCoreClock=48000000;
 8001e5a:	4b07      	ldr	r3, [pc, #28]	; (8001e78 <init_clock+0x9c>)
 8001e5c:	4907      	ldr	r1, [pc, #28]	; (8001e7c <init_clock+0xa0>)
 8001e5e:	6019      	str	r1, [r3, #0]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_USBPRE, RCC_CFGR_USBPRE);
 8001e60:	6853      	ldr	r3, [r2, #4]
 8001e62:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e66:	6053      	str	r3, [r2, #4]
}
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40022000 	.word	0x40022000
 8001e74:	00110400 	.word	0x00110400
 8001e78:	20000000 	.word	0x20000000
 8001e7c:	02dc6c00 	.word	0x02dc6c00

08001e80 <init_io>:
    SET_BIT(RCC->APB1ENR, RCC_APB1ENR_USBEN);
 8001e80:	4a02      	ldr	r2, [pc, #8]	; (8001e8c <init_io+0xc>)
 8001e82:	69d3      	ldr	r3, [r2, #28]
 8001e84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e88:	61d3      	str	r3, [r2, #28]
}
 8001e8a:	4770      	bx	lr
 8001e8c:	40021000 	.word	0x40021000

08001e90 <main>:
{
 8001e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e94:	b0c4      	sub	sp, #272	; 0x110
		init_clock();
 8001e96:	f7ff ffa1 	bl	8001ddc <init_clock>
		init_io();
 8001e9a:	f7ff fff1 	bl	8001e80 <init_io>
		systick_count=0;
 8001e9e:	4bb3      	ldr	r3, [pc, #716]	; (800216c <main+0x2dc>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
		SysTick_Config(SystemCoreClock/1000);
 8001ea4:	4bb2      	ldr	r3, [pc, #712]	; (8002170 <main+0x2e0>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4ab2      	ldr	r2, [pc, #712]	; (8002174 <main+0x2e4>)
 8001eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8001eae:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eb6:	d209      	bcs.n	8001ecc <main+0x3c>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eb8:	4aaf      	ldr	r2, [pc, #700]	; (8002178 <main+0x2e8>)
 8001eba:	6053      	str	r3, [r2, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ebc:	4baf      	ldr	r3, [pc, #700]	; (800217c <main+0x2ec>)
 8001ebe:	21f0      	movs	r1, #240	; 0xf0
 8001ec0:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ec8:	2307      	movs	r3, #7
 8001eca:	6013      	str	r3, [r2, #0]
		initHal();
 8001ecc:	f7ff fd0c 	bl	80018e8 <initHal>
		initKeepalive();
 8001ed0:	f7ff fe76 	bl	8001bc0 <initKeepalive>
		usbCdcInit();
 8001ed4:	f7ff fd2a 	bl	800192c <usbCdcInit>
tim1ClrRanout();
 8001ed8:	f000 faf0 	bl	80024bc <tim1ClrRanout>
		initDACs();
 8001edc:	f7ff fc62 	bl	80017a4 <initDACs>
		writeDacVolts(1, 0.00);
 8001ee0:	2400      	movs	r4, #0
 8001ee2:	4621      	mov	r1, r4
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	f7ff fcbf 	bl	8001868 <writeDacVolts>
		writeDacVolts(2, 0.00);
 8001eea:	4621      	mov	r1, r4
 8001eec:	2002      	movs	r0, #2
 8001eee:	f7ff fcbb 	bl	8001868 <writeDacVolts>
	rstMain();
 8001ef2:	f7ff feb7 	bl	8001c64 <rstMain>
    blinkDbgLed();
 8001ef6:	f7ff ff39 	bl	8001d6c <blinkDbgLed>
				default:				usbEnq(scpiTxMsgs[TX_ERR]);													break;
 8001efa:	4da1      	ldr	r5, [pc, #644]	; (8002180 <main+0x2f0>)
	return result;
}

static int getIntFromStr(char * source)
{	int result;
	sscanf( source, "%*s%d", &result);
 8001efc:	f8df 82b0 	ldr.w	r8, [pc, #688]	; 80021b0 <main+0x320>
            {	usbCdcTxEnqueueStrsInt(idx, 3, scpiTxMsgs[TX_RISINGEDGE], " on ", subSyses[SYSID_EXTI]);
 8001f00:	4ea0      	ldr	r6, [pc, #640]	; (8002184 <main+0x2f4>)
 8001f02:	f205 2753 	addw	r7, r5, #595	; 0x253
    {	char usbInBuf[USB_RXLEN] = "";
 8001f06:	2100      	movs	r1, #0
 8001f08:	9104      	str	r1, [sp, #16]
 8001f0a:	22fc      	movs	r2, #252	; 0xfc
 8001f0c:	a805      	add	r0, sp, #20
 8001f0e:	f001 f921 	bl	8003154 <memset>
bool usbCdcRxBufferContains(char c){	return UsbRxBufferContains(c);	}
 8001f12:	200a      	movs	r0, #10
 8001f14:	f000 ff90 	bl	8002e38 <UsbRxBufferContains>
        if (usbCdcRxBufferContains('\n'))
 8001f18:	b930      	cbnz	r0, 8001f28 <main+0x98>
return tim1GetRanout();
 8001f1a:	f000 fac9 	bl	80024b0 <tim1GetRanout>
        if(keepaliveGetRanout())
 8001f1e:	2800      	cmp	r0, #0
 8001f20:	f040 8116 	bne.w	8002150 <main+0x2c0>
				case	RX_KAq:			usbCdcTxEnqueueStrsFloat(getTimerPeriod(TIM1->PSC, TIM1->ARR), 3, subSyses[SYSID_KEEPALIVE], keepaliveGetState() ? scpiTxMsgs[TX_ON] : scpiTxMsgs[TX_OFF], scpiTxMsgs[TX_PERIOD]);
 8001f24:	2400      	movs	r4, #0
 8001f26:	e156      	b.n	80021d6 <main+0x346>
        {   usbCdcRxDequeue(usbInBuf,sizeof(usbInBuf),'\n');
 8001f28:	220a      	movs	r2, #10
 8001f2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f2e:	a804      	add	r0, sp, #16
 8001f30:	f7ff fdf6 	bl	8001b20 <usbCdcRxDequeue>
            int scpiID = getScpiIdfromMsg(usbInBuf);
 8001f34:	a804      	add	r0, sp, #16
 8001f36:	f7ff fdfd 	bl	8001b34 <getScpiIdfromMsg>
            switch(scpiID)
 8001f3a:	2814      	cmp	r0, #20
 8001f3c:	f200 8103 	bhi.w	8002146 <main+0x2b6>
 8001f40:	e8df f010 	tbh	[pc, r0, lsl #1]
 8001f44:	00190015 	.word	0x00190015
 8001f48:	001f001c 	.word	0x001f001c
 8001f4c:	00300022 	.word	0x00300022
 8001f50:	00360033 	.word	0x00360033
 8001f54:	00580044 	.word	0x00580044
 8001f58:	0074006c 	.word	0x0074006c
 8001f5c:	008f007c 	.word	0x008f007c
 8001f60:	00ac00a2 	.word	0x00ac00a2
 8001f64:	00d700bf 	.word	0x00d700bf
 8001f68:	00e700da 	.word	0x00e700da
 8001f6c:	00f4      	.short	0x00f4
            	case	RX_IDNq:		usbEnq( scpiTxMsgs[TX_IDNq] );
 8001f6e:	4628      	mov	r0, r5
 8001f70:	f7ff fdb2 	bl	8001ad8 <usbCdcTxEnqueueStr>
            		break;
 8001f74:	e7d1      	b.n	8001f1a <main+0x8a>
             	case	RX_RST:			rstMain();
 8001f76:	f7ff fe75 	bl	8001c64 <rstMain>
            		break;
 8001f7a:	e7ce      	b.n	8001f1a <main+0x8a>
            	case	RX_REL0_ON:		setRelay0();         		break;
 8001f7c:	f7ff fb46 	bl	800160c <setRelay0>
 8001f80:	e7cb      	b.n	8001f1a <main+0x8a>
				case	RX_REL0_OFF:	clrRelay0();         		break;
 8001f82:	f7ff fb4b 	bl	800161c <clrRelay0>
 8001f86:	e7c8      	b.n	8001f1a <main+0x8a>
				case	RX_REL0q: 		usbEnqStrs(2, subSyses[SYSID_RELAY0], getRelay0() ? scpiTxMsgs[TX_ON] : scpiTxMsgs[TX_OFF] );
 8001f88:	f7ff fb50 	bl	800162c <getRelay0>
 8001f8c:	b938      	cbnz	r0, 8001f9e <main+0x10e>
 8001f8e:	f105 028c 	add.w	r2, r5, #140	; 0x8c
 8001f92:	f505 716d 	add.w	r1, r5, #948	; 0x3b4
 8001f96:	2002      	movs	r0, #2
 8001f98:	f7ff fd62 	bl	8001a60 <usbCdcTxEnqueueStrs>
					break;
 8001f9c:	e7bd      	b.n	8001f1a <main+0x8a>
				case	RX_REL0q: 		usbEnqStrs(2, subSyses[SYSID_RELAY0], getRelay0() ? scpiTxMsgs[TX_ON] : scpiTxMsgs[TX_OFF] );
 8001f9e:	f105 0269 	add.w	r2, r5, #105	; 0x69
 8001fa2:	e7f6      	b.n	8001f92 <main+0x102>
				case	RX_REL1_ON: 	setRelay1();         		break;
 8001fa4:	f7ff fb4a 	bl	800163c <setRelay1>
 8001fa8:	e7b7      	b.n	8001f1a <main+0x8a>
				case	RX_REL1_OFF: 	clrRelay1();         		break;
 8001faa:	f7ff fb4f 	bl	800164c <clrRelay1>
 8001fae:	e7b4      	b.n	8001f1a <main+0x8a>
				case	RX_REL1q:		usbEnqStrs(2, subSyses[SYSID_RELAY1], getRelay1() ? scpiTxMsgs[TX_ON] : scpiTxMsgs[TX_OFF] );
 8001fb0:	f7ff fb54 	bl	800165c <getRelay1>
 8001fb4:	b938      	cbnz	r0, 8001fc6 <main+0x136>
 8001fb6:	f105 028c 	add.w	r2, r5, #140	; 0x8c
 8001fba:	f205 31d7 	addw	r1, r5, #983	; 0x3d7
 8001fbe:	2002      	movs	r0, #2
 8001fc0:	f7ff fd4e 	bl	8001a60 <usbCdcTxEnqueueStrs>
					break;
 8001fc4:	e7a9      	b.n	8001f1a <main+0x8a>
				case	RX_REL1q:		usbEnqStrs(2, subSyses[SYSID_RELAY1], getRelay1() ? scpiTxMsgs[TX_ON] : scpiTxMsgs[TX_OFF] );
 8001fc6:	f105 0269 	add.w	r2, r5, #105	; 0x69
 8001fca:	e7f6      	b.n	8001fba <main+0x12a>
	sscanf( source, "%*s%f", &result);
 8001fcc:	aa03      	add	r2, sp, #12
 8001fce:	496e      	ldr	r1, [pc, #440]	; (8002188 <main+0x2f8>)
 8001fd0:	a804      	add	r0, sp, #16
 8001fd2:	f001 ff1b 	bl	8003e0c <siscanf>
				case	RX_VOUTA_VOLT:		writeDacVolts(1, getFloatFromStr(usbInBuf)) ? usbEnq(scpiTxMsgs[TX_PARAM_OK ]) : usbEnq(scpiTxMsgs[TX_PARAM_ERR ]);	break;
 8001fd6:	9903      	ldr	r1, [sp, #12]
 8001fd8:	2001      	movs	r0, #1
 8001fda:	f7ff fc45 	bl	8001868 <writeDacVolts>
 8001fde:	b120      	cbz	r0, 8001fea <main+0x15a>
 8001fe0:	f105 00af 	add.w	r0, r5, #175	; 0xaf
 8001fe4:	f7ff fd78 	bl	8001ad8 <usbCdcTxEnqueueStr>
 8001fe8:	e797      	b.n	8001f1a <main+0x8a>
 8001fea:	f105 0046 	add.w	r0, r5, #70	; 0x46
 8001fee:	f7ff fd73 	bl	8001ad8 <usbCdcTxEnqueueStr>
 8001ff2:	e792      	b.n	8001f1a <main+0x8a>
 8001ff4:	aa03      	add	r2, sp, #12
 8001ff6:	4964      	ldr	r1, [pc, #400]	; (8002188 <main+0x2f8>)
 8001ff8:	a804      	add	r0, sp, #16
 8001ffa:	f001 ff07 	bl	8003e0c <siscanf>
				case	RX_VOUTB_VOLT:		writeDacVolts(2, getFloatFromStr(usbInBuf)) ? usbEnq(scpiTxMsgs[TX_PARAM_OK ]) : usbEnq(scpiTxMsgs[TX_PARAM_ERR ]);	break;
 8001ffe:	9903      	ldr	r1, [sp, #12]
 8002000:	2002      	movs	r0, #2
 8002002:	f7ff fc31 	bl	8001868 <writeDacVolts>
 8002006:	b120      	cbz	r0, 8002012 <main+0x182>
 8002008:	f105 00af 	add.w	r0, r5, #175	; 0xaf
 800200c:	f7ff fd64 	bl	8001ad8 <usbCdcTxEnqueueStr>
 8002010:	e783      	b.n	8001f1a <main+0x8a>
 8002012:	f105 0046 	add.w	r0, r5, #70	; 0x46
 8002016:	f7ff fd5f 	bl	8001ad8 <usbCdcTxEnqueueStr>
 800201a:	e77e      	b.n	8001f1a <main+0x8a>
				case	RX_VOUTA_VOLTq:		usbCdcTxEnqueueStrsFloat(readDacVolts(1), 1, "VOUTA:")		;			break;
 800201c:	2001      	movs	r0, #1
 800201e:	f7ff fc5d 	bl	80018dc <readDacVolts>
 8002022:	4a5a      	ldr	r2, [pc, #360]	; (800218c <main+0x2fc>)
 8002024:	2101      	movs	r1, #1
 8002026:	f7ff fccf 	bl	80019c8 <usbCdcTxEnqueueStrsFloat>
 800202a:	e776      	b.n	8001f1a <main+0x8a>
				case	RX_VOUTB_VOLTq:		usbCdcTxEnqueueStrsFloat(readDacVolts(2), 1, "VOUTB:")		;			break;
 800202c:	2002      	movs	r0, #2
 800202e:	f7ff fc55 	bl	80018dc <readDacVolts>
 8002032:	4a57      	ldr	r2, [pc, #348]	; (8002190 <main+0x300>)
 8002034:	2101      	movs	r1, #1
 8002036:	f7ff fcc7 	bl	80019c8 <usbCdcTxEnqueueStrsFloat>
 800203a:	e76e      	b.n	8001f1a <main+0x8a>
 800203c:	aa03      	add	r2, sp, #12
 800203e:	4952      	ldr	r1, [pc, #328]	; (8002188 <main+0x2f8>)
 8002040:	a804      	add	r0, sp, #16
 8002042:	f001 fee3 	bl	8003e0c <siscanf>
				case	RX_KA_peri:		keepaliveSetPeriod(getFloatFromStr(usbInBuf)) ? usbEnq(scpiTxMsgs[TX_PARAM_OK]) : usbEnq(scpiTxMsgs[TX_PARAM_ERR]);
 8002046:	9803      	ldr	r0, [sp, #12]
 8002048:	f7ff fde2 	bl	8001c10 <keepaliveSetPeriod>
 800204c:	b120      	cbz	r0, 8002058 <main+0x1c8>
 800204e:	f105 00af 	add.w	r0, r5, #175	; 0xaf
 8002052:	f7ff fd41 	bl	8001ad8 <usbCdcTxEnqueueStr>
 8002056:	e760      	b.n	8001f1a <main+0x8a>
 8002058:	f105 0046 	add.w	r0, r5, #70	; 0x46
 800205c:	f7ff fd3c 	bl	8001ad8 <usbCdcTxEnqueueStr>
 8002060:	e75b      	b.n	8001f1a <main+0x8a>
				case	RX_KA_on:   	keepaliveStart() ? usbEnqStrs(2, subSyses[SYSID_KEEPALIVE], scpiTxMsgs[TX_STARTED]) : usbEnqStrs(2, subSyses[SYSID_KEEPALIVE], scpiTxMsgs[TX_NOT_STARTED]);
 8002062:	f7ff fdef 	bl	8001c44 <keepaliveStart>
 8002066:	b138      	cbz	r0, 8002078 <main+0x1e8>
 8002068:	f105 02d2 	add.w	r2, r5, #210	; 0xd2
 800206c:	f205 5135 	addw	r1, r5, #1333	; 0x535
 8002070:	2002      	movs	r0, #2
 8002072:	f7ff fcf5 	bl	8001a60 <usbCdcTxEnqueueStrs>
 8002076:	e750      	b.n	8001f1a <main+0x8a>
 8002078:	f105 02f5 	add.w	r2, r5, #245	; 0xf5
 800207c:	f205 5135 	addw	r1, r5, #1333	; 0x535
 8002080:	2002      	movs	r0, #2
 8002082:	f7ff fced 	bl	8001a60 <usbCdcTxEnqueueStrs>
 8002086:	e748      	b.n	8001f1a <main+0x8a>
				case	RX_KA_off:   	keepaliveStop();
 8002088:	f7ff fde4 	bl	8001c54 <keepaliveStop>
										usbEnqStrs(2, subSyses[SYSID_KEEPALIVE], scpiTxMsgs[TX_STOPPED]);
 800208c:	f505 728c 	add.w	r2, r5, #280	; 0x118
 8002090:	f205 5135 	addw	r1, r5, #1333	; 0x535
 8002094:	2002      	movs	r0, #2
 8002096:	f7ff fce3 	bl	8001a60 <usbCdcTxEnqueueStrs>
					break;
 800209a:	e73e      	b.n	8001f1a <main+0x8a>
				case	RX_KA_up:   	keepaliveReset() ? usbEnqStrs(2, subSyses[SYSID_KEEPALIVE], scpiTxMsgs[TX_RESET]) : usbEnqStrs(2, subSyses[SYSID_KEEPALIVE], scpiTxMsgs[TX_NOT_RESET]);
 800209c:	f7ff fdf4 	bl	8001c88 <keepaliveReset>
 80020a0:	b138      	cbz	r0, 80020b2 <main+0x222>
 80020a2:	f505 72af 	add.w	r2, r5, #350	; 0x15e
 80020a6:	f205 5135 	addw	r1, r5, #1333	; 0x535
 80020aa:	2002      	movs	r0, #2
 80020ac:	f7ff fcd8 	bl	8001a60 <usbCdcTxEnqueueStrs>
 80020b0:	e733      	b.n	8001f1a <main+0x8a>
 80020b2:	f205 1281 	addw	r2, r5, #385	; 0x181
 80020b6:	f205 5135 	addw	r1, r5, #1333	; 0x535
 80020ba:	2002      	movs	r0, #2
 80020bc:	f7ff fcd0 	bl	8001a60 <usbCdcTxEnqueueStrs>
 80020c0:	e72b      	b.n	8001f1a <main+0x8a>
				case	RX_KAq:			usbCdcTxEnqueueStrsFloat(getTimerPeriod(TIM1->PSC, TIM1->ARR), 3, subSyses[SYSID_KEEPALIVE], keepaliveGetState() ? scpiTxMsgs[TX_ON] : scpiTxMsgs[TX_OFF], scpiTxMsgs[TX_PERIOD]);
 80020c2:	4b34      	ldr	r3, [pc, #208]	; (8002194 <main+0x304>)
 80020c4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80020c6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020c8:	f000 f94e 	bl	8002368 <getTimerPeriod>
 80020cc:	4604      	mov	r4, r0
 80020ce:	f7ff fde3 	bl	8001c98 <keepaliveGetState>
 80020d2:	b958      	cbnz	r0, 80020ec <main+0x25c>
 80020d4:	f105 038c 	add.w	r3, r5, #140	; 0x8c
 80020d8:	f505 72d2 	add.w	r2, r5, #420	; 0x1a4
 80020dc:	9200      	str	r2, [sp, #0]
 80020de:	f205 5235 	addw	r2, r5, #1333	; 0x535
 80020e2:	2103      	movs	r1, #3
 80020e4:	4620      	mov	r0, r4
 80020e6:	f7ff fc6f 	bl	80019c8 <usbCdcTxEnqueueStrsFloat>
					break;
 80020ea:	e716      	b.n	8001f1a <main+0x8a>
				case	RX_KAq:			usbCdcTxEnqueueStrsFloat(getTimerPeriod(TIM1->PSC, TIM1->ARR), 3, subSyses[SYSID_KEEPALIVE], keepaliveGetState() ? scpiTxMsgs[TX_ON] : scpiTxMsgs[TX_OFF], scpiTxMsgs[TX_PERIOD]);
 80020ec:	f105 0369 	add.w	r3, r5, #105	; 0x69
 80020f0:	e7f2      	b.n	80020d8 <main+0x248>
						blinkDbgLed();
 80020f2:	f7ff fe3b 	bl	8001d6c <blinkDbgLed>
					break;
 80020f6:	e710      	b.n	8001f1a <main+0x8a>
						usbCdcTxEnqueueStrsInt( ID_GetUnique32(0) + ID_GetUnique32(1) + ID_GetUnique32(2) + ID_GetUnique32(3), 1, "sum of CPU IDs: ") ;
 80020f8:	4b27      	ldr	r3, [pc, #156]	; (8002198 <main+0x308>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a27      	ldr	r2, [pc, #156]	; (800219c <main+0x30c>)
 80020fe:	6812      	ldr	r2, [r2, #0]
 8002100:	4413      	add	r3, r2
 8002102:	4a27      	ldr	r2, [pc, #156]	; (80021a0 <main+0x310>)
 8002104:	6810      	ldr	r0, [r2, #0]
 8002106:	4a27      	ldr	r2, [pc, #156]	; (80021a4 <main+0x314>)
 8002108:	2101      	movs	r1, #1
 800210a:	4418      	add	r0, r3
 800210c:	f7ff fc14 	bl	8001938 <usbCdcTxEnqueueStrsInt>
					break;
 8002110:	e703      	b.n	8001f1a <main+0x8a>
 8002112:	aa03      	add	r2, sp, #12
 8002114:	491c      	ldr	r1, [pc, #112]	; (8002188 <main+0x2f8>)
 8002116:	a804      	add	r0, sp, #16
 8002118:	f001 fe78 	bl	8003e0c <siscanf>
				case	RX_DBG_dacVoltToRaw:    usbCdcTxEnqueueStrsInt( dacVoltToRaw(getFloatFromStr(usbInBuf)), 1, "roh: " );         		break;
 800211c:	9803      	ldr	r0, [sp, #12]
 800211e:	f7ff fb87 	bl	8001830 <dacVoltToRaw>
 8002122:	4a21      	ldr	r2, [pc, #132]	; (80021a8 <main+0x318>)
 8002124:	2101      	movs	r1, #1
 8002126:	f7ff fc07 	bl	8001938 <usbCdcTxEnqueueStrsInt>
 800212a:	e6f6      	b.n	8001f1a <main+0x8a>
	sscanf( source, "%*s%d", &result);
 800212c:	aa03      	add	r2, sp, #12
 800212e:	4641      	mov	r1, r8
 8002130:	a804      	add	r0, sp, #16
 8002132:	f001 fe6b 	bl	8003e0c <siscanf>
				case	RX_DBG_dacRawToVolt:    usbCdcTxEnqueueStrsFloat( dacRawToVolt(getIntFromStr(usbInBuf)), 1, "volts: ");         		break;
 8002136:	9803      	ldr	r0, [sp, #12]
 8002138:	f7ff fbb6 	bl	80018a8 <dacRawToVolt>
 800213c:	4a1b      	ldr	r2, [pc, #108]	; (80021ac <main+0x31c>)
 800213e:	2101      	movs	r1, #1
 8002140:	f7ff fc42 	bl	80019c8 <usbCdcTxEnqueueStrsFloat>
 8002144:	e6e9      	b.n	8001f1a <main+0x8a>
				default:				usbEnq(scpiTxMsgs[TX_ERR]);													break;
 8002146:	f105 0023 	add.w	r0, r5, #35	; 0x23
 800214a:	f7ff fcc5 	bl	8001ad8 <usbCdcTxEnqueueStr>
 800214e:	e6e4      	b.n	8001f1a <main+0x8a>
tim1ClrRanout();
 8002150:	f000 f9b4 	bl	80024bc <tim1ClrRanout>
        	keepaliveStop();
 8002154:	f7ff fd7e 	bl	8001c54 <keepaliveStop>
        	rstMain();
 8002158:	f7ff fd84 	bl	8001c64 <rstMain>
        	usbEnqStrs(2 , subSyses[SYSID_KEEPALIVE], scpiTxMsgs[TX_OVERFLOW]);
 800215c:	f505 72f5 	add.w	r2, r5, #490	; 0x1ea
 8002160:	f205 5135 	addw	r1, r5, #1333	; 0x535
 8002164:	2002      	movs	r0, #2
 8002166:	f7ff fc7b 	bl	8001a60 <usbCdcTxEnqueueStrs>
 800216a:	e6db      	b.n	8001f24 <main+0x94>
 800216c:	20000484 	.word	0x20000484
 8002170:	20000000 	.word	0x20000000
 8002174:	10624dd3 	.word	0x10624dd3
 8002178:	e000e010 	.word	0xe000e010
 800217c:	e000ed00 	.word	0xe000ed00
 8002180:	080074d8 	.word	0x080074d8
 8002184:	0800a128 	.word	0x0800a128
 8002188:	0800a0e4 	.word	0x0800a0e4
 800218c:	0800a0ec 	.word	0x0800a0ec
 8002190:	0800a0f4 	.word	0x0800a0f4
 8002194:	40012c00 	.word	0x40012c00
 8002198:	1ffff7e8 	.word	0x1ffff7e8
 800219c:	1ffff7ec 	.word	0x1ffff7ec
 80021a0:	1ffff7f0 	.word	0x1ffff7f0
 80021a4:	0800a0fc 	.word	0x0800a0fc
 80021a8:	0800a110 	.word	0x0800a110
 80021ac:	0800a120 	.word	0x0800a120
 80021b0:	0800a118 	.word	0x0800a118
            {	usbCdcTxEnqueueStrsInt(idx, 3, scpiTxMsgs[TX_RISINGEDGE], " on ", subSyses[SYSID_EXTI]);
 80021b4:	f205 43a9 	addw	r3, r5, #1193	; 0x4a9
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	4633      	mov	r3, r6
 80021bc:	463a      	mov	r2, r7
 80021be:	2103      	movs	r1, #3
 80021c0:	4620      	mov	r0, r4
 80021c2:	f7ff fbb9 	bl	8001938 <usbCdcTxEnqueueStrsInt>
            	clrRisingEdge(idx);
 80021c6:	4620      	mov	r0, r4
 80021c8:	f7ff f814 	bl	80011f4 <clrRisingEdge>
 80021cc:	e008      	b.n	80021e0 <main+0x350>
        for(int idx = 0; idx <= (MAX_EXTI_CNT-1); idx++)	// loop over all possible EXTIs
 80021ce:	3401      	adds	r4, #1
 80021d0:	2c14      	cmp	r4, #20
 80021d2:	f43f ae98 	beq.w	8001f06 <main+0x76>
            if(getRisingEdge(idx) )
 80021d6:	4620      	mov	r0, r4
 80021d8:	f7ff f81c 	bl	8001214 <getRisingEdge>
 80021dc:	2800      	cmp	r0, #0
 80021de:	d1e9      	bne.n	80021b4 <main+0x324>
            if(getFallingEdge(idx))
 80021e0:	4620      	mov	r0, r4
 80021e2:	f7ff f81f 	bl	8001224 <getFallingEdge>
 80021e6:	2800      	cmp	r0, #0
 80021e8:	d0f1      	beq.n	80021ce <main+0x33e>
            {	usbCdcTxEnqueueStrsInt(idx, 3, scpiTxMsgs[TX_FALLINGEDGE], " on ", subSyses[SYSID_EXTI]);
 80021ea:	f205 43a9 	addw	r3, r5, #1193	; 0x4a9
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	4633      	mov	r3, r6
 80021f2:	f205 2276 	addw	r2, r5, #630	; 0x276
 80021f6:	2103      	movs	r1, #3
 80021f8:	4620      	mov	r0, r4
 80021fa:	f7ff fb9d 	bl	8001938 <usbCdcTxEnqueueStrsInt>
             	clrFallingEdge(idx);
 80021fe:	4620      	mov	r0, r4
 8002200:	f7ff f800 	bl	8001204 <clrFallingEdge>
 8002204:	e7e3      	b.n	80021ce <main+0x33e>
 8002206:	bf00      	nop

08002208 <getTimerPSC>:

// returns PSC for given Timer-period in secs ( 0 ... 4us)
// PSC = (period * TCLK)/(ARR+1)-1
// a return of '0' indicates an error, due to impossible timer-period
uint32_t getTimerPSC(float period)
{	uint32_t psc = 0;
 8002208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800220a:	4605      	mov	r5, r0

	// implicit sanity-check: 4us > period > 50s leaves psc to '0'
	if(   4.00E-06 	<= period && period <  40.00E-06)	psc =  1 ;  //  t max  83.33E-09  min t,    2.73E-03
 800220c:	f7fe f91c 	bl	8000448 <__aeabi_f2d>
 8002210:	4606      	mov	r6, r0
 8002212:	460f      	mov	r7, r1
 8002214:	a334      	add	r3, pc, #208	; (adr r3, 80022e8 <getTimerPSC+0xe0>)
 8002216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800221a:	f7fe fbf3 	bl	8000a04 <__aeabi_dcmpge>
 800221e:	2800      	cmp	r0, #0
 8002220:	d05e      	beq.n	80022e0 <getTimerPSC+0xd8>
 8002222:	a333      	add	r3, pc, #204	; (adr r3, 80022f0 <getTimerPSC+0xe8>)
 8002224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002228:	4630      	mov	r0, r6
 800222a:	4639      	mov	r1, r7
 800222c:	f7fe fbd6 	bl	80009dc <__aeabi_dcmplt>
{	uint32_t psc = 0;
 8002230:	1c04      	adds	r4, r0, #0
 8002232:	bf18      	it	ne
 8002234:	2401      	movne	r4, #1
	if(  40.00E-06 	<= period && period <  10.00E-03)	psc =  9 ;  //  t max 416.67E-09  min t,   13.65E-03
 8002236:	a32e      	add	r3, pc, #184	; (adr r3, 80022f0 <getTimerPSC+0xe8>)
 8002238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223c:	4630      	mov	r0, r6
 800223e:	4639      	mov	r1, r7
 8002240:	f7fe fbe0 	bl	8000a04 <__aeabi_dcmpge>
 8002244:	b148      	cbz	r0, 800225a <getTimerPSC+0x52>
 8002246:	a32c      	add	r3, pc, #176	; (adr r3, 80022f8 <getTimerPSC+0xf0>)
 8002248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800224c:	4630      	mov	r0, r6
 800224e:	4639      	mov	r1, r7
 8002250:	f7fe fbc4 	bl	80009dc <__aeabi_dcmplt>
 8002254:	2800      	cmp	r0, #0
 8002256:	bf18      	it	ne
 8002258:	2409      	movne	r4, #9
	if(  10.00E-03 	<= period && period < 100.00E-03)	psc =  99 ;  //  t max   4.17E-06  min t,  136.53E-03
 800225a:	a327      	add	r3, pc, #156	; (adr r3, 80022f8 <getTimerPSC+0xf0>)
 800225c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002260:	4630      	mov	r0, r6
 8002262:	4639      	mov	r1, r7
 8002264:	f7fe fbce 	bl	8000a04 <__aeabi_dcmpge>
 8002268:	b148      	cbz	r0, 800227e <getTimerPSC+0x76>
 800226a:	a325      	add	r3, pc, #148	; (adr r3, 8002300 <getTimerPSC+0xf8>)
 800226c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002270:	4630      	mov	r0, r6
 8002272:	4639      	mov	r1, r7
 8002274:	f7fe fbb2 	bl	80009dc <__aeabi_dcmplt>
 8002278:	2800      	cmp	r0, #0
 800227a:	bf18      	it	ne
 800227c:	2463      	movne	r4, #99	; 0x63
	if( 100.00E-03	<= period && period <   1.00E-00 )	psc =  999 ;  //  t max  41.67E-06  min t,    1.37E+00
 800227e:	a320      	add	r3, pc, #128	; (adr r3, 8002300 <getTimerPSC+0xf8>)
 8002280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002284:	4630      	mov	r0, r6
 8002286:	4639      	mov	r1, r7
 8002288:	f7fe fbbc 	bl	8000a04 <__aeabi_dcmpge>
 800228c:	b148      	cbz	r0, 80022a2 <getTimerPSC+0x9a>
 800228e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002292:	4628      	mov	r0, r5
 8002294:	f7fe ff24 	bl	80010e0 <__aeabi_fcmplt>
 8002298:	f240 33e7 	movw	r3, #999	; 0x3e7
 800229c:	2800      	cmp	r0, #0
 800229e:	bf18      	it	ne
 80022a0:	461c      	movne	r4, r3
	if(   1.00E-00	<= period && period <  10.00E-00)	psc =  9999 ;  //  t max 416.67E-06  min t,   13.65E+00
 80022a2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80022a6:	4628      	mov	r0, r5
 80022a8:	f7fe ff2e 	bl	8001108 <__aeabi_fcmpge>
 80022ac:	b140      	cbz	r0, 80022c0 <getTimerPSC+0xb8>
 80022ae:	4916      	ldr	r1, [pc, #88]	; (8002308 <getTimerPSC+0x100>)
 80022b0:	4628      	mov	r0, r5
 80022b2:	f7fe ff15 	bl	80010e0 <__aeabi_fcmplt>
 80022b6:	f242 730f 	movw	r3, #9999	; 0x270f
 80022ba:	2800      	cmp	r0, #0
 80022bc:	bf18      	it	ne
 80022be:	461c      	movne	r4, r3
	if(  10.00E-00 	<= period && period <= 50.00E-00)	psc =  65535 ;  //  t max   2.73E-03  min t,   89.48E+00
 80022c0:	4911      	ldr	r1, [pc, #68]	; (8002308 <getTimerPSC+0x100>)
 80022c2:	4628      	mov	r0, r5
 80022c4:	f7fe ff20 	bl	8001108 <__aeabi_fcmpge>
 80022c8:	b140      	cbz	r0, 80022dc <getTimerPSC+0xd4>
 80022ca:	4910      	ldr	r1, [pc, #64]	; (800230c <getTimerPSC+0x104>)
 80022cc:	4628      	mov	r0, r5
 80022ce:	f7fe ff11 	bl	80010f4 <__aeabi_fcmple>
 80022d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022d6:	2800      	cmp	r0, #0
 80022d8:	bf18      	it	ne
 80022da:	461c      	movne	r4, r3

	return psc;
}
 80022dc:	4620      	mov	r0, r4
 80022de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{	uint32_t psc = 0;
 80022e0:	2400      	movs	r4, #0
 80022e2:	e7a8      	b.n	8002236 <getTimerPSC+0x2e>
 80022e4:	f3af 8000 	nop.w
 80022e8:	a0b5ed8d 	.word	0xa0b5ed8d
 80022ec:	3ed0c6f7 	.word	0x3ed0c6f7
 80022f0:	88e368f1 	.word	0x88e368f1
 80022f4:	3f04f8b5 	.word	0x3f04f8b5
 80022f8:	47ae147b 	.word	0x47ae147b
 80022fc:	3f847ae1 	.word	0x3f847ae1
 8002300:	9999999a 	.word	0x9999999a
 8002304:	3fb99999 	.word	0x3fb99999
 8002308:	41200000 	.word	0x41200000
 800230c:	42480000 	.word	0x42480000

08002310 <getTimerARR>:

// returns ARR for given Timer-period in secs ( 0 ... 4us) and PSC
// a return of '0' indicates an error, due to impossible timer-period
uint32_t getTimerARR(float period, uint32_t psc)
{	uint32_t	arr = 0,
 8002310:	b570      	push	{r4, r5, r6, lr}
 8002312:	4604      	mov	r4, r0
 8002314:	460e      	mov	r6, r1
	return SystemCoreClock;
 8002316:	4b12      	ldr	r3, [pc, #72]	; (8002360 <getTimerARR+0x50>)
				TCLK = getP1TimClk();
	// sanity-check: 4us > period > 50s and psc within 1 .. 2^16 - 1,
	// otherwiese leave arr to '0'
//	if( 4.00E-06 	<= period 	&& period  	<= 50.00E-00 &&
//		1 			<= psc 		&& psc 		< 65535	)
	float periodCLK = period*TCLK;
 8002318:	6818      	ldr	r0, [r3, #0]
 800231a:	f7fe fceb 	bl	8000cf4 <__aeabi_ui2f>
 800231e:	4621      	mov	r1, r4
 8002320:	f7fe fd40 	bl	8000da4 <__aeabi_fmul>
	float periodCLKbyPSC = periodCLK / (psc+1.0);
 8002324:	f7fe f890 	bl	8000448 <__aeabi_f2d>
 8002328:	4604      	mov	r4, r0
 800232a:	460d      	mov	r5, r1
 800232c:	4630      	mov	r0, r6
 800232e:	f7fe f869 	bl	8000404 <__aeabi_ui2d>
 8002332:	2200      	movs	r2, #0
 8002334:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <getTimerARR+0x54>)
 8002336:	f7fd ff29 	bl	800018c <__adddf3>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	4620      	mov	r0, r4
 8002340:	4629      	mov	r1, r5
 8002342:	f7fe fa03 	bl	800074c <__aeabi_ddiv>
 8002346:	f7fe fbcf 	bl	8000ae8 <__aeabi_d2f>
	arr = (uint32_t) ( periodCLKbyPSC  ) -1.0;
 800234a:	f7fe fef1 	bl	8001130 <__aeabi_f2uiz>
 800234e:	f7fe f859 	bl	8000404 <__aeabi_ui2d>
 8002352:	2200      	movs	r2, #0
 8002354:	4b03      	ldr	r3, [pc, #12]	; (8002364 <getTimerARR+0x54>)
 8002356:	f7fd ff17 	bl	8000188 <__aeabi_dsub>
 800235a:	f7fe fba5 	bl	8000aa8 <__aeabi_d2uiz>
	return arr;
}
 800235e:	bd70      	pop	{r4, r5, r6, pc}
 8002360:	20000000 	.word	0x20000000
 8002364:	3ff00000 	.word	0x3ff00000

08002368 <getTimerPeriod>:

float getTimerPeriod(uint32_t psc, uint32_t arr)
{	return 	(float)((psc+1)*(arr+1))/(getP1TimClk());
 8002368:	b510      	push	{r4, lr}
 800236a:	3101      	adds	r1, #1
 800236c:	fb00 1001 	mla	r0, r0, r1, r1
 8002370:	f7fe fcc0 	bl	8000cf4 <__aeabi_ui2f>
 8002374:	4604      	mov	r4, r0
	return SystemCoreClock;
 8002376:	4b04      	ldr	r3, [pc, #16]	; (8002388 <getTimerPeriod+0x20>)
{	return 	(float)((psc+1)*(arr+1))/(getP1TimClk());
 8002378:	6818      	ldr	r0, [r3, #0]
 800237a:	f7fe fcbb 	bl	8000cf4 <__aeabi_ui2f>
 800237e:	4601      	mov	r1, r0
 8002380:	4620      	mov	r0, r4
 8002382:	f7fe fdc3 	bl	8000f0c <__aeabi_fdiv>
}
 8002386:	bd10      	pop	{r4, pc}
 8002388:	20000000 	.word	0x20000000

0800238c <getTimerState>:

bool	getTimerState(TIM_TypeDef * TIMx)
{	return READ_BIT(TIMx->CR1, TIM_CR1_CEN);
 800238c:	6800      	ldr	r0, [r0, #0]
}
 800238e:	f000 0001 	and.w	r0, r0, #1
 8002392:	4770      	bx	lr

08002394 <initTIM>:

bool initTIM(TIM_TypeDef * TIMx, int psc, int arr)
{
 8002394:	b410      	push	{r4}
 8002396:	4603      	mov	r3, r0
	if( TIM1 == TIMx )
 8002398:	4810      	ldr	r0, [pc, #64]	; (80023dc <initTIM+0x48>)
 800239a:	4283      	cmp	r3, r0
 800239c:	d014      	beq.n	80023c8 <initTIM+0x34>
	{	RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;       // enable TIM2 clock
		// NVIC_EnableIRQ( TIM1_BRK_IRQn);
		NVIC_EnableIRQ( TIM1_UP_IRQn);
	}

	TIMx -> PSC = psc;							// set prescaler
 800239e:	6299      	str	r1, [r3, #40]	; 0x28
	TIMx -> DIER |= TIM_DIER_UIE;				// enable update interrupt
 80023a0:	68d9      	ldr	r1, [r3, #12]
 80023a2:	f041 0101 	orr.w	r1, r1, #1
 80023a6:	60d9      	str	r1, [r3, #12]
	TIMx -> ARR = arr;							// set auto reload register
 80023a8:	62da      	str	r2, [r3, #44]	; 0x2c
	TIMx -> CR1 |= TIM_CR1_ARPE | TIM_CR1_CEN;	// autoreload on, counter enabled
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	f042 0281 	orr.w	r2, r2, #129	; 0x81
 80023b0:	601a      	str	r2, [r3, #0]
	TIMx -> EGR = 1;                  			// trigger update event to reload timer registers
 80023b2:	2001      	movs	r0, #1
 80023b4:	6158      	str	r0, [r3, #20]
	CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	f022 0201 	bic.w	r2, r2, #1
 80023bc:	601a      	str	r2, [r3, #0]
	SET_BIT(TIMx->EGR, TIM_EGR_UG); // ...update event
 80023be:	695a      	ldr	r2, [r3, #20]
 80023c0:	4302      	orrs	r2, r0
 80023c2:	615a      	str	r2, [r3, #20]

	return true;
}
 80023c4:	bc10      	pop	{r4}
 80023c6:	4770      	bx	lr
	{	RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;       // enable TIM2 clock
 80023c8:	4c05      	ldr	r4, [pc, #20]	; (80023e0 <initTIM+0x4c>)
 80023ca:	69a0      	ldr	r0, [r4, #24]
 80023cc:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 80023d0:	61a0      	str	r0, [r4, #24]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80023d2:	4804      	ldr	r0, [pc, #16]	; (80023e4 <initTIM+0x50>)
 80023d4:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 80023d8:	6004      	str	r4, [r0, #0]
 80023da:	e7e0      	b.n	800239e <initTIM+0xa>
 80023dc:	40012c00 	.word	0x40012c00
 80023e0:	40021000 	.word	0x40021000
 80023e4:	e000e100 	.word	0xe000e100

080023e8 <stopTIM>:

bool stopTIM(TIM_TypeDef * TIMx)
{	CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80023e8:	6803      	ldr	r3, [r0, #0]
 80023ea:	f023 0301 	bic.w	r3, r3, #1
 80023ee:	6003      	str	r3, [r0, #0]
	CLEAR_REG(TIMx->CNT);
 80023f0:	2300      	movs	r3, #0
 80023f2:	6243      	str	r3, [r0, #36]	; 0x24
	// SET_BIT(TIMx->EGR, TIM_EGR_UG); // ...update event
	return false == READ_BIT(TIMx->CR1, TIM_CR1_CEN);
 80023f4:	6800      	ldr	r0, [r0, #0]
 80023f6:	f080 0001 	eor.w	r0, r0, #1
}
 80023fa:	f000 0001 	and.w	r0, r0, #1
 80023fe:	4770      	bx	lr

08002400 <startTIM>:

bool startTIM(TIM_TypeDef * TIMx)
{	stopTIM(TIMx);
 8002400:	b510      	push	{r4, lr}
 8002402:	4604      	mov	r4, r0
 8002404:	f7ff fff0 	bl	80023e8 <stopTIM>
	// SET_BIT(TIMx->EGR, TIM_EGR_UG); // ...update event
	SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002408:	6823      	ldr	r3, [r4, #0]
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	6023      	str	r3, [r4, #0]
	return 	true == READ_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002410:	6820      	ldr	r0, [r4, #0]
}
 8002412:	f000 0001 	and.w	r0, r0, #1
 8002416:	bd10      	pop	{r4, pc}

08002418 <resetTIM>:

bool resetTIM(TIM_TypeDef * TIMx)
{	CLEAR_REG(TIMx->CNT);
 8002418:	2300      	movs	r3, #0
 800241a:	6243      	str	r3, [r0, #36]	; 0x24
	return 0x00 == TIMx->CNT;
 800241c:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 800241e:	fab0 f080 	clz	r0, r0
 8002422:	0940      	lsrs	r0, r0, #5
 8002424:	4770      	bx	lr

08002426 <updateEventTIM>:


void updateEventTIM(TIM_TypeDef * TIMx)
{	SET_BIT(TIMx->EGR, TIM_EGR_UG); // ...update event
 8002426:	6943      	ldr	r3, [r0, #20]
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	6143      	str	r3, [r0, #20]
}
 800242e:	4770      	bx	lr

08002430 <setTIM>:


bool setTIM(TIM_TypeDef * TIMx, float period)
{
 8002430:	b570      	push	{r4, r5, r6, lr}
 8002432:	4605      	mov	r5, r0
 8002434:	460c      	mov	r4, r1
	if( TIM_MIN_PERIOD <= period && period <= TIM_MAX_PERIOD )//
 8002436:	4608      	mov	r0, r1
 8002438:	f7fe f806 	bl	8000448 <__aeabi_f2d>
 800243c:	a30e      	add	r3, pc, #56	; (adr r3, 8002478 <setTIM+0x48>)
 800243e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002442:	f7fe fadf 	bl	8000a04 <__aeabi_dcmpge>
 8002446:	b180      	cbz	r0, 800246a <setTIM+0x3a>
 8002448:	490d      	ldr	r1, [pc, #52]	; (8002480 <setTIM+0x50>)
 800244a:	4620      	mov	r0, r4
 800244c:	f7fe fe52 	bl	80010f4 <__aeabi_fcmple>
 8002450:	b168      	cbz	r0, 800246e <setTIM+0x3e>
	{
		int psc = getTimerPSC(period);
 8002452:	4620      	mov	r0, r4
 8002454:	f7ff fed8 	bl	8002208 <getTimerPSC>
 8002458:	4606      	mov	r6, r0
		int arr = getTimerARR(period, psc);
 800245a:	4601      	mov	r1, r0
 800245c:	4620      	mov	r0, r4
 800245e:	f7ff ff57 	bl	8002310 <getTimerARR>

		TIMx -> PSC = psc;
 8002462:	62ae      	str	r6, [r5, #40]	; 0x28
		TIMx -> ARR = arr;
 8002464:	62e8      	str	r0, [r5, #44]	; 0x2c

		return true;
 8002466:	2001      	movs	r0, #1
 8002468:	e000      	b.n	800246c <setTIM+0x3c>
	}else{
		return false;
 800246a:	2000      	movs	r0, #0
	}
}
 800246c:	bd70      	pop	{r4, r5, r6, pc}
		return false;
 800246e:	2000      	movs	r0, #0
 8002470:	e7fc      	b.n	800246c <setTIM+0x3c>
 8002472:	bf00      	nop
 8002474:	f3af 8000 	nop.w
 8002478:	88e368f1 	.word	0x88e368f1
 800247c:	3ee4f8b5 	.word	0x3ee4f8b5
 8002480:	41200000 	.word	0x41200000

08002484 <tim1SetRegUpdating>:

bool tim1RegUpdating = false;
void tim1SetRegUpdating()			{	tim1RegUpdating = true;		}
 8002484:	4b01      	ldr	r3, [pc, #4]	; (800248c <tim1SetRegUpdating+0x8>)
 8002486:	2201      	movs	r2, #1
 8002488:	701a      	strb	r2, [r3, #0]
 800248a:	4770      	bx	lr
 800248c:	20000458 	.word	0x20000458

08002490 <tim1ClrRegUpdating>:
bool tim1GetRegUpdating()			{	return tim1RegUpdating;		}
void tim1ClrRegUpdating()			{	tim1RegUpdating = false;	}
 8002490:	4b01      	ldr	r3, [pc, #4]	; (8002498 <tim1ClrRegUpdating+0x8>)
 8002492:	2200      	movs	r2, #0
 8002494:	701a      	strb	r2, [r3, #0]
 8002496:	4770      	bx	lr
 8002498:	20000458 	.word	0x20000458

0800249c <tim1SetRanout>:
bool tim1GetRegUpdating()			{	return tim1RegUpdating;		}
 800249c:	4b03      	ldr	r3, [pc, #12]	; (80024ac <tim1SetRanout+0x10>)

bool tim1RanOut = false;
void tim1SetRanout()
{	if( !tim1GetRegUpdating() )
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	b913      	cbnz	r3, 80024a8 <tim1SetRanout+0xc>
	tim1RanOut = true;
 80024a2:	4b02      	ldr	r3, [pc, #8]	; (80024ac <tim1SetRanout+0x10>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	705a      	strb	r2, [r3, #1]
}
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	20000458 	.word	0x20000458

080024b0 <tim1GetRanout>:
bool tim1GetRanout()			{	return tim1RanOut;		}
 80024b0:	4b01      	ldr	r3, [pc, #4]	; (80024b8 <tim1GetRanout+0x8>)
 80024b2:	7858      	ldrb	r0, [r3, #1]
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	20000458 	.word	0x20000458

080024bc <tim1ClrRanout>:
void tim1ClrRanout()			{	tim1RanOut = false;	}
 80024bc:	4b01      	ldr	r3, [pc, #4]	; (80024c4 <tim1ClrRanout+0x8>)
 80024be:	2200      	movs	r2, #0
 80024c0:	705a      	strb	r2, [r3, #1]
 80024c2:	4770      	bx	lr
 80024c4:	20000458 	.word	0x20000458

080024c8 <Class_Start>:

// functions to start the virtual COM port:

void Class_Start(void)
{
    LineCoding.BaudRate = 9600;
 80024c8:	4a07      	ldr	r2, [pc, #28]	; (80024e8 <Class_Start+0x20>)
 80024ca:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80024ce:	6013      	str	r3, [r2, #0]
    LineCoding.DataBits = 8;
 80024d0:	2308      	movs	r3, #8
 80024d2:	7193      	strb	r3, [r2, #6]
    LineCoding.Stopbits = 0;
 80024d4:	2300      	movs	r3, #0
 80024d6:	7113      	strb	r3, [r2, #4]
    LineCoding.ParityType = 0;
 80024d8:	7153      	strb	r3, [r2, #5]
    Dtr_Rts = 0;
 80024da:	4a04      	ldr	r2, [pc, #16]	; (80024ec <Class_Start+0x24>)
 80024dc:	8013      	strh	r3, [r2, #0]
    receiving = true;
 80024de:	4a04      	ldr	r2, [pc, #16]	; (80024f0 <Class_Start+0x28>)
 80024e0:	2101      	movs	r1, #1
 80024e2:	7011      	strb	r1, [r2, #0]
    transmitting = false;
 80024e4:	7053      	strb	r3, [r2, #1]
}
 80024e6:	4770      	bx	lr
 80024e8:	2000068c 	.word	0x2000068c
 80024ec:	20000488 	.word	0x20000488
 80024f0:	2000045c 	.word	0x2000045c

080024f4 <Stall>:
void Stall(int physEpNum)
{
    trace("stall\n");
    uint32_t D, S, Maske;
    int logEpNum;
    logEpNum = physEpNum & 0x0F;
 80024f4:	f000 030f 	and.w	r3, r0, #15
        Maske = EP_NoToggleBits | STAT_RX; // without STAT_TX and no DTOG_x
        S = 1 << 12;
    }
    else
    {
        Maske = EP_NoToggleBits | STAT_TX; // without STAT_RX and no DTOG_x
 80024f8:	f64b 728f 	movw	r2, #49039	; 0xbf8f
 80024fc:	f648 71bf 	movw	r1, #36799	; 0x8fbf
 8002500:	4298      	cmp	r0, r3
 8002502:	bf18      	it	ne
 8002504:	460a      	movne	r2, r1
 8002506:	4298      	cmp	r0, r3
 8002508:	bf0c      	ite	eq
 800250a:	f44f 5080 	moveq.w	r0, #4096	; 0x1000
 800250e:	2010      	movne	r0, #16
        S = 1 << 4;
    }
    D = USB_EpRegs(logEpNum);
 8002510:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8002514:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	6819      	ldr	r1, [r3, #0]
    USB_EpRegs(logEpNum) = (D ^ S) & Maske;
 800251c:	4048      	eors	r0, r1
 800251e:	4010      	ands	r0, r2
 8002520:	6018      	str	r0, [r3, #0]
}
 8002522:	4770      	bx	lr

08002524 <UnStall>:
void UnStall(int physEpNum)
{
    trace("unstall\n");
    uint32_t D,Maske;
    uint32_t status;
    if ((physEpNum & 0x80)==0)
 8002524:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002528:	d117      	bne.n	800255a <UnStall+0x36>
    {
        // it is an Out Endpoint
        status = (USB_EpRegs(physEpNum & 0x07) >> 12) & 0x03;
 800252a:	f000 0007 	and.w	r0, r0, #7
 800252e:	f100 5080 	add.w	r0, r0, #268435456	; 0x10000000
 8002532:	f500 50b8 	add.w	r0, r0, #5888	; 0x1700
 8002536:	0080      	lsls	r0, r0, #2
 8002538:	6803      	ldr	r3, [r0, #0]
 800253a:	f3c3 3301 	ubfx	r3, r3, #12, #2
        Maske  = EP_NoToggleBits;
        if (status==1) // Out stalled?
 800253e:	2b01      	cmp	r3, #1
 8002540:	d000      	beq.n	8002544 <UnStall+0x20>
            // toggle bit 5:4  01 -> 10
            D = USB_EpRegs(physEpNum & 0x07) & Maske;
            USB_EpRegs(physEpNum & 0x07) = (D | (3 << 4));
        }
    }
}
 8002542:	4770      	bx	lr
            D = USB_EpRegs(physEpNum & 0x07) & Maske;
 8002544:	6803      	ldr	r3, [r0, #0]
 8002546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800254a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800254e:	041b      	lsls	r3, r3, #16
 8002550:	0c1b      	lsrs	r3, r3, #16
            USB_EpRegs(physEpNum & 0x07) = (D | (2 << 12));
 8002552:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002556:	6003      	str	r3, [r0, #0]
 8002558:	4770      	bx	lr
        status = (USB_EpRegs(physEpNum & 0x07) >> 4) & 0x03;
 800255a:	f000 0007 	and.w	r0, r0, #7
 800255e:	f100 5080 	add.w	r0, r0, #268435456	; 0x10000000
 8002562:	f500 50b8 	add.w	r0, r0, #5888	; 0x1700
 8002566:	0080      	lsls	r0, r0, #2
 8002568:	6803      	ldr	r3, [r0, #0]
 800256a:	f3c3 1301 	ubfx	r3, r3, #4, #2
        if (status==1) //In stalled?
 800256e:	2b01      	cmp	r3, #1
 8002570:	d1e7      	bne.n	8002542 <UnStall+0x1e>
            D = USB_EpRegs(physEpNum & 0x07) & Maske;
 8002572:	6803      	ldr	r3, [r0, #0]
 8002574:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800257c:	041b      	lsls	r3, r3, #16
 800257e:	0c1b      	lsrs	r3, r3, #16
            USB_EpRegs(physEpNum & 0x07) = (D | (3 << 4));
 8002580:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002584:	6003      	str	r3, [r0, #0]
}
 8002586:	e7dc      	b.n	8002542 <UnStall+0x1e>

08002588 <StallLogEP>:

void StallLogEP(int logEpNum)
{
 8002588:	b510      	push	{r4, lr}
 800258a:	4604      	mov	r4, r0
    Stall(logEpNum);
 800258c:	f7ff ffb2 	bl	80024f4 <Stall>
    Stall(logEpNum | phys_In);
 8002590:	f044 0080 	orr.w	r0, r4, #128	; 0x80
 8002594:	f7ff ffae 	bl	80024f4 <Stall>
}
 8002598:	bd10      	pop	{r4, pc}

0800259a <ClearBuffer>:
        sprintf(buf,"clrBuf logEpNum=%i\n",logEpNum);
        trace(buf);
    #endif
    uint32_t D, Maske;
    Maske = EP_NoToggleBits | STAT_RX; // without STAT_TX and no DTOG_x
    D = USB_EpRegs(logEpNum);
 800259a:	f100 5080 	add.w	r0, r0, #268435456	; 0x10000000
 800259e:	f500 50b8 	add.w	r0, r0, #5888	; 0x1700
 80025a2:	0080      	lsls	r0, r0, #2
 80025a4:	6803      	ldr	r3, [r0, #0]
    USB_EpRegs(logEpNum) = (D ^ STAT_RX) & Maske;
 80025a6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80025aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025b2:	041b      	lsls	r3, r3, #16
 80025b4:	0c1b      	lsrs	r3, r3, #16
 80025b6:	6003      	str	r3, [r0, #0]
}
 80025b8:	4770      	bx	lr

080025ba <ValidateBuffer>:
        sprintf(buf,"validateBuf logEpNum=%i\n",logEpNum);
        trace(buf);
    #endif
    uint32_t D, Maske;
    Maske = EP_NoToggleBits | STAT_TX; // without STAT_RX and no DTOG_x
    D = USB_EpRegs(logEpNum);
 80025ba:	f100 5080 	add.w	r0, r0, #268435456	; 0x10000000
 80025be:	f500 50b8 	add.w	r0, r0, #5888	; 0x1700
 80025c2:	0080      	lsls	r0, r0, #2
 80025c4:	6803      	ldr	r3, [r0, #0]
    USB_EpRegs(logEpNum) = (D ^ STAT_TX) & Maske;
 80025c6:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 80025ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025d2:	041b      	lsls	r3, r3, #16
 80025d4:	0c1b      	lsrs	r3, r3, #16
 80025d6:	6003      	str	r3, [r0, #0]
}
 80025d8:	4770      	bx	lr
	...

080025dc <InitEndpoints>:
}

// setup physical endpoints, e.g. after a reset command

void InitEndpoints(void)
{
 80025dc:	b430      	push	{r4, r5}
    trace("InitEndpoints\n");
    USB_CNTR = 1;          // disable reset and int
 80025de:	4827      	ldr	r0, [pc, #156]	; (800267c <InitEndpoints+0xa0>)
 80025e0:	2301      	movs	r3, #1
 80025e2:	6003      	str	r3, [r0, #0]
    CMD.Configuration = 0; // nothing before CONFIGURED
 80025e4:	4a26      	ldr	r2, [pc, #152]	; (8002680 <InitEndpoints+0xa4>)
 80025e6:	2300      	movs	r3, #0
 80025e8:	7593      	strb	r3, [r2, #22]
    CMD.TransferLen = 0;   // nothing to transfer
 80025ea:	6093      	str	r3, [r2, #8]
    CMD.PacketLen = 0;     // nothing to transfer
 80025ec:	60d3      	str	r3, [r2, #12]
    CMD.TransferPtr = 0;
 80025ee:	6113      	str	r3, [r2, #16]
    USB_CNTR = 0;          // all int off
 80025f0:	6003      	str	r3, [r0, #0]

    suspended = false;
 80025f2:	4a24      	ldr	r2, [pc, #144]	; (8002684 <InitEndpoints+0xa8>)
 80025f4:	7093      	strb	r3, [r2, #2]
    configurationSet = false;
 80025f6:	70d3      	strb	r3, [r2, #3]
    transmitting = false;
 80025f8:	7053      	strb	r3, [r2, #1]
    receiving = false;
 80025fa:	7013      	strb	r3, [r2, #0]

    // EP0 = Control, IN and OUT
    EpTable[0].TxOffset = Ep0TxOffset;
 80025fc:	4a22      	ldr	r2, [pc, #136]	; (8002688 <InitEndpoints+0xac>)
 80025fe:	6013      	str	r3, [r2, #0]
    EpTable[0].TxCount = 0;
 8002600:	6053      	str	r3, [r2, #4]
    EpTable[0].RxOffset = Ep0RxOffset;
 8002602:	2140      	movs	r1, #64	; 0x40
 8002604:	6091      	str	r1, [r2, #8]
    EpTable[0].RxCount = EpCtrlLenId;
 8002606:	f44f 4104 	mov.w	r1, #33792	; 0x8400
 800260a:	60d1      	str	r1, [r2, #12]

    // EP1 = Bulk IN (only IN)
    EpTable[1].TxOffset = Ep1TxAOffset;
 800260c:	3210      	adds	r2, #16
 800260e:	2480      	movs	r4, #128	; 0x80
 8002610:	6014      	str	r4, [r2, #0]
    EpTable[1].TxCount = 0;
 8002612:	6053      	str	r3, [r2, #4]
    EpTable[1].RxOffset = Ep1TxBOffset; // here 2nd tx buffer
 8002614:	25c0      	movs	r5, #192	; 0xc0
 8002616:	6095      	str	r5, [r2, #8]
    EpTable[1].RxCount = EpBulkLenId;
 8002618:	60d1      	str	r1, [r2, #12]

    // EP2 = Bulk OUT (only OUT)
    EpTable[2].TxOffset = Ep2RxAOffset;
 800261a:	3210      	adds	r2, #16
 800261c:	f44f 7580 	mov.w	r5, #256	; 0x100
 8002620:	6015      	str	r5, [r2, #0]
    EpTable[2].TxCount = EpBulkLenId;
 8002622:	6051      	str	r1, [r2, #4]
    EpTable[2].RxOffset = Ep2RxBOffset;
 8002624:	f44f 75a0 	mov.w	r5, #320	; 0x140
 8002628:	6095      	str	r5, [r2, #8]
    EpTable[2].RxCount = EpBulkLenId;
 800262a:	60d1      	str	r1, [r2, #12]

    // EP3 = Int, IN and OUT
    EpTable[3].TxOffset = Ep3TxOffset;
 800262c:	3210      	adds	r2, #16
 800262e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8002632:	6011      	str	r1, [r2, #0]
    EpTable[3].TxCount = EpIntLenId;
 8002634:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002638:	6051      	str	r1, [r2, #4]
    EpTable[3].RxOffset = Ep3RxOffset;
 800263a:	f44f 7592 	mov.w	r5, #292	; 0x124
 800263e:	6095      	str	r5, [r2, #8]
    EpTable[3].RxCount = EpIntLenId;
 8002640:	60d1      	str	r1, [r2, #12]

    USB_BTABLE = EpTableOffset;
 8002642:	f5a2 62e0 	sub.w	r2, r2, #1792	; 0x700
 8002646:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800264a:	6011      	str	r1, [r2, #0]

    USB_EP0R =
 800264c:	3a50      	subs	r2, #80	; 0x50
 800264e:	f243 2120 	movw	r1, #12832	; 0x3220
 8002652:	6011      	str	r1, [r2, #0]
        (3 << 12) |              // STAT_RX = 3, rx enabled
        (2 << 4) |               // STAT_TX = 2, send nak
        (1 << 9) |               // EP_TYPE = 1, control
        logEpCtrl;

    USB_EP1R =
 8002654:	3204      	adds	r2, #4
 8002656:	2121      	movs	r1, #33	; 0x21
 8002658:	6011      	str	r1, [r2, #0]
        (0 << 12) |              // STAT_RX = 0, rx disabled
        (2 << 4) |               // STAT_TX = 2, send nak
        (0 << 9) |               // EP_TYPE = 0, bulk
        logEpBulkIn;

    USB_EP2R =
 800265a:	3204      	adds	r2, #4
 800265c:	f243 0102 	movw	r1, #12290	; 0x3002
 8002660:	6011      	str	r1, [r2, #0]
        (3 << 12) |              // STAT_RX = 3, rx enabled
        (0 << 4) |               // STAT_TX = 0, tx disabled
        (0 << 9) |               // EP_TYPE = 0, bulk
        logEpBulkOut;

    USB_EP3R =
 8002662:	3204      	adds	r2, #4
 8002664:	f243 6123 	movw	r1, #13859	; 0x3623
 8002668:	6011      	str	r1, [r2, #0]
        (3 << 12) |              // STAT_RX = 3, rx enabled
        (2 << 4) |               // STAT_TX = 2, send nak
        (3 << 9) |               // EP_TYPE = 0, bulk
        logEpInt;

    USB_ISTR = 0;                // remove pending interrupts
 800266a:	3238      	adds	r2, #56	; 0x38
 800266c:	6013      	str	r3, [r2, #0]
    USB_CNTR =
 800266e:	f44f 431f 	mov.w	r3, #40704	; 0x9f00
 8002672:	6003      	str	r3, [r0, #0]
    USB_DADDR = 0x80 | adr;
 8002674:	4b05      	ldr	r3, [pc, #20]	; (800268c <InitEndpoints+0xb0>)
 8002676:	601c      	str	r4, [r3, #0]
        CTRM |                   // Int after ACK packages in or out
        RESETM |                 // Int after reset
        SUSPM | WKUPM | ESOFM |
        SOFM;                    // Int every 1ms frame
    USB_SetAddress(0);
}
 8002678:	bc30      	pop	{r4, r5}
 800267a:	4770      	bx	lr
 800267c:	40005c40 	.word	0x40005c40
 8002680:	20000694 	.word	0x20000694
 8002684:	2000045c 	.word	0x2000045c
 8002688:	40006320 	.word	0x40006320
 800268c:	40005c4c 	.word	0x40005c4c

08002690 <Nop>:

// for small delays
void Nop(volatile uint32_t count)
{
 8002690:	b082      	sub	sp, #8
 8002692:	9001      	str	r0, [sp, #4]
    while (count)
 8002694:	9b01      	ldr	r3, [sp, #4]
 8002696:	b133      	cbz	r3, 80026a6 <Nop+0x16>
    {
        __asm__ volatile ("NOP");
 8002698:	bf00      	nop
        count--;
 800269a:	9b01      	ldr	r3, [sp, #4]
 800269c:	3b01      	subs	r3, #1
 800269e:	9301      	str	r3, [sp, #4]
    while (count)
 80026a0:	9b01      	ldr	r3, [sp, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f8      	bne.n	8002698 <Nop+0x8>
    }
}
 80026a6:	b002      	add	sp, #8
 80026a8:	4770      	bx	lr
	...

080026ac <ReadControlBlock>:


int ReadControlBlock(uint8_t* PBuffer, int maxlen)
{
 80026ac:	b538      	push	{r3, r4, r5, lr}
    int count, i, n;
    UMEM_FAKEWIDTH D;
    UMEM_FAKEWIDTH* P;

    count = EpTable[0].RxCount & 0x3FF;
 80026ae:	4b12      	ldr	r3, [pc, #72]	; (80026f8 <ReadControlBlock+0x4c>)
 80026b0:	68dc      	ldr	r4, [r3, #12]
 80026b2:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80026b6:	428c      	cmp	r4, r1
 80026b8:	bfa8      	it	ge
 80026ba:	460c      	movge	r4, r1
    if (count > maxlen)
    {
        count = maxlen;
    }

    if (count)
 80026bc:	b1b4      	cbz	r4, 80026ec <ReadControlBlock+0x40>
    {
        P = (UMEM_FAKEWIDTH*) EPControlRxBuffer;
        n = 2;
        i = count;
        D = *P++;
 80026be:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 80026c2:	6819      	ldr	r1, [r3, #0]
        while (i > 0)
 80026c4:	2c00      	cmp	r4, #0
 80026c6:	dd11      	ble.n	80026ec <ReadControlBlock+0x40>
        {
            *PBuffer = D & 0xFF;
 80026c8:	7001      	strb	r1, [r0, #0]
            D = D >> 8;
 80026ca:	0a09      	lsrs	r1, r1, #8
 80026cc:	4602      	mov	r2, r0
 80026ce:	3801      	subs	r0, #1
 80026d0:	4420      	add	r0, r4
        D = *P++;
 80026d2:	4d0a      	ldr	r5, [pc, #40]	; (80026fc <ReadControlBlock+0x50>)
            --n;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e007      	b.n	80026e8 <ReadControlBlock+0x3c>
            *PBuffer = D & 0xFF;
 80026d8:	f802 1f01 	strb.w	r1, [r2, #1]!
            if (!n)
 80026dc:	3b01      	subs	r3, #1
            D = D >> 8;
 80026de:	bf11      	iteee	ne
 80026e0:	0a09      	lsrne	r1, r1, #8
            {
                D = *P++;
 80026e2:	6829      	ldreq	r1, [r5, #0]
 80026e4:	3504      	addeq	r5, #4
                n = 2;
 80026e6:	2302      	moveq	r3, #2
        while (i > 0)
 80026e8:	4282      	cmp	r2, r0
 80026ea:	d1f5      	bne.n	80026d8 <ReadControlBlock+0x2c>
            }
            --i;
            ++PBuffer;
        }
    }
    ClearBuffer(logEpCtrl);
 80026ec:	2000      	movs	r0, #0
 80026ee:	f7ff ff54 	bl	800259a <ClearBuffer>
    return count;
}
 80026f2:	4620      	mov	r0, r4
 80026f4:	bd38      	pop	{r3, r4, r5, pc}
 80026f6:	bf00      	nop
 80026f8:	40006320 	.word	0x40006320
 80026fc:	40006084 	.word	0x40006084

08002700 <WriteControlBlock>:

int WriteControlBlock(uint8_t* PBuffer, int count)
{
 8002700:	b570      	push	{r4, r5, r6, lr}
    #endif
    UMEM_FAKEWIDTH A, L;
    UMEM_FAKEWIDTH* P;
    int i, n;

    if (count > EpCtrlMaxLen)
 8002702:	2940      	cmp	r1, #64	; 0x40
 8002704:	dd07      	ble.n	8002716 <WriteControlBlock+0x16>
    {
        count = EpCtrlMaxLen;
    }
    EpTable[0].TxCount = count;
 8002706:	2640      	movs	r6, #64	; 0x40
 8002708:	4b13      	ldr	r3, [pc, #76]	; (8002758 <WriteControlBlock+0x58>)
 800270a:	605e      	str	r6, [r3, #4]
    {
        A = 0;
        i = 0;
        n = 0;
        P = (UMEM_FAKEWIDTH*) EPControlTxBuffer;
        while (i < count)
 800270c:	4605      	mov	r5, r0
 800270e:	2300      	movs	r3, #0
 8002710:	4912      	ldr	r1, [pc, #72]	; (800275c <WriteControlBlock+0x5c>)
 8002712:	461c      	mov	r4, r3
 8002714:	e00b      	b.n	800272e <WriteControlBlock+0x2e>
    EpTable[0].TxCount = count;
 8002716:	4b10      	ldr	r3, [pc, #64]	; (8002758 <WriteControlBlock+0x58>)
 8002718:	6059      	str	r1, [r3, #4]
    if (count)
 800271a:	b119      	cbz	r1, 8002724 <WriteControlBlock+0x24>
        while (i < count)
 800271c:	2900      	cmp	r1, #0
 800271e:	dd12      	ble.n	8002746 <WriteControlBlock+0x46>
 8002720:	460e      	mov	r6, r1
 8002722:	e7f3      	b.n	800270c <WriteControlBlock+0xc>
 8002724:	460e      	mov	r6, r1
 8002726:	e012      	b.n	800274e <WriteControlBlock+0x4e>
 8002728:	1a2a      	subs	r2, r5, r0
 800272a:	42b2      	cmp	r2, r6
 800272c:	da0d      	bge.n	800274a <WriteControlBlock+0x4a>
        {
            L = *PBuffer++;
 800272e:	f815 2b01 	ldrb.w	r2, [r5], #1
            A = A | (L << n);
 8002732:	409a      	lsls	r2, r3
 8002734:	4314      	orrs	r4, r2
            n += 8;
 8002736:	3308      	adds	r3, #8
            if (n > 8)
 8002738:	2b08      	cmp	r3, #8
 800273a:	ddf5      	ble.n	8002728 <WriteControlBlock+0x28>
            {
                n = 0;
                *P++ = A;
 800273c:	600c      	str	r4, [r1, #0]
 800273e:	3104      	adds	r1, #4
                n = 0;
 8002740:	2400      	movs	r4, #0
                A = 0;
 8002742:	4623      	mov	r3, r4
 8002744:	e7f0      	b.n	8002728 <WriteControlBlock+0x28>
        while (i < count)
 8002746:	460e      	mov	r6, r1
 8002748:	e001      	b.n	800274e <WriteControlBlock+0x4e>
            }
            ++i;
        }
        if (n)
 800274a:	b103      	cbz	r3, 800274e <WriteControlBlock+0x4e>
        {
            *P = A;
 800274c:	600c      	str	r4, [r1, #0]
        }
    }
    ValidateBuffer(logEpCtrl);
 800274e:	2000      	movs	r0, #0
 8002750:	f7ff ff33 	bl	80025ba <ValidateBuffer>
    // Nop(100); // Add extra delay if enumerations fails
    return count;
}
 8002754:	4630      	mov	r0, r6
 8002756:	bd70      	pop	{r4, r5, r6, pc}
 8002758:	40006320 	.word	0x40006320
 800275c:	40006000 	.word	0x40006000

08002760 <ACK>:

void ACK(void)
{
 8002760:	b508      	push	{r3, lr}
    WriteControlBlock((uint8_t*) &always0, 0);
 8002762:	2100      	movs	r1, #0
 8002764:	4801      	ldr	r0, [pc, #4]	; (800276c <ACK+0xc>)
 8002766:	f7ff ffcb 	bl	8002700 <WriteControlBlock>
}
 800276a:	bd08      	pop	{r3, pc}
 800276c:	0800a014 	.word	0x0800a014

08002770 <IsStandardRequest>:

// identify request type in setup package (Standard, Class, Vendor)
bool IsStandardRequest(void)
{
    return (CMD.SetupPacket.bmRequestType & 0x60) == 0;
 8002770:	4b03      	ldr	r3, [pc, #12]	; (8002780 <IsStandardRequest+0x10>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	f013 0f60 	tst.w	r3, #96	; 0x60
}
 8002778:	bf0c      	ite	eq
 800277a:	2001      	moveq	r0, #1
 800277c:	2000      	movne	r0, #0
 800277e:	4770      	bx	lr
 8002780:	20000694 	.word	0x20000694

08002784 <IsClassRequest>:

bool IsClassRequest(void)
{
    return (CMD.SetupPacket.bmRequestType & 0x60) == 0x20;
 8002784:	4b04      	ldr	r3, [pc, #16]	; (8002798 <IsClassRequest+0x14>)
 8002786:	7818      	ldrb	r0, [r3, #0]
 8002788:	f000 0060 	and.w	r0, r0, #96	; 0x60
}
 800278c:	2820      	cmp	r0, #32
 800278e:	bf14      	ite	ne
 8002790:	2000      	movne	r0, #0
 8002792:	2001      	moveq	r0, #1
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	20000694 	.word	0x20000694

0800279c <DescriptorBlockwiseIn>:
    return (CMD.SetupPacket.bmRequestType & 0x60) == 0x40;
}

// start control block control transfer to the host
void DescriptorBlockwiseIn(void)
{
 800279c:	b538      	push	{r3, r4, r5, lr}
    int i, j;
    uint8_t* Q;

    if ((CMD.SetupPacket.bmRequestType & 0x80) == 0)
 800279e:	4b0d      	ldr	r3, [pc, #52]	; (80027d4 <DescriptorBlockwiseIn+0x38>)
 80027a0:	f993 3000 	ldrsb.w	r3, [r3]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	db00      	blt.n	80027aa <DescriptorBlockwiseIn+0xe>
    CMD.TransferLen = CMD.TransferLen - j; // rest number of bytes
    if (CMD.TransferLen < 0)
    {
        CMD.TransferLen = 0;
    }
}
 80027a8:	bd38      	pop	{r3, r4, r5, pc}
    i = CMD.TransferLen;
 80027aa:	4c0a      	ldr	r4, [pc, #40]	; (80027d4 <DescriptorBlockwiseIn+0x38>)
 80027ac:	68a1      	ldr	r1, [r4, #8]
    Q = CMD.TransferPtr; // source
 80027ae:	6925      	ldr	r5, [r4, #16]
    j = WriteControlBlock(Q, i);
 80027b0:	68e3      	ldr	r3, [r4, #12]
 80027b2:	4299      	cmp	r1, r3
 80027b4:	bfa8      	it	ge
 80027b6:	4619      	movge	r1, r3
 80027b8:	4628      	mov	r0, r5
 80027ba:	f7ff ffa1 	bl	8002700 <WriteControlBlock>
    CMD.TransferPtr = Q + j;               // pointer to the rest
 80027be:	4405      	add	r5, r0
 80027c0:	6125      	str	r5, [r4, #16]
    CMD.TransferLen = CMD.TransferLen - j; // rest number of bytes
 80027c2:	68a3      	ldr	r3, [r4, #8]
    if (CMD.TransferLen < 0)
 80027c4:	1a1b      	subs	r3, r3, r0
 80027c6:	d401      	bmi.n	80027cc <DescriptorBlockwiseIn+0x30>
    CMD.TransferLen = CMD.TransferLen - j; // rest number of bytes
 80027c8:	60a3      	str	r3, [r4, #8]
 80027ca:	e7ed      	b.n	80027a8 <DescriptorBlockwiseIn+0xc>
        CMD.TransferLen = 0;
 80027cc:	4b01      	ldr	r3, [pc, #4]	; (80027d4 <DescriptorBlockwiseIn+0x38>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	609a      	str	r2, [r3, #8]
 80027d2:	e7e9      	b.n	80027a8 <DescriptorBlockwiseIn+0xc>
 80027d4:	20000694 	.word	0x20000694

080027d8 <DoSetClearFeature>:

// Functions for processing incoming requests:

// USB-Request "SET FEATURE" and "CLEAR FEATURE"
void DoSetClearFeature(bool value)
{
 80027d8:	b508      	push	{r3, lr}
    int Feature;
    int FuerWen;
    int EP;

    Feature = CMD.SetupPacket.wValue;
 80027da:	4b16      	ldr	r3, [pc, #88]	; (8002834 <DoSetClearFeature+0x5c>)
 80027dc:	885a      	ldrh	r2, [r3, #2]
        char buf[30];
        sprintf(buf,"doSetClearFeature for %02x\n",FuerWen);
        trace(buf);
    #endif

    switch (FuerWen)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d005      	beq.n	80027f0 <DoSetClearFeature+0x18>
 80027e4:	b12b      	cbz	r3, 80027f2 <DoSetClearFeature+0x1a>
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d008      	beq.n	80027fc <DoSetClearFeature+0x24>
            else StallLogEP(logEpCtrl);
            break;

        default:
            trace("forElse\n");
            StallLogEP(logEpCtrl); // send nak
 80027ea:	2000      	movs	r0, #0
 80027ec:	f7ff fecc 	bl	8002588 <StallLogEP>
    }
}
 80027f0:	bd08      	pop	{r3, pc}
            if (Feature == 1)
 80027f2:	2a01      	cmp	r2, #1
 80027f4:	d1fc      	bne.n	80027f0 <DoSetClearFeature+0x18>
                CMD.RemoteWakeup = value;
 80027f6:	4b0f      	ldr	r3, [pc, #60]	; (8002834 <DoSetClearFeature+0x5c>)
 80027f8:	7518      	strb	r0, [r3, #20]
 80027fa:	e7f9      	b.n	80027f0 <DoSetClearFeature+0x18>
            if (Feature == 0) //Feature Stall
 80027fc:	b9b2      	cbnz	r2, 800282c <DoSetClearFeature+0x54>
    EP = CMD.SetupPacket.wIndex;
 80027fe:	4b0d      	ldr	r3, [pc, #52]	; (8002834 <DoSetClearFeature+0x5c>)
 8002800:	889b      	ldrh	r3, [r3, #4]
                switch(EP)
 8002802:	2b81      	cmp	r3, #129	; 0x81
 8002804:	d007      	beq.n	8002816 <DoSetClearFeature+0x3e>
 8002806:	2b83      	cmp	r3, #131	; 0x83
 8002808:	d005      	beq.n	8002816 <DoSetClearFeature+0x3e>
 800280a:	2b02      	cmp	r3, #2
 800280c:	d003      	beq.n	8002816 <DoSetClearFeature+0x3e>
                        StallLogEP(logEpCtrl);
 800280e:	2000      	movs	r0, #0
 8002810:	f7ff feba 	bl	8002588 <StallLogEP>
 8002814:	e7ec      	b.n	80027f0 <DoSetClearFeature+0x18>
                        if (value)
 8002816:	b128      	cbz	r0, 8002824 <DoSetClearFeature+0x4c>
                            Stall(EP);
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff fe6b 	bl	80024f4 <Stall>
                        ACK();
 800281e:	f7ff ff9f 	bl	8002760 <ACK>
                        break;
 8002822:	e7e5      	b.n	80027f0 <DoSetClearFeature+0x18>
                            UnStall(EP);
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff fe7d 	bl	8002524 <UnStall>
 800282a:	e7f8      	b.n	800281e <DoSetClearFeature+0x46>
            else StallLogEP(logEpCtrl);
 800282c:	2000      	movs	r0, #0
 800282e:	f7ff feab 	bl	8002588 <StallLogEP>
 8002832:	e7dd      	b.n	80027f0 <DoSetClearFeature+0x18>
 8002834:	20000694 	.word	0x20000694

08002838 <DoGetStatus>:

// USB-Request "GET STATUS"
void DoGetStatus(void)
{
 8002838:	b500      	push	{lr}
 800283a:	b083      	sub	sp, #12
    uint8_t Buf[4];
    int FuerWen;
    int EP;
    FuerWen = CMD.SetupPacket.bmRequestType;
 800283c:	4a28      	ldr	r2, [pc, #160]	; (80028e0 <DoGetStatus+0xa8>)
 800283e:	7813      	ldrb	r3, [r2, #0]
    EP = CMD.SetupPacket.wIndex;
 8002840:	8891      	ldrh	r1, [r2, #4]

    Buf[0] = 0;
 8002842:	2200      	movs	r2, #0
 8002844:	f88d 2004 	strb.w	r2, [sp, #4]
    Buf[1] = 0;
 8002848:	f88d 2005 	strb.w	r2, [sp, #5]
        char buf[30];
        sprintf(buf,"doGetStatus for %02x\n",FuerWen);
        trace(buf);
    #endif

    switch (FuerWen)
 800284c:	2b81      	cmp	r3, #129	; 0x81
 800284e:	d016      	beq.n	800287e <DoGetStatus+0x46>
 8002850:	2b82      	cmp	r3, #130	; 0x82
 8002852:	d020      	beq.n	8002896 <DoGetStatus+0x5e>
 8002854:	2b80      	cmp	r3, #128	; 0x80
 8002856:	d003      	beq.n	8002860 <DoGetStatus+0x28>
            }
            break;

        default:
            trace("forElse\n");
            StallLogEP(logEpCtrl); // send nak
 8002858:	2000      	movs	r0, #0
 800285a:	f7ff fe95 	bl	8002588 <StallLogEP>
            return;
 800285e:	e017      	b.n	8002890 <DoGetStatus+0x58>
            if (CMD.RemoteWakeup)
 8002860:	4b1f      	ldr	r3, [pc, #124]	; (80028e0 <DoGetStatus+0xa8>)
 8002862:	7d1b      	ldrb	r3, [r3, #20]
 8002864:	b113      	cbz	r3, 800286c <DoGetStatus+0x34>
                Buf[0] |= 2;
 8002866:	2302      	movs	r3, #2
 8002868:	f88d 3004 	strb.w	r3, [sp, #4]
            if (CMD.SelfPowered)
 800286c:	4b1c      	ldr	r3, [pc, #112]	; (80028e0 <DoGetStatus+0xa8>)
 800286e:	7d5b      	ldrb	r3, [r3, #21]
 8002870:	b12b      	cbz	r3, 800287e <DoGetStatus+0x46>
                Buf[0] |= 1;
 8002872:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002876:	f043 0301 	orr.w	r3, r3, #1
 800287a:	f88d 3004 	strb.w	r3, [sp, #4]
    }

    //Buf[1] = 0;
    CMD.PacketLen = EpCtrlMaxLen;
 800287e:	4b18      	ldr	r3, [pc, #96]	; (80028e0 <DoGetStatus+0xa8>)
 8002880:	2240      	movs	r2, #64	; 0x40
 8002882:	60da      	str	r2, [r3, #12]
    CMD.TransferLen = 2;
 8002884:	2202      	movs	r2, #2
 8002886:	609a      	str	r2, [r3, #8]
    CMD.TransferPtr = Buf;
 8002888:	aa01      	add	r2, sp, #4
 800288a:	611a      	str	r2, [r3, #16]
    DescriptorBlockwiseIn();
 800288c:	f7ff ff86 	bl	800279c <DescriptorBlockwiseIn>
}
 8002890:	b003      	add	sp, #12
 8002892:	f85d fb04 	ldr.w	pc, [sp], #4
            switch (EP)
 8002896:	2981      	cmp	r1, #129	; 0x81
 8002898:	d010      	beq.n	80028bc <DoGetStatus+0x84>
 800289a:	2983      	cmp	r1, #131	; 0x83
 800289c:	d017      	beq.n	80028ce <DoGetStatus+0x96>
 800289e:	2902      	cmp	r1, #2
 80028a0:	d003      	beq.n	80028aa <DoGetStatus+0x72>
                    StallLogEP(logEpCtrl); // unknown, stall
 80028a2:	2000      	movs	r0, #0
 80028a4:	f7ff fe70 	bl	8002588 <StallLogEP>
                    return;
 80028a8:	e7f2      	b.n	8002890 <DoGetStatus+0x58>
                    if (((USB_EpRegs(2) >> 12) & 0x03) ==1)
 80028aa:	4b0e      	ldr	r3, [pc, #56]	; (80028e4 <DoGetStatus+0xac>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f3c3 3301 	ubfx	r3, r3, #12, #2
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d1e3      	bne.n	800287e <DoGetStatus+0x46>
                        Buf[0] = 1;
 80028b6:	f88d 3004 	strb.w	r3, [sp, #4]
 80028ba:	e7e0      	b.n	800287e <DoGetStatus+0x46>
                    if (((USB_EpRegs(1) >>  4) & 0x03) ==1)
 80028bc:	4b0a      	ldr	r3, [pc, #40]	; (80028e8 <DoGetStatus+0xb0>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d1da      	bne.n	800287e <DoGetStatus+0x46>
                        Buf[0] = 1;
 80028c8:	f88d 3004 	strb.w	r3, [sp, #4]
 80028cc:	e7d7      	b.n	800287e <DoGetStatus+0x46>
                    if (((USB_EpRegs(3) >>  4) & 0x03) ==1)
 80028ce:	4b07      	ldr	r3, [pc, #28]	; (80028ec <DoGetStatus+0xb4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d1d1      	bne.n	800287e <DoGetStatus+0x46>
                        Buf[0] = 1;
 80028da:	f88d 3004 	strb.w	r3, [sp, #4]
 80028de:	e7ce      	b.n	800287e <DoGetStatus+0x46>
 80028e0:	20000694 	.word	0x20000694
 80028e4:	40005c08 	.word	0x40005c08
 80028e8:	40005c04 	.word	0x40005c04
 80028ec:	40005c0c 	.word	0x40005c0c

080028f0 <DoGetDescriptor>:

// Send descriptors to the host
void DoGetDescriptor(void)
{
 80028f0:	b508      	push	{r3, lr}
    uint16_t Type, Index;
    int aLen;
    const uint8_t* P;

    Type = CMD.SetupPacket.wValue >> 8;
 80028f2:	4b1a      	ldr	r3, [pc, #104]	; (800295c <DoGetDescriptor+0x6c>)
 80028f4:	885a      	ldrh	r2, [r3, #2]
        char buf[30];
        sprintf(buf,"doGetDescr type %04x\n",Type);
        trace(buf);
    #endif

    switch (Type)
 80028f6:	0a13      	lsrs	r3, r2, #8
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d029      	beq.n	8002950 <DoGetDescriptor+0x60>
 80028fc:	2b03      	cmp	r3, #3
 80028fe:	d013      	beq.n	8002928 <DoGetDescriptor+0x38>
 8002900:	2b01      	cmp	r3, #1
 8002902:	d003      	beq.n	800290c <DoGetDescriptor+0x1c>
            break;
        }
        default:
            trace("descElse\n");
            {
                StallLogEP(logEpCtrl); // unknown, stall
 8002904:	2000      	movs	r0, #0
 8002906:	f7ff fe3f 	bl	8002588 <StallLogEP>
 800290a:	e00c      	b.n	8002926 <DoGetDescriptor+0x36>
                P = DeviceDescriptor;
 800290c:	4914      	ldr	r1, [pc, #80]	; (8002960 <DoGetDescriptor+0x70>)
                aLen = LEN_DEVICE;
 800290e:	2012      	movs	r0, #18

    if (aLen < 0)
        return;

    // do not send more that the host wants
    if (aLen > CMD.SetupPacket.wLength)
 8002910:	4b12      	ldr	r3, [pc, #72]	; (800295c <DoGetDescriptor+0x6c>)
 8002912:	88da      	ldrh	r2, [r3, #6]
 8002914:	4282      	cmp	r2, r0
 8002916:	bfa8      	it	ge
 8002918:	4602      	movge	r2, r0
    {
        aLen = CMD.SetupPacket.wLength;
    }
    CMD.PacketLen = EpCtrlMaxLen;
 800291a:	2040      	movs	r0, #64	; 0x40
 800291c:	60d8      	str	r0, [r3, #12]
    CMD.TransferLen = aLen;
 800291e:	609a      	str	r2, [r3, #8]
    CMD.TransferPtr = (uint8_t*) P;
 8002920:	6119      	str	r1, [r3, #16]
    DescriptorBlockwiseIn();
 8002922:	f7ff ff3b 	bl	800279c <DescriptorBlockwiseIn>
}
 8002926:	bd08      	pop	{r3, pc}
            switch (Index)
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	2a03      	cmp	r2, #3
 800292c:	d80c      	bhi.n	8002948 <DoGetDescriptor+0x58>
 800292e:	e8df f002 	tbb	[pc, r2]
 8002932:	1202      	.short	0x1202
 8002934:	0805      	.short	0x0805
                    P = StringLang;
 8002936:	490b      	ldr	r1, [pc, #44]	; (8002964 <DoGetDescriptor+0x74>)
                    aLen = 4;
 8002938:	2004      	movs	r0, #4
 800293a:	e7e9      	b.n	8002910 <DoGetDescriptor+0x20>
                    P = ProductStringDescriptor;
 800293c:	490a      	ldr	r1, [pc, #40]	; (8002968 <DoGetDescriptor+0x78>)
                    aLen = ProductStringDescriptor[0];
 800293e:	2020      	movs	r0, #32
 8002940:	e7e6      	b.n	8002910 <DoGetDescriptor+0x20>
                    P = StringSerial;
 8002942:	490a      	ldr	r1, [pc, #40]	; (800296c <DoGetDescriptor+0x7c>)
                    aLen = StringSerial[0];
 8002944:	201a      	movs	r0, #26
 8002946:	e7e3      	b.n	8002910 <DoGetDescriptor+0x20>
                    StallLogEP(logEpCtrl); // unknown, stall
 8002948:	2000      	movs	r0, #0
 800294a:	f7ff fe1d 	bl	8002588 <StallLogEP>
 800294e:	e7ea      	b.n	8002926 <DoGetDescriptor+0x36>
                P = ConfigDescriptor;
 8002950:	4907      	ldr	r1, [pc, #28]	; (8002970 <DoGetDescriptor+0x80>)
                aLen = (aLen << 8) | ConfigDescriptor[2];
 8002952:	2043      	movs	r0, #67	; 0x43
 8002954:	e7dc      	b.n	8002910 <DoGetDescriptor+0x20>
                    P = VendorStringDescriptor;
 8002956:	4907      	ldr	r1, [pc, #28]	; (8002974 <DoGetDescriptor+0x84>)
                    aLen = VendorStringDescriptor[0];
 8002958:	2010      	movs	r0, #16
 800295a:	e7d9      	b.n	8002910 <DoGetDescriptor+0x20>
 800295c:	20000694 	.word	0x20000694
 8002960:	0800a05c 	.word	0x0800a05c
 8002964:	0800a0ac 	.word	0x0800a0ac
 8002968:	0800a070 	.word	0x0800a070
 800296c:	0800a090 	.word	0x0800a090
 8002970:	0800a018 	.word	0x0800a018
 8002974:	0800a0b0 	.word	0x0800a0b0

08002978 <DoSetAddress>:

// received an adderss
void DoSetAddress(void)
{
 8002978:	b508      	push	{r3, lr}
    ACK();
 800297a:	f7ff fef1 	bl	8002760 <ACK>
    DeviceAddress=CMD.SetupPacket.wValue;
 800297e:	4b02      	ldr	r3, [pc, #8]	; (8002988 <DoSetAddress+0x10>)
 8002980:	789a      	ldrb	r2, [r3, #2]
 8002982:	4b02      	ldr	r3, [pc, #8]	; (800298c <DoSetAddress+0x14>)
 8002984:	711a      	strb	r2, [r3, #4]
}
 8002986:	bd08      	pop	{r3, pc}
 8002988:	20000694 	.word	0x20000694
 800298c:	2000045c 	.word	0x2000045c

08002990 <DoSetConfiguration>:

// USB-Request "SET CONFIGURATION"
void DoSetConfiguration(void)
{
 8002990:	b508      	push	{r3, lr}
    bool haveConfig;

    haveConfig = Class_Compare(CMD.SetupPacket.wValue);
 8002992:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <DoSetConfiguration+0x28>)
    if (CMD.SetupPacket.wValue == 0)
 8002994:	885b      	ldrh	r3, [r3, #2]
 8002996:	b153      	cbz	r3, 80029ae <DoSetConfiguration+0x1e>
        configurationSet = false;
    }
    else if (haveConfig)
    {
        USB_ConfigDevice(true);
        Class_Start();
 8002998:	f7ff fd96 	bl	80024c8 <Class_Start>
        CMD.Configuration = CMD.SetupPacket.wValue & 0xFF;
 800299c:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <DoSetConfiguration+0x28>)
 800299e:	885a      	ldrh	r2, [r3, #2]
 80029a0:	759a      	strb	r2, [r3, #22]
        configurationSet = true;
 80029a2:	4b06      	ldr	r3, [pc, #24]	; (80029bc <DoSetConfiguration+0x2c>)
 80029a4:	2201      	movs	r2, #1
 80029a6:	70da      	strb	r2, [r3, #3]
        ACK();
 80029a8:	f7ff feda 	bl	8002760 <ACK>
    {
        CMD.Configuration = 0;
        configurationSet = false;
        Stall(0);
    }
}
 80029ac:	e003      	b.n	80029b6 <DoSetConfiguration+0x26>
        CMD.Configuration = CMD.SetupPacket.wValue & 0xFF;
 80029ae:	4a02      	ldr	r2, [pc, #8]	; (80029b8 <DoSetConfiguration+0x28>)
 80029b0:	7593      	strb	r3, [r2, #22]
        configurationSet = false;
 80029b2:	4a02      	ldr	r2, [pc, #8]	; (80029bc <DoSetConfiguration+0x2c>)
 80029b4:	70d3      	strb	r3, [r2, #3]
}
 80029b6:	bd08      	pop	{r3, pc}
 80029b8:	20000694 	.word	0x20000694
 80029bc:	2000045c 	.word	0x2000045c

080029c0 <SetLineCodingDataOut>:
    // prepare to receive 7 bytes from host ???
}

// data output for CDC specific USB-Request "SET LINE CODING"
void SetLineCodingDataOut(void)
{
 80029c0:	b508      	push	{r3, lr}
    // read 7 bytes from USB buffer
    ReadControlBlock((uint8_t*) &LineCoding, 7);
 80029c2:	2107      	movs	r1, #7
 80029c4:	4802      	ldr	r0, [pc, #8]	; (80029d0 <SetLineCodingDataOut+0x10>)
 80029c6:	f7ff fe71 	bl	80026ac <ReadControlBlock>
    ACK();
 80029ca:	f7ff fec9 	bl	8002760 <ACK>
}
 80029ce:	bd08      	pop	{r3, pc}
 80029d0:	2000068c 	.word	0x2000068c

080029d4 <VCOM_Read_DTR_RTS>:

// remember DTR and RTS from host
void VCOM_Read_DTR_RTS(void)
{
 80029d4:	b508      	push	{r3, lr}
    Dtr_Rts = CMD.SetupPacket.wValue >> 8;
 80029d6:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <VCOM_Read_DTR_RTS+0x14>)
 80029d8:	885b      	ldrh	r3, [r3, #2]
 80029da:	0a1b      	lsrs	r3, r3, #8
 80029dc:	4a03      	ldr	r2, [pc, #12]	; (80029ec <VCOM_Read_DTR_RTS+0x18>)
 80029de:	8013      	strh	r3, [r2, #0]
    ACK();
 80029e0:	f7ff febe 	bl	8002760 <ACK>
}
 80029e4:	bd08      	pop	{r3, pc}
 80029e6:	bf00      	nop
 80029e8:	20000694 	.word	0x20000694
 80029ec:	20000488 	.word	0x20000488

080029f0 <VCOM_GetLineCoding>:

// CDC specific USB-Request "GET LINE CODING"
void VCOM_GetLineCoding(void)
{
 80029f0:	b508      	push	{r3, lr}
    CMD.PacketLen = EpCtrlMaxLen;
 80029f2:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <VCOM_GetLineCoding+0x18>)
 80029f4:	2240      	movs	r2, #64	; 0x40
 80029f6:	60da      	str	r2, [r3, #12]
    CMD.TransferLen = 7;
 80029f8:	2207      	movs	r2, #7
 80029fa:	609a      	str	r2, [r3, #8]
    CMD.TransferPtr = (uint8_t*) &LineCoding;
 80029fc:	4a03      	ldr	r2, [pc, #12]	; (8002a0c <VCOM_GetLineCoding+0x1c>)
 80029fe:	611a      	str	r2, [r3, #16]
    DescriptorBlockwiseIn(); // send 7 bytes to the host
 8002a00:	f7ff fecc 	bl	800279c <DescriptorBlockwiseIn>
}
 8002a04:	bd08      	pop	{r3, pc}
 8002a06:	bf00      	nop
 8002a08:	20000694 	.word	0x20000694
 8002a0c:	2000068c 	.word	0x2000068c

08002a10 <OnSetup>:

// Setup event

void OnSetup(uint16_t EpCtrlStatus)
{
 8002a10:	b508      	push	{r3, lr}
    ReadControlBlock(&CMD.SetupPacket.bmRequestType, 8);
 8002a12:	2108      	movs	r1, #8
 8002a14:	482b      	ldr	r0, [pc, #172]	; (8002ac4 <OnSetup+0xb4>)
 8002a16:	f7ff fe49 	bl	80026ac <ReadControlBlock>

    if (IsStandardRequest()) // if type=standard
 8002a1a:	f7ff fea9 	bl	8002770 <IsStandardRequest>
 8002a1e:	2800      	cmp	r0, #0
 8002a20:	d037      	beq.n	8002a92 <OnSetup+0x82>
    {
        trace("IsStandardRequest\n");
        switch (CMD.SetupPacket.bRequest)
 8002a22:	4b28      	ldr	r3, [pc, #160]	; (8002ac4 <OnSetup+0xb4>)
 8002a24:	785b      	ldrb	r3, [r3, #1]
 8002a26:	2b0b      	cmp	r3, #11
 8002a28:	d833      	bhi.n	8002a92 <OnSetup+0x82>
 8002a2a:	e8df f003 	tbb	[pc, r3]
 8002a2e:	091c      	.short	0x091c
 8002a30:	06320d32 	.word	0x06320d32
 8002a34:	2f11322c 	.word	0x2f11322c
 8002a38:	271f      	.short	0x271f
        {
            case SET_ADDRESS:
                trace("SET_ADDRESS\n");
                DoSetAddress();
 8002a3a:	f7ff ff9d 	bl	8002978 <DoSetAddress>
                return;
 8002a3e:	e036      	b.n	8002aae <OnSetup+0x9e>

            case CLEAR_FEATURE:
                trace("CLEAR_FEATURE\n");
                DoSetClearFeature(false);
 8002a40:	2000      	movs	r0, #0
 8002a42:	f7ff fec9 	bl	80027d8 <DoSetClearFeature>
                return;
 8002a46:	e032      	b.n	8002aae <OnSetup+0x9e>

            case SET_FEATURE:
                trace("SET_FEATURE\n");
                DoSetClearFeature(true);
 8002a48:	2001      	movs	r0, #1
 8002a4a:	f7ff fec5 	bl	80027d8 <DoSetClearFeature>
                return;
 8002a4e:	e02e      	b.n	8002aae <OnSetup+0x9e>

            case GET_CONFIGURATION:
                trace("GET_CONFIGURATION\n");
                CMD.PacketLen = EpCtrlMaxLen;
 8002a50:	4b1c      	ldr	r3, [pc, #112]	; (8002ac4 <OnSetup+0xb4>)
 8002a52:	2240      	movs	r2, #64	; 0x40
 8002a54:	60da      	str	r2, [r3, #12]
                CMD.TransferLen = 1;
 8002a56:	2201      	movs	r2, #1
 8002a58:	609a      	str	r2, [r3, #8]
                CMD.TransferPtr = (uint8_t*) &CMD.Configuration;
 8002a5a:	f103 0216 	add.w	r2, r3, #22
 8002a5e:	611a      	str	r2, [r3, #16]
                DescriptorBlockwiseIn();
 8002a60:	f7ff fe9c 	bl	800279c <DescriptorBlockwiseIn>
                return;
 8002a64:	e023      	b.n	8002aae <OnSetup+0x9e>

            case GET_STATUS:
                trace("GET_STATUS\n");
                DoGetStatus();
 8002a66:	f7ff fee7 	bl	8002838 <DoGetStatus>
                return;
 8002a6a:	e020      	b.n	8002aae <OnSetup+0x9e>

            case GET_INTERFACE:
                trace("GET_INTERFACE\n");
                CMD.TransferLen = 1;
 8002a6c:	4b15      	ldr	r3, [pc, #84]	; (8002ac4 <OnSetup+0xb4>)
 8002a6e:	2201      	movs	r2, #1
 8002a70:	609a      	str	r2, [r3, #8]
                CMD.TransferPtr = (uint8_t*) &always0;
 8002a72:	4a15      	ldr	r2, [pc, #84]	; (8002ac8 <OnSetup+0xb8>)
 8002a74:	611a      	str	r2, [r3, #16]
                DescriptorBlockwiseIn();
 8002a76:	f7ff fe91 	bl	800279c <DescriptorBlockwiseIn>
                return;
 8002a7a:	e018      	b.n	8002aae <OnSetup+0x9e>

            case SET_INTERFACE:
                trace("SET_INTERFACE\n");
                Class_Start();
 8002a7c:	f7ff fd24 	bl	80024c8 <Class_Start>
                ACK();
 8002a80:	f7ff fe6e 	bl	8002760 <ACK>
                return;
 8002a84:	e013      	b.n	8002aae <OnSetup+0x9e>

            case GET_DESCRIPTOR:
                trace("GET_DESCRIPTOR\n");
                DoGetDescriptor();
 8002a86:	f7ff ff33 	bl	80028f0 <DoGetDescriptor>
                return;
 8002a8a:	e010      	b.n	8002aae <OnSetup+0x9e>

            case SET_CONFIGURATION:
                trace("SET_CONFIGURATION\n");
                DoSetConfiguration();
 8002a8c:	f7ff ff80 	bl	8002990 <DoSetConfiguration>
                return;
 8002a90:	e00d      	b.n	8002aae <OnSetup+0x9e>
        }
        // everything else gets responded with stall, see below
    }

    if (IsClassRequest()) // if type=class
 8002a92:	f7ff fe77 	bl	8002784 <IsClassRequest>
 8002a96:	b138      	cbz	r0, 8002aa8 <OnSetup+0x98>
    {
        trace("IsClassRequest\n");
        switch (CMD.SetupPacket.bRequest)
 8002a98:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <OnSetup+0xb4>)
 8002a9a:	785b      	ldrb	r3, [r3, #1]
 8002a9c:	2b21      	cmp	r3, #33	; 0x21
 8002a9e:	d00a      	beq.n	8002ab6 <OnSetup+0xa6>
 8002aa0:	2b22      	cmp	r3, #34	; 0x22
 8002aa2:	d00b      	beq.n	8002abc <OnSetup+0xac>
 8002aa4:	2b20      	cmp	r3, #32
 8002aa6:	d003      	beq.n	8002ab0 <OnSetup+0xa0>
        trace("IsVendorRequest\n");
    }

    // for all other cases responded with stall
    trace("Stall\n");
    Stall(0);
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	f7ff fd23 	bl	80024f4 <Stall>
}
 8002aae:	bd08      	pop	{r3, pc}
    ACK();
 8002ab0:	f7ff fe56 	bl	8002760 <ACK>
 8002ab4:	e7fb      	b.n	8002aae <OnSetup+0x9e>
                VCOM_GetLineCoding();
 8002ab6:	f7ff ff9b 	bl	80029f0 <VCOM_GetLineCoding>
                return;
 8002aba:	e7f8      	b.n	8002aae <OnSetup+0x9e>
                VCOM_Read_DTR_RTS();
 8002abc:	f7ff ff8a 	bl	80029d4 <VCOM_Read_DTR_RTS>
                return;
 8002ac0:	e7f5      	b.n	8002aae <OnSetup+0x9e>
 8002ac2:	bf00      	nop
 8002ac4:	20000694 	.word	0x20000694
 8002ac8:	0800a014 	.word	0x0800a014

08002acc <OnEpCtrlOut>:

// endpoint interrupts

void OnEpCtrlOut(uint16_t EpCtrlStatus) // Control-EP OUT
{
 8002acc:	b500      	push	{lr}
 8002ace:	b091      	sub	sp, #68	; 0x44
    uint8_t tbuf[EpCtrlMaxLen];

    if (IsStandardRequest()) // if type=standard
 8002ad0:	f7ff fe4e 	bl	8002770 <IsStandardRequest>
 8002ad4:	b958      	cbnz	r0, 8002aee <OnEpCtrlOut+0x22>
        trace("IsStandardRequest\n");
        ReadControlBlock(tbuf, EpCtrlMaxLen);
        return;
    }

    if (IsClassRequest()) // if type=class
 8002ad6:	f7ff fe55 	bl	8002784 <IsClassRequest>
 8002ada:	b190      	cbz	r0, 8002b02 <OnEpCtrlOut+0x36>
    {
        trace("IsClassRequest\n");
        switch (CMD.SetupPacket.bRequest)
 8002adc:	4b0a      	ldr	r3, [pc, #40]	; (8002b08 <OnEpCtrlOut+0x3c>)
 8002ade:	785b      	ldrb	r3, [r3, #1]
 8002ae0:	2b20      	cmp	r3, #32
 8002ae2:	d10b      	bne.n	8002afc <OnEpCtrlOut+0x30>
        {
            case SET_LINE_CODE:
                trace("SET_LINE_CODE\n");
                SetLineCodingDataOut();
 8002ae4:	f7ff ff6c 	bl	80029c0 <SetLineCodingDataOut>
                ACK(); // TODO: check if really needed, SetLineCodingDataOut() calls ACK() already
 8002ae8:	f7ff fe3a 	bl	8002760 <ACK>
                break;
 8002aec:	e003      	b.n	8002af6 <OnEpCtrlOut+0x2a>
        ReadControlBlock(tbuf, EpCtrlMaxLen);
 8002aee:	2140      	movs	r1, #64	; 0x40
 8002af0:	4668      	mov	r0, sp
 8002af2:	f7ff fddb 	bl	80026ac <ReadControlBlock>
        return;
    }

    // we do not check for vendor request here
    ACK();
}
 8002af6:	b011      	add	sp, #68	; 0x44
 8002af8:	f85d fb04 	ldr.w	pc, [sp], #4
                ACK();
 8002afc:	f7ff fe30 	bl	8002760 <ACK>
 8002b00:	e7f9      	b.n	8002af6 <OnEpCtrlOut+0x2a>
    ACK();
 8002b02:	f7ff fe2d 	bl	8002760 <ACK>
 8002b06:	e7f6      	b.n	8002af6 <OnEpCtrlOut+0x2a>
 8002b08:	20000694 	.word	0x20000694

08002b0c <OnEpCtrlIn>:

void OnEpCtrlIn(uint16_t EpCtrlStatus) // Control-EP IN
{
 8002b0c:	b508      	push	{r3, lr}
    if (IsStandardRequest()) // if type=standard
 8002b0e:	f7ff fe2f 	bl	8002770 <IsStandardRequest>
 8002b12:	b188      	cbz	r0, 8002b38 <OnEpCtrlIn+0x2c>
    {
        trace("IsStandardRequest\n");
        switch (CMD.SetupPacket.bRequest)
 8002b14:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <OnEpCtrlIn+0x30>)
 8002b16:	785b      	ldrb	r3, [r3, #1]
 8002b18:	2b06      	cmp	r3, #6
 8002b1a:	d004      	beq.n	8002b26 <OnEpCtrlIn+0x1a>
 8002b1c:	2b21      	cmp	r3, #33	; 0x21
 8002b1e:	d009      	beq.n	8002b34 <OnEpCtrlIn+0x28>
                trace("GET_LINE_CODE\n");
                ACK();
                break;
            default:
                trace("default\n");
                ACK();
 8002b20:	f7ff fe1e 	bl	8002760 <ACK>
 8002b24:	e008      	b.n	8002b38 <OnEpCtrlIn+0x2c>
                if (CMD.TransferLen > 0)
 8002b26:	4b05      	ldr	r3, [pc, #20]	; (8002b3c <OnEpCtrlIn+0x30>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	dd04      	ble.n	8002b38 <OnEpCtrlIn+0x2c>
                    DescriptorBlockwiseIn();
 8002b2e:	f7ff fe35 	bl	800279c <DescriptorBlockwiseIn>
 8002b32:	e001      	b.n	8002b38 <OnEpCtrlIn+0x2c>
                ACK();
 8002b34:	f7ff fe14 	bl	8002760 <ACK>
        }
        return;
    }
}
 8002b38:	bd08      	pop	{r3, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20000694 	.word	0x20000694

08002b40 <EpBulkBeginTransmit>:

// BULK IN and OUT Interrupts

void EpBulkBeginTransmit(void)
{
 8002b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int i, n;
    UMEM_FAKEWIDTH L, A;
    UMEM_FAKEWIDTH* P;

    P = (UMEM_FAKEWIDTH*) EP1TxABuffer;
    i = txw - txr;
 8002b42:	4b1f      	ldr	r3, [pc, #124]	; (8002bc0 <EpBulkBeginTransmit+0x80>)
 8002b44:	6898      	ldr	r0, [r3, #8]
 8002b46:	68db      	ldr	r3, [r3, #12]
    if (i < 0)
 8002b48:	1ac0      	subs	r0, r0, r3
    {
        i += USB_TXLEN; // i = number of bytes to send
 8002b4a:	bf48      	it	mi
 8002b4c:	f500 7080 	addmi.w	r0, r0, #256	; 0x100
    }
    if (i > EpBulkMaxLen)
 8002b50:	2840      	cmp	r0, #64	; 0x40
 8002b52:	dc24      	bgt.n	8002b9e <EpBulkBeginTransmit+0x5e>
        i = EpBulkMaxLen;
    }

    // the last package shall be less than 64 bytes
    // otherwise it gets lost sometimes.
    else if (i==EpBulkMaxLen)
 8002b54:	d031      	beq.n	8002bba <EpBulkBeginTransmit+0x7a>
      i=EpBulkMaxLen-2;
    }

    A = 0;
    n = 0;
    EpTable[1].TxCount = (i & 0x3FF) | EpBulkLenId;
 8002b56:	f3c0 0309 	ubfx	r3, r0, #0, #10
 8002b5a:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8002b5e:	4a19      	ldr	r2, [pc, #100]	; (8002bc4 <EpBulkBeginTransmit+0x84>)
 8002b60:	6053      	str	r3, [r2, #4]
    transmitting = true;
 8002b62:	4b17      	ldr	r3, [pc, #92]	; (8002bc0 <EpBulkBeginTransmit+0x80>)
 8002b64:	2201      	movs	r2, #1
 8002b66:	705a      	strb	r2, [r3, #1]

    while (i)
 8002b68:	bb08      	cbnz	r0, 8002bae <EpBulkBeginTransmit+0x6e>
 8002b6a:	e014      	b.n	8002b96 <EpBulkBeginTransmit+0x56>
 8002b6c:	3801      	subs	r0, #1
 8002b6e:	d010      	beq.n	8002b92 <EpBulkBeginTransmit+0x52>
    {
        L = UsbTxBuf[txr];
 8002b70:	68eb      	ldr	r3, [r5, #12]
 8002b72:	5cfb      	ldrb	r3, [r7, r3]
 8002b74:	b2db      	uxtb	r3, r3
        txr = (txr + 1) & (USB_TXLEN - 1);
 8002b76:	68ea      	ldr	r2, [r5, #12]
 8002b78:	3201      	adds	r2, #1
 8002b7a:	b2d2      	uxtb	r2, r2
 8002b7c:	60ea      	str	r2, [r5, #12]
        A = A | (L << n);
 8002b7e:	408b      	lsls	r3, r1
 8002b80:	431c      	orrs	r4, r3
        n += 8;
 8002b82:	3108      	adds	r1, #8
        if (n > 8)
 8002b84:	2908      	cmp	r1, #8
 8002b86:	ddf1      	ble.n	8002b6c <EpBulkBeginTransmit+0x2c>
        {
            *P++ = A;
 8002b88:	6034      	str	r4, [r6, #0]
 8002b8a:	3604      	adds	r6, #4
            n = 0;
            A = 0;
 8002b8c:	2400      	movs	r4, #0
            n = 0;
 8002b8e:	4621      	mov	r1, r4
 8002b90:	e7ec      	b.n	8002b6c <EpBulkBeginTransmit+0x2c>
        }
        --i;
    }
    if (n)
 8002b92:	b101      	cbz	r1, 8002b96 <EpBulkBeginTransmit+0x56>
    {
        *P = A; // output remaining bytes, if any
 8002b94:	6034      	str	r4, [r6, #0]
    }
    ValidateBuffer(logEpBulkIn);
 8002b96:	2001      	movs	r0, #1
 8002b98:	f7ff fd0f 	bl	80025ba <ValidateBuffer>
}
 8002b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        i = EpBulkMaxLen;
 8002b9e:	2040      	movs	r0, #64	; 0x40
    EpTable[1].TxCount = (i & 0x3FF) | EpBulkLenId;
 8002ba0:	f440 4304 	orr.w	r3, r0, #33792	; 0x8400
 8002ba4:	4a07      	ldr	r2, [pc, #28]	; (8002bc4 <EpBulkBeginTransmit+0x84>)
 8002ba6:	6053      	str	r3, [r2, #4]
    transmitting = true;
 8002ba8:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <EpBulkBeginTransmit+0x80>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	705a      	strb	r2, [r3, #1]
{
 8002bae:	4e06      	ldr	r6, [pc, #24]	; (8002bc8 <EpBulkBeginTransmit+0x88>)
 8002bb0:	2400      	movs	r4, #0
 8002bb2:	4621      	mov	r1, r4
        L = UsbTxBuf[txr];
 8002bb4:	4d02      	ldr	r5, [pc, #8]	; (8002bc0 <EpBulkBeginTransmit+0x80>)
 8002bb6:	4f05      	ldr	r7, [pc, #20]	; (8002bcc <EpBulkBeginTransmit+0x8c>)
 8002bb8:	e7da      	b.n	8002b70 <EpBulkBeginTransmit+0x30>
      i=EpBulkMaxLen-2;
 8002bba:	203e      	movs	r0, #62	; 0x3e
 8002bbc:	e7f0      	b.n	8002ba0 <EpBulkBeginTransmit+0x60>
 8002bbe:	bf00      	nop
 8002bc0:	2000045c 	.word	0x2000045c
 8002bc4:	40006330 	.word	0x40006330
 8002bc8:	40006100 	.word	0x40006100
 8002bcc:	2000048c 	.word	0x2000048c

08002bd0 <OnEpBulkIn>:

// EP1 = Bulk-EP IN
void OnEpBulkIn(void)
{
 8002bd0:	b508      	push	{r3, lr}
    if (txr == txw)
 8002bd2:	4b06      	ldr	r3, [pc, #24]	; (8002bec <OnEpBulkIn+0x1c>)
 8002bd4:	68da      	ldr	r2, [r3, #12]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d002      	beq.n	8002be2 <OnEpBulkIn+0x12>
    {
        transmitting = false;
    }
    else
    {
        EpBulkBeginTransmit();
 8002bdc:	f7ff ffb0 	bl	8002b40 <EpBulkBeginTransmit>
    }
}
 8002be0:	bd08      	pop	{r3, pc}
        transmitting = false;
 8002be2:	4b02      	ldr	r3, [pc, #8]	; (8002bec <OnEpBulkIn+0x1c>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	705a      	strb	r2, [r3, #1]
 8002be8:	e7fa      	b.n	8002be0 <OnEpBulkIn+0x10>
 8002bea:	bf00      	nop
 8002bec:	2000045c 	.word	0x2000045c

08002bf0 <OnEpBulkOut>:

// EP2 = Bulk-EP OUT
void OnEpBulkOut(void)
{
 8002bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    UMEM_FAKEWIDTH D;
    char c;
    UMEM_FAKEWIDTH* P;

    // select bulk EP and calculate number of bytes to read
    avail = EpTable[2].RxCount & 0x3FF;
 8002bf2:	4b22      	ldr	r3, [pc, #136]	; (8002c7c <OnEpBulkOut+0x8c>)
 8002bf4:	68de      	ldr	r6, [r3, #12]
 8002bf6:	f3c6 0609 	ubfx	r6, r6, #0, #10

    i = rxw - rxr;
 8002bfa:	4a21      	ldr	r2, [pc, #132]	; (8002c80 <OnEpBulkOut+0x90>)
 8002bfc:	6913      	ldr	r3, [r2, #16]
 8002bfe:	6952      	ldr	r2, [r2, #20]
    if (i < 0)
 8002c00:	1a9b      	subs	r3, r3, r2
    {
        i += USB_RXLEN;
 8002c02:	bf48      	it	mi
 8002c04:	f503 7380 	addmi.w	r3, r3, #256	; 0x100
    }
    hdroom = USB_RXLEN - i;
 8002c08:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
    if (hdroom <= avail)
 8002c0c:	42ae      	cmp	r6, r5
 8002c0e:	da14      	bge.n	8002c3a <OnEpBulkOut+0x4a>
    }

    P = (UMEM_FAKEWIDTH*) EP2RxBBuffer;
    n = 2;
    i = avail;
    D = *P++; // load 2 bytes
 8002c10:	4b1c      	ldr	r3, [pc, #112]	; (8002c84 <OnEpBulkOut+0x94>)
 8002c12:	681c      	ldr	r4, [r3, #0]
    while (i > 0)
 8002c14:	b33e      	cbz	r6, 8002c66 <OnEpBulkOut+0x76>
    {
        c = D & 0xFF; // LSB first
 8002c16:	b2e0      	uxtb	r0, r4
        UsbRxBuf[rxw] = c;
 8002c18:	4a19      	ldr	r2, [pc, #100]	; (8002c80 <OnEpBulkOut+0x90>)
 8002c1a:	6913      	ldr	r3, [r2, #16]
 8002c1c:	491a      	ldr	r1, [pc, #104]	; (8002c88 <OnEpBulkOut+0x98>)
 8002c1e:	54c8      	strb	r0, [r1, r3]
        rxw = (rxw + 1) & (USB_RXLEN - 1);
 8002c20:	6913      	ldr	r3, [r2, #16]
 8002c22:	3301      	adds	r3, #1
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	6113      	str	r3, [r2, #16]
        D = D >> 8;
 8002c28:	0a24      	lsrs	r4, r4, #8
    i = avail;
 8002c2a:	4631      	mov	r1, r6
    D = *P++; // load 2 bytes
 8002c2c:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8002c8c <OnEpBulkOut+0x9c>
        --n;
 8002c30:	2201      	movs	r2, #1
        UsbRxBuf[rxw] = c;
 8002c32:	4813      	ldr	r0, [pc, #76]	; (8002c80 <OnEpBulkOut+0x90>)
 8002c34:	f8df e050 	ldr.w	lr, [pc, #80]	; 8002c88 <OnEpBulkOut+0x98>
 8002c38:	e013      	b.n	8002c62 <OnEpBulkOut+0x72>
        receiving = false;
 8002c3a:	4b11      	ldr	r3, [pc, #68]	; (8002c80 <OnEpBulkOut+0x90>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        receiving = false;
    }
}
 8002c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        c = D & 0xFF; // LSB first
 8002c42:	b2e3      	uxtb	r3, r4
        UsbRxBuf[rxw] = c;
 8002c44:	6907      	ldr	r7, [r0, #16]
 8002c46:	f80e 3007 	strb.w	r3, [lr, r7]
        rxw = (rxw + 1) & (USB_RXLEN - 1);
 8002c4a:	6903      	ldr	r3, [r0, #16]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	6103      	str	r3, [r0, #16]
        if (!n)
 8002c52:	3a01      	subs	r2, #1
        D = D >> 8;
 8002c54:	bf11      	iteee	ne
 8002c56:	0a24      	lsrne	r4, r4, #8
            D = *P++;
 8002c58:	f8dc 4000 	ldreq.w	r4, [ip]
 8002c5c:	f10c 0c04 	addeq.w	ip, ip, #4
            n = 2;
 8002c60:	2202      	moveq	r2, #2
    while (i > 0)
 8002c62:	3901      	subs	r1, #1
 8002c64:	d1ed      	bne.n	8002c42 <OnEpBulkOut+0x52>
    if (hdroom - avail >= EpBulkMaxLen)
 8002c66:	1bab      	subs	r3, r5, r6
 8002c68:	2b3f      	cmp	r3, #63	; 0x3f
 8002c6a:	dc03      	bgt.n	8002c74 <OnEpBulkOut+0x84>
        receiving = false;
 8002c6c:	4b04      	ldr	r3, [pc, #16]	; (8002c80 <OnEpBulkOut+0x90>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	701a      	strb	r2, [r3, #0]
 8002c72:	e7e5      	b.n	8002c40 <OnEpBulkOut+0x50>
        ClearBuffer(logEpBulkOut); // we read it
 8002c74:	2002      	movs	r0, #2
 8002c76:	f7ff fc90 	bl	800259a <ClearBuffer>
 8002c7a:	e7e1      	b.n	8002c40 <OnEpBulkOut+0x50>
 8002c7c:	40006340 	.word	0x40006340
 8002c80:	2000045c 	.word	0x2000045c
 8002c84:	40006280 	.word	0x40006280
 8002c88:	2000058c 	.word	0x2000058c
 8002c8c:	40006284 	.word	0x40006284

08002c90 <USB_LP_CAN_RX0_IRQHandler>:
}

// USB-Interrupt-Handlers

void NAME_OF_USB_IRQ_HANDLER(void)
{
 8002c90:	b570      	push	{r4, r5, r6, lr}
    //trace("irq\n");
    uint32_t I;
    int EpNum;
    uint16_t EpStatus;

    I = USB_ISTR; // Interrupt-Status
 8002c92:	4b4b      	ldr	r3, [pc, #300]	; (8002dc0 <USB_LP_CAN_RX0_IRQHandler+0x130>)
 8002c94:	681b      	ldr	r3, [r3, #0]

    if (I & PMAOVR) // internal Timeout...
 8002c96:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002c9a:	d003      	beq.n	8002ca4 <USB_LP_CAN_RX0_IRQHandler+0x14>
    {
        trace("PMAOVR\n");
        USB_ISTR = ~PMAOVR; // clear int
 8002c9c:	4a48      	ldr	r2, [pc, #288]	; (8002dc0 <USB_LP_CAN_RX0_IRQHandler+0x130>)
 8002c9e:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
 8002ca2:	6011      	str	r1, [r2, #0]
    }

    if (I & ERR) // data transfer error
 8002ca4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002ca8:	d003      	beq.n	8002cb2 <USB_LP_CAN_RX0_IRQHandler+0x22>
    {
        trace("ERR\n");
        USB_ISTR = ~ERR; // clear int
 8002caa:	4a45      	ldr	r2, [pc, #276]	; (8002dc0 <USB_LP_CAN_RX0_IRQHandler+0x130>)
 8002cac:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
 8002cb0:	6011      	str	r1, [r2, #0]
    }

    if (I & WKUP) // Suspend-->Resume
 8002cb2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002cb6:	d00b      	beq.n	8002cd0 <USB_LP_CAN_RX0_IRQHandler+0x40>
    {
        trace("WKUP\n");
        USB_CNTR &= ~(FSUSP | LP_MODE);
 8002cb8:	4942      	ldr	r1, [pc, #264]	; (8002dc4 <USB_LP_CAN_RX0_IRQHandler+0x134>)
 8002cba:	680a      	ldr	r2, [r1, #0]
 8002cbc:	f022 020c 	bic.w	r2, r2, #12
 8002cc0:	600a      	str	r2, [r1, #0]
        USB_ISTR = ~WKUP; // clear int
 8002cc2:	4a3f      	ldr	r2, [pc, #252]	; (8002dc0 <USB_LP_CAN_RX0_IRQHandler+0x130>)
 8002cc4:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
 8002cc8:	6011      	str	r1, [r2, #0]
        suspended = false;
 8002cca:	4a3f      	ldr	r2, [pc, #252]	; (8002dc8 <USB_LP_CAN_RX0_IRQHandler+0x138>)
 8002ccc:	2100      	movs	r1, #0
 8002cce:	7091      	strb	r1, [r2, #2]
    }

    if (I & SUSP) // after 3 ms Pause --> Suspend
 8002cd0:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8002cd4:	d00b      	beq.n	8002cee <USB_LP_CAN_RX0_IRQHandler+0x5e>
    {
        trace("SUSP\n");
        USB_ISTR = ~SUSP; // clear int
 8002cd6:	4a3a      	ldr	r2, [pc, #232]	; (8002dc0 <USB_LP_CAN_RX0_IRQHandler+0x130>)
 8002cd8:	f46f 6100 	mvn.w	r1, #2048	; 0x800
 8002cdc:	6011      	str	r1, [r2, #0]
        USB_CNTR |= (FSUSP | LP_MODE);
 8002cde:	4939      	ldr	r1, [pc, #228]	; (8002dc4 <USB_LP_CAN_RX0_IRQHandler+0x134>)
 8002ce0:	680a      	ldr	r2, [r1, #0]
 8002ce2:	f042 020c 	orr.w	r2, r2, #12
 8002ce6:	600a      	str	r2, [r1, #0]
        suspended = true;
 8002ce8:	4a37      	ldr	r2, [pc, #220]	; (8002dc8 <USB_LP_CAN_RX0_IRQHandler+0x138>)
 8002cea:	2101      	movs	r1, #1
 8002cec:	7091      	strb	r1, [r2, #2]
    }

    if (I & RESET) // Bus Reset
 8002cee:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002cf2:	d13a      	bne.n	8002d6a <USB_LP_CAN_RX0_IRQHandler+0xda>
        USB_ISTR = ~RESET; // clear int
        InitEndpoints();
        return;
    }

    if (I & SOF) // Start of Frame, comes every 1 ms
 8002cf4:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002cf8:	d00c      	beq.n	8002d14 <USB_LP_CAN_RX0_IRQHandler+0x84>
    {
        //trace("SOF\n");
        USB_ISTR = ~SOF; // clear int
 8002cfa:	4a31      	ldr	r2, [pc, #196]	; (8002dc0 <USB_LP_CAN_RX0_IRQHandler+0x130>)
 8002cfc:	f46f 7100 	mvn.w	r1, #512	; 0x200
 8002d00:	6011      	str	r1, [r2, #0]
        heartbeat++;
 8002d02:	4a31      	ldr	r2, [pc, #196]	; (8002dc8 <USB_LP_CAN_RX0_IRQHandler+0x138>)
 8002d04:	6991      	ldr	r1, [r2, #24]
 8002d06:	3101      	adds	r1, #1
 8002d08:	6191      	str	r1, [r2, #24]
        if (suspended)
 8002d0a:	7892      	ldrb	r2, [r2, #2]
 8002d0c:	b112      	cbz	r2, 8002d14 <USB_LP_CAN_RX0_IRQHandler+0x84>
        {
            trace("SOF -> unsuspend\n");
            suspended = false;
 8002d0e:	4a2e      	ldr	r2, [pc, #184]	; (8002dc8 <USB_LP_CAN_RX0_IRQHandler+0x138>)
 8002d10:	2100      	movs	r1, #0
 8002d12:	7091      	strb	r1, [r2, #2]
        }
    }

    if (I & ESOF) // if a SOF package is missing
 8002d14:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002d18:	d009      	beq.n	8002d2e <USB_LP_CAN_RX0_IRQHandler+0x9e>
    {
        //trace("ESOF\n");
        USB_ISTR = ~ESOF; // clear int
 8002d1a:	4a29      	ldr	r2, [pc, #164]	; (8002dc0 <USB_LP_CAN_RX0_IRQHandler+0x130>)
 8002d1c:	f46f 7180 	mvn.w	r1, #256	; 0x100
 8002d20:	6011      	str	r1, [r2, #0]
        if (!suspended)
 8002d22:	4a29      	ldr	r2, [pc, #164]	; (8002dc8 <USB_LP_CAN_RX0_IRQHandler+0x138>)
 8002d24:	7892      	ldrb	r2, [r2, #2]
 8002d26:	b912      	cbnz	r2, 8002d2e <USB_LP_CAN_RX0_IRQHandler+0x9e>
        {
            trace("ESOF -> suspend\n");
            suspended = true;
 8002d28:	4a27      	ldr	r2, [pc, #156]	; (8002dc8 <USB_LP_CAN_RX0_IRQHandler+0x138>)
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	7091      	strb	r1, [r2, #2]
        }
    }

    // Endpoint Interrupts
    if (I & CTR)
 8002d2e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002d32:	d020      	beq.n	8002d76 <USB_LP_CAN_RX0_IRQHandler+0xe6>
    {
        trace("CTR ");
        USB_ISTR = ~CTR; // clear int
 8002d34:	4a22      	ldr	r2, [pc, #136]	; (8002dc0 <USB_LP_CAN_RX0_IRQHandler+0x130>)
 8002d36:	f46f 4100 	mvn.w	r1, #32768	; 0x8000
 8002d3a:	6011      	str	r1, [r2, #0]
        EpNum = I & MASK_EA; // which EP?
 8002d3c:	f003 040f 	and.w	r4, r3, #15
        EpStatus = USB_EpRegs(EpNum); // read EP status
 8002d40:	f104 5280 	add.w	r2, r4, #268435456	; 0x10000000
 8002d44:	f502 52b8 	add.w	r2, r2, #5888	; 0x1700
 8002d48:	0092      	lsls	r2, r2, #2
 8002d4a:	6811      	ldr	r1, [r2, #0]
 8002d4c:	b288      	uxth	r0, r1

        if (I & DIR) // OUT, also package received
 8002d4e:	f013 0f10 	tst.w	r3, #16
 8002d52:	d019      	beq.n	8002d88 <USB_LP_CAN_RX0_IRQHandler+0xf8>
        {
            trace("out\n");
            USB_EpRegs(EpNum) = EpStatus & ~CTR_RX & EP_NoToggleBits;
 8002d54:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002d58:	400b      	ands	r3, r1
 8002d5a:	6013      	str	r3, [r2, #0]
            if (EpNum == logEpCtrl)
 8002d5c:	b97c      	cbnz	r4, 8002d7e <USB_LP_CAN_RX0_IRQHandler+0xee>
            {
                trace("logEpCtrl\n");
                if (EpStatus & SETUP)
 8002d5e:	f411 6f00 	tst.w	r1, #2048	; 0x800
 8002d62:	d009      	beq.n	8002d78 <USB_LP_CAN_RX0_IRQHandler+0xe8>
                {
                    trace("SETUP\n");
                    OnSetup(EpStatus); // Handle the Setup-package
 8002d64:	f7ff fe54 	bl	8002a10 <OnSetup>
 8002d68:	e005      	b.n	8002d76 <USB_LP_CAN_RX0_IRQHandler+0xe6>
        USB_ISTR = ~RESET; // clear int
 8002d6a:	4b15      	ldr	r3, [pc, #84]	; (8002dc0 <USB_LP_CAN_RX0_IRQHandler+0x130>)
 8002d6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d70:	601a      	str	r2, [r3, #0]
        InitEndpoints();
 8002d72:	f7ff fc33 	bl	80025dc <InitEndpoints>
                trace("logEpInt\n");
                OnEpIntIn();
            }
        }
    }
}
 8002d76:	bd70      	pop	{r4, r5, r6, pc}
                    OnEpCtrlOut(EpStatus); // class specific
 8002d78:	f7ff fea8 	bl	8002acc <OnEpCtrlOut>
 8002d7c:	e7fb      	b.n	8002d76 <USB_LP_CAN_RX0_IRQHandler+0xe6>
            else if (EpNum == logEpBulkOut)
 8002d7e:	2c02      	cmp	r4, #2
 8002d80:	d1f9      	bne.n	8002d76 <USB_LP_CAN_RX0_IRQHandler+0xe6>
                OnEpBulkOut();
 8002d82:	f7ff ff35 	bl	8002bf0 <OnEpBulkOut>
 8002d86:	e7f6      	b.n	8002d76 <USB_LP_CAN_RX0_IRQHandler+0xe6>
            if (DeviceAddress)
 8002d88:	4b0f      	ldr	r3, [pc, #60]	; (8002dc8 <USB_LP_CAN_RX0_IRQHandler+0x138>)
 8002d8a:	791b      	ldrb	r3, [r3, #4]
 8002d8c:	b963      	cbnz	r3, 8002da8 <USB_LP_CAN_RX0_IRQHandler+0x118>
            USB_EpRegs(EpNum) = EpStatus & ~CTR_TX & EP_NoToggleBits;
 8002d8e:	f421 41e1 	bic.w	r1, r1, #28800	; 0x7080
 8002d92:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8002d96:	0409      	lsls	r1, r1, #16
 8002d98:	0c09      	lsrs	r1, r1, #16
 8002d9a:	6011      	str	r1, [r2, #0]
            if (EpNum == logEpCtrl)
 8002d9c:	b16c      	cbz	r4, 8002dba <USB_LP_CAN_RX0_IRQHandler+0x12a>
            else if (EpNum == logEpBulkIn)
 8002d9e:	2c01      	cmp	r4, #1
 8002da0:	d1e9      	bne.n	8002d76 <USB_LP_CAN_RX0_IRQHandler+0xe6>
                OnEpBulkIn();
 8002da2:	f7ff ff15 	bl	8002bd0 <OnEpBulkIn>
 8002da6:	e7e6      	b.n	8002d76 <USB_LP_CAN_RX0_IRQHandler+0xe6>
                USB_SetAddress(DeviceAddress);
 8002da8:	4d07      	ldr	r5, [pc, #28]	; (8002dc8 <USB_LP_CAN_RX0_IRQHandler+0x138>)
 8002daa:	792b      	ldrb	r3, [r5, #4]
    USB_DADDR = 0x80 | adr;
 8002dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002db0:	4e06      	ldr	r6, [pc, #24]	; (8002dcc <USB_LP_CAN_RX0_IRQHandler+0x13c>)
 8002db2:	6033      	str	r3, [r6, #0]
                DeviceAddress=0;
 8002db4:	2300      	movs	r3, #0
 8002db6:	712b      	strb	r3, [r5, #4]
 8002db8:	e7e9      	b.n	8002d8e <USB_LP_CAN_RX0_IRQHandler+0xfe>
                OnEpCtrlIn(EpStatus);
 8002dba:	f7ff fea7 	bl	8002b0c <OnEpCtrlIn>
 8002dbe:	e7da      	b.n	8002d76 <USB_LP_CAN_RX0_IRQHandler+0xe6>
 8002dc0:	40005c44 	.word	0x40005c44
 8002dc4:	40005c40 	.word	0x40005c40
 8002dc8:	2000045c 	.word	0x2000045c
 8002dcc:	40005c4c 	.word	0x40005c4c

08002dd0 <UsbSetup>:


// USB-Setup
// Clock must be set up already before
void UsbSetup(void)
{
 8002dd0:	b538      	push	{r3, r4, r5, lr}
    trace("setup\n");
    uint32_t* P;

    P = (uint32_t*) USB_RAM; // clear RAM
 8002dd2:	4b12      	ldr	r3, [pc, #72]	; (8002e1c <UsbSetup+0x4c>)
    while ((uint32_t) P < (USB_RAM + 1024))
    {
        *P++ = 0;
 8002dd4:	2000      	movs	r0, #0
    while ((uint32_t) P < (USB_RAM + 1024))
 8002dd6:	4912      	ldr	r1, [pc, #72]	; (8002e20 <UsbSetup+0x50>)
        *P++ = 0;
 8002dd8:	1d1a      	adds	r2, r3, #4
 8002dda:	6018      	str	r0, [r3, #0]
 8002ddc:	4613      	mov	r3, r2
    while ((uint32_t) P < (USB_RAM + 1024))
 8002dde:	428a      	cmp	r2, r1
 8002de0:	d1fa      	bne.n	8002dd8 <UsbSetup+0x8>
    }

    CMD.Configuration = 0;
 8002de2:	2400      	movs	r4, #0
 8002de4:	4b0f      	ldr	r3, [pc, #60]	; (8002e24 <UsbSetup+0x54>)
 8002de6:	759c      	strb	r4, [r3, #22]
    configurationSet = false;
 8002de8:	4b0f      	ldr	r3, [pc, #60]	; (8002e28 <UsbSetup+0x58>)
 8002dea:	70dc      	strb	r4, [r3, #3]
    suspended = false;
 8002dec:	709c      	strb	r4, [r3, #2]

    Class_Start();            // setup LineCoding-Block with defaults
 8002dee:	f7ff fb6b 	bl	80024c8 <Class_Start>
    USB_CNTR = 3;             // Powerdown+Reset
 8002df2:	4d0e      	ldr	r5, [pc, #56]	; (8002e2c <UsbSetup+0x5c>)
 8002df4:	2303      	movs	r3, #3
 8002df6:	602b      	str	r3, [r5, #0]
    Nop(100);                 // wait
 8002df8:	2064      	movs	r0, #100	; 0x64
 8002dfa:	f7ff fc49 	bl	8002690 <Nop>
    USB_CNTR = 1;             // Reset
 8002dfe:	2301      	movs	r3, #1
 8002e00:	602b      	str	r3, [r5, #0]
    USB_ISTR = 0;             // clear spurious Ints
 8002e02:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <UsbSetup+0x60>)
 8002e04:	601c      	str	r4, [r3, #0]
    Nop(1000);                // wait
 8002e06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e0a:	f7ff fc41 	bl	8002690 <Nop>
    NVIC_ISER[USB_IRQ_NUMBER/32] = ((uint32_t) 1) << (USB_IRQ_NUMBER % 32);
 8002e0e:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <UsbSetup+0x64>)
 8002e10:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e14:	601a      	str	r2, [r3, #0]
    EnableUsbIRQ();
    InitEndpoints();
 8002e16:	f7ff fbe1 	bl	80025dc <InitEndpoints>
}
 8002e1a:	bd38      	pop	{r3, r4, r5, pc}
 8002e1c:	40006000 	.word	0x40006000
 8002e20:	40006400 	.word	0x40006400
 8002e24:	20000694 	.word	0x20000694
 8002e28:	2000045c 	.word	0x2000045c
 8002e2c:	40005c40 	.word	0x40005c40
 8002e30:	40005c44 	.word	0x40005c44
 8002e34:	e000e100 	.word	0xe000e100

08002e38 <UsbRxBufferContains>:
}

// Check if the receive buffer contains the given character.
bool UsbRxBufferContains(char c)
{
    int i = rxr;
 8002e38:	4a0f      	ldr	r2, [pc, #60]	; (8002e78 <UsbRxBufferContains+0x40>)
 8002e3a:	6953      	ldr	r3, [r2, #20]
    while (i != rxw)
 8002e3c:	6912      	ldr	r2, [r2, #16]
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d015      	beq.n	8002e6e <UsbRxBufferContains+0x36>
    {
        if (UsbRxBuf[i]==c)
 8002e42:	4a0e      	ldr	r2, [pc, #56]	; (8002e7c <UsbRxBufferContains+0x44>)
 8002e44:	5cd2      	ldrb	r2, [r2, r3]
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	4290      	cmp	r0, r2
 8002e4a:	d012      	beq.n	8002e72 <UsbRxBufferContains+0x3a>
{
 8002e4c:	b410      	push	{r4}
    while (i != rxw)
 8002e4e:	490a      	ldr	r1, [pc, #40]	; (8002e78 <UsbRxBufferContains+0x40>)
        if (UsbRxBuf[i]==c)
 8002e50:	4c0a      	ldr	r4, [pc, #40]	; (8002e7c <UsbRxBufferContains+0x44>)
        {
            return true;
        }
        i = (i + 1) & (USB_RXLEN - 1);
 8002e52:	3301      	adds	r3, #1
 8002e54:	b2db      	uxtb	r3, r3
    while (i != rxw)
 8002e56:	690a      	ldr	r2, [r1, #16]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d005      	beq.n	8002e68 <UsbRxBufferContains+0x30>
        if (UsbRxBuf[i]==c)
 8002e5c:	5ce2      	ldrb	r2, [r4, r3]
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	4282      	cmp	r2, r0
 8002e62:	d1f6      	bne.n	8002e52 <UsbRxBufferContains+0x1a>
            return true;
 8002e64:	2001      	movs	r0, #1
 8002e66:	e000      	b.n	8002e6a <UsbRxBufferContains+0x32>
    }
    return false;
 8002e68:	2000      	movs	r0, #0
}
 8002e6a:	bc10      	pop	{r4}
 8002e6c:	4770      	bx	lr
    return false;
 8002e6e:	2000      	movs	r0, #0
 8002e70:	4770      	bx	lr
            return true;
 8002e72:	2001      	movs	r0, #1
}
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	2000045c 	.word	0x2000045c
 8002e7c:	2000058c 	.word	0x2000058c

08002e80 <UsbGetChar_noWait>:


// Receive a character, wait if necessary.
// Returns false if nothing received, aborts on timeout and USB suspend.
bool UsbGetChar_noWait(char* c)
{
 8002e80:	b510      	push	{r4, lr}
    if (rxr != rxw)
 8002e82:	4b1d      	ldr	r3, [pc, #116]	; (8002ef8 <UsbGetChar_noWait+0x78>)
 8002e84:	695a      	ldr	r2, [r3, #20]
 8002e86:	691b      	ldr	r3, [r3, #16]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d031      	beq.n	8002ef0 <UsbGetChar_noWait+0x70>
    {
        // read from buffer
        *c = UsbRxBuf[rxr];
 8002e8c:	4a1a      	ldr	r2, [pc, #104]	; (8002ef8 <UsbGetChar_noWait+0x78>)
 8002e8e:	6953      	ldr	r3, [r2, #20]
 8002e90:	491a      	ldr	r1, [pc, #104]	; (8002efc <UsbGetChar_noWait+0x7c>)
 8002e92:	5ccb      	ldrb	r3, [r1, r3]
 8002e94:	7003      	strb	r3, [r0, #0]
        rxr = (rxr + 1) & (USB_RXLEN - 1);
 8002e96:	6953      	ldr	r3, [r2, #20]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	6153      	str	r3, [r2, #20]

        // trigger receiving
        if (!receiving && !suspended && configurationSet)
 8002e9e:	7813      	ldrb	r3, [r2, #0]
 8002ea0:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8002ea4:	bb2b      	cbnz	r3, 8002ef2 <UsbGetChar_noWait+0x72>
 8002ea6:	7893      	ldrb	r3, [r2, #2]
 8002ea8:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8002eac:	bb0b      	cbnz	r3, 8002ef2 <UsbGetChar_noWait+0x72>
 8002eae:	78d3      	ldrb	r3, [r2, #3]
 8002eb0:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8002eb4:	b90b      	cbnz	r3, 8002eba <UsbGetChar_noWait+0x3a>
                receiving = true;
                ClearBuffer(logEpBulkOut);
            }
            EnableUsbIRQ();
        }
        return true;
 8002eb6:	2401      	movs	r4, #1
 8002eb8:	e01b      	b.n	8002ef2 <UsbGetChar_noWait+0x72>
    NVIC_ICER[USB_IRQ_NUMBER/32] = ((uint32_t) 1) << (USB_IRQ_NUMBER % 32);
 8002eba:	4b11      	ldr	r3, [pc, #68]	; (8002f00 <UsbGetChar_noWait+0x80>)
 8002ebc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ec0:	601a      	str	r2, [r3, #0]
            i = rxw - rxr;
 8002ec2:	4a0d      	ldr	r2, [pc, #52]	; (8002ef8 <UsbGetChar_noWait+0x78>)
 8002ec4:	6913      	ldr	r3, [r2, #16]
 8002ec6:	6952      	ldr	r2, [r2, #20]
            if (i < 0)
 8002ec8:	1a9b      	subs	r3, r3, r2
                i += USB_RXLEN;
 8002eca:	bf48      	it	mi
 8002ecc:	f503 7380 	addmi.w	r3, r3, #256	; 0x100
            hdroom = USB_RXLEN - i;
 8002ed0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
            if (hdroom > EpBulkMaxLen)
 8002ed4:	2b40      	cmp	r3, #64	; 0x40
 8002ed6:	dc04      	bgt.n	8002ee2 <UsbGetChar_noWait+0x62>
    NVIC_ISER[USB_IRQ_NUMBER/32] = ((uint32_t) 1) << (USB_IRQ_NUMBER % 32);
 8002ed8:	4b0a      	ldr	r3, [pc, #40]	; (8002f04 <UsbGetChar_noWait+0x84>)
 8002eda:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	e007      	b.n	8002ef2 <UsbGetChar_noWait+0x72>
                receiving = true;
 8002ee2:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <UsbGetChar_noWait+0x78>)
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	701a      	strb	r2, [r3, #0]
                ClearBuffer(logEpBulkOut);
 8002ee8:	2002      	movs	r0, #2
 8002eea:	f7ff fb56 	bl	800259a <ClearBuffer>
 8002eee:	e7f3      	b.n	8002ed8 <UsbGetChar_noWait+0x58>
    }
    else
    {
        return false;
 8002ef0:	2400      	movs	r4, #0
    }
}
 8002ef2:	4620      	mov	r0, r4
 8002ef4:	bd10      	pop	{r4, pc}
 8002ef6:	bf00      	nop
 8002ef8:	2000045c 	.word	0x2000045c
 8002efc:	2000058c 	.word	0x2000058c
 8002f00:	e000e180 	.word	0xe000e180
 8002f04:	e000e100 	.word	0xe000e100

08002f08 <UsbGetStr>:
// Receive a string until the given size limit, terminator or timeout is reached.
// The received terminator is included in the returned string and also counted.
// Returns number of received characters, aborts on USB suspend.
// If the requested terminator is not '\0', then this gets appended to the string automatically but not counted.
int UsbGetStr(char* buffer, int bufSize, char terminator, uint32_t timeout_ms)
{
 8002f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f0c:	b082      	sub	sp, #8
 8002f0e:	4682      	mov	sl, r0
 8002f10:	4688      	mov	r8, r1
 8002f12:	461d      	mov	r5, r3
    // If the termination character is not '\0' then reserve space for the additional string terminator.
    if(terminator!='\0')
 8002f14:	4691      	mov	r9, r2
 8002f16:	2a00      	cmp	r2, #0
 8002f18:	d03c      	beq.n	8002f94 <UsbGetStr+0x8c>
    {
        bufSize--;
 8002f1a:	f101 38ff 	add.w	r8, r1, #4294967295
    }

    uint32_t start=heartbeat;
 8002f1e:	4b20      	ldr	r3, [pc, #128]	; (8002fa0 <UsbGetStr+0x98>)
 8002f20:	699e      	ldr	r6, [r3, #24]
    int count=0;
    while(count<bufSize)
 8002f22:	f1b8 0f00 	cmp.w	r8, #0
 8002f26:	dd24      	ble.n	8002f72 <UsbGetStr+0x6a>
{
 8002f28:	2700      	movs	r7, #0
    {
        // wait for received character
        while(1)
        {
            if (rxr != rxw)
 8002f2a:	4c1d      	ldr	r4, [pc, #116]	; (8002fa0 <UsbGetStr+0x98>)
 8002f2c:	6962      	ldr	r2, [r4, #20]
 8002f2e:	6923      	ldr	r3, [r4, #16]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d120      	bne.n	8002f76 <UsbGetStr+0x6e>
            {
                // ready read received byte, stop waiting
                break;
            }

            if (!configurationSet || suspended)
 8002f34:	78e3      	ldrb	r3, [r4, #3]
 8002f36:	b193      	cbz	r3, 8002f5e <UsbGetStr+0x56>
 8002f38:	78a3      	ldrb	r3, [r4, #2]
 8002f3a:	b983      	cbnz	r3, 8002f5e <UsbGetStr+0x56>
            {
                // USB is inactive, abort
                goto done;
            }

            if (heartbeat-start <= timeout_ms)
 8002f3c:	69a3      	ldr	r3, [r4, #24]
 8002f3e:	1b9b      	subs	r3, r3, r6
 8002f40:	429d      	cmp	r5, r3
 8002f42:	d20c      	bcs.n	8002f5e <UsbGetStr+0x56>
            {
                // timeout, abort
                goto done;
            }

            __asm__ volatile ("wfi"); // wait
 8002f44:	bf30      	wfi
            if (rxr != rxw)
 8002f46:	6962      	ldr	r2, [r4, #20]
 8002f48:	6923      	ldr	r3, [r4, #16]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d113      	bne.n	8002f76 <UsbGetStr+0x6e>
            if (!configurationSet || suspended)
 8002f4e:	78e3      	ldrb	r3, [r4, #3]
 8002f50:	b12b      	cbz	r3, 8002f5e <UsbGetStr+0x56>
 8002f52:	78a3      	ldrb	r3, [r4, #2]
 8002f54:	b91b      	cbnz	r3, 8002f5e <UsbGetStr+0x56>
            if (heartbeat-start <= timeout_ms)
 8002f56:	69a3      	ldr	r3, [r4, #24]
 8002f58:	1b9b      	subs	r3, r3, r6
 8002f5a:	42ab      	cmp	r3, r5
 8002f5c:	d8f2      	bhi.n	8002f44 <UsbGetStr+0x3c>
            }
        }
    }

    done:
    if(terminator!='\0')
 8002f5e:	f1b9 0f00 	cmp.w	r9, #0
 8002f62:	d002      	beq.n	8002f6a <UsbGetStr+0x62>
    {
        buffer[count]='\0';
 8002f64:	2300      	movs	r3, #0
 8002f66:	f80a 3007 	strb.w	r3, [sl, r7]
    }
    return count;
}
 8002f6a:	4638      	mov	r0, r7
 8002f6c:	b002      	add	sp, #8
 8002f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int count=0;
 8002f72:	2700      	movs	r7, #0
 8002f74:	e7f6      	b.n	8002f64 <UsbGetStr+0x5c>
        if (UsbGetChar_noWait(&c))
 8002f76:	f10d 0007 	add.w	r0, sp, #7
 8002f7a:	f7ff ff81 	bl	8002e80 <UsbGetChar_noWait>
 8002f7e:	b130      	cbz	r0, 8002f8e <UsbGetStr+0x86>
            buffer[count]=c;
 8002f80:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002f84:	f80a 3007 	strb.w	r3, [sl, r7]
            count++;
 8002f88:	3701      	adds	r7, #1
            if (c==terminator)
 8002f8a:	454b      	cmp	r3, r9
 8002f8c:	d0e7      	beq.n	8002f5e <UsbGetStr+0x56>
    while(count<bufSize)
 8002f8e:	4547      	cmp	r7, r8
 8002f90:	dbcc      	blt.n	8002f2c <UsbGetStr+0x24>
 8002f92:	e7e4      	b.n	8002f5e <UsbGetStr+0x56>
    uint32_t start=heartbeat;
 8002f94:	4b02      	ldr	r3, [pc, #8]	; (8002fa0 <UsbGetStr+0x98>)
 8002f96:	699e      	ldr	r6, [r3, #24]
    while(count<bufSize)
 8002f98:	2900      	cmp	r1, #0
 8002f9a:	dcc5      	bgt.n	8002f28 <UsbGetStr+0x20>
    int count=0;
 8002f9c:	2700      	movs	r7, #0
 8002f9e:	e7e4      	b.n	8002f6a <UsbGetStr+0x62>
 8002fa0:	2000045c 	.word	0x2000045c

08002fa4 <UsbActive>:


// true if the USB connection is established and not suspended
bool UsbActive (void)
{
    bool res = configurationSet && !suspended;
 8002fa4:	4b05      	ldr	r3, [pc, #20]	; (8002fbc <UsbActive+0x18>)
 8002fa6:	78db      	ldrb	r3, [r3, #3]
 8002fa8:	b133      	cbz	r3, 8002fb8 <UsbActive+0x14>
 8002faa:	4b04      	ldr	r3, [pc, #16]	; (8002fbc <UsbActive+0x18>)
 8002fac:	7898      	ldrb	r0, [r3, #2]
 8002fae:	f080 0001 	eor.w	r0, r0, #1
    return res;
}
 8002fb2:	f000 0001 	and.w	r0, r0, #1
 8002fb6:	4770      	bx	lr
    bool res = configurationSet && !suspended;
 8002fb8:	2000      	movs	r0, #0
 8002fba:	e7fa      	b.n	8002fb2 <UsbActive+0xe>
 8002fbc:	2000045c 	.word	0x2000045c

08002fc0 <UsbSendChar_noWait>:
// Send a character to the host (via send buffer).
// Returns false if the buffer is full.
bool UsbSendChar_noWait(char c)
{
    // check space
    int i = (txw + 1) & (USB_TXLEN - 1);
 8002fc0:	4a0e      	ldr	r2, [pc, #56]	; (8002ffc <UsbSendChar_noWait+0x3c>)
 8002fc2:	6893      	ldr	r3, [r2, #8]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	b2db      	uxtb	r3, r3
    if (i == txr)
 8002fc8:	68d2      	ldr	r2, [r2, #12]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d014      	beq.n	8002ff8 <UsbSendChar_noWait+0x38>
{
 8002fce:	b510      	push	{r4, lr}
    {
        return false;
    }

    // write into the buffer
    UsbTxBuf[txw] = c;
 8002fd0:	4a0a      	ldr	r2, [pc, #40]	; (8002ffc <UsbSendChar_noWait+0x3c>)
 8002fd2:	6891      	ldr	r1, [r2, #8]
 8002fd4:	4c0a      	ldr	r4, [pc, #40]	; (8003000 <UsbSendChar_noWait+0x40>)
 8002fd6:	5460      	strb	r0, [r4, r1]
    txw = i;
 8002fd8:	6093      	str	r3, [r2, #8]
    // Then you may call UsbTxFlush() to trigger sending

    // if (((txw + 1) & (txLen - 1)) == txr)
    {
        // trigger sending
        if (!transmitting)
 8002fda:	7853      	ldrb	r3, [r2, #1]
 8002fdc:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8002fe0:	b103      	cbz	r3, 8002fe4 <UsbSendChar_noWait+0x24>
            EpBulkBeginTransmit();
            EnableUsbIRQ();
        }
    }
    return true;
}
 8002fe2:	bd10      	pop	{r4, pc}
    NVIC_ICER[USB_IRQ_NUMBER/32] = ((uint32_t) 1) << (USB_IRQ_NUMBER % 32);
 8002fe4:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
 8002fe8:	4b06      	ldr	r3, [pc, #24]	; (8003004 <UsbSendChar_noWait+0x44>)
 8002fea:	601c      	str	r4, [r3, #0]
            EpBulkBeginTransmit();
 8002fec:	f7ff fda8 	bl	8002b40 <EpBulkBeginTransmit>
    NVIC_ISER[USB_IRQ_NUMBER/32] = ((uint32_t) 1) << (USB_IRQ_NUMBER % 32);
 8002ff0:	4b05      	ldr	r3, [pc, #20]	; (8003008 <UsbSendChar_noWait+0x48>)
 8002ff2:	601c      	str	r4, [r3, #0]
    return true;
 8002ff4:	2001      	movs	r0, #1
 8002ff6:	e7f4      	b.n	8002fe2 <UsbSendChar_noWait+0x22>
        return false;
 8002ff8:	2000      	movs	r0, #0
}
 8002ffa:	4770      	bx	lr
 8002ffc:	2000045c 	.word	0x2000045c
 8003000:	2000048c 	.word	0x2000048c
 8003004:	e000e180 	.word	0xe000e180
 8003008:	e000e100 	.word	0xe000e100

0800300c <UsbSendStr>:

// Send a string to the host.
// Waits if buffer is full, aborts on timeout or USB suspend.
// Returns the number of characters that have been sent.
int UsbSendStr(char* str, uint32_t timeout_ms)
{
 800300c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003010:	4607      	mov	r7, r0
 8003012:	460e      	mov	r6, r1
    uint32_t start=heartbeat;
 8003014:	4b17      	ldr	r3, [pc, #92]	; (8003074 <UsbSendStr+0x68>)
 8003016:	699d      	ldr	r5, [r3, #24]
    int count=0;
 8003018:	f04f 0800 	mov.w	r8, #0
    while (*str)
    {
        // Wait until there is space in the send buffer
        while(1)
        {
            if (!configurationSet || suspended)
 800301c:	461c      	mov	r4, r3
    while (*str)
 800301e:	783b      	ldrb	r3, [r7, #0]
 8003020:	b1e3      	cbz	r3, 800305c <UsbSendStr+0x50>
            if (!configurationSet || suspended)
 8003022:	78e3      	ldrb	r3, [r4, #3]
 8003024:	b1d3      	cbz	r3, 800305c <UsbSendStr+0x50>
 8003026:	78a3      	ldrb	r3, [r4, #2]
 8003028:	b9c3      	cbnz	r3, 800305c <UsbSendStr+0x50>
            {
                // USB is inactive, abort
                return count;
            }

            if (((txw + 1) & (USB_TXLEN - 1)) != txr)
 800302a:	68a3      	ldr	r3, [r4, #8]
 800302c:	68e2      	ldr	r2, [r4, #12]
 800302e:	3301      	adds	r3, #1
 8003030:	b2db      	uxtb	r3, r3
 8003032:	4293      	cmp	r3, r2
 8003034:	d115      	bne.n	8003062 <UsbSendStr+0x56>
            {
                // ready to send, stop waiting
                break;
            }

            if (heartbeat-start > timeout_ms)
 8003036:	69a3      	ldr	r3, [r4, #24]
 8003038:	1b5b      	subs	r3, r3, r5
 800303a:	429e      	cmp	r6, r3
 800303c:	d30e      	bcc.n	800305c <UsbSendStr+0x50>
            {
                // timeout, abort
                return count;
            }

            __asm__ volatile ("wfi"); // wait
 800303e:	bf30      	wfi
            if (!configurationSet || suspended)
 8003040:	78e3      	ldrb	r3, [r4, #3]
 8003042:	b15b      	cbz	r3, 800305c <UsbSendStr+0x50>
 8003044:	78a3      	ldrb	r3, [r4, #2]
 8003046:	b94b      	cbnz	r3, 800305c <UsbSendStr+0x50>
            if (((txw + 1) & (USB_TXLEN - 1)) != txr)
 8003048:	68a3      	ldr	r3, [r4, #8]
 800304a:	68e2      	ldr	r2, [r4, #12]
 800304c:	3301      	adds	r3, #1
 800304e:	b2db      	uxtb	r3, r3
 8003050:	4293      	cmp	r3, r2
 8003052:	d106      	bne.n	8003062 <UsbSendStr+0x56>
            if (heartbeat-start > timeout_ms)
 8003054:	69a3      	ldr	r3, [r4, #24]
 8003056:	1b5b      	subs	r3, r3, r5
 8003058:	42b3      	cmp	r3, r6
 800305a:	d9f0      	bls.n	800303e <UsbSendStr+0x32>
            str++;
            count++;
        }
    }
    return count;
}
 800305c:	4640      	mov	r0, r8
 800305e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (UsbSendChar_noWait(c))
 8003062:	7838      	ldrb	r0, [r7, #0]
 8003064:	f7ff ffac 	bl	8002fc0 <UsbSendChar_noWait>
 8003068:	2800      	cmp	r0, #0
 800306a:	d0d8      	beq.n	800301e <UsbSendStr+0x12>
            str++;
 800306c:	3701      	adds	r7, #1
            count++;
 800306e:	f108 0801 	add.w	r8, r8, #1
 8003072:	e7d4      	b.n	800301e <UsbSendStr+0x12>
 8003074:	2000045c 	.word	0x2000045c

08003078 <Reset_Handler>:
 8003078:	480d      	ldr	r0, [pc, #52]	; (80030b0 <LoopForever+0x2>)
 800307a:	4685      	mov	sp, r0
 800307c:	480d      	ldr	r0, [pc, #52]	; (80030b4 <LoopForever+0x6>)
 800307e:	490e      	ldr	r1, [pc, #56]	; (80030b8 <LoopForever+0xa>)
 8003080:	4a0e      	ldr	r2, [pc, #56]	; (80030bc <LoopForever+0xe>)
 8003082:	2300      	movs	r3, #0
 8003084:	e002      	b.n	800308c <LoopCopyDataInit>

08003086 <CopyDataInit>:
 8003086:	58d4      	ldr	r4, [r2, r3]
 8003088:	50c4      	str	r4, [r0, r3]
 800308a:	3304      	adds	r3, #4

0800308c <LoopCopyDataInit>:
 800308c:	18c4      	adds	r4, r0, r3
 800308e:	428c      	cmp	r4, r1
 8003090:	d3f9      	bcc.n	8003086 <CopyDataInit>
 8003092:	4a0b      	ldr	r2, [pc, #44]	; (80030c0 <LoopForever+0x12>)
 8003094:	4c0b      	ldr	r4, [pc, #44]	; (80030c4 <LoopForever+0x16>)
 8003096:	2300      	movs	r3, #0
 8003098:	e001      	b.n	800309e <LoopFillZerobss>

0800309a <FillZerobss>:
 800309a:	6013      	str	r3, [r2, #0]
 800309c:	3204      	adds	r2, #4

0800309e <LoopFillZerobss>:
 800309e:	42a2      	cmp	r2, r4
 80030a0:	d3fb      	bcc.n	800309a <FillZerobss>
 80030a2:	f3af 8000 	nop.w
 80030a6:	f000 f831 	bl	800310c <__libc_init_array>
 80030aa:	f7fe fef1 	bl	8001e90 <main>

080030ae <LoopForever>:
 80030ae:	e7fe      	b.n	80030ae <LoopForever>
 80030b0:	20010000 	.word	0x20010000
 80030b4:	20000000 	.word	0x20000000
 80030b8:	200001d4 	.word	0x200001d4
 80030bc:	0800a464 	.word	0x0800a464
 80030c0:	200001d4 	.word	0x200001d4
 80030c4:	200006bc 	.word	0x200006bc

080030c8 <ADC1_2_IRQHandler>:
 80030c8:	e7fe      	b.n	80030c8 <ADC1_2_IRQHandler>
	...

080030cc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
void _sbrk(int incr)
{
 80030cc:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80030ce:	4b0a      	ldr	r3, [pc, #40]	; (80030f8 <_sbrk+0x2c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	b143      	cbz	r3, 80030e6 <_sbrk+0x1a>
		heap_end = &end;

	prev_heap_end = heap_end;
 80030d4:	4b08      	ldr	r3, [pc, #32]	; (80030f8 <_sbrk+0x2c>)
	if (heap_end + incr > stack_ptr)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4418      	add	r0, r3
 80030da:	466b      	mov	r3, sp
 80030dc:	4298      	cmp	r0, r3
 80030de:	d806      	bhi.n	80030ee <_sbrk+0x22>
	{
		errno = ENOMEM;
		return (void) -1;
	}

	heap_end += incr;
 80030e0:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <_sbrk+0x2c>)
 80030e2:	6018      	str	r0, [r3, #0]

	return (void) prev_heap_end;
}
 80030e4:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80030e6:	4b04      	ldr	r3, [pc, #16]	; (80030f8 <_sbrk+0x2c>)
 80030e8:	4a04      	ldr	r2, [pc, #16]	; (80030fc <_sbrk+0x30>)
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	e7f2      	b.n	80030d4 <_sbrk+0x8>
		errno = ENOMEM;
 80030ee:	f000 f807 	bl	8003100 <__errno>
 80030f2:	230c      	movs	r3, #12
 80030f4:	6003      	str	r3, [r0, #0]
		return (void) -1;
 80030f6:	e7f5      	b.n	80030e4 <_sbrk+0x18>
 80030f8:	20000478 	.word	0x20000478
 80030fc:	200006c0 	.word	0x200006c0

08003100 <__errno>:
 8003100:	4b01      	ldr	r3, [pc, #4]	; (8003108 <__errno+0x8>)
 8003102:	6818      	ldr	r0, [r3, #0]
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	20000004 	.word	0x20000004

0800310c <__libc_init_array>:
 800310c:	b570      	push	{r4, r5, r6, lr}
 800310e:	2500      	movs	r5, #0
 8003110:	4e0c      	ldr	r6, [pc, #48]	; (8003144 <__libc_init_array+0x38>)
 8003112:	4c0d      	ldr	r4, [pc, #52]	; (8003148 <__libc_init_array+0x3c>)
 8003114:	1ba4      	subs	r4, r4, r6
 8003116:	10a4      	asrs	r4, r4, #2
 8003118:	42a5      	cmp	r5, r4
 800311a:	d109      	bne.n	8003130 <__libc_init_array+0x24>
 800311c:	f004 f9d0 	bl	80074c0 <_init>
 8003120:	2500      	movs	r5, #0
 8003122:	4e0a      	ldr	r6, [pc, #40]	; (800314c <__libc_init_array+0x40>)
 8003124:	4c0a      	ldr	r4, [pc, #40]	; (8003150 <__libc_init_array+0x44>)
 8003126:	1ba4      	subs	r4, r4, r6
 8003128:	10a4      	asrs	r4, r4, #2
 800312a:	42a5      	cmp	r5, r4
 800312c:	d105      	bne.n	800313a <__libc_init_array+0x2e>
 800312e:	bd70      	pop	{r4, r5, r6, pc}
 8003130:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003134:	4798      	blx	r3
 8003136:	3501      	adds	r5, #1
 8003138:	e7ee      	b.n	8003118 <__libc_init_array+0xc>
 800313a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800313e:	4798      	blx	r3
 8003140:	3501      	adds	r5, #1
 8003142:	e7f2      	b.n	800312a <__libc_init_array+0x1e>
 8003144:	0800a45c 	.word	0x0800a45c
 8003148:	0800a45c 	.word	0x0800a45c
 800314c:	0800a45c 	.word	0x0800a45c
 8003150:	0800a460 	.word	0x0800a460

08003154 <memset>:
 8003154:	4603      	mov	r3, r0
 8003156:	4402      	add	r2, r0
 8003158:	4293      	cmp	r3, r2
 800315a:	d100      	bne.n	800315e <memset+0xa>
 800315c:	4770      	bx	lr
 800315e:	f803 1b01 	strb.w	r1, [r3], #1
 8003162:	e7f9      	b.n	8003158 <memset+0x4>

08003164 <__cvt>:
 8003164:	2b00      	cmp	r3, #0
 8003166:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800316a:	461e      	mov	r6, r3
 800316c:	bfbb      	ittet	lt
 800316e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003172:	461e      	movlt	r6, r3
 8003174:	2300      	movge	r3, #0
 8003176:	232d      	movlt	r3, #45	; 0x2d
 8003178:	b088      	sub	sp, #32
 800317a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800317c:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8003180:	f027 0720 	bic.w	r7, r7, #32
 8003184:	2f46      	cmp	r7, #70	; 0x46
 8003186:	4614      	mov	r4, r2
 8003188:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800318a:	700b      	strb	r3, [r1, #0]
 800318c:	d004      	beq.n	8003198 <__cvt+0x34>
 800318e:	2f45      	cmp	r7, #69	; 0x45
 8003190:	d100      	bne.n	8003194 <__cvt+0x30>
 8003192:	3501      	adds	r5, #1
 8003194:	2302      	movs	r3, #2
 8003196:	e000      	b.n	800319a <__cvt+0x36>
 8003198:	2303      	movs	r3, #3
 800319a:	aa07      	add	r2, sp, #28
 800319c:	9204      	str	r2, [sp, #16]
 800319e:	aa06      	add	r2, sp, #24
 80031a0:	e9cd a202 	strd	sl, r2, [sp, #8]
 80031a4:	e9cd 3500 	strd	r3, r5, [sp]
 80031a8:	4622      	mov	r2, r4
 80031aa:	4633      	mov	r3, r6
 80031ac:	f001 fddc 	bl	8004d68 <_dtoa_r>
 80031b0:	2f47      	cmp	r7, #71	; 0x47
 80031b2:	4680      	mov	r8, r0
 80031b4:	d102      	bne.n	80031bc <__cvt+0x58>
 80031b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80031b8:	07db      	lsls	r3, r3, #31
 80031ba:	d526      	bpl.n	800320a <__cvt+0xa6>
 80031bc:	2f46      	cmp	r7, #70	; 0x46
 80031be:	eb08 0905 	add.w	r9, r8, r5
 80031c2:	d111      	bne.n	80031e8 <__cvt+0x84>
 80031c4:	f898 3000 	ldrb.w	r3, [r8]
 80031c8:	2b30      	cmp	r3, #48	; 0x30
 80031ca:	d10a      	bne.n	80031e2 <__cvt+0x7e>
 80031cc:	2200      	movs	r2, #0
 80031ce:	2300      	movs	r3, #0
 80031d0:	4620      	mov	r0, r4
 80031d2:	4631      	mov	r1, r6
 80031d4:	f7fd fbf8 	bl	80009c8 <__aeabi_dcmpeq>
 80031d8:	b918      	cbnz	r0, 80031e2 <__cvt+0x7e>
 80031da:	f1c5 0501 	rsb	r5, r5, #1
 80031de:	f8ca 5000 	str.w	r5, [sl]
 80031e2:	f8da 3000 	ldr.w	r3, [sl]
 80031e6:	4499      	add	r9, r3
 80031e8:	2200      	movs	r2, #0
 80031ea:	2300      	movs	r3, #0
 80031ec:	4620      	mov	r0, r4
 80031ee:	4631      	mov	r1, r6
 80031f0:	f7fd fbea 	bl	80009c8 <__aeabi_dcmpeq>
 80031f4:	b938      	cbnz	r0, 8003206 <__cvt+0xa2>
 80031f6:	2230      	movs	r2, #48	; 0x30
 80031f8:	9b07      	ldr	r3, [sp, #28]
 80031fa:	454b      	cmp	r3, r9
 80031fc:	d205      	bcs.n	800320a <__cvt+0xa6>
 80031fe:	1c59      	adds	r1, r3, #1
 8003200:	9107      	str	r1, [sp, #28]
 8003202:	701a      	strb	r2, [r3, #0]
 8003204:	e7f8      	b.n	80031f8 <__cvt+0x94>
 8003206:	f8cd 901c 	str.w	r9, [sp, #28]
 800320a:	4640      	mov	r0, r8
 800320c:	9b07      	ldr	r3, [sp, #28]
 800320e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003210:	eba3 0308 	sub.w	r3, r3, r8
 8003214:	6013      	str	r3, [r2, #0]
 8003216:	b008      	add	sp, #32
 8003218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800321c <__exponent>:
 800321c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800321e:	2900      	cmp	r1, #0
 8003220:	bfb4      	ite	lt
 8003222:	232d      	movlt	r3, #45	; 0x2d
 8003224:	232b      	movge	r3, #43	; 0x2b
 8003226:	4604      	mov	r4, r0
 8003228:	bfb8      	it	lt
 800322a:	4249      	neglt	r1, r1
 800322c:	2909      	cmp	r1, #9
 800322e:	f804 2b02 	strb.w	r2, [r4], #2
 8003232:	7043      	strb	r3, [r0, #1]
 8003234:	dd21      	ble.n	800327a <__exponent+0x5e>
 8003236:	f10d 0307 	add.w	r3, sp, #7
 800323a:	461f      	mov	r7, r3
 800323c:	260a      	movs	r6, #10
 800323e:	fb91 f5f6 	sdiv	r5, r1, r6
 8003242:	fb06 1115 	mls	r1, r6, r5, r1
 8003246:	2d09      	cmp	r5, #9
 8003248:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800324c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003250:	f103 32ff 	add.w	r2, r3, #4294967295
 8003254:	4629      	mov	r1, r5
 8003256:	dc09      	bgt.n	800326c <__exponent+0x50>
 8003258:	3130      	adds	r1, #48	; 0x30
 800325a:	3b02      	subs	r3, #2
 800325c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003260:	42bb      	cmp	r3, r7
 8003262:	4622      	mov	r2, r4
 8003264:	d304      	bcc.n	8003270 <__exponent+0x54>
 8003266:	1a10      	subs	r0, r2, r0
 8003268:	b003      	add	sp, #12
 800326a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800326c:	4613      	mov	r3, r2
 800326e:	e7e6      	b.n	800323e <__exponent+0x22>
 8003270:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003274:	f804 2b01 	strb.w	r2, [r4], #1
 8003278:	e7f2      	b.n	8003260 <__exponent+0x44>
 800327a:	2330      	movs	r3, #48	; 0x30
 800327c:	4419      	add	r1, r3
 800327e:	7083      	strb	r3, [r0, #2]
 8003280:	1d02      	adds	r2, r0, #4
 8003282:	70c1      	strb	r1, [r0, #3]
 8003284:	e7ef      	b.n	8003266 <__exponent+0x4a>
	...

08003288 <_printf_float>:
 8003288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800328c:	b091      	sub	sp, #68	; 0x44
 800328e:	460c      	mov	r4, r1
 8003290:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8003292:	4693      	mov	fp, r2
 8003294:	461e      	mov	r6, r3
 8003296:	4605      	mov	r5, r0
 8003298:	f002 fe56 	bl	8005f48 <_localeconv_r>
 800329c:	6803      	ldr	r3, [r0, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	9309      	str	r3, [sp, #36]	; 0x24
 80032a2:	f7fc ff65 	bl	8000170 <strlen>
 80032a6:	2300      	movs	r3, #0
 80032a8:	930e      	str	r3, [sp, #56]	; 0x38
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	900a      	str	r0, [sp, #40]	; 0x28
 80032ae:	3307      	adds	r3, #7
 80032b0:	f023 0307 	bic.w	r3, r3, #7
 80032b4:	f103 0208 	add.w	r2, r3, #8
 80032b8:	f894 8018 	ldrb.w	r8, [r4, #24]
 80032bc:	f8d4 a000 	ldr.w	sl, [r4]
 80032c0:	603a      	str	r2, [r7, #0]
 80032c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80032ca:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80032ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80032d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80032d4:	f04f 32ff 	mov.w	r2, #4294967295
 80032d8:	4ba6      	ldr	r3, [pc, #664]	; (8003574 <_printf_float+0x2ec>)
 80032da:	4638      	mov	r0, r7
 80032dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80032de:	f7fd fba5 	bl	8000a2c <__aeabi_dcmpun>
 80032e2:	bb68      	cbnz	r0, 8003340 <_printf_float+0xb8>
 80032e4:	f04f 32ff 	mov.w	r2, #4294967295
 80032e8:	4ba2      	ldr	r3, [pc, #648]	; (8003574 <_printf_float+0x2ec>)
 80032ea:	4638      	mov	r0, r7
 80032ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80032ee:	f7fd fb7f 	bl	80009f0 <__aeabi_dcmple>
 80032f2:	bb28      	cbnz	r0, 8003340 <_printf_float+0xb8>
 80032f4:	2200      	movs	r2, #0
 80032f6:	2300      	movs	r3, #0
 80032f8:	4638      	mov	r0, r7
 80032fa:	4649      	mov	r1, r9
 80032fc:	f7fd fb6e 	bl	80009dc <__aeabi_dcmplt>
 8003300:	b110      	cbz	r0, 8003308 <_printf_float+0x80>
 8003302:	232d      	movs	r3, #45	; 0x2d
 8003304:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003308:	4f9b      	ldr	r7, [pc, #620]	; (8003578 <_printf_float+0x2f0>)
 800330a:	4b9c      	ldr	r3, [pc, #624]	; (800357c <_printf_float+0x2f4>)
 800330c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003310:	bf98      	it	ls
 8003312:	461f      	movls	r7, r3
 8003314:	2303      	movs	r3, #3
 8003316:	f04f 0900 	mov.w	r9, #0
 800331a:	6123      	str	r3, [r4, #16]
 800331c:	f02a 0304 	bic.w	r3, sl, #4
 8003320:	6023      	str	r3, [r4, #0]
 8003322:	9600      	str	r6, [sp, #0]
 8003324:	465b      	mov	r3, fp
 8003326:	aa0f      	add	r2, sp, #60	; 0x3c
 8003328:	4621      	mov	r1, r4
 800332a:	4628      	mov	r0, r5
 800332c:	f000 f9e2 	bl	80036f4 <_printf_common>
 8003330:	3001      	adds	r0, #1
 8003332:	f040 8090 	bne.w	8003456 <_printf_float+0x1ce>
 8003336:	f04f 30ff 	mov.w	r0, #4294967295
 800333a:	b011      	add	sp, #68	; 0x44
 800333c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003340:	463a      	mov	r2, r7
 8003342:	464b      	mov	r3, r9
 8003344:	4638      	mov	r0, r7
 8003346:	4649      	mov	r1, r9
 8003348:	f7fd fb70 	bl	8000a2c <__aeabi_dcmpun>
 800334c:	b110      	cbz	r0, 8003354 <_printf_float+0xcc>
 800334e:	4f8c      	ldr	r7, [pc, #560]	; (8003580 <_printf_float+0x2f8>)
 8003350:	4b8c      	ldr	r3, [pc, #560]	; (8003584 <_printf_float+0x2fc>)
 8003352:	e7db      	b.n	800330c <_printf_float+0x84>
 8003354:	6863      	ldr	r3, [r4, #4]
 8003356:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800335a:	1c59      	adds	r1, r3, #1
 800335c:	a80d      	add	r0, sp, #52	; 0x34
 800335e:	a90e      	add	r1, sp, #56	; 0x38
 8003360:	d140      	bne.n	80033e4 <_printf_float+0x15c>
 8003362:	2306      	movs	r3, #6
 8003364:	6063      	str	r3, [r4, #4]
 8003366:	f04f 0c00 	mov.w	ip, #0
 800336a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800336e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8003372:	6863      	ldr	r3, [r4, #4]
 8003374:	6022      	str	r2, [r4, #0]
 8003376:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	463a      	mov	r2, r7
 800337e:	464b      	mov	r3, r9
 8003380:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003384:	4628      	mov	r0, r5
 8003386:	f7ff feed 	bl	8003164 <__cvt>
 800338a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800338e:	2b47      	cmp	r3, #71	; 0x47
 8003390:	4607      	mov	r7, r0
 8003392:	d109      	bne.n	80033a8 <_printf_float+0x120>
 8003394:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003396:	1cd8      	adds	r0, r3, #3
 8003398:	db02      	blt.n	80033a0 <_printf_float+0x118>
 800339a:	6862      	ldr	r2, [r4, #4]
 800339c:	4293      	cmp	r3, r2
 800339e:	dd47      	ble.n	8003430 <_printf_float+0x1a8>
 80033a0:	f1a8 0802 	sub.w	r8, r8, #2
 80033a4:	fa5f f888 	uxtb.w	r8, r8
 80033a8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80033ac:	990d      	ldr	r1, [sp, #52]	; 0x34
 80033ae:	d824      	bhi.n	80033fa <_printf_float+0x172>
 80033b0:	3901      	subs	r1, #1
 80033b2:	4642      	mov	r2, r8
 80033b4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80033b8:	910d      	str	r1, [sp, #52]	; 0x34
 80033ba:	f7ff ff2f 	bl	800321c <__exponent>
 80033be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80033c0:	4681      	mov	r9, r0
 80033c2:	1813      	adds	r3, r2, r0
 80033c4:	2a01      	cmp	r2, #1
 80033c6:	6123      	str	r3, [r4, #16]
 80033c8:	dc02      	bgt.n	80033d0 <_printf_float+0x148>
 80033ca:	6822      	ldr	r2, [r4, #0]
 80033cc:	07d1      	lsls	r1, r2, #31
 80033ce:	d501      	bpl.n	80033d4 <_printf_float+0x14c>
 80033d0:	3301      	adds	r3, #1
 80033d2:	6123      	str	r3, [r4, #16]
 80033d4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0a2      	beq.n	8003322 <_printf_float+0x9a>
 80033dc:	232d      	movs	r3, #45	; 0x2d
 80033de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033e2:	e79e      	b.n	8003322 <_printf_float+0x9a>
 80033e4:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80033e8:	f000 816e 	beq.w	80036c8 <_printf_float+0x440>
 80033ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80033f0:	d1b9      	bne.n	8003366 <_printf_float+0xde>
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1b7      	bne.n	8003366 <_printf_float+0xde>
 80033f6:	2301      	movs	r3, #1
 80033f8:	e7b4      	b.n	8003364 <_printf_float+0xdc>
 80033fa:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80033fe:	d119      	bne.n	8003434 <_printf_float+0x1ac>
 8003400:	2900      	cmp	r1, #0
 8003402:	6863      	ldr	r3, [r4, #4]
 8003404:	dd0c      	ble.n	8003420 <_printf_float+0x198>
 8003406:	6121      	str	r1, [r4, #16]
 8003408:	b913      	cbnz	r3, 8003410 <_printf_float+0x188>
 800340a:	6822      	ldr	r2, [r4, #0]
 800340c:	07d2      	lsls	r2, r2, #31
 800340e:	d502      	bpl.n	8003416 <_printf_float+0x18e>
 8003410:	3301      	adds	r3, #1
 8003412:	440b      	add	r3, r1
 8003414:	6123      	str	r3, [r4, #16]
 8003416:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003418:	f04f 0900 	mov.w	r9, #0
 800341c:	65a3      	str	r3, [r4, #88]	; 0x58
 800341e:	e7d9      	b.n	80033d4 <_printf_float+0x14c>
 8003420:	b913      	cbnz	r3, 8003428 <_printf_float+0x1a0>
 8003422:	6822      	ldr	r2, [r4, #0]
 8003424:	07d0      	lsls	r0, r2, #31
 8003426:	d501      	bpl.n	800342c <_printf_float+0x1a4>
 8003428:	3302      	adds	r3, #2
 800342a:	e7f3      	b.n	8003414 <_printf_float+0x18c>
 800342c:	2301      	movs	r3, #1
 800342e:	e7f1      	b.n	8003414 <_printf_float+0x18c>
 8003430:	f04f 0867 	mov.w	r8, #103	; 0x67
 8003434:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003438:	4293      	cmp	r3, r2
 800343a:	db05      	blt.n	8003448 <_printf_float+0x1c0>
 800343c:	6822      	ldr	r2, [r4, #0]
 800343e:	6123      	str	r3, [r4, #16]
 8003440:	07d1      	lsls	r1, r2, #31
 8003442:	d5e8      	bpl.n	8003416 <_printf_float+0x18e>
 8003444:	3301      	adds	r3, #1
 8003446:	e7e5      	b.n	8003414 <_printf_float+0x18c>
 8003448:	2b00      	cmp	r3, #0
 800344a:	bfcc      	ite	gt
 800344c:	2301      	movgt	r3, #1
 800344e:	f1c3 0302 	rsble	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	e7de      	b.n	8003414 <_printf_float+0x18c>
 8003456:	6823      	ldr	r3, [r4, #0]
 8003458:	055a      	lsls	r2, r3, #21
 800345a:	d407      	bmi.n	800346c <_printf_float+0x1e4>
 800345c:	6923      	ldr	r3, [r4, #16]
 800345e:	463a      	mov	r2, r7
 8003460:	4659      	mov	r1, fp
 8003462:	4628      	mov	r0, r5
 8003464:	47b0      	blx	r6
 8003466:	3001      	adds	r0, #1
 8003468:	d129      	bne.n	80034be <_printf_float+0x236>
 800346a:	e764      	b.n	8003336 <_printf_float+0xae>
 800346c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003470:	f240 80d7 	bls.w	8003622 <_printf_float+0x39a>
 8003474:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003478:	2200      	movs	r2, #0
 800347a:	2300      	movs	r3, #0
 800347c:	f7fd faa4 	bl	80009c8 <__aeabi_dcmpeq>
 8003480:	b388      	cbz	r0, 80034e6 <_printf_float+0x25e>
 8003482:	2301      	movs	r3, #1
 8003484:	4a40      	ldr	r2, [pc, #256]	; (8003588 <_printf_float+0x300>)
 8003486:	4659      	mov	r1, fp
 8003488:	4628      	mov	r0, r5
 800348a:	47b0      	blx	r6
 800348c:	3001      	adds	r0, #1
 800348e:	f43f af52 	beq.w	8003336 <_printf_float+0xae>
 8003492:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003496:	429a      	cmp	r2, r3
 8003498:	db02      	blt.n	80034a0 <_printf_float+0x218>
 800349a:	6823      	ldr	r3, [r4, #0]
 800349c:	07d8      	lsls	r0, r3, #31
 800349e:	d50e      	bpl.n	80034be <_printf_float+0x236>
 80034a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034a4:	4659      	mov	r1, fp
 80034a6:	4628      	mov	r0, r5
 80034a8:	47b0      	blx	r6
 80034aa:	3001      	adds	r0, #1
 80034ac:	f43f af43 	beq.w	8003336 <_printf_float+0xae>
 80034b0:	2700      	movs	r7, #0
 80034b2:	f104 081a 	add.w	r8, r4, #26
 80034b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034b8:	3b01      	subs	r3, #1
 80034ba:	42bb      	cmp	r3, r7
 80034bc:	dc09      	bgt.n	80034d2 <_printf_float+0x24a>
 80034be:	6823      	ldr	r3, [r4, #0]
 80034c0:	079f      	lsls	r7, r3, #30
 80034c2:	f100 80fd 	bmi.w	80036c0 <_printf_float+0x438>
 80034c6:	68e0      	ldr	r0, [r4, #12]
 80034c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80034ca:	4298      	cmp	r0, r3
 80034cc:	bfb8      	it	lt
 80034ce:	4618      	movlt	r0, r3
 80034d0:	e733      	b.n	800333a <_printf_float+0xb2>
 80034d2:	2301      	movs	r3, #1
 80034d4:	4642      	mov	r2, r8
 80034d6:	4659      	mov	r1, fp
 80034d8:	4628      	mov	r0, r5
 80034da:	47b0      	blx	r6
 80034dc:	3001      	adds	r0, #1
 80034de:	f43f af2a 	beq.w	8003336 <_printf_float+0xae>
 80034e2:	3701      	adds	r7, #1
 80034e4:	e7e7      	b.n	80034b6 <_printf_float+0x22e>
 80034e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	dc2b      	bgt.n	8003544 <_printf_float+0x2bc>
 80034ec:	2301      	movs	r3, #1
 80034ee:	4a26      	ldr	r2, [pc, #152]	; (8003588 <_printf_float+0x300>)
 80034f0:	4659      	mov	r1, fp
 80034f2:	4628      	mov	r0, r5
 80034f4:	47b0      	blx	r6
 80034f6:	3001      	adds	r0, #1
 80034f8:	f43f af1d 	beq.w	8003336 <_printf_float+0xae>
 80034fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80034fe:	b923      	cbnz	r3, 800350a <_printf_float+0x282>
 8003500:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003502:	b913      	cbnz	r3, 800350a <_printf_float+0x282>
 8003504:	6823      	ldr	r3, [r4, #0]
 8003506:	07d9      	lsls	r1, r3, #31
 8003508:	d5d9      	bpl.n	80034be <_printf_float+0x236>
 800350a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800350e:	4659      	mov	r1, fp
 8003510:	4628      	mov	r0, r5
 8003512:	47b0      	blx	r6
 8003514:	3001      	adds	r0, #1
 8003516:	f43f af0e 	beq.w	8003336 <_printf_float+0xae>
 800351a:	f04f 0800 	mov.w	r8, #0
 800351e:	f104 091a 	add.w	r9, r4, #26
 8003522:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003524:	425b      	negs	r3, r3
 8003526:	4543      	cmp	r3, r8
 8003528:	dc01      	bgt.n	800352e <_printf_float+0x2a6>
 800352a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800352c:	e797      	b.n	800345e <_printf_float+0x1d6>
 800352e:	2301      	movs	r3, #1
 8003530:	464a      	mov	r2, r9
 8003532:	4659      	mov	r1, fp
 8003534:	4628      	mov	r0, r5
 8003536:	47b0      	blx	r6
 8003538:	3001      	adds	r0, #1
 800353a:	f43f aefc 	beq.w	8003336 <_printf_float+0xae>
 800353e:	f108 0801 	add.w	r8, r8, #1
 8003542:	e7ee      	b.n	8003522 <_printf_float+0x29a>
 8003544:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003546:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003548:	429a      	cmp	r2, r3
 800354a:	bfa8      	it	ge
 800354c:	461a      	movge	r2, r3
 800354e:	2a00      	cmp	r2, #0
 8003550:	4690      	mov	r8, r2
 8003552:	dd07      	ble.n	8003564 <_printf_float+0x2dc>
 8003554:	4613      	mov	r3, r2
 8003556:	4659      	mov	r1, fp
 8003558:	463a      	mov	r2, r7
 800355a:	4628      	mov	r0, r5
 800355c:	47b0      	blx	r6
 800355e:	3001      	adds	r0, #1
 8003560:	f43f aee9 	beq.w	8003336 <_printf_float+0xae>
 8003564:	f104 031a 	add.w	r3, r4, #26
 8003568:	f04f 0a00 	mov.w	sl, #0
 800356c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8003570:	930b      	str	r3, [sp, #44]	; 0x2c
 8003572:	e015      	b.n	80035a0 <_printf_float+0x318>
 8003574:	7fefffff 	.word	0x7fefffff
 8003578:	0800a134 	.word	0x0800a134
 800357c:	0800a130 	.word	0x0800a130
 8003580:	0800a13c 	.word	0x0800a13c
 8003584:	0800a138 	.word	0x0800a138
 8003588:	0800a2f3 	.word	0x0800a2f3
 800358c:	2301      	movs	r3, #1
 800358e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003590:	4659      	mov	r1, fp
 8003592:	4628      	mov	r0, r5
 8003594:	47b0      	blx	r6
 8003596:	3001      	adds	r0, #1
 8003598:	f43f aecd 	beq.w	8003336 <_printf_float+0xae>
 800359c:	f10a 0a01 	add.w	sl, sl, #1
 80035a0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80035a4:	eba9 0308 	sub.w	r3, r9, r8
 80035a8:	4553      	cmp	r3, sl
 80035aa:	dcef      	bgt.n	800358c <_printf_float+0x304>
 80035ac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80035b0:	429a      	cmp	r2, r3
 80035b2:	444f      	add	r7, r9
 80035b4:	db14      	blt.n	80035e0 <_printf_float+0x358>
 80035b6:	6823      	ldr	r3, [r4, #0]
 80035b8:	07da      	lsls	r2, r3, #31
 80035ba:	d411      	bmi.n	80035e0 <_printf_float+0x358>
 80035bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035be:	990d      	ldr	r1, [sp, #52]	; 0x34
 80035c0:	eba3 0209 	sub.w	r2, r3, r9
 80035c4:	eba3 0901 	sub.w	r9, r3, r1
 80035c8:	4591      	cmp	r9, r2
 80035ca:	bfa8      	it	ge
 80035cc:	4691      	movge	r9, r2
 80035ce:	f1b9 0f00 	cmp.w	r9, #0
 80035d2:	dc0d      	bgt.n	80035f0 <_printf_float+0x368>
 80035d4:	2700      	movs	r7, #0
 80035d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80035da:	f104 081a 	add.w	r8, r4, #26
 80035de:	e018      	b.n	8003612 <_printf_float+0x38a>
 80035e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80035e4:	4659      	mov	r1, fp
 80035e6:	4628      	mov	r0, r5
 80035e8:	47b0      	blx	r6
 80035ea:	3001      	adds	r0, #1
 80035ec:	d1e6      	bne.n	80035bc <_printf_float+0x334>
 80035ee:	e6a2      	b.n	8003336 <_printf_float+0xae>
 80035f0:	464b      	mov	r3, r9
 80035f2:	463a      	mov	r2, r7
 80035f4:	4659      	mov	r1, fp
 80035f6:	4628      	mov	r0, r5
 80035f8:	47b0      	blx	r6
 80035fa:	3001      	adds	r0, #1
 80035fc:	d1ea      	bne.n	80035d4 <_printf_float+0x34c>
 80035fe:	e69a      	b.n	8003336 <_printf_float+0xae>
 8003600:	2301      	movs	r3, #1
 8003602:	4642      	mov	r2, r8
 8003604:	4659      	mov	r1, fp
 8003606:	4628      	mov	r0, r5
 8003608:	47b0      	blx	r6
 800360a:	3001      	adds	r0, #1
 800360c:	f43f ae93 	beq.w	8003336 <_printf_float+0xae>
 8003610:	3701      	adds	r7, #1
 8003612:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003616:	1a9b      	subs	r3, r3, r2
 8003618:	eba3 0309 	sub.w	r3, r3, r9
 800361c:	42bb      	cmp	r3, r7
 800361e:	dcef      	bgt.n	8003600 <_printf_float+0x378>
 8003620:	e74d      	b.n	80034be <_printf_float+0x236>
 8003622:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003624:	2a01      	cmp	r2, #1
 8003626:	dc01      	bgt.n	800362c <_printf_float+0x3a4>
 8003628:	07db      	lsls	r3, r3, #31
 800362a:	d538      	bpl.n	800369e <_printf_float+0x416>
 800362c:	2301      	movs	r3, #1
 800362e:	463a      	mov	r2, r7
 8003630:	4659      	mov	r1, fp
 8003632:	4628      	mov	r0, r5
 8003634:	47b0      	blx	r6
 8003636:	3001      	adds	r0, #1
 8003638:	f43f ae7d 	beq.w	8003336 <_printf_float+0xae>
 800363c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003640:	4659      	mov	r1, fp
 8003642:	4628      	mov	r0, r5
 8003644:	47b0      	blx	r6
 8003646:	3001      	adds	r0, #1
 8003648:	f107 0701 	add.w	r7, r7, #1
 800364c:	f43f ae73 	beq.w	8003336 <_printf_float+0xae>
 8003650:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003654:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003656:	2200      	movs	r2, #0
 8003658:	f103 38ff 	add.w	r8, r3, #4294967295
 800365c:	2300      	movs	r3, #0
 800365e:	f7fd f9b3 	bl	80009c8 <__aeabi_dcmpeq>
 8003662:	b9c0      	cbnz	r0, 8003696 <_printf_float+0x40e>
 8003664:	4643      	mov	r3, r8
 8003666:	463a      	mov	r2, r7
 8003668:	4659      	mov	r1, fp
 800366a:	4628      	mov	r0, r5
 800366c:	47b0      	blx	r6
 800366e:	3001      	adds	r0, #1
 8003670:	d10d      	bne.n	800368e <_printf_float+0x406>
 8003672:	e660      	b.n	8003336 <_printf_float+0xae>
 8003674:	2301      	movs	r3, #1
 8003676:	4642      	mov	r2, r8
 8003678:	4659      	mov	r1, fp
 800367a:	4628      	mov	r0, r5
 800367c:	47b0      	blx	r6
 800367e:	3001      	adds	r0, #1
 8003680:	f43f ae59 	beq.w	8003336 <_printf_float+0xae>
 8003684:	3701      	adds	r7, #1
 8003686:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003688:	3b01      	subs	r3, #1
 800368a:	42bb      	cmp	r3, r7
 800368c:	dcf2      	bgt.n	8003674 <_printf_float+0x3ec>
 800368e:	464b      	mov	r3, r9
 8003690:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003694:	e6e4      	b.n	8003460 <_printf_float+0x1d8>
 8003696:	2700      	movs	r7, #0
 8003698:	f104 081a 	add.w	r8, r4, #26
 800369c:	e7f3      	b.n	8003686 <_printf_float+0x3fe>
 800369e:	2301      	movs	r3, #1
 80036a0:	e7e1      	b.n	8003666 <_printf_float+0x3de>
 80036a2:	2301      	movs	r3, #1
 80036a4:	4642      	mov	r2, r8
 80036a6:	4659      	mov	r1, fp
 80036a8:	4628      	mov	r0, r5
 80036aa:	47b0      	blx	r6
 80036ac:	3001      	adds	r0, #1
 80036ae:	f43f ae42 	beq.w	8003336 <_printf_float+0xae>
 80036b2:	3701      	adds	r7, #1
 80036b4:	68e3      	ldr	r3, [r4, #12]
 80036b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80036b8:	1a9b      	subs	r3, r3, r2
 80036ba:	42bb      	cmp	r3, r7
 80036bc:	dcf1      	bgt.n	80036a2 <_printf_float+0x41a>
 80036be:	e702      	b.n	80034c6 <_printf_float+0x23e>
 80036c0:	2700      	movs	r7, #0
 80036c2:	f104 0819 	add.w	r8, r4, #25
 80036c6:	e7f5      	b.n	80036b4 <_printf_float+0x42c>
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f43f ae94 	beq.w	80033f6 <_printf_float+0x16e>
 80036ce:	f04f 0c00 	mov.w	ip, #0
 80036d2:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80036d6:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80036da:	6022      	str	r2, [r4, #0]
 80036dc:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80036e0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	463a      	mov	r2, r7
 80036e8:	464b      	mov	r3, r9
 80036ea:	4628      	mov	r0, r5
 80036ec:	f7ff fd3a 	bl	8003164 <__cvt>
 80036f0:	4607      	mov	r7, r0
 80036f2:	e64f      	b.n	8003394 <_printf_float+0x10c>

080036f4 <_printf_common>:
 80036f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036f8:	4691      	mov	r9, r2
 80036fa:	461f      	mov	r7, r3
 80036fc:	688a      	ldr	r2, [r1, #8]
 80036fe:	690b      	ldr	r3, [r1, #16]
 8003700:	4606      	mov	r6, r0
 8003702:	4293      	cmp	r3, r2
 8003704:	bfb8      	it	lt
 8003706:	4613      	movlt	r3, r2
 8003708:	f8c9 3000 	str.w	r3, [r9]
 800370c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003710:	460c      	mov	r4, r1
 8003712:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003716:	b112      	cbz	r2, 800371e <_printf_common+0x2a>
 8003718:	3301      	adds	r3, #1
 800371a:	f8c9 3000 	str.w	r3, [r9]
 800371e:	6823      	ldr	r3, [r4, #0]
 8003720:	0699      	lsls	r1, r3, #26
 8003722:	bf42      	ittt	mi
 8003724:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003728:	3302      	addmi	r3, #2
 800372a:	f8c9 3000 	strmi.w	r3, [r9]
 800372e:	6825      	ldr	r5, [r4, #0]
 8003730:	f015 0506 	ands.w	r5, r5, #6
 8003734:	d107      	bne.n	8003746 <_printf_common+0x52>
 8003736:	f104 0a19 	add.w	sl, r4, #25
 800373a:	68e3      	ldr	r3, [r4, #12]
 800373c:	f8d9 2000 	ldr.w	r2, [r9]
 8003740:	1a9b      	subs	r3, r3, r2
 8003742:	42ab      	cmp	r3, r5
 8003744:	dc29      	bgt.n	800379a <_printf_common+0xa6>
 8003746:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800374a:	6822      	ldr	r2, [r4, #0]
 800374c:	3300      	adds	r3, #0
 800374e:	bf18      	it	ne
 8003750:	2301      	movne	r3, #1
 8003752:	0692      	lsls	r2, r2, #26
 8003754:	d42e      	bmi.n	80037b4 <_printf_common+0xc0>
 8003756:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800375a:	4639      	mov	r1, r7
 800375c:	4630      	mov	r0, r6
 800375e:	47c0      	blx	r8
 8003760:	3001      	adds	r0, #1
 8003762:	d021      	beq.n	80037a8 <_printf_common+0xb4>
 8003764:	6823      	ldr	r3, [r4, #0]
 8003766:	68e5      	ldr	r5, [r4, #12]
 8003768:	f003 0306 	and.w	r3, r3, #6
 800376c:	2b04      	cmp	r3, #4
 800376e:	bf18      	it	ne
 8003770:	2500      	movne	r5, #0
 8003772:	f8d9 2000 	ldr.w	r2, [r9]
 8003776:	f04f 0900 	mov.w	r9, #0
 800377a:	bf08      	it	eq
 800377c:	1aad      	subeq	r5, r5, r2
 800377e:	68a3      	ldr	r3, [r4, #8]
 8003780:	6922      	ldr	r2, [r4, #16]
 8003782:	bf08      	it	eq
 8003784:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003788:	4293      	cmp	r3, r2
 800378a:	bfc4      	itt	gt
 800378c:	1a9b      	subgt	r3, r3, r2
 800378e:	18ed      	addgt	r5, r5, r3
 8003790:	341a      	adds	r4, #26
 8003792:	454d      	cmp	r5, r9
 8003794:	d11a      	bne.n	80037cc <_printf_common+0xd8>
 8003796:	2000      	movs	r0, #0
 8003798:	e008      	b.n	80037ac <_printf_common+0xb8>
 800379a:	2301      	movs	r3, #1
 800379c:	4652      	mov	r2, sl
 800379e:	4639      	mov	r1, r7
 80037a0:	4630      	mov	r0, r6
 80037a2:	47c0      	blx	r8
 80037a4:	3001      	adds	r0, #1
 80037a6:	d103      	bne.n	80037b0 <_printf_common+0xbc>
 80037a8:	f04f 30ff 	mov.w	r0, #4294967295
 80037ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037b0:	3501      	adds	r5, #1
 80037b2:	e7c2      	b.n	800373a <_printf_common+0x46>
 80037b4:	2030      	movs	r0, #48	; 0x30
 80037b6:	18e1      	adds	r1, r4, r3
 80037b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037bc:	1c5a      	adds	r2, r3, #1
 80037be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037c2:	4422      	add	r2, r4
 80037c4:	3302      	adds	r3, #2
 80037c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037ca:	e7c4      	b.n	8003756 <_printf_common+0x62>
 80037cc:	2301      	movs	r3, #1
 80037ce:	4622      	mov	r2, r4
 80037d0:	4639      	mov	r1, r7
 80037d2:	4630      	mov	r0, r6
 80037d4:	47c0      	blx	r8
 80037d6:	3001      	adds	r0, #1
 80037d8:	d0e6      	beq.n	80037a8 <_printf_common+0xb4>
 80037da:	f109 0901 	add.w	r9, r9, #1
 80037de:	e7d8      	b.n	8003792 <_printf_common+0x9e>

080037e0 <_printf_i>:
 80037e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037e4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80037e8:	460c      	mov	r4, r1
 80037ea:	7e09      	ldrb	r1, [r1, #24]
 80037ec:	b085      	sub	sp, #20
 80037ee:	296e      	cmp	r1, #110	; 0x6e
 80037f0:	4617      	mov	r7, r2
 80037f2:	4606      	mov	r6, r0
 80037f4:	4698      	mov	r8, r3
 80037f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80037f8:	f000 80b3 	beq.w	8003962 <_printf_i+0x182>
 80037fc:	d822      	bhi.n	8003844 <_printf_i+0x64>
 80037fe:	2963      	cmp	r1, #99	; 0x63
 8003800:	d036      	beq.n	8003870 <_printf_i+0x90>
 8003802:	d80a      	bhi.n	800381a <_printf_i+0x3a>
 8003804:	2900      	cmp	r1, #0
 8003806:	f000 80b9 	beq.w	800397c <_printf_i+0x19c>
 800380a:	2958      	cmp	r1, #88	; 0x58
 800380c:	f000 8083 	beq.w	8003916 <_printf_i+0x136>
 8003810:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003814:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003818:	e032      	b.n	8003880 <_printf_i+0xa0>
 800381a:	2964      	cmp	r1, #100	; 0x64
 800381c:	d001      	beq.n	8003822 <_printf_i+0x42>
 800381e:	2969      	cmp	r1, #105	; 0x69
 8003820:	d1f6      	bne.n	8003810 <_printf_i+0x30>
 8003822:	6820      	ldr	r0, [r4, #0]
 8003824:	6813      	ldr	r3, [r2, #0]
 8003826:	0605      	lsls	r5, r0, #24
 8003828:	f103 0104 	add.w	r1, r3, #4
 800382c:	d52a      	bpl.n	8003884 <_printf_i+0xa4>
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6011      	str	r1, [r2, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	da03      	bge.n	800383e <_printf_i+0x5e>
 8003836:	222d      	movs	r2, #45	; 0x2d
 8003838:	425b      	negs	r3, r3
 800383a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800383e:	486f      	ldr	r0, [pc, #444]	; (80039fc <_printf_i+0x21c>)
 8003840:	220a      	movs	r2, #10
 8003842:	e039      	b.n	80038b8 <_printf_i+0xd8>
 8003844:	2973      	cmp	r1, #115	; 0x73
 8003846:	f000 809d 	beq.w	8003984 <_printf_i+0x1a4>
 800384a:	d808      	bhi.n	800385e <_printf_i+0x7e>
 800384c:	296f      	cmp	r1, #111	; 0x6f
 800384e:	d020      	beq.n	8003892 <_printf_i+0xb2>
 8003850:	2970      	cmp	r1, #112	; 0x70
 8003852:	d1dd      	bne.n	8003810 <_printf_i+0x30>
 8003854:	6823      	ldr	r3, [r4, #0]
 8003856:	f043 0320 	orr.w	r3, r3, #32
 800385a:	6023      	str	r3, [r4, #0]
 800385c:	e003      	b.n	8003866 <_printf_i+0x86>
 800385e:	2975      	cmp	r1, #117	; 0x75
 8003860:	d017      	beq.n	8003892 <_printf_i+0xb2>
 8003862:	2978      	cmp	r1, #120	; 0x78
 8003864:	d1d4      	bne.n	8003810 <_printf_i+0x30>
 8003866:	2378      	movs	r3, #120	; 0x78
 8003868:	4865      	ldr	r0, [pc, #404]	; (8003a00 <_printf_i+0x220>)
 800386a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800386e:	e055      	b.n	800391c <_printf_i+0x13c>
 8003870:	6813      	ldr	r3, [r2, #0]
 8003872:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003876:	1d19      	adds	r1, r3, #4
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	6011      	str	r1, [r2, #0]
 800387c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003880:	2301      	movs	r3, #1
 8003882:	e08c      	b.n	800399e <_printf_i+0x1be>
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f010 0f40 	tst.w	r0, #64	; 0x40
 800388a:	6011      	str	r1, [r2, #0]
 800388c:	bf18      	it	ne
 800388e:	b21b      	sxthne	r3, r3
 8003890:	e7cf      	b.n	8003832 <_printf_i+0x52>
 8003892:	6813      	ldr	r3, [r2, #0]
 8003894:	6825      	ldr	r5, [r4, #0]
 8003896:	1d18      	adds	r0, r3, #4
 8003898:	6010      	str	r0, [r2, #0]
 800389a:	0628      	lsls	r0, r5, #24
 800389c:	d501      	bpl.n	80038a2 <_printf_i+0xc2>
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	e002      	b.n	80038a8 <_printf_i+0xc8>
 80038a2:	0668      	lsls	r0, r5, #25
 80038a4:	d5fb      	bpl.n	800389e <_printf_i+0xbe>
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	296f      	cmp	r1, #111	; 0x6f
 80038aa:	bf14      	ite	ne
 80038ac:	220a      	movne	r2, #10
 80038ae:	2208      	moveq	r2, #8
 80038b0:	4852      	ldr	r0, [pc, #328]	; (80039fc <_printf_i+0x21c>)
 80038b2:	2100      	movs	r1, #0
 80038b4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038b8:	6865      	ldr	r5, [r4, #4]
 80038ba:	2d00      	cmp	r5, #0
 80038bc:	60a5      	str	r5, [r4, #8]
 80038be:	f2c0 8095 	blt.w	80039ec <_printf_i+0x20c>
 80038c2:	6821      	ldr	r1, [r4, #0]
 80038c4:	f021 0104 	bic.w	r1, r1, #4
 80038c8:	6021      	str	r1, [r4, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d13d      	bne.n	800394a <_printf_i+0x16a>
 80038ce:	2d00      	cmp	r5, #0
 80038d0:	f040 808e 	bne.w	80039f0 <_printf_i+0x210>
 80038d4:	4665      	mov	r5, ip
 80038d6:	2a08      	cmp	r2, #8
 80038d8:	d10b      	bne.n	80038f2 <_printf_i+0x112>
 80038da:	6823      	ldr	r3, [r4, #0]
 80038dc:	07db      	lsls	r3, r3, #31
 80038de:	d508      	bpl.n	80038f2 <_printf_i+0x112>
 80038e0:	6923      	ldr	r3, [r4, #16]
 80038e2:	6862      	ldr	r2, [r4, #4]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	bfde      	ittt	le
 80038e8:	2330      	movle	r3, #48	; 0x30
 80038ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038ee:	f105 35ff 	addle.w	r5, r5, #4294967295
 80038f2:	ebac 0305 	sub.w	r3, ip, r5
 80038f6:	6123      	str	r3, [r4, #16]
 80038f8:	f8cd 8000 	str.w	r8, [sp]
 80038fc:	463b      	mov	r3, r7
 80038fe:	aa03      	add	r2, sp, #12
 8003900:	4621      	mov	r1, r4
 8003902:	4630      	mov	r0, r6
 8003904:	f7ff fef6 	bl	80036f4 <_printf_common>
 8003908:	3001      	adds	r0, #1
 800390a:	d14d      	bne.n	80039a8 <_printf_i+0x1c8>
 800390c:	f04f 30ff 	mov.w	r0, #4294967295
 8003910:	b005      	add	sp, #20
 8003912:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003916:	4839      	ldr	r0, [pc, #228]	; (80039fc <_printf_i+0x21c>)
 8003918:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800391c:	6813      	ldr	r3, [r2, #0]
 800391e:	6821      	ldr	r1, [r4, #0]
 8003920:	1d1d      	adds	r5, r3, #4
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6015      	str	r5, [r2, #0]
 8003926:	060a      	lsls	r2, r1, #24
 8003928:	d50b      	bpl.n	8003942 <_printf_i+0x162>
 800392a:	07ca      	lsls	r2, r1, #31
 800392c:	bf44      	itt	mi
 800392e:	f041 0120 	orrmi.w	r1, r1, #32
 8003932:	6021      	strmi	r1, [r4, #0]
 8003934:	b91b      	cbnz	r3, 800393e <_printf_i+0x15e>
 8003936:	6822      	ldr	r2, [r4, #0]
 8003938:	f022 0220 	bic.w	r2, r2, #32
 800393c:	6022      	str	r2, [r4, #0]
 800393e:	2210      	movs	r2, #16
 8003940:	e7b7      	b.n	80038b2 <_printf_i+0xd2>
 8003942:	064d      	lsls	r5, r1, #25
 8003944:	bf48      	it	mi
 8003946:	b29b      	uxthmi	r3, r3
 8003948:	e7ef      	b.n	800392a <_printf_i+0x14a>
 800394a:	4665      	mov	r5, ip
 800394c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003950:	fb02 3311 	mls	r3, r2, r1, r3
 8003954:	5cc3      	ldrb	r3, [r0, r3]
 8003956:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800395a:	460b      	mov	r3, r1
 800395c:	2900      	cmp	r1, #0
 800395e:	d1f5      	bne.n	800394c <_printf_i+0x16c>
 8003960:	e7b9      	b.n	80038d6 <_printf_i+0xf6>
 8003962:	6813      	ldr	r3, [r2, #0]
 8003964:	6825      	ldr	r5, [r4, #0]
 8003966:	1d18      	adds	r0, r3, #4
 8003968:	6961      	ldr	r1, [r4, #20]
 800396a:	6010      	str	r0, [r2, #0]
 800396c:	0628      	lsls	r0, r5, #24
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	d501      	bpl.n	8003976 <_printf_i+0x196>
 8003972:	6019      	str	r1, [r3, #0]
 8003974:	e002      	b.n	800397c <_printf_i+0x19c>
 8003976:	066a      	lsls	r2, r5, #25
 8003978:	d5fb      	bpl.n	8003972 <_printf_i+0x192>
 800397a:	8019      	strh	r1, [r3, #0]
 800397c:	2300      	movs	r3, #0
 800397e:	4665      	mov	r5, ip
 8003980:	6123      	str	r3, [r4, #16]
 8003982:	e7b9      	b.n	80038f8 <_printf_i+0x118>
 8003984:	6813      	ldr	r3, [r2, #0]
 8003986:	1d19      	adds	r1, r3, #4
 8003988:	6011      	str	r1, [r2, #0]
 800398a:	681d      	ldr	r5, [r3, #0]
 800398c:	6862      	ldr	r2, [r4, #4]
 800398e:	2100      	movs	r1, #0
 8003990:	4628      	mov	r0, r5
 8003992:	f002 fb01 	bl	8005f98 <memchr>
 8003996:	b108      	cbz	r0, 800399c <_printf_i+0x1bc>
 8003998:	1b40      	subs	r0, r0, r5
 800399a:	6060      	str	r0, [r4, #4]
 800399c:	6863      	ldr	r3, [r4, #4]
 800399e:	6123      	str	r3, [r4, #16]
 80039a0:	2300      	movs	r3, #0
 80039a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039a6:	e7a7      	b.n	80038f8 <_printf_i+0x118>
 80039a8:	6923      	ldr	r3, [r4, #16]
 80039aa:	462a      	mov	r2, r5
 80039ac:	4639      	mov	r1, r7
 80039ae:	4630      	mov	r0, r6
 80039b0:	47c0      	blx	r8
 80039b2:	3001      	adds	r0, #1
 80039b4:	d0aa      	beq.n	800390c <_printf_i+0x12c>
 80039b6:	6823      	ldr	r3, [r4, #0]
 80039b8:	079b      	lsls	r3, r3, #30
 80039ba:	d413      	bmi.n	80039e4 <_printf_i+0x204>
 80039bc:	68e0      	ldr	r0, [r4, #12]
 80039be:	9b03      	ldr	r3, [sp, #12]
 80039c0:	4298      	cmp	r0, r3
 80039c2:	bfb8      	it	lt
 80039c4:	4618      	movlt	r0, r3
 80039c6:	e7a3      	b.n	8003910 <_printf_i+0x130>
 80039c8:	2301      	movs	r3, #1
 80039ca:	464a      	mov	r2, r9
 80039cc:	4639      	mov	r1, r7
 80039ce:	4630      	mov	r0, r6
 80039d0:	47c0      	blx	r8
 80039d2:	3001      	adds	r0, #1
 80039d4:	d09a      	beq.n	800390c <_printf_i+0x12c>
 80039d6:	3501      	adds	r5, #1
 80039d8:	68e3      	ldr	r3, [r4, #12]
 80039da:	9a03      	ldr	r2, [sp, #12]
 80039dc:	1a9b      	subs	r3, r3, r2
 80039de:	42ab      	cmp	r3, r5
 80039e0:	dcf2      	bgt.n	80039c8 <_printf_i+0x1e8>
 80039e2:	e7eb      	b.n	80039bc <_printf_i+0x1dc>
 80039e4:	2500      	movs	r5, #0
 80039e6:	f104 0919 	add.w	r9, r4, #25
 80039ea:	e7f5      	b.n	80039d8 <_printf_i+0x1f8>
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1ac      	bne.n	800394a <_printf_i+0x16a>
 80039f0:	7803      	ldrb	r3, [r0, #0]
 80039f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039fa:	e76c      	b.n	80038d6 <_printf_i+0xf6>
 80039fc:	0800a140 	.word	0x0800a140
 8003a00:	0800a151 	.word	0x0800a151

08003a04 <_scanf_float>:
 8003a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a08:	469a      	mov	sl, r3
 8003a0a:	688b      	ldr	r3, [r1, #8]
 8003a0c:	4616      	mov	r6, r2
 8003a0e:	1e5a      	subs	r2, r3, #1
 8003a10:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003a14:	bf88      	it	hi
 8003a16:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8003a1a:	b087      	sub	sp, #28
 8003a1c:	bf85      	ittet	hi
 8003a1e:	189b      	addhi	r3, r3, r2
 8003a20:	9301      	strhi	r3, [sp, #4]
 8003a22:	2300      	movls	r3, #0
 8003a24:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003a28:	4688      	mov	r8, r1
 8003a2a:	f04f 0b00 	mov.w	fp, #0
 8003a2e:	bf8c      	ite	hi
 8003a30:	608b      	strhi	r3, [r1, #8]
 8003a32:	9301      	strls	r3, [sp, #4]
 8003a34:	680b      	ldr	r3, [r1, #0]
 8003a36:	4607      	mov	r7, r0
 8003a38:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003a3c:	f848 3b1c 	str.w	r3, [r8], #28
 8003a40:	460c      	mov	r4, r1
 8003a42:	4645      	mov	r5, r8
 8003a44:	465a      	mov	r2, fp
 8003a46:	46d9      	mov	r9, fp
 8003a48:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8003a4c:	f8cd b008 	str.w	fp, [sp, #8]
 8003a50:	68a1      	ldr	r1, [r4, #8]
 8003a52:	b181      	cbz	r1, 8003a76 <_scanf_float+0x72>
 8003a54:	6833      	ldr	r3, [r6, #0]
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2b49      	cmp	r3, #73	; 0x49
 8003a5a:	d071      	beq.n	8003b40 <_scanf_float+0x13c>
 8003a5c:	d84d      	bhi.n	8003afa <_scanf_float+0xf6>
 8003a5e:	2b39      	cmp	r3, #57	; 0x39
 8003a60:	d840      	bhi.n	8003ae4 <_scanf_float+0xe0>
 8003a62:	2b31      	cmp	r3, #49	; 0x31
 8003a64:	f080 8088 	bcs.w	8003b78 <_scanf_float+0x174>
 8003a68:	2b2d      	cmp	r3, #45	; 0x2d
 8003a6a:	f000 8090 	beq.w	8003b8e <_scanf_float+0x18a>
 8003a6e:	d815      	bhi.n	8003a9c <_scanf_float+0x98>
 8003a70:	2b2b      	cmp	r3, #43	; 0x2b
 8003a72:	f000 808c 	beq.w	8003b8e <_scanf_float+0x18a>
 8003a76:	f1b9 0f00 	cmp.w	r9, #0
 8003a7a:	d003      	beq.n	8003a84 <_scanf_float+0x80>
 8003a7c:	6823      	ldr	r3, [r4, #0]
 8003a7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a82:	6023      	str	r3, [r4, #0]
 8003a84:	3a01      	subs	r2, #1
 8003a86:	2a01      	cmp	r2, #1
 8003a88:	f200 80ea 	bhi.w	8003c60 <_scanf_float+0x25c>
 8003a8c:	4545      	cmp	r5, r8
 8003a8e:	f200 80dc 	bhi.w	8003c4a <_scanf_float+0x246>
 8003a92:	2601      	movs	r6, #1
 8003a94:	4630      	mov	r0, r6
 8003a96:	b007      	add	sp, #28
 8003a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a9c:	2b2e      	cmp	r3, #46	; 0x2e
 8003a9e:	f000 809f 	beq.w	8003be0 <_scanf_float+0x1dc>
 8003aa2:	2b30      	cmp	r3, #48	; 0x30
 8003aa4:	d1e7      	bne.n	8003a76 <_scanf_float+0x72>
 8003aa6:	6820      	ldr	r0, [r4, #0]
 8003aa8:	f410 7f80 	tst.w	r0, #256	; 0x100
 8003aac:	d064      	beq.n	8003b78 <_scanf_float+0x174>
 8003aae:	9b01      	ldr	r3, [sp, #4]
 8003ab0:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8003ab4:	6020      	str	r0, [r4, #0]
 8003ab6:	f109 0901 	add.w	r9, r9, #1
 8003aba:	b11b      	cbz	r3, 8003ac4 <_scanf_float+0xc0>
 8003abc:	3b01      	subs	r3, #1
 8003abe:	3101      	adds	r1, #1
 8003ac0:	9301      	str	r3, [sp, #4]
 8003ac2:	60a1      	str	r1, [r4, #8]
 8003ac4:	68a3      	ldr	r3, [r4, #8]
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	60a3      	str	r3, [r4, #8]
 8003aca:	6923      	ldr	r3, [r4, #16]
 8003acc:	3301      	adds	r3, #1
 8003ace:	6123      	str	r3, [r4, #16]
 8003ad0:	6873      	ldr	r3, [r6, #4]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	6073      	str	r3, [r6, #4]
 8003ad8:	f340 80ac 	ble.w	8003c34 <_scanf_float+0x230>
 8003adc:	6833      	ldr	r3, [r6, #0]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	6033      	str	r3, [r6, #0]
 8003ae2:	e7b5      	b.n	8003a50 <_scanf_float+0x4c>
 8003ae4:	2b45      	cmp	r3, #69	; 0x45
 8003ae6:	f000 8085 	beq.w	8003bf4 <_scanf_float+0x1f0>
 8003aea:	2b46      	cmp	r3, #70	; 0x46
 8003aec:	d06a      	beq.n	8003bc4 <_scanf_float+0x1c0>
 8003aee:	2b41      	cmp	r3, #65	; 0x41
 8003af0:	d1c1      	bne.n	8003a76 <_scanf_float+0x72>
 8003af2:	2a01      	cmp	r2, #1
 8003af4:	d1bf      	bne.n	8003a76 <_scanf_float+0x72>
 8003af6:	2202      	movs	r2, #2
 8003af8:	e046      	b.n	8003b88 <_scanf_float+0x184>
 8003afa:	2b65      	cmp	r3, #101	; 0x65
 8003afc:	d07a      	beq.n	8003bf4 <_scanf_float+0x1f0>
 8003afe:	d818      	bhi.n	8003b32 <_scanf_float+0x12e>
 8003b00:	2b54      	cmp	r3, #84	; 0x54
 8003b02:	d066      	beq.n	8003bd2 <_scanf_float+0x1ce>
 8003b04:	d811      	bhi.n	8003b2a <_scanf_float+0x126>
 8003b06:	2b4e      	cmp	r3, #78	; 0x4e
 8003b08:	d1b5      	bne.n	8003a76 <_scanf_float+0x72>
 8003b0a:	2a00      	cmp	r2, #0
 8003b0c:	d146      	bne.n	8003b9c <_scanf_float+0x198>
 8003b0e:	f1b9 0f00 	cmp.w	r9, #0
 8003b12:	d145      	bne.n	8003ba0 <_scanf_float+0x19c>
 8003b14:	6821      	ldr	r1, [r4, #0]
 8003b16:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8003b1a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8003b1e:	d13f      	bne.n	8003ba0 <_scanf_float+0x19c>
 8003b20:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8003b24:	6021      	str	r1, [r4, #0]
 8003b26:	2201      	movs	r2, #1
 8003b28:	e02e      	b.n	8003b88 <_scanf_float+0x184>
 8003b2a:	2b59      	cmp	r3, #89	; 0x59
 8003b2c:	d01e      	beq.n	8003b6c <_scanf_float+0x168>
 8003b2e:	2b61      	cmp	r3, #97	; 0x61
 8003b30:	e7de      	b.n	8003af0 <_scanf_float+0xec>
 8003b32:	2b6e      	cmp	r3, #110	; 0x6e
 8003b34:	d0e9      	beq.n	8003b0a <_scanf_float+0x106>
 8003b36:	d815      	bhi.n	8003b64 <_scanf_float+0x160>
 8003b38:	2b66      	cmp	r3, #102	; 0x66
 8003b3a:	d043      	beq.n	8003bc4 <_scanf_float+0x1c0>
 8003b3c:	2b69      	cmp	r3, #105	; 0x69
 8003b3e:	d19a      	bne.n	8003a76 <_scanf_float+0x72>
 8003b40:	f1bb 0f00 	cmp.w	fp, #0
 8003b44:	d138      	bne.n	8003bb8 <_scanf_float+0x1b4>
 8003b46:	f1b9 0f00 	cmp.w	r9, #0
 8003b4a:	d197      	bne.n	8003a7c <_scanf_float+0x78>
 8003b4c:	6821      	ldr	r1, [r4, #0]
 8003b4e:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8003b52:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8003b56:	d195      	bne.n	8003a84 <_scanf_float+0x80>
 8003b58:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8003b5c:	6021      	str	r1, [r4, #0]
 8003b5e:	f04f 0b01 	mov.w	fp, #1
 8003b62:	e011      	b.n	8003b88 <_scanf_float+0x184>
 8003b64:	2b74      	cmp	r3, #116	; 0x74
 8003b66:	d034      	beq.n	8003bd2 <_scanf_float+0x1ce>
 8003b68:	2b79      	cmp	r3, #121	; 0x79
 8003b6a:	d184      	bne.n	8003a76 <_scanf_float+0x72>
 8003b6c:	f1bb 0f07 	cmp.w	fp, #7
 8003b70:	d181      	bne.n	8003a76 <_scanf_float+0x72>
 8003b72:	f04f 0b08 	mov.w	fp, #8
 8003b76:	e007      	b.n	8003b88 <_scanf_float+0x184>
 8003b78:	eb12 0f0b 	cmn.w	r2, fp
 8003b7c:	f47f af7b 	bne.w	8003a76 <_scanf_float+0x72>
 8003b80:	6821      	ldr	r1, [r4, #0]
 8003b82:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8003b86:	6021      	str	r1, [r4, #0]
 8003b88:	702b      	strb	r3, [r5, #0]
 8003b8a:	3501      	adds	r5, #1
 8003b8c:	e79a      	b.n	8003ac4 <_scanf_float+0xc0>
 8003b8e:	6821      	ldr	r1, [r4, #0]
 8003b90:	0608      	lsls	r0, r1, #24
 8003b92:	f57f af70 	bpl.w	8003a76 <_scanf_float+0x72>
 8003b96:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003b9a:	e7f4      	b.n	8003b86 <_scanf_float+0x182>
 8003b9c:	2a02      	cmp	r2, #2
 8003b9e:	d047      	beq.n	8003c30 <_scanf_float+0x22c>
 8003ba0:	f1bb 0f01 	cmp.w	fp, #1
 8003ba4:	d003      	beq.n	8003bae <_scanf_float+0x1aa>
 8003ba6:	f1bb 0f04 	cmp.w	fp, #4
 8003baa:	f47f af64 	bne.w	8003a76 <_scanf_float+0x72>
 8003bae:	f10b 0b01 	add.w	fp, fp, #1
 8003bb2:	fa5f fb8b 	uxtb.w	fp, fp
 8003bb6:	e7e7      	b.n	8003b88 <_scanf_float+0x184>
 8003bb8:	f1bb 0f03 	cmp.w	fp, #3
 8003bbc:	d0f7      	beq.n	8003bae <_scanf_float+0x1aa>
 8003bbe:	f1bb 0f05 	cmp.w	fp, #5
 8003bc2:	e7f2      	b.n	8003baa <_scanf_float+0x1a6>
 8003bc4:	f1bb 0f02 	cmp.w	fp, #2
 8003bc8:	f47f af55 	bne.w	8003a76 <_scanf_float+0x72>
 8003bcc:	f04f 0b03 	mov.w	fp, #3
 8003bd0:	e7da      	b.n	8003b88 <_scanf_float+0x184>
 8003bd2:	f1bb 0f06 	cmp.w	fp, #6
 8003bd6:	f47f af4e 	bne.w	8003a76 <_scanf_float+0x72>
 8003bda:	f04f 0b07 	mov.w	fp, #7
 8003bde:	e7d3      	b.n	8003b88 <_scanf_float+0x184>
 8003be0:	6821      	ldr	r1, [r4, #0]
 8003be2:	0588      	lsls	r0, r1, #22
 8003be4:	f57f af47 	bpl.w	8003a76 <_scanf_float+0x72>
 8003be8:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8003bec:	6021      	str	r1, [r4, #0]
 8003bee:	f8cd 9008 	str.w	r9, [sp, #8]
 8003bf2:	e7c9      	b.n	8003b88 <_scanf_float+0x184>
 8003bf4:	6821      	ldr	r1, [r4, #0]
 8003bf6:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8003bfa:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8003bfe:	d006      	beq.n	8003c0e <_scanf_float+0x20a>
 8003c00:	0548      	lsls	r0, r1, #21
 8003c02:	f57f af38 	bpl.w	8003a76 <_scanf_float+0x72>
 8003c06:	f1b9 0f00 	cmp.w	r9, #0
 8003c0a:	f43f af3b 	beq.w	8003a84 <_scanf_float+0x80>
 8003c0e:	0588      	lsls	r0, r1, #22
 8003c10:	bf58      	it	pl
 8003c12:	9802      	ldrpl	r0, [sp, #8]
 8003c14:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8003c18:	bf58      	it	pl
 8003c1a:	eba9 0000 	subpl.w	r0, r9, r0
 8003c1e:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8003c22:	bf58      	it	pl
 8003c24:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8003c28:	6021      	str	r1, [r4, #0]
 8003c2a:	f04f 0900 	mov.w	r9, #0
 8003c2e:	e7ab      	b.n	8003b88 <_scanf_float+0x184>
 8003c30:	2203      	movs	r2, #3
 8003c32:	e7a9      	b.n	8003b88 <_scanf_float+0x184>
 8003c34:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003c38:	4631      	mov	r1, r6
 8003c3a:	4638      	mov	r0, r7
 8003c3c:	9205      	str	r2, [sp, #20]
 8003c3e:	4798      	blx	r3
 8003c40:	9a05      	ldr	r2, [sp, #20]
 8003c42:	2800      	cmp	r0, #0
 8003c44:	f43f af04 	beq.w	8003a50 <_scanf_float+0x4c>
 8003c48:	e715      	b.n	8003a76 <_scanf_float+0x72>
 8003c4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003c4e:	4632      	mov	r2, r6
 8003c50:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003c54:	4638      	mov	r0, r7
 8003c56:	4798      	blx	r3
 8003c58:	6923      	ldr	r3, [r4, #16]
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	6123      	str	r3, [r4, #16]
 8003c5e:	e715      	b.n	8003a8c <_scanf_float+0x88>
 8003c60:	f10b 33ff 	add.w	r3, fp, #4294967295
 8003c64:	2b06      	cmp	r3, #6
 8003c66:	d80a      	bhi.n	8003c7e <_scanf_float+0x27a>
 8003c68:	f1bb 0f02 	cmp.w	fp, #2
 8003c6c:	d967      	bls.n	8003d3e <_scanf_float+0x33a>
 8003c6e:	f1ab 0b03 	sub.w	fp, fp, #3
 8003c72:	fa5f fb8b 	uxtb.w	fp, fp
 8003c76:	eba5 0b0b 	sub.w	fp, r5, fp
 8003c7a:	455d      	cmp	r5, fp
 8003c7c:	d14a      	bne.n	8003d14 <_scanf_float+0x310>
 8003c7e:	6823      	ldr	r3, [r4, #0]
 8003c80:	05da      	lsls	r2, r3, #23
 8003c82:	d51f      	bpl.n	8003cc4 <_scanf_float+0x2c0>
 8003c84:	055b      	lsls	r3, r3, #21
 8003c86:	d467      	bmi.n	8003d58 <_scanf_float+0x354>
 8003c88:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003c8c:	6923      	ldr	r3, [r4, #16]
 8003c8e:	2965      	cmp	r1, #101	; 0x65
 8003c90:	f103 33ff 	add.w	r3, r3, #4294967295
 8003c94:	f105 3bff 	add.w	fp, r5, #4294967295
 8003c98:	6123      	str	r3, [r4, #16]
 8003c9a:	d00d      	beq.n	8003cb8 <_scanf_float+0x2b4>
 8003c9c:	2945      	cmp	r1, #69	; 0x45
 8003c9e:	d00b      	beq.n	8003cb8 <_scanf_float+0x2b4>
 8003ca0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003ca4:	4632      	mov	r2, r6
 8003ca6:	4638      	mov	r0, r7
 8003ca8:	4798      	blx	r3
 8003caa:	6923      	ldr	r3, [r4, #16]
 8003cac:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	f1a5 0b02 	sub.w	fp, r5, #2
 8003cb6:	6123      	str	r3, [r4, #16]
 8003cb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003cbc:	4632      	mov	r2, r6
 8003cbe:	4638      	mov	r0, r7
 8003cc0:	4798      	blx	r3
 8003cc2:	465d      	mov	r5, fp
 8003cc4:	6826      	ldr	r6, [r4, #0]
 8003cc6:	f016 0610 	ands.w	r6, r6, #16
 8003cca:	d176      	bne.n	8003dba <_scanf_float+0x3b6>
 8003ccc:	702e      	strb	r6, [r5, #0]
 8003cce:	6823      	ldr	r3, [r4, #0]
 8003cd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cd8:	d141      	bne.n	8003d5e <_scanf_float+0x35a>
 8003cda:	9b02      	ldr	r3, [sp, #8]
 8003cdc:	eba9 0303 	sub.w	r3, r9, r3
 8003ce0:	425a      	negs	r2, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d148      	bne.n	8003d78 <_scanf_float+0x374>
 8003ce6:	4641      	mov	r1, r8
 8003ce8:	2200      	movs	r2, #0
 8003cea:	4638      	mov	r0, r7
 8003cec:	f000 ff10 	bl	8004b10 <_strtod_r>
 8003cf0:	6825      	ldr	r5, [r4, #0]
 8003cf2:	4680      	mov	r8, r0
 8003cf4:	f015 0f02 	tst.w	r5, #2
 8003cf8:	4689      	mov	r9, r1
 8003cfa:	f8da 3000 	ldr.w	r3, [sl]
 8003cfe:	d046      	beq.n	8003d8e <_scanf_float+0x38a>
 8003d00:	1d1a      	adds	r2, r3, #4
 8003d02:	f8ca 2000 	str.w	r2, [sl]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	e9c3 8900 	strd	r8, r9, [r3]
 8003d0c:	68e3      	ldr	r3, [r4, #12]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	60e3      	str	r3, [r4, #12]
 8003d12:	e6bf      	b.n	8003a94 <_scanf_float+0x90>
 8003d14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d18:	4632      	mov	r2, r6
 8003d1a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003d1e:	4638      	mov	r0, r7
 8003d20:	4798      	blx	r3
 8003d22:	6923      	ldr	r3, [r4, #16]
 8003d24:	3b01      	subs	r3, #1
 8003d26:	6123      	str	r3, [r4, #16]
 8003d28:	e7a7      	b.n	8003c7a <_scanf_float+0x276>
 8003d2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d2e:	4632      	mov	r2, r6
 8003d30:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003d34:	4638      	mov	r0, r7
 8003d36:	4798      	blx	r3
 8003d38:	6923      	ldr	r3, [r4, #16]
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	6123      	str	r3, [r4, #16]
 8003d3e:	4545      	cmp	r5, r8
 8003d40:	d8f3      	bhi.n	8003d2a <_scanf_float+0x326>
 8003d42:	e6a6      	b.n	8003a92 <_scanf_float+0x8e>
 8003d44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d48:	4632      	mov	r2, r6
 8003d4a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003d4e:	4638      	mov	r0, r7
 8003d50:	4798      	blx	r3
 8003d52:	6923      	ldr	r3, [r4, #16]
 8003d54:	3b01      	subs	r3, #1
 8003d56:	6123      	str	r3, [r4, #16]
 8003d58:	4545      	cmp	r5, r8
 8003d5a:	d8f3      	bhi.n	8003d44 <_scanf_float+0x340>
 8003d5c:	e699      	b.n	8003a92 <_scanf_float+0x8e>
 8003d5e:	9b03      	ldr	r3, [sp, #12]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d0c0      	beq.n	8003ce6 <_scanf_float+0x2e2>
 8003d64:	9904      	ldr	r1, [sp, #16]
 8003d66:	230a      	movs	r3, #10
 8003d68:	4632      	mov	r2, r6
 8003d6a:	3101      	adds	r1, #1
 8003d6c:	4638      	mov	r0, r7
 8003d6e:	f000 ff5b 	bl	8004c28 <_strtol_r>
 8003d72:	9b03      	ldr	r3, [sp, #12]
 8003d74:	9d04      	ldr	r5, [sp, #16]
 8003d76:	1ac2      	subs	r2, r0, r3
 8003d78:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003d7c:	429d      	cmp	r5, r3
 8003d7e:	bf28      	it	cs
 8003d80:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8003d84:	490e      	ldr	r1, [pc, #56]	; (8003dc0 <_scanf_float+0x3bc>)
 8003d86:	4628      	mov	r0, r5
 8003d88:	f000 f820 	bl	8003dcc <siprintf>
 8003d8c:	e7ab      	b.n	8003ce6 <_scanf_float+0x2e2>
 8003d8e:	1d1f      	adds	r7, r3, #4
 8003d90:	f015 0504 	ands.w	r5, r5, #4
 8003d94:	f8ca 7000 	str.w	r7, [sl]
 8003d98:	d1b5      	bne.n	8003d06 <_scanf_float+0x302>
 8003d9a:	681f      	ldr	r7, [r3, #0]
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	460b      	mov	r3, r1
 8003da0:	f7fc fe44 	bl	8000a2c <__aeabi_dcmpun>
 8003da4:	b120      	cbz	r0, 8003db0 <_scanf_float+0x3ac>
 8003da6:	4628      	mov	r0, r5
 8003da8:	f000 f80c 	bl	8003dc4 <nanf>
 8003dac:	6038      	str	r0, [r7, #0]
 8003dae:	e7ad      	b.n	8003d0c <_scanf_float+0x308>
 8003db0:	4640      	mov	r0, r8
 8003db2:	4649      	mov	r1, r9
 8003db4:	f7fc fe98 	bl	8000ae8 <__aeabi_d2f>
 8003db8:	e7f8      	b.n	8003dac <_scanf_float+0x3a8>
 8003dba:	2600      	movs	r6, #0
 8003dbc:	e66a      	b.n	8003a94 <_scanf_float+0x90>
 8003dbe:	bf00      	nop
 8003dc0:	0800a162 	.word	0x0800a162

08003dc4 <nanf>:
 8003dc4:	4800      	ldr	r0, [pc, #0]	; (8003dc8 <nanf+0x4>)
 8003dc6:	4770      	bx	lr
 8003dc8:	7fc00000 	.word	0x7fc00000

08003dcc <siprintf>:
 8003dcc:	b40e      	push	{r1, r2, r3}
 8003dce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003dd2:	b500      	push	{lr}
 8003dd4:	b09c      	sub	sp, #112	; 0x70
 8003dd6:	ab1d      	add	r3, sp, #116	; 0x74
 8003dd8:	9002      	str	r0, [sp, #8]
 8003dda:	9006      	str	r0, [sp, #24]
 8003ddc:	9107      	str	r1, [sp, #28]
 8003dde:	9104      	str	r1, [sp, #16]
 8003de0:	4808      	ldr	r0, [pc, #32]	; (8003e04 <siprintf+0x38>)
 8003de2:	4909      	ldr	r1, [pc, #36]	; (8003e08 <siprintf+0x3c>)
 8003de4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003de8:	9105      	str	r1, [sp, #20]
 8003dea:	6800      	ldr	r0, [r0, #0]
 8003dec:	a902      	add	r1, sp, #8
 8003dee:	9301      	str	r3, [sp, #4]
 8003df0:	f002 fdf2 	bl	80069d8 <_svfiprintf_r>
 8003df4:	2200      	movs	r2, #0
 8003df6:	9b02      	ldr	r3, [sp, #8]
 8003df8:	701a      	strb	r2, [r3, #0]
 8003dfa:	b01c      	add	sp, #112	; 0x70
 8003dfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e00:	b003      	add	sp, #12
 8003e02:	4770      	bx	lr
 8003e04:	20000004 	.word	0x20000004
 8003e08:	ffff0208 	.word	0xffff0208

08003e0c <siscanf>:
 8003e0c:	b40e      	push	{r1, r2, r3}
 8003e0e:	f44f 7201 	mov.w	r2, #516	; 0x204
 8003e12:	b530      	push	{r4, r5, lr}
 8003e14:	b09c      	sub	sp, #112	; 0x70
 8003e16:	ac1f      	add	r4, sp, #124	; 0x7c
 8003e18:	f854 5b04 	ldr.w	r5, [r4], #4
 8003e1c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8003e20:	9002      	str	r0, [sp, #8]
 8003e22:	9006      	str	r0, [sp, #24]
 8003e24:	f7fc f9a4 	bl	8000170 <strlen>
 8003e28:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <siscanf+0x4c>)
 8003e2a:	9003      	str	r0, [sp, #12]
 8003e2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e2e:	2300      	movs	r3, #0
 8003e30:	930f      	str	r3, [sp, #60]	; 0x3c
 8003e32:	9314      	str	r3, [sp, #80]	; 0x50
 8003e34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e38:	9007      	str	r0, [sp, #28]
 8003e3a:	4808      	ldr	r0, [pc, #32]	; (8003e5c <siscanf+0x50>)
 8003e3c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003e40:	462a      	mov	r2, r5
 8003e42:	4623      	mov	r3, r4
 8003e44:	a902      	add	r1, sp, #8
 8003e46:	6800      	ldr	r0, [r0, #0]
 8003e48:	9401      	str	r4, [sp, #4]
 8003e4a:	f002 ff17 	bl	8006c7c <__ssvfiscanf_r>
 8003e4e:	b01c      	add	sp, #112	; 0x70
 8003e50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e54:	b003      	add	sp, #12
 8003e56:	4770      	bx	lr
 8003e58:	08003e61 	.word	0x08003e61
 8003e5c:	20000004 	.word	0x20000004

08003e60 <__seofread>:
 8003e60:	2000      	movs	r0, #0
 8003e62:	4770      	bx	lr

08003e64 <strcat>:
 8003e64:	4603      	mov	r3, r0
 8003e66:	b510      	push	{r4, lr}
 8003e68:	781a      	ldrb	r2, [r3, #0]
 8003e6a:	1c5c      	adds	r4, r3, #1
 8003e6c:	b93a      	cbnz	r2, 8003e7e <strcat+0x1a>
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e74:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e78:	2a00      	cmp	r2, #0
 8003e7a:	d1f9      	bne.n	8003e70 <strcat+0xc>
 8003e7c:	bd10      	pop	{r4, pc}
 8003e7e:	4623      	mov	r3, r4
 8003e80:	e7f2      	b.n	8003e68 <strcat+0x4>

08003e82 <strncasecmp>:
 8003e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e86:	4606      	mov	r6, r0
 8003e88:	460f      	mov	r7, r1
 8003e8a:	eb00 0802 	add.w	r8, r0, r2
 8003e8e:	45b0      	cmp	r8, r6
 8003e90:	d019      	beq.n	8003ec6 <strncasecmp+0x44>
 8003e92:	f816 4b01 	ldrb.w	r4, [r6], #1
 8003e96:	f002 f847 	bl	8005f28 <__locale_ctype_ptr>
 8003e9a:	4420      	add	r0, r4
 8003e9c:	7843      	ldrb	r3, [r0, #1]
 8003e9e:	f817 5b01 	ldrb.w	r5, [r7], #1
 8003ea2:	f003 0303 	and.w	r3, r3, #3
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	bf08      	it	eq
 8003eaa:	3420      	addeq	r4, #32
 8003eac:	f002 f83c 	bl	8005f28 <__locale_ctype_ptr>
 8003eb0:	4428      	add	r0, r5
 8003eb2:	7842      	ldrb	r2, [r0, #1]
 8003eb4:	f002 0203 	and.w	r2, r2, #3
 8003eb8:	2a01      	cmp	r2, #1
 8003eba:	bf08      	it	eq
 8003ebc:	3520      	addeq	r5, #32
 8003ebe:	1b60      	subs	r0, r4, r5
 8003ec0:	d102      	bne.n	8003ec8 <strncasecmp+0x46>
 8003ec2:	2d00      	cmp	r5, #0
 8003ec4:	d1e3      	bne.n	8003e8e <strncasecmp+0xc>
 8003ec6:	2000      	movs	r0, #0
 8003ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003ecc <sulp>:
 8003ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ed0:	460f      	mov	r7, r1
 8003ed2:	4690      	mov	r8, r2
 8003ed4:	f002 fb44 	bl	8006560 <__ulp>
 8003ed8:	4604      	mov	r4, r0
 8003eda:	460d      	mov	r5, r1
 8003edc:	f1b8 0f00 	cmp.w	r8, #0
 8003ee0:	d011      	beq.n	8003f06 <sulp+0x3a>
 8003ee2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8003ee6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	dd0b      	ble.n	8003f06 <sulp+0x3a>
 8003eee:	2400      	movs	r4, #0
 8003ef0:	051b      	lsls	r3, r3, #20
 8003ef2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003ef6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003efa:	4622      	mov	r2, r4
 8003efc:	462b      	mov	r3, r5
 8003efe:	f7fc fafb 	bl	80004f8 <__aeabi_dmul>
 8003f02:	4604      	mov	r4, r0
 8003f04:	460d      	mov	r5, r1
 8003f06:	4620      	mov	r0, r4
 8003f08:	4629      	mov	r1, r5
 8003f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003f10 <_strtod_l>:
 8003f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f14:	461f      	mov	r7, r3
 8003f16:	2300      	movs	r3, #0
 8003f18:	b0a1      	sub	sp, #132	; 0x84
 8003f1a:	4683      	mov	fp, r0
 8003f1c:	4638      	mov	r0, r7
 8003f1e:	460e      	mov	r6, r1
 8003f20:	9217      	str	r2, [sp, #92]	; 0x5c
 8003f22:	931c      	str	r3, [sp, #112]	; 0x70
 8003f24:	f002 f80e 	bl	8005f44 <__localeconv_l>
 8003f28:	4680      	mov	r8, r0
 8003f2a:	6800      	ldr	r0, [r0, #0]
 8003f2c:	f7fc f920 	bl	8000170 <strlen>
 8003f30:	f04f 0900 	mov.w	r9, #0
 8003f34:	4604      	mov	r4, r0
 8003f36:	f04f 0a00 	mov.w	sl, #0
 8003f3a:	961b      	str	r6, [sp, #108]	; 0x6c
 8003f3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003f3e:	781a      	ldrb	r2, [r3, #0]
 8003f40:	2a0d      	cmp	r2, #13
 8003f42:	d832      	bhi.n	8003faa <_strtod_l+0x9a>
 8003f44:	2a09      	cmp	r2, #9
 8003f46:	d236      	bcs.n	8003fb6 <_strtod_l+0xa6>
 8003f48:	2a00      	cmp	r2, #0
 8003f4a:	d03e      	beq.n	8003fca <_strtod_l+0xba>
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	930d      	str	r3, [sp, #52]	; 0x34
 8003f50:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8003f52:	782b      	ldrb	r3, [r5, #0]
 8003f54:	2b30      	cmp	r3, #48	; 0x30
 8003f56:	f040 80ac 	bne.w	80040b2 <_strtod_l+0x1a2>
 8003f5a:	786b      	ldrb	r3, [r5, #1]
 8003f5c:	2b58      	cmp	r3, #88	; 0x58
 8003f5e:	d001      	beq.n	8003f64 <_strtod_l+0x54>
 8003f60:	2b78      	cmp	r3, #120	; 0x78
 8003f62:	d167      	bne.n	8004034 <_strtod_l+0x124>
 8003f64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f66:	9702      	str	r7, [sp, #8]
 8003f68:	9301      	str	r3, [sp, #4]
 8003f6a:	ab1c      	add	r3, sp, #112	; 0x70
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	4a89      	ldr	r2, [pc, #548]	; (8004194 <_strtod_l+0x284>)
 8003f70:	ab1d      	add	r3, sp, #116	; 0x74
 8003f72:	a91b      	add	r1, sp, #108	; 0x6c
 8003f74:	4658      	mov	r0, fp
 8003f76:	f001 fcfb 	bl	8005970 <__gethex>
 8003f7a:	f010 0407 	ands.w	r4, r0, #7
 8003f7e:	4606      	mov	r6, r0
 8003f80:	d005      	beq.n	8003f8e <_strtod_l+0x7e>
 8003f82:	2c06      	cmp	r4, #6
 8003f84:	d12b      	bne.n	8003fde <_strtod_l+0xce>
 8003f86:	2300      	movs	r3, #0
 8003f88:	3501      	adds	r5, #1
 8003f8a:	951b      	str	r5, [sp, #108]	; 0x6c
 8003f8c:	930d      	str	r3, [sp, #52]	; 0x34
 8003f8e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f040 85a6 	bne.w	8004ae2 <_strtod_l+0xbd2>
 8003f96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f98:	b1e3      	cbz	r3, 8003fd4 <_strtod_l+0xc4>
 8003f9a:	464a      	mov	r2, r9
 8003f9c:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8003fa0:	4610      	mov	r0, r2
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	b021      	add	sp, #132	; 0x84
 8003fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003faa:	2a2b      	cmp	r2, #43	; 0x2b
 8003fac:	d015      	beq.n	8003fda <_strtod_l+0xca>
 8003fae:	2a2d      	cmp	r2, #45	; 0x2d
 8003fb0:	d004      	beq.n	8003fbc <_strtod_l+0xac>
 8003fb2:	2a20      	cmp	r2, #32
 8003fb4:	d1ca      	bne.n	8003f4c <_strtod_l+0x3c>
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	931b      	str	r3, [sp, #108]	; 0x6c
 8003fba:	e7bf      	b.n	8003f3c <_strtod_l+0x2c>
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	920d      	str	r2, [sp, #52]	; 0x34
 8003fc0:	1c5a      	adds	r2, r3, #1
 8003fc2:	921b      	str	r2, [sp, #108]	; 0x6c
 8003fc4:	785b      	ldrb	r3, [r3, #1]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1c2      	bne.n	8003f50 <_strtod_l+0x40>
 8003fca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003fcc:	961b      	str	r6, [sp, #108]	; 0x6c
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f040 8585 	bne.w	8004ade <_strtod_l+0xbce>
 8003fd4:	464a      	mov	r2, r9
 8003fd6:	4653      	mov	r3, sl
 8003fd8:	e7e2      	b.n	8003fa0 <_strtod_l+0x90>
 8003fda:	2200      	movs	r2, #0
 8003fdc:	e7ef      	b.n	8003fbe <_strtod_l+0xae>
 8003fde:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003fe0:	b13a      	cbz	r2, 8003ff2 <_strtod_l+0xe2>
 8003fe2:	2135      	movs	r1, #53	; 0x35
 8003fe4:	a81e      	add	r0, sp, #120	; 0x78
 8003fe6:	f002 fbae 	bl	8006746 <__copybits>
 8003fea:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003fec:	4658      	mov	r0, fp
 8003fee:	f002 f820 	bl	8006032 <_Bfree>
 8003ff2:	3c01      	subs	r4, #1
 8003ff4:	2c04      	cmp	r4, #4
 8003ff6:	d806      	bhi.n	8004006 <_strtod_l+0xf6>
 8003ff8:	e8df f004 	tbb	[pc, r4]
 8003ffc:	1714030a 	.word	0x1714030a
 8004000:	0a          	.byte	0x0a
 8004001:	00          	.byte	0x00
 8004002:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8004006:	0731      	lsls	r1, r6, #28
 8004008:	d5c1      	bpl.n	8003f8e <_strtod_l+0x7e>
 800400a:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 800400e:	e7be      	b.n	8003f8e <_strtod_l+0x7e>
 8004010:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004012:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8004016:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800401a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800401e:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8004022:	e7f0      	b.n	8004006 <_strtod_l+0xf6>
 8004024:	f8df a170 	ldr.w	sl, [pc, #368]	; 8004198 <_strtod_l+0x288>
 8004028:	e7ed      	b.n	8004006 <_strtod_l+0xf6>
 800402a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800402e:	f04f 39ff 	mov.w	r9, #4294967295
 8004032:	e7e8      	b.n	8004006 <_strtod_l+0xf6>
 8004034:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004036:	1c5a      	adds	r2, r3, #1
 8004038:	921b      	str	r2, [sp, #108]	; 0x6c
 800403a:	785b      	ldrb	r3, [r3, #1]
 800403c:	2b30      	cmp	r3, #48	; 0x30
 800403e:	d0f9      	beq.n	8004034 <_strtod_l+0x124>
 8004040:	2b00      	cmp	r3, #0
 8004042:	d0a4      	beq.n	8003f8e <_strtod_l+0x7e>
 8004044:	2301      	movs	r3, #1
 8004046:	2500      	movs	r5, #0
 8004048:	220a      	movs	r2, #10
 800404a:	9307      	str	r3, [sp, #28]
 800404c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800404e:	9506      	str	r5, [sp, #24]
 8004050:	9308      	str	r3, [sp, #32]
 8004052:	9504      	str	r5, [sp, #16]
 8004054:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004056:	7807      	ldrb	r7, [r0, #0]
 8004058:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800405c:	b2d9      	uxtb	r1, r3
 800405e:	2909      	cmp	r1, #9
 8004060:	d929      	bls.n	80040b6 <_strtod_l+0x1a6>
 8004062:	4622      	mov	r2, r4
 8004064:	f8d8 1000 	ldr.w	r1, [r8]
 8004068:	f003 f8f1 	bl	800724e <strncmp>
 800406c:	2800      	cmp	r0, #0
 800406e:	d031      	beq.n	80040d4 <_strtod_l+0x1c4>
 8004070:	2000      	movs	r0, #0
 8004072:	463b      	mov	r3, r7
 8004074:	4602      	mov	r2, r0
 8004076:	9c04      	ldr	r4, [sp, #16]
 8004078:	9005      	str	r0, [sp, #20]
 800407a:	2b65      	cmp	r3, #101	; 0x65
 800407c:	d001      	beq.n	8004082 <_strtod_l+0x172>
 800407e:	2b45      	cmp	r3, #69	; 0x45
 8004080:	d114      	bne.n	80040ac <_strtod_l+0x19c>
 8004082:	b924      	cbnz	r4, 800408e <_strtod_l+0x17e>
 8004084:	b910      	cbnz	r0, 800408c <_strtod_l+0x17c>
 8004086:	9b07      	ldr	r3, [sp, #28]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d09e      	beq.n	8003fca <_strtod_l+0xba>
 800408c:	2400      	movs	r4, #0
 800408e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004090:	1c73      	adds	r3, r6, #1
 8004092:	931b      	str	r3, [sp, #108]	; 0x6c
 8004094:	7873      	ldrb	r3, [r6, #1]
 8004096:	2b2b      	cmp	r3, #43	; 0x2b
 8004098:	d078      	beq.n	800418c <_strtod_l+0x27c>
 800409a:	2b2d      	cmp	r3, #45	; 0x2d
 800409c:	d070      	beq.n	8004180 <_strtod_l+0x270>
 800409e:	f04f 0c00 	mov.w	ip, #0
 80040a2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80040a6:	2f09      	cmp	r7, #9
 80040a8:	d97c      	bls.n	80041a4 <_strtod_l+0x294>
 80040aa:	961b      	str	r6, [sp, #108]	; 0x6c
 80040ac:	f04f 0e00 	mov.w	lr, #0
 80040b0:	e09a      	b.n	80041e8 <_strtod_l+0x2d8>
 80040b2:	2300      	movs	r3, #0
 80040b4:	e7c7      	b.n	8004046 <_strtod_l+0x136>
 80040b6:	9904      	ldr	r1, [sp, #16]
 80040b8:	3001      	adds	r0, #1
 80040ba:	2908      	cmp	r1, #8
 80040bc:	bfd7      	itett	le
 80040be:	9906      	ldrle	r1, [sp, #24]
 80040c0:	fb02 3505 	mlagt	r5, r2, r5, r3
 80040c4:	fb02 3301 	mlale	r3, r2, r1, r3
 80040c8:	9306      	strle	r3, [sp, #24]
 80040ca:	9b04      	ldr	r3, [sp, #16]
 80040cc:	901b      	str	r0, [sp, #108]	; 0x6c
 80040ce:	3301      	adds	r3, #1
 80040d0:	9304      	str	r3, [sp, #16]
 80040d2:	e7bf      	b.n	8004054 <_strtod_l+0x144>
 80040d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80040d6:	191a      	adds	r2, r3, r4
 80040d8:	921b      	str	r2, [sp, #108]	; 0x6c
 80040da:	9a04      	ldr	r2, [sp, #16]
 80040dc:	5d1b      	ldrb	r3, [r3, r4]
 80040de:	2a00      	cmp	r2, #0
 80040e0:	d037      	beq.n	8004152 <_strtod_l+0x242>
 80040e2:	4602      	mov	r2, r0
 80040e4:	9c04      	ldr	r4, [sp, #16]
 80040e6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80040ea:	2909      	cmp	r1, #9
 80040ec:	d913      	bls.n	8004116 <_strtod_l+0x206>
 80040ee:	2101      	movs	r1, #1
 80040f0:	9105      	str	r1, [sp, #20]
 80040f2:	e7c2      	b.n	800407a <_strtod_l+0x16a>
 80040f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80040f6:	3001      	adds	r0, #1
 80040f8:	1c5a      	adds	r2, r3, #1
 80040fa:	921b      	str	r2, [sp, #108]	; 0x6c
 80040fc:	785b      	ldrb	r3, [r3, #1]
 80040fe:	2b30      	cmp	r3, #48	; 0x30
 8004100:	d0f8      	beq.n	80040f4 <_strtod_l+0x1e4>
 8004102:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004106:	2a08      	cmp	r2, #8
 8004108:	f200 84f0 	bhi.w	8004aec <_strtod_l+0xbdc>
 800410c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800410e:	9208      	str	r2, [sp, #32]
 8004110:	4602      	mov	r2, r0
 8004112:	2000      	movs	r0, #0
 8004114:	4604      	mov	r4, r0
 8004116:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800411a:	f100 0101 	add.w	r1, r0, #1
 800411e:	d012      	beq.n	8004146 <_strtod_l+0x236>
 8004120:	440a      	add	r2, r1
 8004122:	270a      	movs	r7, #10
 8004124:	4621      	mov	r1, r4
 8004126:	eb00 0c04 	add.w	ip, r0, r4
 800412a:	458c      	cmp	ip, r1
 800412c:	d113      	bne.n	8004156 <_strtod_l+0x246>
 800412e:	1821      	adds	r1, r4, r0
 8004130:	2908      	cmp	r1, #8
 8004132:	f104 0401 	add.w	r4, r4, #1
 8004136:	4404      	add	r4, r0
 8004138:	dc19      	bgt.n	800416e <_strtod_l+0x25e>
 800413a:	210a      	movs	r1, #10
 800413c:	9b06      	ldr	r3, [sp, #24]
 800413e:	fb01 e303 	mla	r3, r1, r3, lr
 8004142:	9306      	str	r3, [sp, #24]
 8004144:	2100      	movs	r1, #0
 8004146:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004148:	1c58      	adds	r0, r3, #1
 800414a:	901b      	str	r0, [sp, #108]	; 0x6c
 800414c:	785b      	ldrb	r3, [r3, #1]
 800414e:	4608      	mov	r0, r1
 8004150:	e7c9      	b.n	80040e6 <_strtod_l+0x1d6>
 8004152:	9804      	ldr	r0, [sp, #16]
 8004154:	e7d3      	b.n	80040fe <_strtod_l+0x1ee>
 8004156:	2908      	cmp	r1, #8
 8004158:	f101 0101 	add.w	r1, r1, #1
 800415c:	dc03      	bgt.n	8004166 <_strtod_l+0x256>
 800415e:	9b06      	ldr	r3, [sp, #24]
 8004160:	437b      	muls	r3, r7
 8004162:	9306      	str	r3, [sp, #24]
 8004164:	e7e1      	b.n	800412a <_strtod_l+0x21a>
 8004166:	2910      	cmp	r1, #16
 8004168:	bfd8      	it	le
 800416a:	437d      	mulle	r5, r7
 800416c:	e7dd      	b.n	800412a <_strtod_l+0x21a>
 800416e:	2c10      	cmp	r4, #16
 8004170:	bfdc      	itt	le
 8004172:	210a      	movle	r1, #10
 8004174:	fb01 e505 	mlale	r5, r1, r5, lr
 8004178:	e7e4      	b.n	8004144 <_strtod_l+0x234>
 800417a:	2301      	movs	r3, #1
 800417c:	9305      	str	r3, [sp, #20]
 800417e:	e781      	b.n	8004084 <_strtod_l+0x174>
 8004180:	f04f 0c01 	mov.w	ip, #1
 8004184:	1cb3      	adds	r3, r6, #2
 8004186:	931b      	str	r3, [sp, #108]	; 0x6c
 8004188:	78b3      	ldrb	r3, [r6, #2]
 800418a:	e78a      	b.n	80040a2 <_strtod_l+0x192>
 800418c:	f04f 0c00 	mov.w	ip, #0
 8004190:	e7f8      	b.n	8004184 <_strtod_l+0x274>
 8004192:	bf00      	nop
 8004194:	0800a168 	.word	0x0800a168
 8004198:	7ff00000 	.word	0x7ff00000
 800419c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800419e:	1c5f      	adds	r7, r3, #1
 80041a0:	971b      	str	r7, [sp, #108]	; 0x6c
 80041a2:	785b      	ldrb	r3, [r3, #1]
 80041a4:	2b30      	cmp	r3, #48	; 0x30
 80041a6:	d0f9      	beq.n	800419c <_strtod_l+0x28c>
 80041a8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80041ac:	2f08      	cmp	r7, #8
 80041ae:	f63f af7d 	bhi.w	80040ac <_strtod_l+0x19c>
 80041b2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80041b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80041b8:	9309      	str	r3, [sp, #36]	; 0x24
 80041ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80041bc:	1c5f      	adds	r7, r3, #1
 80041be:	971b      	str	r7, [sp, #108]	; 0x6c
 80041c0:	785b      	ldrb	r3, [r3, #1]
 80041c2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80041c6:	f1b8 0f09 	cmp.w	r8, #9
 80041ca:	d937      	bls.n	800423c <_strtod_l+0x32c>
 80041cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80041ce:	1a7f      	subs	r7, r7, r1
 80041d0:	2f08      	cmp	r7, #8
 80041d2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80041d6:	dc37      	bgt.n	8004248 <_strtod_l+0x338>
 80041d8:	45be      	cmp	lr, r7
 80041da:	bfa8      	it	ge
 80041dc:	46be      	movge	lr, r7
 80041de:	f1bc 0f00 	cmp.w	ip, #0
 80041e2:	d001      	beq.n	80041e8 <_strtod_l+0x2d8>
 80041e4:	f1ce 0e00 	rsb	lr, lr, #0
 80041e8:	2c00      	cmp	r4, #0
 80041ea:	d151      	bne.n	8004290 <_strtod_l+0x380>
 80041ec:	2800      	cmp	r0, #0
 80041ee:	f47f aece 	bne.w	8003f8e <_strtod_l+0x7e>
 80041f2:	9a07      	ldr	r2, [sp, #28]
 80041f4:	2a00      	cmp	r2, #0
 80041f6:	f47f aeca 	bne.w	8003f8e <_strtod_l+0x7e>
 80041fa:	9a05      	ldr	r2, [sp, #20]
 80041fc:	2a00      	cmp	r2, #0
 80041fe:	f47f aee4 	bne.w	8003fca <_strtod_l+0xba>
 8004202:	2b4e      	cmp	r3, #78	; 0x4e
 8004204:	d027      	beq.n	8004256 <_strtod_l+0x346>
 8004206:	dc21      	bgt.n	800424c <_strtod_l+0x33c>
 8004208:	2b49      	cmp	r3, #73	; 0x49
 800420a:	f47f aede 	bne.w	8003fca <_strtod_l+0xba>
 800420e:	49a4      	ldr	r1, [pc, #656]	; (80044a0 <_strtod_l+0x590>)
 8004210:	a81b      	add	r0, sp, #108	; 0x6c
 8004212:	f001 fde1 	bl	8005dd8 <__match>
 8004216:	2800      	cmp	r0, #0
 8004218:	f43f aed7 	beq.w	8003fca <_strtod_l+0xba>
 800421c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800421e:	49a1      	ldr	r1, [pc, #644]	; (80044a4 <_strtod_l+0x594>)
 8004220:	3b01      	subs	r3, #1
 8004222:	a81b      	add	r0, sp, #108	; 0x6c
 8004224:	931b      	str	r3, [sp, #108]	; 0x6c
 8004226:	f001 fdd7 	bl	8005dd8 <__match>
 800422a:	b910      	cbnz	r0, 8004232 <_strtod_l+0x322>
 800422c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800422e:	3301      	adds	r3, #1
 8004230:	931b      	str	r3, [sp, #108]	; 0x6c
 8004232:	f8df a284 	ldr.w	sl, [pc, #644]	; 80044b8 <_strtod_l+0x5a8>
 8004236:	f04f 0900 	mov.w	r9, #0
 800423a:	e6a8      	b.n	8003f8e <_strtod_l+0x7e>
 800423c:	210a      	movs	r1, #10
 800423e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8004242:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004246:	e7b8      	b.n	80041ba <_strtod_l+0x2aa>
 8004248:	46be      	mov	lr, r7
 800424a:	e7c8      	b.n	80041de <_strtod_l+0x2ce>
 800424c:	2b69      	cmp	r3, #105	; 0x69
 800424e:	d0de      	beq.n	800420e <_strtod_l+0x2fe>
 8004250:	2b6e      	cmp	r3, #110	; 0x6e
 8004252:	f47f aeba 	bne.w	8003fca <_strtod_l+0xba>
 8004256:	4994      	ldr	r1, [pc, #592]	; (80044a8 <_strtod_l+0x598>)
 8004258:	a81b      	add	r0, sp, #108	; 0x6c
 800425a:	f001 fdbd 	bl	8005dd8 <__match>
 800425e:	2800      	cmp	r0, #0
 8004260:	f43f aeb3 	beq.w	8003fca <_strtod_l+0xba>
 8004264:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	2b28      	cmp	r3, #40	; 0x28
 800426a:	d10e      	bne.n	800428a <_strtod_l+0x37a>
 800426c:	aa1e      	add	r2, sp, #120	; 0x78
 800426e:	498f      	ldr	r1, [pc, #572]	; (80044ac <_strtod_l+0x59c>)
 8004270:	a81b      	add	r0, sp, #108	; 0x6c
 8004272:	f001 fdc5 	bl	8005e00 <__hexnan>
 8004276:	2805      	cmp	r0, #5
 8004278:	d107      	bne.n	800428a <_strtod_l+0x37a>
 800427a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800427c:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8004280:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8004284:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8004288:	e681      	b.n	8003f8e <_strtod_l+0x7e>
 800428a:	f8df a234 	ldr.w	sl, [pc, #564]	; 80044c0 <_strtod_l+0x5b0>
 800428e:	e7d2      	b.n	8004236 <_strtod_l+0x326>
 8004290:	ebae 0302 	sub.w	r3, lr, r2
 8004294:	9307      	str	r3, [sp, #28]
 8004296:	9b04      	ldr	r3, [sp, #16]
 8004298:	9806      	ldr	r0, [sp, #24]
 800429a:	2b00      	cmp	r3, #0
 800429c:	bf08      	it	eq
 800429e:	4623      	moveq	r3, r4
 80042a0:	2c10      	cmp	r4, #16
 80042a2:	9304      	str	r3, [sp, #16]
 80042a4:	46a0      	mov	r8, r4
 80042a6:	bfa8      	it	ge
 80042a8:	f04f 0810 	movge.w	r8, #16
 80042ac:	f7fc f8aa 	bl	8000404 <__aeabi_ui2d>
 80042b0:	2c09      	cmp	r4, #9
 80042b2:	4681      	mov	r9, r0
 80042b4:	468a      	mov	sl, r1
 80042b6:	dc13      	bgt.n	80042e0 <_strtod_l+0x3d0>
 80042b8:	9b07      	ldr	r3, [sp, #28]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f43f ae67 	beq.w	8003f8e <_strtod_l+0x7e>
 80042c0:	9b07      	ldr	r3, [sp, #28]
 80042c2:	dd7e      	ble.n	80043c2 <_strtod_l+0x4b2>
 80042c4:	2b16      	cmp	r3, #22
 80042c6:	dc65      	bgt.n	8004394 <_strtod_l+0x484>
 80042c8:	4a79      	ldr	r2, [pc, #484]	; (80044b0 <_strtod_l+0x5a0>)
 80042ca:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80042ce:	464a      	mov	r2, r9
 80042d0:	e9de 0100 	ldrd	r0, r1, [lr]
 80042d4:	4653      	mov	r3, sl
 80042d6:	f7fc f90f 	bl	80004f8 <__aeabi_dmul>
 80042da:	4681      	mov	r9, r0
 80042dc:	468a      	mov	sl, r1
 80042de:	e656      	b.n	8003f8e <_strtod_l+0x7e>
 80042e0:	4b73      	ldr	r3, [pc, #460]	; (80044b0 <_strtod_l+0x5a0>)
 80042e2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80042e6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80042ea:	f7fc f905 	bl	80004f8 <__aeabi_dmul>
 80042ee:	4606      	mov	r6, r0
 80042f0:	4628      	mov	r0, r5
 80042f2:	460f      	mov	r7, r1
 80042f4:	f7fc f886 	bl	8000404 <__aeabi_ui2d>
 80042f8:	4602      	mov	r2, r0
 80042fa:	460b      	mov	r3, r1
 80042fc:	4630      	mov	r0, r6
 80042fe:	4639      	mov	r1, r7
 8004300:	f7fb ff44 	bl	800018c <__adddf3>
 8004304:	2c0f      	cmp	r4, #15
 8004306:	4681      	mov	r9, r0
 8004308:	468a      	mov	sl, r1
 800430a:	ddd5      	ble.n	80042b8 <_strtod_l+0x3a8>
 800430c:	9b07      	ldr	r3, [sp, #28]
 800430e:	eba4 0808 	sub.w	r8, r4, r8
 8004312:	4498      	add	r8, r3
 8004314:	f1b8 0f00 	cmp.w	r8, #0
 8004318:	f340 809a 	ble.w	8004450 <_strtod_l+0x540>
 800431c:	f018 030f 	ands.w	r3, r8, #15
 8004320:	d00a      	beq.n	8004338 <_strtod_l+0x428>
 8004322:	4963      	ldr	r1, [pc, #396]	; (80044b0 <_strtod_l+0x5a0>)
 8004324:	464a      	mov	r2, r9
 8004326:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800432a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800432e:	4653      	mov	r3, sl
 8004330:	f7fc f8e2 	bl	80004f8 <__aeabi_dmul>
 8004334:	4681      	mov	r9, r0
 8004336:	468a      	mov	sl, r1
 8004338:	f038 080f 	bics.w	r8, r8, #15
 800433c:	d077      	beq.n	800442e <_strtod_l+0x51e>
 800433e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004342:	dd4b      	ble.n	80043dc <_strtod_l+0x4cc>
 8004344:	f04f 0800 	mov.w	r8, #0
 8004348:	f8cd 8010 	str.w	r8, [sp, #16]
 800434c:	f8cd 8020 	str.w	r8, [sp, #32]
 8004350:	f8cd 8018 	str.w	r8, [sp, #24]
 8004354:	2322      	movs	r3, #34	; 0x22
 8004356:	f04f 0900 	mov.w	r9, #0
 800435a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 80044b8 <_strtod_l+0x5a8>
 800435e:	f8cb 3000 	str.w	r3, [fp]
 8004362:	9b08      	ldr	r3, [sp, #32]
 8004364:	2b00      	cmp	r3, #0
 8004366:	f43f ae12 	beq.w	8003f8e <_strtod_l+0x7e>
 800436a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800436c:	4658      	mov	r0, fp
 800436e:	f001 fe60 	bl	8006032 <_Bfree>
 8004372:	9906      	ldr	r1, [sp, #24]
 8004374:	4658      	mov	r0, fp
 8004376:	f001 fe5c 	bl	8006032 <_Bfree>
 800437a:	9904      	ldr	r1, [sp, #16]
 800437c:	4658      	mov	r0, fp
 800437e:	f001 fe58 	bl	8006032 <_Bfree>
 8004382:	9908      	ldr	r1, [sp, #32]
 8004384:	4658      	mov	r0, fp
 8004386:	f001 fe54 	bl	8006032 <_Bfree>
 800438a:	4641      	mov	r1, r8
 800438c:	4658      	mov	r0, fp
 800438e:	f001 fe50 	bl	8006032 <_Bfree>
 8004392:	e5fc      	b.n	8003f8e <_strtod_l+0x7e>
 8004394:	9a07      	ldr	r2, [sp, #28]
 8004396:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800439a:	4293      	cmp	r3, r2
 800439c:	dbb6      	blt.n	800430c <_strtod_l+0x3fc>
 800439e:	4d44      	ldr	r5, [pc, #272]	; (80044b0 <_strtod_l+0x5a0>)
 80043a0:	f1c4 040f 	rsb	r4, r4, #15
 80043a4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80043a8:	464a      	mov	r2, r9
 80043aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043ae:	4653      	mov	r3, sl
 80043b0:	f7fc f8a2 	bl	80004f8 <__aeabi_dmul>
 80043b4:	9b07      	ldr	r3, [sp, #28]
 80043b6:	1b1c      	subs	r4, r3, r4
 80043b8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80043bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80043c0:	e789      	b.n	80042d6 <_strtod_l+0x3c6>
 80043c2:	f113 0f16 	cmn.w	r3, #22
 80043c6:	dba1      	blt.n	800430c <_strtod_l+0x3fc>
 80043c8:	4a39      	ldr	r2, [pc, #228]	; (80044b0 <_strtod_l+0x5a0>)
 80043ca:	4648      	mov	r0, r9
 80043cc:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80043d0:	e9d2 2300 	ldrd	r2, r3, [r2]
 80043d4:	4651      	mov	r1, sl
 80043d6:	f7fc f9b9 	bl	800074c <__aeabi_ddiv>
 80043da:	e77e      	b.n	80042da <_strtod_l+0x3ca>
 80043dc:	2300      	movs	r3, #0
 80043de:	4648      	mov	r0, r9
 80043e0:	4651      	mov	r1, sl
 80043e2:	461d      	mov	r5, r3
 80043e4:	4e33      	ldr	r6, [pc, #204]	; (80044b4 <_strtod_l+0x5a4>)
 80043e6:	ea4f 1828 	mov.w	r8, r8, asr #4
 80043ea:	f1b8 0f01 	cmp.w	r8, #1
 80043ee:	dc21      	bgt.n	8004434 <_strtod_l+0x524>
 80043f0:	b10b      	cbz	r3, 80043f6 <_strtod_l+0x4e6>
 80043f2:	4681      	mov	r9, r0
 80043f4:	468a      	mov	sl, r1
 80043f6:	4b2f      	ldr	r3, [pc, #188]	; (80044b4 <_strtod_l+0x5a4>)
 80043f8:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 80043fc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004400:	464a      	mov	r2, r9
 8004402:	e9d5 0100 	ldrd	r0, r1, [r5]
 8004406:	4653      	mov	r3, sl
 8004408:	f7fc f876 	bl	80004f8 <__aeabi_dmul>
 800440c:	4b2a      	ldr	r3, [pc, #168]	; (80044b8 <_strtod_l+0x5a8>)
 800440e:	460a      	mov	r2, r1
 8004410:	400b      	ands	r3, r1
 8004412:	492a      	ldr	r1, [pc, #168]	; (80044bc <_strtod_l+0x5ac>)
 8004414:	4681      	mov	r9, r0
 8004416:	428b      	cmp	r3, r1
 8004418:	d894      	bhi.n	8004344 <_strtod_l+0x434>
 800441a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800441e:	428b      	cmp	r3, r1
 8004420:	bf86      	itte	hi
 8004422:	f04f 39ff 	movhi.w	r9, #4294967295
 8004426:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 80044c4 <_strtod_l+0x5b4>
 800442a:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800442e:	2300      	movs	r3, #0
 8004430:	9305      	str	r3, [sp, #20]
 8004432:	e07b      	b.n	800452c <_strtod_l+0x61c>
 8004434:	f018 0f01 	tst.w	r8, #1
 8004438:	d006      	beq.n	8004448 <_strtod_l+0x538>
 800443a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800443e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004442:	f7fc f859 	bl	80004f8 <__aeabi_dmul>
 8004446:	2301      	movs	r3, #1
 8004448:	3501      	adds	r5, #1
 800444a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800444e:	e7cc      	b.n	80043ea <_strtod_l+0x4da>
 8004450:	d0ed      	beq.n	800442e <_strtod_l+0x51e>
 8004452:	f1c8 0800 	rsb	r8, r8, #0
 8004456:	f018 020f 	ands.w	r2, r8, #15
 800445a:	d00a      	beq.n	8004472 <_strtod_l+0x562>
 800445c:	4b14      	ldr	r3, [pc, #80]	; (80044b0 <_strtod_l+0x5a0>)
 800445e:	4648      	mov	r0, r9
 8004460:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004464:	4651      	mov	r1, sl
 8004466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446a:	f7fc f96f 	bl	800074c <__aeabi_ddiv>
 800446e:	4681      	mov	r9, r0
 8004470:	468a      	mov	sl, r1
 8004472:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004476:	d0da      	beq.n	800442e <_strtod_l+0x51e>
 8004478:	f1b8 0f1f 	cmp.w	r8, #31
 800447c:	dd24      	ble.n	80044c8 <_strtod_l+0x5b8>
 800447e:	f04f 0800 	mov.w	r8, #0
 8004482:	f8cd 8010 	str.w	r8, [sp, #16]
 8004486:	f8cd 8020 	str.w	r8, [sp, #32]
 800448a:	f8cd 8018 	str.w	r8, [sp, #24]
 800448e:	2322      	movs	r3, #34	; 0x22
 8004490:	f04f 0900 	mov.w	r9, #0
 8004494:	f04f 0a00 	mov.w	sl, #0
 8004498:	f8cb 3000 	str.w	r3, [fp]
 800449c:	e761      	b.n	8004362 <_strtod_l+0x452>
 800449e:	bf00      	nop
 80044a0:	0800a135 	.word	0x0800a135
 80044a4:	0800a1bb 	.word	0x0800a1bb
 80044a8:	0800a13d 	.word	0x0800a13d
 80044ac:	0800a17c 	.word	0x0800a17c
 80044b0:	0800a1f8 	.word	0x0800a1f8
 80044b4:	0800a1d0 	.word	0x0800a1d0
 80044b8:	7ff00000 	.word	0x7ff00000
 80044bc:	7ca00000 	.word	0x7ca00000
 80044c0:	fff80000 	.word	0xfff80000
 80044c4:	7fefffff 	.word	0x7fefffff
 80044c8:	f018 0310 	ands.w	r3, r8, #16
 80044cc:	bf18      	it	ne
 80044ce:	236a      	movne	r3, #106	; 0x6a
 80044d0:	4648      	mov	r0, r9
 80044d2:	9305      	str	r3, [sp, #20]
 80044d4:	4651      	mov	r1, sl
 80044d6:	2300      	movs	r3, #0
 80044d8:	4da1      	ldr	r5, [pc, #644]	; (8004760 <_strtod_l+0x850>)
 80044da:	f1b8 0f00 	cmp.w	r8, #0
 80044de:	f300 8113 	bgt.w	8004708 <_strtod_l+0x7f8>
 80044e2:	b10b      	cbz	r3, 80044e8 <_strtod_l+0x5d8>
 80044e4:	4681      	mov	r9, r0
 80044e6:	468a      	mov	sl, r1
 80044e8:	9b05      	ldr	r3, [sp, #20]
 80044ea:	b1bb      	cbz	r3, 800451c <_strtod_l+0x60c>
 80044ec:	f3ca 530a 	ubfx	r3, sl, #20, #11
 80044f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	4651      	mov	r1, sl
 80044f8:	dd10      	ble.n	800451c <_strtod_l+0x60c>
 80044fa:	2b1f      	cmp	r3, #31
 80044fc:	f340 8110 	ble.w	8004720 <_strtod_l+0x810>
 8004500:	2b34      	cmp	r3, #52	; 0x34
 8004502:	bfd8      	it	le
 8004504:	f04f 32ff 	movle.w	r2, #4294967295
 8004508:	f04f 0900 	mov.w	r9, #0
 800450c:	bfcf      	iteee	gt
 800450e:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8004512:	3b20      	suble	r3, #32
 8004514:	fa02 f303 	lslle.w	r3, r2, r3
 8004518:	ea03 0a01 	andle.w	sl, r3, r1
 800451c:	2200      	movs	r2, #0
 800451e:	2300      	movs	r3, #0
 8004520:	4648      	mov	r0, r9
 8004522:	4651      	mov	r1, sl
 8004524:	f7fc fa50 	bl	80009c8 <__aeabi_dcmpeq>
 8004528:	2800      	cmp	r0, #0
 800452a:	d1a8      	bne.n	800447e <_strtod_l+0x56e>
 800452c:	9b06      	ldr	r3, [sp, #24]
 800452e:	9a04      	ldr	r2, [sp, #16]
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	9908      	ldr	r1, [sp, #32]
 8004534:	4623      	mov	r3, r4
 8004536:	4658      	mov	r0, fp
 8004538:	f001 fdcd 	bl	80060d6 <__s2b>
 800453c:	9008      	str	r0, [sp, #32]
 800453e:	2800      	cmp	r0, #0
 8004540:	f43f af00 	beq.w	8004344 <_strtod_l+0x434>
 8004544:	9a07      	ldr	r2, [sp, #28]
 8004546:	9b07      	ldr	r3, [sp, #28]
 8004548:	2a00      	cmp	r2, #0
 800454a:	f1c3 0300 	rsb	r3, r3, #0
 800454e:	bfa8      	it	ge
 8004550:	2300      	movge	r3, #0
 8004552:	f04f 0800 	mov.w	r8, #0
 8004556:	930e      	str	r3, [sp, #56]	; 0x38
 8004558:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800455c:	9316      	str	r3, [sp, #88]	; 0x58
 800455e:	f8cd 8010 	str.w	r8, [sp, #16]
 8004562:	9b08      	ldr	r3, [sp, #32]
 8004564:	4658      	mov	r0, fp
 8004566:	6859      	ldr	r1, [r3, #4]
 8004568:	f001 fd2f 	bl	8005fca <_Balloc>
 800456c:	9006      	str	r0, [sp, #24]
 800456e:	2800      	cmp	r0, #0
 8004570:	f43f aef0 	beq.w	8004354 <_strtod_l+0x444>
 8004574:	9b08      	ldr	r3, [sp, #32]
 8004576:	300c      	adds	r0, #12
 8004578:	691a      	ldr	r2, [r3, #16]
 800457a:	f103 010c 	add.w	r1, r3, #12
 800457e:	3202      	adds	r2, #2
 8004580:	0092      	lsls	r2, r2, #2
 8004582:	f001 fd17 	bl	8005fb4 <memcpy>
 8004586:	ab1e      	add	r3, sp, #120	; 0x78
 8004588:	9301      	str	r3, [sp, #4]
 800458a:	ab1d      	add	r3, sp, #116	; 0x74
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	464a      	mov	r2, r9
 8004590:	4653      	mov	r3, sl
 8004592:	4658      	mov	r0, fp
 8004594:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8004598:	f002 f858 	bl	800664c <__d2b>
 800459c:	901c      	str	r0, [sp, #112]	; 0x70
 800459e:	2800      	cmp	r0, #0
 80045a0:	f43f aed8 	beq.w	8004354 <_strtod_l+0x444>
 80045a4:	2101      	movs	r1, #1
 80045a6:	4658      	mov	r0, fp
 80045a8:	f001 fe21 	bl	80061ee <__i2b>
 80045ac:	9004      	str	r0, [sp, #16]
 80045ae:	4603      	mov	r3, r0
 80045b0:	2800      	cmp	r0, #0
 80045b2:	f43f aecf 	beq.w	8004354 <_strtod_l+0x444>
 80045b6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80045b8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80045ba:	2d00      	cmp	r5, #0
 80045bc:	bfab      	itete	ge
 80045be:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80045c0:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80045c2:	18ee      	addge	r6, r5, r3
 80045c4:	1b5c      	sublt	r4, r3, r5
 80045c6:	9b05      	ldr	r3, [sp, #20]
 80045c8:	bfa8      	it	ge
 80045ca:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80045cc:	eba5 0503 	sub.w	r5, r5, r3
 80045d0:	4415      	add	r5, r2
 80045d2:	4b64      	ldr	r3, [pc, #400]	; (8004764 <_strtod_l+0x854>)
 80045d4:	f105 35ff 	add.w	r5, r5, #4294967295
 80045d8:	bfb8      	it	lt
 80045da:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80045dc:	429d      	cmp	r5, r3
 80045de:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80045e2:	f280 80af 	bge.w	8004744 <_strtod_l+0x834>
 80045e6:	1b5b      	subs	r3, r3, r5
 80045e8:	2b1f      	cmp	r3, #31
 80045ea:	eba2 0203 	sub.w	r2, r2, r3
 80045ee:	f04f 0701 	mov.w	r7, #1
 80045f2:	f300 809c 	bgt.w	800472e <_strtod_l+0x81e>
 80045f6:	2500      	movs	r5, #0
 80045f8:	fa07 f303 	lsl.w	r3, r7, r3
 80045fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80045fe:	18b7      	adds	r7, r6, r2
 8004600:	9b05      	ldr	r3, [sp, #20]
 8004602:	42be      	cmp	r6, r7
 8004604:	4414      	add	r4, r2
 8004606:	441c      	add	r4, r3
 8004608:	4633      	mov	r3, r6
 800460a:	bfa8      	it	ge
 800460c:	463b      	movge	r3, r7
 800460e:	42a3      	cmp	r3, r4
 8004610:	bfa8      	it	ge
 8004612:	4623      	movge	r3, r4
 8004614:	2b00      	cmp	r3, #0
 8004616:	bfc2      	ittt	gt
 8004618:	1aff      	subgt	r7, r7, r3
 800461a:	1ae4      	subgt	r4, r4, r3
 800461c:	1af6      	subgt	r6, r6, r3
 800461e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004620:	b1bb      	cbz	r3, 8004652 <_strtod_l+0x742>
 8004622:	461a      	mov	r2, r3
 8004624:	9904      	ldr	r1, [sp, #16]
 8004626:	4658      	mov	r0, fp
 8004628:	f001 fe80 	bl	800632c <__pow5mult>
 800462c:	9004      	str	r0, [sp, #16]
 800462e:	2800      	cmp	r0, #0
 8004630:	f43f ae90 	beq.w	8004354 <_strtod_l+0x444>
 8004634:	4601      	mov	r1, r0
 8004636:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004638:	4658      	mov	r0, fp
 800463a:	f001 fde1 	bl	8006200 <__multiply>
 800463e:	9009      	str	r0, [sp, #36]	; 0x24
 8004640:	2800      	cmp	r0, #0
 8004642:	f43f ae87 	beq.w	8004354 <_strtod_l+0x444>
 8004646:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004648:	4658      	mov	r0, fp
 800464a:	f001 fcf2 	bl	8006032 <_Bfree>
 800464e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004650:	931c      	str	r3, [sp, #112]	; 0x70
 8004652:	2f00      	cmp	r7, #0
 8004654:	dc7a      	bgt.n	800474c <_strtod_l+0x83c>
 8004656:	9b07      	ldr	r3, [sp, #28]
 8004658:	2b00      	cmp	r3, #0
 800465a:	dd08      	ble.n	800466e <_strtod_l+0x75e>
 800465c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800465e:	9906      	ldr	r1, [sp, #24]
 8004660:	4658      	mov	r0, fp
 8004662:	f001 fe63 	bl	800632c <__pow5mult>
 8004666:	9006      	str	r0, [sp, #24]
 8004668:	2800      	cmp	r0, #0
 800466a:	f43f ae73 	beq.w	8004354 <_strtod_l+0x444>
 800466e:	2c00      	cmp	r4, #0
 8004670:	dd08      	ble.n	8004684 <_strtod_l+0x774>
 8004672:	4622      	mov	r2, r4
 8004674:	9906      	ldr	r1, [sp, #24]
 8004676:	4658      	mov	r0, fp
 8004678:	f001 fea6 	bl	80063c8 <__lshift>
 800467c:	9006      	str	r0, [sp, #24]
 800467e:	2800      	cmp	r0, #0
 8004680:	f43f ae68 	beq.w	8004354 <_strtod_l+0x444>
 8004684:	2e00      	cmp	r6, #0
 8004686:	dd08      	ble.n	800469a <_strtod_l+0x78a>
 8004688:	4632      	mov	r2, r6
 800468a:	9904      	ldr	r1, [sp, #16]
 800468c:	4658      	mov	r0, fp
 800468e:	f001 fe9b 	bl	80063c8 <__lshift>
 8004692:	9004      	str	r0, [sp, #16]
 8004694:	2800      	cmp	r0, #0
 8004696:	f43f ae5d 	beq.w	8004354 <_strtod_l+0x444>
 800469a:	9a06      	ldr	r2, [sp, #24]
 800469c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800469e:	4658      	mov	r0, fp
 80046a0:	f001 ff00 	bl	80064a4 <__mdiff>
 80046a4:	4680      	mov	r8, r0
 80046a6:	2800      	cmp	r0, #0
 80046a8:	f43f ae54 	beq.w	8004354 <_strtod_l+0x444>
 80046ac:	2400      	movs	r4, #0
 80046ae:	68c3      	ldr	r3, [r0, #12]
 80046b0:	9904      	ldr	r1, [sp, #16]
 80046b2:	60c4      	str	r4, [r0, #12]
 80046b4:	930c      	str	r3, [sp, #48]	; 0x30
 80046b6:	f001 fedb 	bl	8006470 <__mcmp>
 80046ba:	42a0      	cmp	r0, r4
 80046bc:	da54      	bge.n	8004768 <_strtod_l+0x858>
 80046be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80046c0:	b9f3      	cbnz	r3, 8004700 <_strtod_l+0x7f0>
 80046c2:	f1b9 0f00 	cmp.w	r9, #0
 80046c6:	d11b      	bne.n	8004700 <_strtod_l+0x7f0>
 80046c8:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80046cc:	b9c3      	cbnz	r3, 8004700 <_strtod_l+0x7f0>
 80046ce:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80046d2:	0d1b      	lsrs	r3, r3, #20
 80046d4:	051b      	lsls	r3, r3, #20
 80046d6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80046da:	d911      	bls.n	8004700 <_strtod_l+0x7f0>
 80046dc:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80046e0:	b91b      	cbnz	r3, 80046ea <_strtod_l+0x7da>
 80046e2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	dd0a      	ble.n	8004700 <_strtod_l+0x7f0>
 80046ea:	4641      	mov	r1, r8
 80046ec:	2201      	movs	r2, #1
 80046ee:	4658      	mov	r0, fp
 80046f0:	f001 fe6a 	bl	80063c8 <__lshift>
 80046f4:	9904      	ldr	r1, [sp, #16]
 80046f6:	4680      	mov	r8, r0
 80046f8:	f001 feba 	bl	8006470 <__mcmp>
 80046fc:	2800      	cmp	r0, #0
 80046fe:	dc68      	bgt.n	80047d2 <_strtod_l+0x8c2>
 8004700:	9b05      	ldr	r3, [sp, #20]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d172      	bne.n	80047ec <_strtod_l+0x8dc>
 8004706:	e630      	b.n	800436a <_strtod_l+0x45a>
 8004708:	f018 0f01 	tst.w	r8, #1
 800470c:	d004      	beq.n	8004718 <_strtod_l+0x808>
 800470e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004712:	f7fb fef1 	bl	80004f8 <__aeabi_dmul>
 8004716:	2301      	movs	r3, #1
 8004718:	ea4f 0868 	mov.w	r8, r8, asr #1
 800471c:	3508      	adds	r5, #8
 800471e:	e6dc      	b.n	80044da <_strtod_l+0x5ca>
 8004720:	f04f 32ff 	mov.w	r2, #4294967295
 8004724:	fa02 f303 	lsl.w	r3, r2, r3
 8004728:	ea03 0909 	and.w	r9, r3, r9
 800472c:	e6f6      	b.n	800451c <_strtod_l+0x60c>
 800472e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004732:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8004736:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800473a:	35e2      	adds	r5, #226	; 0xe2
 800473c:	fa07 f505 	lsl.w	r5, r7, r5
 8004740:	970f      	str	r7, [sp, #60]	; 0x3c
 8004742:	e75c      	b.n	80045fe <_strtod_l+0x6ee>
 8004744:	2301      	movs	r3, #1
 8004746:	2500      	movs	r5, #0
 8004748:	930f      	str	r3, [sp, #60]	; 0x3c
 800474a:	e758      	b.n	80045fe <_strtod_l+0x6ee>
 800474c:	463a      	mov	r2, r7
 800474e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004750:	4658      	mov	r0, fp
 8004752:	f001 fe39 	bl	80063c8 <__lshift>
 8004756:	901c      	str	r0, [sp, #112]	; 0x70
 8004758:	2800      	cmp	r0, #0
 800475a:	f47f af7c 	bne.w	8004656 <_strtod_l+0x746>
 800475e:	e5f9      	b.n	8004354 <_strtod_l+0x444>
 8004760:	0800a190 	.word	0x0800a190
 8004764:	fffffc02 	.word	0xfffffc02
 8004768:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800476c:	f040 8089 	bne.w	8004882 <_strtod_l+0x972>
 8004770:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004772:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8004776:	b342      	cbz	r2, 80047ca <_strtod_l+0x8ba>
 8004778:	4aaf      	ldr	r2, [pc, #700]	; (8004a38 <_strtod_l+0xb28>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d156      	bne.n	800482c <_strtod_l+0x91c>
 800477e:	9b05      	ldr	r3, [sp, #20]
 8004780:	4648      	mov	r0, r9
 8004782:	b1eb      	cbz	r3, 80047c0 <_strtod_l+0x8b0>
 8004784:	4653      	mov	r3, sl
 8004786:	4aad      	ldr	r2, [pc, #692]	; (8004a3c <_strtod_l+0xb2c>)
 8004788:	f04f 31ff 	mov.w	r1, #4294967295
 800478c:	401a      	ands	r2, r3
 800478e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004792:	d818      	bhi.n	80047c6 <_strtod_l+0x8b6>
 8004794:	0d12      	lsrs	r2, r2, #20
 8004796:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800479a:	fa01 f303 	lsl.w	r3, r1, r3
 800479e:	4298      	cmp	r0, r3
 80047a0:	d144      	bne.n	800482c <_strtod_l+0x91c>
 80047a2:	4ba7      	ldr	r3, [pc, #668]	; (8004a40 <_strtod_l+0xb30>)
 80047a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d102      	bne.n	80047b0 <_strtod_l+0x8a0>
 80047aa:	3001      	adds	r0, #1
 80047ac:	f43f add2 	beq.w	8004354 <_strtod_l+0x444>
 80047b0:	4ba2      	ldr	r3, [pc, #648]	; (8004a3c <_strtod_l+0xb2c>)
 80047b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047b4:	f04f 0900 	mov.w	r9, #0
 80047b8:	401a      	ands	r2, r3
 80047ba:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 80047be:	e79f      	b.n	8004700 <_strtod_l+0x7f0>
 80047c0:	f04f 33ff 	mov.w	r3, #4294967295
 80047c4:	e7eb      	b.n	800479e <_strtod_l+0x88e>
 80047c6:	460b      	mov	r3, r1
 80047c8:	e7e9      	b.n	800479e <_strtod_l+0x88e>
 80047ca:	bb7b      	cbnz	r3, 800482c <_strtod_l+0x91c>
 80047cc:	f1b9 0f00 	cmp.w	r9, #0
 80047d0:	d12c      	bne.n	800482c <_strtod_l+0x91c>
 80047d2:	9905      	ldr	r1, [sp, #20]
 80047d4:	4653      	mov	r3, sl
 80047d6:	4a99      	ldr	r2, [pc, #612]	; (8004a3c <_strtod_l+0xb2c>)
 80047d8:	b1f1      	cbz	r1, 8004818 <_strtod_l+0x908>
 80047da:	ea02 010a 	and.w	r1, r2, sl
 80047de:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80047e2:	dc19      	bgt.n	8004818 <_strtod_l+0x908>
 80047e4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80047e8:	f77f ae51 	ble.w	800448e <_strtod_l+0x57e>
 80047ec:	2300      	movs	r3, #0
 80047ee:	4a95      	ldr	r2, [pc, #596]	; (8004a44 <_strtod_l+0xb34>)
 80047f0:	4648      	mov	r0, r9
 80047f2:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80047f6:	4651      	mov	r1, sl
 80047f8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80047fc:	f7fb fe7c 	bl	80004f8 <__aeabi_dmul>
 8004800:	4681      	mov	r9, r0
 8004802:	468a      	mov	sl, r1
 8004804:	2900      	cmp	r1, #0
 8004806:	f47f adb0 	bne.w	800436a <_strtod_l+0x45a>
 800480a:	2800      	cmp	r0, #0
 800480c:	f47f adad 	bne.w	800436a <_strtod_l+0x45a>
 8004810:	2322      	movs	r3, #34	; 0x22
 8004812:	f8cb 3000 	str.w	r3, [fp]
 8004816:	e5a8      	b.n	800436a <_strtod_l+0x45a>
 8004818:	4013      	ands	r3, r2
 800481a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800481e:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8004822:	f04f 39ff 	mov.w	r9, #4294967295
 8004826:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 800482a:	e769      	b.n	8004700 <_strtod_l+0x7f0>
 800482c:	b19d      	cbz	r5, 8004856 <_strtod_l+0x946>
 800482e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004830:	421d      	tst	r5, r3
 8004832:	f43f af65 	beq.w	8004700 <_strtod_l+0x7f0>
 8004836:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004838:	9a05      	ldr	r2, [sp, #20]
 800483a:	4648      	mov	r0, r9
 800483c:	4651      	mov	r1, sl
 800483e:	b173      	cbz	r3, 800485e <_strtod_l+0x94e>
 8004840:	f7ff fb44 	bl	8003ecc <sulp>
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800484c:	f7fb fc9e 	bl	800018c <__adddf3>
 8004850:	4681      	mov	r9, r0
 8004852:	468a      	mov	sl, r1
 8004854:	e754      	b.n	8004700 <_strtod_l+0x7f0>
 8004856:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004858:	ea13 0f09 	tst.w	r3, r9
 800485c:	e7e9      	b.n	8004832 <_strtod_l+0x922>
 800485e:	f7ff fb35 	bl	8003ecc <sulp>
 8004862:	4602      	mov	r2, r0
 8004864:	460b      	mov	r3, r1
 8004866:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800486a:	f7fb fc8d 	bl	8000188 <__aeabi_dsub>
 800486e:	2200      	movs	r2, #0
 8004870:	2300      	movs	r3, #0
 8004872:	4681      	mov	r9, r0
 8004874:	468a      	mov	sl, r1
 8004876:	f7fc f8a7 	bl	80009c8 <__aeabi_dcmpeq>
 800487a:	2800      	cmp	r0, #0
 800487c:	f47f ae07 	bne.w	800448e <_strtod_l+0x57e>
 8004880:	e73e      	b.n	8004700 <_strtod_l+0x7f0>
 8004882:	9904      	ldr	r1, [sp, #16]
 8004884:	4640      	mov	r0, r8
 8004886:	f001 ff30 	bl	80066ea <__ratio>
 800488a:	2200      	movs	r2, #0
 800488c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004890:	4606      	mov	r6, r0
 8004892:	460f      	mov	r7, r1
 8004894:	f7fc f8ac 	bl	80009f0 <__aeabi_dcmple>
 8004898:	2800      	cmp	r0, #0
 800489a:	d075      	beq.n	8004988 <_strtod_l+0xa78>
 800489c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d047      	beq.n	8004932 <_strtod_l+0xa22>
 80048a2:	2600      	movs	r6, #0
 80048a4:	4f68      	ldr	r7, [pc, #416]	; (8004a48 <_strtod_l+0xb38>)
 80048a6:	4d68      	ldr	r5, [pc, #416]	; (8004a48 <_strtod_l+0xb38>)
 80048a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80048ae:	0d1b      	lsrs	r3, r3, #20
 80048b0:	051b      	lsls	r3, r3, #20
 80048b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80048b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80048b6:	4b65      	ldr	r3, [pc, #404]	; (8004a4c <_strtod_l+0xb3c>)
 80048b8:	429a      	cmp	r2, r3
 80048ba:	f040 80cf 	bne.w	8004a5c <_strtod_l+0xb4c>
 80048be:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80048c2:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80048c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048c8:	4648      	mov	r0, r9
 80048ca:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 80048ce:	4651      	mov	r1, sl
 80048d0:	f001 fe46 	bl	8006560 <__ulp>
 80048d4:	4602      	mov	r2, r0
 80048d6:	460b      	mov	r3, r1
 80048d8:	4630      	mov	r0, r6
 80048da:	4639      	mov	r1, r7
 80048dc:	f7fb fe0c 	bl	80004f8 <__aeabi_dmul>
 80048e0:	464a      	mov	r2, r9
 80048e2:	4653      	mov	r3, sl
 80048e4:	f7fb fc52 	bl	800018c <__adddf3>
 80048e8:	460b      	mov	r3, r1
 80048ea:	4954      	ldr	r1, [pc, #336]	; (8004a3c <_strtod_l+0xb2c>)
 80048ec:	4a58      	ldr	r2, [pc, #352]	; (8004a50 <_strtod_l+0xb40>)
 80048ee:	4019      	ands	r1, r3
 80048f0:	4291      	cmp	r1, r2
 80048f2:	4681      	mov	r9, r0
 80048f4:	d95e      	bls.n	80049b4 <_strtod_l+0xaa4>
 80048f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048f8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d103      	bne.n	8004908 <_strtod_l+0x9f8>
 8004900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004902:	3301      	adds	r3, #1
 8004904:	f43f ad26 	beq.w	8004354 <_strtod_l+0x444>
 8004908:	f04f 39ff 	mov.w	r9, #4294967295
 800490c:	f8df a130 	ldr.w	sl, [pc, #304]	; 8004a40 <_strtod_l+0xb30>
 8004910:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004912:	4658      	mov	r0, fp
 8004914:	f001 fb8d 	bl	8006032 <_Bfree>
 8004918:	9906      	ldr	r1, [sp, #24]
 800491a:	4658      	mov	r0, fp
 800491c:	f001 fb89 	bl	8006032 <_Bfree>
 8004920:	9904      	ldr	r1, [sp, #16]
 8004922:	4658      	mov	r0, fp
 8004924:	f001 fb85 	bl	8006032 <_Bfree>
 8004928:	4641      	mov	r1, r8
 800492a:	4658      	mov	r0, fp
 800492c:	f001 fb81 	bl	8006032 <_Bfree>
 8004930:	e617      	b.n	8004562 <_strtod_l+0x652>
 8004932:	f1b9 0f00 	cmp.w	r9, #0
 8004936:	d119      	bne.n	800496c <_strtod_l+0xa5c>
 8004938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800493a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800493e:	b9e3      	cbnz	r3, 800497a <_strtod_l+0xa6a>
 8004940:	2200      	movs	r2, #0
 8004942:	4b41      	ldr	r3, [pc, #260]	; (8004a48 <_strtod_l+0xb38>)
 8004944:	4630      	mov	r0, r6
 8004946:	4639      	mov	r1, r7
 8004948:	f7fc f848 	bl	80009dc <__aeabi_dcmplt>
 800494c:	b9c8      	cbnz	r0, 8004982 <_strtod_l+0xa72>
 800494e:	2200      	movs	r2, #0
 8004950:	4b40      	ldr	r3, [pc, #256]	; (8004a54 <_strtod_l+0xb44>)
 8004952:	4630      	mov	r0, r6
 8004954:	4639      	mov	r1, r7
 8004956:	f7fb fdcf 	bl	80004f8 <__aeabi_dmul>
 800495a:	4604      	mov	r4, r0
 800495c:	460d      	mov	r5, r1
 800495e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004962:	9418      	str	r4, [sp, #96]	; 0x60
 8004964:	9319      	str	r3, [sp, #100]	; 0x64
 8004966:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800496a:	e79d      	b.n	80048a8 <_strtod_l+0x998>
 800496c:	f1b9 0f01 	cmp.w	r9, #1
 8004970:	d103      	bne.n	800497a <_strtod_l+0xa6a>
 8004972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004974:	2b00      	cmp	r3, #0
 8004976:	f43f ad8a 	beq.w	800448e <_strtod_l+0x57e>
 800497a:	2600      	movs	r6, #0
 800497c:	4f36      	ldr	r7, [pc, #216]	; (8004a58 <_strtod_l+0xb48>)
 800497e:	2400      	movs	r4, #0
 8004980:	e791      	b.n	80048a6 <_strtod_l+0x996>
 8004982:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004984:	4d33      	ldr	r5, [pc, #204]	; (8004a54 <_strtod_l+0xb44>)
 8004986:	e7ea      	b.n	800495e <_strtod_l+0xa4e>
 8004988:	4b32      	ldr	r3, [pc, #200]	; (8004a54 <_strtod_l+0xb44>)
 800498a:	2200      	movs	r2, #0
 800498c:	4630      	mov	r0, r6
 800498e:	4639      	mov	r1, r7
 8004990:	f7fb fdb2 	bl	80004f8 <__aeabi_dmul>
 8004994:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004996:	4604      	mov	r4, r0
 8004998:	460d      	mov	r5, r1
 800499a:	b933      	cbnz	r3, 80049aa <_strtod_l+0xa9a>
 800499c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80049a0:	9010      	str	r0, [sp, #64]	; 0x40
 80049a2:	9311      	str	r3, [sp, #68]	; 0x44
 80049a4:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80049a8:	e77e      	b.n	80048a8 <_strtod_l+0x998>
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80049b2:	e7f7      	b.n	80049a4 <_strtod_l+0xa94>
 80049b4:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 80049b8:	9b05      	ldr	r3, [sp, #20]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1a8      	bne.n	8004910 <_strtod_l+0xa00>
 80049be:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80049c2:	0d1b      	lsrs	r3, r3, #20
 80049c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80049c6:	051b      	lsls	r3, r3, #20
 80049c8:	429a      	cmp	r2, r3
 80049ca:	4656      	mov	r6, sl
 80049cc:	d1a0      	bne.n	8004910 <_strtod_l+0xa00>
 80049ce:	4629      	mov	r1, r5
 80049d0:	4620      	mov	r0, r4
 80049d2:	f7fc f841 	bl	8000a58 <__aeabi_d2iz>
 80049d6:	f7fb fd25 	bl	8000424 <__aeabi_i2d>
 80049da:	460b      	mov	r3, r1
 80049dc:	4602      	mov	r2, r0
 80049de:	4629      	mov	r1, r5
 80049e0:	4620      	mov	r0, r4
 80049e2:	f7fb fbd1 	bl	8000188 <__aeabi_dsub>
 80049e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80049e8:	4604      	mov	r4, r0
 80049ea:	460d      	mov	r5, r1
 80049ec:	b933      	cbnz	r3, 80049fc <_strtod_l+0xaec>
 80049ee:	f1b9 0f00 	cmp.w	r9, #0
 80049f2:	d103      	bne.n	80049fc <_strtod_l+0xaec>
 80049f4:	f3ca 0613 	ubfx	r6, sl, #0, #20
 80049f8:	2e00      	cmp	r6, #0
 80049fa:	d06a      	beq.n	8004ad2 <_strtod_l+0xbc2>
 80049fc:	a30a      	add	r3, pc, #40	; (adr r3, 8004a28 <_strtod_l+0xb18>)
 80049fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a02:	4620      	mov	r0, r4
 8004a04:	4629      	mov	r1, r5
 8004a06:	f7fb ffe9 	bl	80009dc <__aeabi_dcmplt>
 8004a0a:	2800      	cmp	r0, #0
 8004a0c:	f47f acad 	bne.w	800436a <_strtod_l+0x45a>
 8004a10:	a307      	add	r3, pc, #28	; (adr r3, 8004a30 <_strtod_l+0xb20>)
 8004a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a16:	4620      	mov	r0, r4
 8004a18:	4629      	mov	r1, r5
 8004a1a:	f7fb fffd 	bl	8000a18 <__aeabi_dcmpgt>
 8004a1e:	2800      	cmp	r0, #0
 8004a20:	f43f af76 	beq.w	8004910 <_strtod_l+0xa00>
 8004a24:	e4a1      	b.n	800436a <_strtod_l+0x45a>
 8004a26:	bf00      	nop
 8004a28:	94a03595 	.word	0x94a03595
 8004a2c:	3fdfffff 	.word	0x3fdfffff
 8004a30:	35afe535 	.word	0x35afe535
 8004a34:	3fe00000 	.word	0x3fe00000
 8004a38:	000fffff 	.word	0x000fffff
 8004a3c:	7ff00000 	.word	0x7ff00000
 8004a40:	7fefffff 	.word	0x7fefffff
 8004a44:	39500000 	.word	0x39500000
 8004a48:	3ff00000 	.word	0x3ff00000
 8004a4c:	7fe00000 	.word	0x7fe00000
 8004a50:	7c9fffff 	.word	0x7c9fffff
 8004a54:	3fe00000 	.word	0x3fe00000
 8004a58:	bff00000 	.word	0xbff00000
 8004a5c:	9b05      	ldr	r3, [sp, #20]
 8004a5e:	b313      	cbz	r3, 8004aa6 <_strtod_l+0xb96>
 8004a60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a62:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004a66:	d81e      	bhi.n	8004aa6 <_strtod_l+0xb96>
 8004a68:	a325      	add	r3, pc, #148	; (adr r3, 8004b00 <_strtod_l+0xbf0>)
 8004a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6e:	4620      	mov	r0, r4
 8004a70:	4629      	mov	r1, r5
 8004a72:	f7fb ffbd 	bl	80009f0 <__aeabi_dcmple>
 8004a76:	b190      	cbz	r0, 8004a9e <_strtod_l+0xb8e>
 8004a78:	4629      	mov	r1, r5
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	f7fc f814 	bl	8000aa8 <__aeabi_d2uiz>
 8004a80:	2800      	cmp	r0, #0
 8004a82:	bf08      	it	eq
 8004a84:	2001      	moveq	r0, #1
 8004a86:	f7fb fcbd 	bl	8000404 <__aeabi_ui2d>
 8004a8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a8c:	4604      	mov	r4, r0
 8004a8e:	460d      	mov	r5, r1
 8004a90:	b9d3      	cbnz	r3, 8004ac8 <_strtod_l+0xbb8>
 8004a92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a96:	9012      	str	r0, [sp, #72]	; 0x48
 8004a98:	9313      	str	r3, [sp, #76]	; 0x4c
 8004a9a:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004a9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004aa0:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004aa4:	1a9f      	subs	r7, r3, r2
 8004aa6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004aaa:	f001 fd59 	bl	8006560 <__ulp>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	4630      	mov	r0, r6
 8004ab4:	4639      	mov	r1, r7
 8004ab6:	f7fb fd1f 	bl	80004f8 <__aeabi_dmul>
 8004aba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004abe:	f7fb fb65 	bl	800018c <__adddf3>
 8004ac2:	4681      	mov	r9, r0
 8004ac4:	468a      	mov	sl, r1
 8004ac6:	e777      	b.n	80049b8 <_strtod_l+0xaa8>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004ad0:	e7e3      	b.n	8004a9a <_strtod_l+0xb8a>
 8004ad2:	a30d      	add	r3, pc, #52	; (adr r3, 8004b08 <_strtod_l+0xbf8>)
 8004ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad8:	f7fb ff80 	bl	80009dc <__aeabi_dcmplt>
 8004adc:	e79f      	b.n	8004a1e <_strtod_l+0xb0e>
 8004ade:	2300      	movs	r3, #0
 8004ae0:	930d      	str	r3, [sp, #52]	; 0x34
 8004ae2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004ae4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004ae6:	6013      	str	r3, [r2, #0]
 8004ae8:	f7ff ba55 	b.w	8003f96 <_strtod_l+0x86>
 8004aec:	2b65      	cmp	r3, #101	; 0x65
 8004aee:	f04f 0200 	mov.w	r2, #0
 8004af2:	f43f ab42 	beq.w	800417a <_strtod_l+0x26a>
 8004af6:	2101      	movs	r1, #1
 8004af8:	4614      	mov	r4, r2
 8004afa:	9105      	str	r1, [sp, #20]
 8004afc:	f7ff babf 	b.w	800407e <_strtod_l+0x16e>
 8004b00:	ffc00000 	.word	0xffc00000
 8004b04:	41dfffff 	.word	0x41dfffff
 8004b08:	94a03595 	.word	0x94a03595
 8004b0c:	3fcfffff 	.word	0x3fcfffff

08004b10 <_strtod_r>:
 8004b10:	4b05      	ldr	r3, [pc, #20]	; (8004b28 <_strtod_r+0x18>)
 8004b12:	b410      	push	{r4}
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4c05      	ldr	r4, [pc, #20]	; (8004b2c <_strtod_r+0x1c>)
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	bf08      	it	eq
 8004b1e:	4623      	moveq	r3, r4
 8004b20:	bc10      	pop	{r4}
 8004b22:	f7ff b9f5 	b.w	8003f10 <_strtod_l>
 8004b26:	bf00      	nop
 8004b28:	20000004 	.word	0x20000004
 8004b2c:	20000068 	.word	0x20000068

08004b30 <_strtol_l.isra.0>:
 8004b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b34:	4680      	mov	r8, r0
 8004b36:	4689      	mov	r9, r1
 8004b38:	4692      	mov	sl, r2
 8004b3a:	461e      	mov	r6, r3
 8004b3c:	460f      	mov	r7, r1
 8004b3e:	463d      	mov	r5, r7
 8004b40:	9808      	ldr	r0, [sp, #32]
 8004b42:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b46:	f001 f9eb 	bl	8005f20 <__locale_ctype_ptr_l>
 8004b4a:	4420      	add	r0, r4
 8004b4c:	7843      	ldrb	r3, [r0, #1]
 8004b4e:	f013 0308 	ands.w	r3, r3, #8
 8004b52:	d132      	bne.n	8004bba <_strtol_l.isra.0+0x8a>
 8004b54:	2c2d      	cmp	r4, #45	; 0x2d
 8004b56:	d132      	bne.n	8004bbe <_strtol_l.isra.0+0x8e>
 8004b58:	2201      	movs	r2, #1
 8004b5a:	787c      	ldrb	r4, [r7, #1]
 8004b5c:	1cbd      	adds	r5, r7, #2
 8004b5e:	2e00      	cmp	r6, #0
 8004b60:	d05d      	beq.n	8004c1e <_strtol_l.isra.0+0xee>
 8004b62:	2e10      	cmp	r6, #16
 8004b64:	d109      	bne.n	8004b7a <_strtol_l.isra.0+0x4a>
 8004b66:	2c30      	cmp	r4, #48	; 0x30
 8004b68:	d107      	bne.n	8004b7a <_strtol_l.isra.0+0x4a>
 8004b6a:	782b      	ldrb	r3, [r5, #0]
 8004b6c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004b70:	2b58      	cmp	r3, #88	; 0x58
 8004b72:	d14f      	bne.n	8004c14 <_strtol_l.isra.0+0xe4>
 8004b74:	2610      	movs	r6, #16
 8004b76:	786c      	ldrb	r4, [r5, #1]
 8004b78:	3502      	adds	r5, #2
 8004b7a:	2a00      	cmp	r2, #0
 8004b7c:	bf14      	ite	ne
 8004b7e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8004b82:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8004b86:	2700      	movs	r7, #0
 8004b88:	fbb1 fcf6 	udiv	ip, r1, r6
 8004b8c:	4638      	mov	r0, r7
 8004b8e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8004b92:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8004b96:	2b09      	cmp	r3, #9
 8004b98:	d817      	bhi.n	8004bca <_strtol_l.isra.0+0x9a>
 8004b9a:	461c      	mov	r4, r3
 8004b9c:	42a6      	cmp	r6, r4
 8004b9e:	dd23      	ble.n	8004be8 <_strtol_l.isra.0+0xb8>
 8004ba0:	1c7b      	adds	r3, r7, #1
 8004ba2:	d007      	beq.n	8004bb4 <_strtol_l.isra.0+0x84>
 8004ba4:	4584      	cmp	ip, r0
 8004ba6:	d31c      	bcc.n	8004be2 <_strtol_l.isra.0+0xb2>
 8004ba8:	d101      	bne.n	8004bae <_strtol_l.isra.0+0x7e>
 8004baa:	45a6      	cmp	lr, r4
 8004bac:	db19      	blt.n	8004be2 <_strtol_l.isra.0+0xb2>
 8004bae:	2701      	movs	r7, #1
 8004bb0:	fb00 4006 	mla	r0, r0, r6, r4
 8004bb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004bb8:	e7eb      	b.n	8004b92 <_strtol_l.isra.0+0x62>
 8004bba:	462f      	mov	r7, r5
 8004bbc:	e7bf      	b.n	8004b3e <_strtol_l.isra.0+0xe>
 8004bbe:	2c2b      	cmp	r4, #43	; 0x2b
 8004bc0:	bf04      	itt	eq
 8004bc2:	1cbd      	addeq	r5, r7, #2
 8004bc4:	787c      	ldrbeq	r4, [r7, #1]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	e7c9      	b.n	8004b5e <_strtol_l.isra.0+0x2e>
 8004bca:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004bce:	2b19      	cmp	r3, #25
 8004bd0:	d801      	bhi.n	8004bd6 <_strtol_l.isra.0+0xa6>
 8004bd2:	3c37      	subs	r4, #55	; 0x37
 8004bd4:	e7e2      	b.n	8004b9c <_strtol_l.isra.0+0x6c>
 8004bd6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8004bda:	2b19      	cmp	r3, #25
 8004bdc:	d804      	bhi.n	8004be8 <_strtol_l.isra.0+0xb8>
 8004bde:	3c57      	subs	r4, #87	; 0x57
 8004be0:	e7dc      	b.n	8004b9c <_strtol_l.isra.0+0x6c>
 8004be2:	f04f 37ff 	mov.w	r7, #4294967295
 8004be6:	e7e5      	b.n	8004bb4 <_strtol_l.isra.0+0x84>
 8004be8:	1c7b      	adds	r3, r7, #1
 8004bea:	d108      	bne.n	8004bfe <_strtol_l.isra.0+0xce>
 8004bec:	2322      	movs	r3, #34	; 0x22
 8004bee:	4608      	mov	r0, r1
 8004bf0:	f8c8 3000 	str.w	r3, [r8]
 8004bf4:	f1ba 0f00 	cmp.w	sl, #0
 8004bf8:	d107      	bne.n	8004c0a <_strtol_l.isra.0+0xda>
 8004bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bfe:	b102      	cbz	r2, 8004c02 <_strtol_l.isra.0+0xd2>
 8004c00:	4240      	negs	r0, r0
 8004c02:	f1ba 0f00 	cmp.w	sl, #0
 8004c06:	d0f8      	beq.n	8004bfa <_strtol_l.isra.0+0xca>
 8004c08:	b10f      	cbz	r7, 8004c0e <_strtol_l.isra.0+0xde>
 8004c0a:	f105 39ff 	add.w	r9, r5, #4294967295
 8004c0e:	f8ca 9000 	str.w	r9, [sl]
 8004c12:	e7f2      	b.n	8004bfa <_strtol_l.isra.0+0xca>
 8004c14:	2430      	movs	r4, #48	; 0x30
 8004c16:	2e00      	cmp	r6, #0
 8004c18:	d1af      	bne.n	8004b7a <_strtol_l.isra.0+0x4a>
 8004c1a:	2608      	movs	r6, #8
 8004c1c:	e7ad      	b.n	8004b7a <_strtol_l.isra.0+0x4a>
 8004c1e:	2c30      	cmp	r4, #48	; 0x30
 8004c20:	d0a3      	beq.n	8004b6a <_strtol_l.isra.0+0x3a>
 8004c22:	260a      	movs	r6, #10
 8004c24:	e7a9      	b.n	8004b7a <_strtol_l.isra.0+0x4a>
	...

08004c28 <_strtol_r>:
 8004c28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c2a:	4c06      	ldr	r4, [pc, #24]	; (8004c44 <_strtol_r+0x1c>)
 8004c2c:	4d06      	ldr	r5, [pc, #24]	; (8004c48 <_strtol_r+0x20>)
 8004c2e:	6824      	ldr	r4, [r4, #0]
 8004c30:	6a24      	ldr	r4, [r4, #32]
 8004c32:	2c00      	cmp	r4, #0
 8004c34:	bf08      	it	eq
 8004c36:	462c      	moveq	r4, r5
 8004c38:	9400      	str	r4, [sp, #0]
 8004c3a:	f7ff ff79 	bl	8004b30 <_strtol_l.isra.0>
 8004c3e:	b003      	add	sp, #12
 8004c40:	bd30      	pop	{r4, r5, pc}
 8004c42:	bf00      	nop
 8004c44:	20000004 	.word	0x20000004
 8004c48:	20000068 	.word	0x20000068

08004c4c <quorem>:
 8004c4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c50:	6903      	ldr	r3, [r0, #16]
 8004c52:	690c      	ldr	r4, [r1, #16]
 8004c54:	4680      	mov	r8, r0
 8004c56:	42a3      	cmp	r3, r4
 8004c58:	f2c0 8084 	blt.w	8004d64 <quorem+0x118>
 8004c5c:	3c01      	subs	r4, #1
 8004c5e:	f101 0714 	add.w	r7, r1, #20
 8004c62:	f100 0614 	add.w	r6, r0, #20
 8004c66:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004c6a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004c6e:	3501      	adds	r5, #1
 8004c70:	fbb0 f5f5 	udiv	r5, r0, r5
 8004c74:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004c78:	eb06 030c 	add.w	r3, r6, ip
 8004c7c:	eb07 090c 	add.w	r9, r7, ip
 8004c80:	9301      	str	r3, [sp, #4]
 8004c82:	b39d      	cbz	r5, 8004cec <quorem+0xa0>
 8004c84:	f04f 0a00 	mov.w	sl, #0
 8004c88:	4638      	mov	r0, r7
 8004c8a:	46b6      	mov	lr, r6
 8004c8c:	46d3      	mov	fp, sl
 8004c8e:	f850 2b04 	ldr.w	r2, [r0], #4
 8004c92:	b293      	uxth	r3, r2
 8004c94:	fb05 a303 	mla	r3, r5, r3, sl
 8004c98:	0c12      	lsrs	r2, r2, #16
 8004c9a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004c9e:	fb05 a202 	mla	r2, r5, r2, sl
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	ebab 0303 	sub.w	r3, fp, r3
 8004ca8:	f8de b000 	ldr.w	fp, [lr]
 8004cac:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004cb0:	fa1f fb8b 	uxth.w	fp, fp
 8004cb4:	445b      	add	r3, fp
 8004cb6:	fa1f fb82 	uxth.w	fp, r2
 8004cba:	f8de 2000 	ldr.w	r2, [lr]
 8004cbe:	4581      	cmp	r9, r0
 8004cc0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004cc4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004cce:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004cd2:	f84e 3b04 	str.w	r3, [lr], #4
 8004cd6:	d2da      	bcs.n	8004c8e <quorem+0x42>
 8004cd8:	f856 300c 	ldr.w	r3, [r6, ip]
 8004cdc:	b933      	cbnz	r3, 8004cec <quorem+0xa0>
 8004cde:	9b01      	ldr	r3, [sp, #4]
 8004ce0:	3b04      	subs	r3, #4
 8004ce2:	429e      	cmp	r6, r3
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	d331      	bcc.n	8004d4c <quorem+0x100>
 8004ce8:	f8c8 4010 	str.w	r4, [r8, #16]
 8004cec:	4640      	mov	r0, r8
 8004cee:	f001 fbbf 	bl	8006470 <__mcmp>
 8004cf2:	2800      	cmp	r0, #0
 8004cf4:	db26      	blt.n	8004d44 <quorem+0xf8>
 8004cf6:	4630      	mov	r0, r6
 8004cf8:	f04f 0c00 	mov.w	ip, #0
 8004cfc:	3501      	adds	r5, #1
 8004cfe:	f857 1b04 	ldr.w	r1, [r7], #4
 8004d02:	f8d0 e000 	ldr.w	lr, [r0]
 8004d06:	b28b      	uxth	r3, r1
 8004d08:	ebac 0303 	sub.w	r3, ip, r3
 8004d0c:	fa1f f28e 	uxth.w	r2, lr
 8004d10:	4413      	add	r3, r2
 8004d12:	0c0a      	lsrs	r2, r1, #16
 8004d14:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004d18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d22:	45b9      	cmp	r9, r7
 8004d24:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004d28:	f840 3b04 	str.w	r3, [r0], #4
 8004d2c:	d2e7      	bcs.n	8004cfe <quorem+0xb2>
 8004d2e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004d32:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004d36:	b92a      	cbnz	r2, 8004d44 <quorem+0xf8>
 8004d38:	3b04      	subs	r3, #4
 8004d3a:	429e      	cmp	r6, r3
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	d30b      	bcc.n	8004d58 <quorem+0x10c>
 8004d40:	f8c8 4010 	str.w	r4, [r8, #16]
 8004d44:	4628      	mov	r0, r5
 8004d46:	b003      	add	sp, #12
 8004d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d4c:	6812      	ldr	r2, [r2, #0]
 8004d4e:	3b04      	subs	r3, #4
 8004d50:	2a00      	cmp	r2, #0
 8004d52:	d1c9      	bne.n	8004ce8 <quorem+0x9c>
 8004d54:	3c01      	subs	r4, #1
 8004d56:	e7c4      	b.n	8004ce2 <quorem+0x96>
 8004d58:	6812      	ldr	r2, [r2, #0]
 8004d5a:	3b04      	subs	r3, #4
 8004d5c:	2a00      	cmp	r2, #0
 8004d5e:	d1ef      	bne.n	8004d40 <quorem+0xf4>
 8004d60:	3c01      	subs	r4, #1
 8004d62:	e7ea      	b.n	8004d3a <quorem+0xee>
 8004d64:	2000      	movs	r0, #0
 8004d66:	e7ee      	b.n	8004d46 <quorem+0xfa>

08004d68 <_dtoa_r>:
 8004d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d6c:	4616      	mov	r6, r2
 8004d6e:	461f      	mov	r7, r3
 8004d70:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004d72:	b095      	sub	sp, #84	; 0x54
 8004d74:	4604      	mov	r4, r0
 8004d76:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8004d7a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004d7e:	b93d      	cbnz	r5, 8004d90 <_dtoa_r+0x28>
 8004d80:	2010      	movs	r0, #16
 8004d82:	f001 f8ef 	bl	8005f64 <malloc>
 8004d86:	6260      	str	r0, [r4, #36]	; 0x24
 8004d88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004d8c:	6005      	str	r5, [r0, #0]
 8004d8e:	60c5      	str	r5, [r0, #12]
 8004d90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d92:	6819      	ldr	r1, [r3, #0]
 8004d94:	b151      	cbz	r1, 8004dac <_dtoa_r+0x44>
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	2301      	movs	r3, #1
 8004d9a:	4093      	lsls	r3, r2
 8004d9c:	604a      	str	r2, [r1, #4]
 8004d9e:	608b      	str	r3, [r1, #8]
 8004da0:	4620      	mov	r0, r4
 8004da2:	f001 f946 	bl	8006032 <_Bfree>
 8004da6:	2200      	movs	r2, #0
 8004da8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	1e3b      	subs	r3, r7, #0
 8004dae:	bfaf      	iteee	ge
 8004db0:	2300      	movge	r3, #0
 8004db2:	2201      	movlt	r2, #1
 8004db4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004db8:	9303      	strlt	r3, [sp, #12]
 8004dba:	bfac      	ite	ge
 8004dbc:	f8c8 3000 	strge.w	r3, [r8]
 8004dc0:	f8c8 2000 	strlt.w	r2, [r8]
 8004dc4:	4bae      	ldr	r3, [pc, #696]	; (8005080 <_dtoa_r+0x318>)
 8004dc6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004dca:	ea33 0308 	bics.w	r3, r3, r8
 8004dce:	d11b      	bne.n	8004e08 <_dtoa_r+0xa0>
 8004dd0:	f242 730f 	movw	r3, #9999	; 0x270f
 8004dd4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004dd6:	6013      	str	r3, [r2, #0]
 8004dd8:	9b02      	ldr	r3, [sp, #8]
 8004dda:	b923      	cbnz	r3, 8004de6 <_dtoa_r+0x7e>
 8004ddc:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004de0:	2800      	cmp	r0, #0
 8004de2:	f000 8545 	beq.w	8005870 <_dtoa_r+0xb08>
 8004de6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004de8:	b953      	cbnz	r3, 8004e00 <_dtoa_r+0x98>
 8004dea:	4ba6      	ldr	r3, [pc, #664]	; (8005084 <_dtoa_r+0x31c>)
 8004dec:	e021      	b.n	8004e32 <_dtoa_r+0xca>
 8004dee:	4ba6      	ldr	r3, [pc, #664]	; (8005088 <_dtoa_r+0x320>)
 8004df0:	9306      	str	r3, [sp, #24]
 8004df2:	3308      	adds	r3, #8
 8004df4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004df6:	6013      	str	r3, [r2, #0]
 8004df8:	9806      	ldr	r0, [sp, #24]
 8004dfa:	b015      	add	sp, #84	; 0x54
 8004dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e00:	4ba0      	ldr	r3, [pc, #640]	; (8005084 <_dtoa_r+0x31c>)
 8004e02:	9306      	str	r3, [sp, #24]
 8004e04:	3303      	adds	r3, #3
 8004e06:	e7f5      	b.n	8004df4 <_dtoa_r+0x8c>
 8004e08:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	2300      	movs	r3, #0
 8004e10:	4630      	mov	r0, r6
 8004e12:	4639      	mov	r1, r7
 8004e14:	f7fb fdd8 	bl	80009c8 <__aeabi_dcmpeq>
 8004e18:	4682      	mov	sl, r0
 8004e1a:	b160      	cbz	r0, 8004e36 <_dtoa_r+0xce>
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004e20:	6013      	str	r3, [r2, #0]
 8004e22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 8520 	beq.w	800586a <_dtoa_r+0xb02>
 8004e2a:	4b98      	ldr	r3, [pc, #608]	; (800508c <_dtoa_r+0x324>)
 8004e2c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004e2e:	6013      	str	r3, [r2, #0]
 8004e30:	3b01      	subs	r3, #1
 8004e32:	9306      	str	r3, [sp, #24]
 8004e34:	e7e0      	b.n	8004df8 <_dtoa_r+0x90>
 8004e36:	ab12      	add	r3, sp, #72	; 0x48
 8004e38:	9301      	str	r3, [sp, #4]
 8004e3a:	ab13      	add	r3, sp, #76	; 0x4c
 8004e3c:	9300      	str	r3, [sp, #0]
 8004e3e:	4632      	mov	r2, r6
 8004e40:	463b      	mov	r3, r7
 8004e42:	4620      	mov	r0, r4
 8004e44:	f001 fc02 	bl	800664c <__d2b>
 8004e48:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004e4c:	4683      	mov	fp, r0
 8004e4e:	2d00      	cmp	r5, #0
 8004e50:	d07d      	beq.n	8004f4e <_dtoa_r+0x1e6>
 8004e52:	46b0      	mov	r8, r6
 8004e54:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004e58:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8004e5c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8004e60:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004e64:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8004e68:	2200      	movs	r2, #0
 8004e6a:	4b89      	ldr	r3, [pc, #548]	; (8005090 <_dtoa_r+0x328>)
 8004e6c:	4640      	mov	r0, r8
 8004e6e:	4649      	mov	r1, r9
 8004e70:	f7fb f98a 	bl	8000188 <__aeabi_dsub>
 8004e74:	a37c      	add	r3, pc, #496	; (adr r3, 8005068 <_dtoa_r+0x300>)
 8004e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7a:	f7fb fb3d 	bl	80004f8 <__aeabi_dmul>
 8004e7e:	a37c      	add	r3, pc, #496	; (adr r3, 8005070 <_dtoa_r+0x308>)
 8004e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e84:	f7fb f982 	bl	800018c <__adddf3>
 8004e88:	4606      	mov	r6, r0
 8004e8a:	4628      	mov	r0, r5
 8004e8c:	460f      	mov	r7, r1
 8004e8e:	f7fb fac9 	bl	8000424 <__aeabi_i2d>
 8004e92:	a379      	add	r3, pc, #484	; (adr r3, 8005078 <_dtoa_r+0x310>)
 8004e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e98:	f7fb fb2e 	bl	80004f8 <__aeabi_dmul>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4630      	mov	r0, r6
 8004ea2:	4639      	mov	r1, r7
 8004ea4:	f7fb f972 	bl	800018c <__adddf3>
 8004ea8:	4606      	mov	r6, r0
 8004eaa:	460f      	mov	r7, r1
 8004eac:	f7fb fdd4 	bl	8000a58 <__aeabi_d2iz>
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	4682      	mov	sl, r0
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	4630      	mov	r0, r6
 8004eb8:	4639      	mov	r1, r7
 8004eba:	f7fb fd8f 	bl	80009dc <__aeabi_dcmplt>
 8004ebe:	b148      	cbz	r0, 8004ed4 <_dtoa_r+0x16c>
 8004ec0:	4650      	mov	r0, sl
 8004ec2:	f7fb faaf 	bl	8000424 <__aeabi_i2d>
 8004ec6:	4632      	mov	r2, r6
 8004ec8:	463b      	mov	r3, r7
 8004eca:	f7fb fd7d 	bl	80009c8 <__aeabi_dcmpeq>
 8004ece:	b908      	cbnz	r0, 8004ed4 <_dtoa_r+0x16c>
 8004ed0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ed4:	f1ba 0f16 	cmp.w	sl, #22
 8004ed8:	d85a      	bhi.n	8004f90 <_dtoa_r+0x228>
 8004eda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ede:	496d      	ldr	r1, [pc, #436]	; (8005094 <_dtoa_r+0x32c>)
 8004ee0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004ee4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ee8:	f7fb fd96 	bl	8000a18 <__aeabi_dcmpgt>
 8004eec:	2800      	cmp	r0, #0
 8004eee:	d051      	beq.n	8004f94 <_dtoa_r+0x22c>
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ef6:	930d      	str	r3, [sp, #52]	; 0x34
 8004ef8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004efa:	1b5d      	subs	r5, r3, r5
 8004efc:	1e6b      	subs	r3, r5, #1
 8004efe:	9307      	str	r3, [sp, #28]
 8004f00:	bf43      	ittte	mi
 8004f02:	2300      	movmi	r3, #0
 8004f04:	f1c5 0901 	rsbmi	r9, r5, #1
 8004f08:	9307      	strmi	r3, [sp, #28]
 8004f0a:	f04f 0900 	movpl.w	r9, #0
 8004f0e:	f1ba 0f00 	cmp.w	sl, #0
 8004f12:	db41      	blt.n	8004f98 <_dtoa_r+0x230>
 8004f14:	9b07      	ldr	r3, [sp, #28]
 8004f16:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004f1a:	4453      	add	r3, sl
 8004f1c:	9307      	str	r3, [sp, #28]
 8004f1e:	2300      	movs	r3, #0
 8004f20:	9308      	str	r3, [sp, #32]
 8004f22:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004f24:	2b09      	cmp	r3, #9
 8004f26:	f200 808f 	bhi.w	8005048 <_dtoa_r+0x2e0>
 8004f2a:	2b05      	cmp	r3, #5
 8004f2c:	bfc4      	itt	gt
 8004f2e:	3b04      	subgt	r3, #4
 8004f30:	931e      	strgt	r3, [sp, #120]	; 0x78
 8004f32:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004f34:	bfc8      	it	gt
 8004f36:	2500      	movgt	r5, #0
 8004f38:	f1a3 0302 	sub.w	r3, r3, #2
 8004f3c:	bfd8      	it	le
 8004f3e:	2501      	movle	r5, #1
 8004f40:	2b03      	cmp	r3, #3
 8004f42:	f200 808d 	bhi.w	8005060 <_dtoa_r+0x2f8>
 8004f46:	e8df f003 	tbb	[pc, r3]
 8004f4a:	7d7b      	.short	0x7d7b
 8004f4c:	6f2f      	.short	0x6f2f
 8004f4e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004f52:	441d      	add	r5, r3
 8004f54:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004f58:	2820      	cmp	r0, #32
 8004f5a:	dd13      	ble.n	8004f84 <_dtoa_r+0x21c>
 8004f5c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004f60:	9b02      	ldr	r3, [sp, #8]
 8004f62:	fa08 f800 	lsl.w	r8, r8, r0
 8004f66:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004f6a:	fa23 f000 	lsr.w	r0, r3, r0
 8004f6e:	ea48 0000 	orr.w	r0, r8, r0
 8004f72:	f7fb fa47 	bl	8000404 <__aeabi_ui2d>
 8004f76:	2301      	movs	r3, #1
 8004f78:	4680      	mov	r8, r0
 8004f7a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8004f7e:	3d01      	subs	r5, #1
 8004f80:	9310      	str	r3, [sp, #64]	; 0x40
 8004f82:	e771      	b.n	8004e68 <_dtoa_r+0x100>
 8004f84:	9b02      	ldr	r3, [sp, #8]
 8004f86:	f1c0 0020 	rsb	r0, r0, #32
 8004f8a:	fa03 f000 	lsl.w	r0, r3, r0
 8004f8e:	e7f0      	b.n	8004f72 <_dtoa_r+0x20a>
 8004f90:	2301      	movs	r3, #1
 8004f92:	e7b0      	b.n	8004ef6 <_dtoa_r+0x18e>
 8004f94:	900d      	str	r0, [sp, #52]	; 0x34
 8004f96:	e7af      	b.n	8004ef8 <_dtoa_r+0x190>
 8004f98:	f1ca 0300 	rsb	r3, sl, #0
 8004f9c:	9308      	str	r3, [sp, #32]
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	eba9 090a 	sub.w	r9, r9, sl
 8004fa4:	930c      	str	r3, [sp, #48]	; 0x30
 8004fa6:	e7bc      	b.n	8004f22 <_dtoa_r+0x1ba>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	9309      	str	r3, [sp, #36]	; 0x24
 8004fac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	dd74      	ble.n	800509c <_dtoa_r+0x334>
 8004fb2:	4698      	mov	r8, r3
 8004fb4:	9304      	str	r3, [sp, #16]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004fba:	6072      	str	r2, [r6, #4]
 8004fbc:	2204      	movs	r2, #4
 8004fbe:	f102 0014 	add.w	r0, r2, #20
 8004fc2:	4298      	cmp	r0, r3
 8004fc4:	6871      	ldr	r1, [r6, #4]
 8004fc6:	d96e      	bls.n	80050a6 <_dtoa_r+0x33e>
 8004fc8:	4620      	mov	r0, r4
 8004fca:	f000 fffe 	bl	8005fca <_Balloc>
 8004fce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fd0:	6030      	str	r0, [r6, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f1b8 0f0e 	cmp.w	r8, #14
 8004fd8:	9306      	str	r3, [sp, #24]
 8004fda:	f200 80ed 	bhi.w	80051b8 <_dtoa_r+0x450>
 8004fde:	2d00      	cmp	r5, #0
 8004fe0:	f000 80ea 	beq.w	80051b8 <_dtoa_r+0x450>
 8004fe4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fe8:	f1ba 0f00 	cmp.w	sl, #0
 8004fec:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004ff0:	dd77      	ble.n	80050e2 <_dtoa_r+0x37a>
 8004ff2:	4a28      	ldr	r2, [pc, #160]	; (8005094 <_dtoa_r+0x32c>)
 8004ff4:	f00a 030f 	and.w	r3, sl, #15
 8004ff8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004ffc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005000:	06f0      	lsls	r0, r6, #27
 8005002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005006:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800500a:	d568      	bpl.n	80050de <_dtoa_r+0x376>
 800500c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005010:	4b21      	ldr	r3, [pc, #132]	; (8005098 <_dtoa_r+0x330>)
 8005012:	2503      	movs	r5, #3
 8005014:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005018:	f7fb fb98 	bl	800074c <__aeabi_ddiv>
 800501c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005020:	f006 060f 	and.w	r6, r6, #15
 8005024:	4f1c      	ldr	r7, [pc, #112]	; (8005098 <_dtoa_r+0x330>)
 8005026:	e04f      	b.n	80050c8 <_dtoa_r+0x360>
 8005028:	2301      	movs	r3, #1
 800502a:	9309      	str	r3, [sp, #36]	; 0x24
 800502c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800502e:	4453      	add	r3, sl
 8005030:	f103 0801 	add.w	r8, r3, #1
 8005034:	9304      	str	r3, [sp, #16]
 8005036:	4643      	mov	r3, r8
 8005038:	2b01      	cmp	r3, #1
 800503a:	bfb8      	it	lt
 800503c:	2301      	movlt	r3, #1
 800503e:	e7ba      	b.n	8004fb6 <_dtoa_r+0x24e>
 8005040:	2300      	movs	r3, #0
 8005042:	e7b2      	b.n	8004faa <_dtoa_r+0x242>
 8005044:	2300      	movs	r3, #0
 8005046:	e7f0      	b.n	800502a <_dtoa_r+0x2c2>
 8005048:	2501      	movs	r5, #1
 800504a:	2300      	movs	r3, #0
 800504c:	9509      	str	r5, [sp, #36]	; 0x24
 800504e:	931e      	str	r3, [sp, #120]	; 0x78
 8005050:	f04f 33ff 	mov.w	r3, #4294967295
 8005054:	2200      	movs	r2, #0
 8005056:	9304      	str	r3, [sp, #16]
 8005058:	4698      	mov	r8, r3
 800505a:	2312      	movs	r3, #18
 800505c:	921f      	str	r2, [sp, #124]	; 0x7c
 800505e:	e7aa      	b.n	8004fb6 <_dtoa_r+0x24e>
 8005060:	2301      	movs	r3, #1
 8005062:	9309      	str	r3, [sp, #36]	; 0x24
 8005064:	e7f4      	b.n	8005050 <_dtoa_r+0x2e8>
 8005066:	bf00      	nop
 8005068:	636f4361 	.word	0x636f4361
 800506c:	3fd287a7 	.word	0x3fd287a7
 8005070:	8b60c8b3 	.word	0x8b60c8b3
 8005074:	3fc68a28 	.word	0x3fc68a28
 8005078:	509f79fb 	.word	0x509f79fb
 800507c:	3fd34413 	.word	0x3fd34413
 8005080:	7ff00000 	.word	0x7ff00000
 8005084:	0800a1c1 	.word	0x0800a1c1
 8005088:	0800a1b8 	.word	0x0800a1b8
 800508c:	0800a2f4 	.word	0x0800a2f4
 8005090:	3ff80000 	.word	0x3ff80000
 8005094:	0800a1f8 	.word	0x0800a1f8
 8005098:	0800a1d0 	.word	0x0800a1d0
 800509c:	2301      	movs	r3, #1
 800509e:	9304      	str	r3, [sp, #16]
 80050a0:	4698      	mov	r8, r3
 80050a2:	461a      	mov	r2, r3
 80050a4:	e7da      	b.n	800505c <_dtoa_r+0x2f4>
 80050a6:	3101      	adds	r1, #1
 80050a8:	6071      	str	r1, [r6, #4]
 80050aa:	0052      	lsls	r2, r2, #1
 80050ac:	e787      	b.n	8004fbe <_dtoa_r+0x256>
 80050ae:	07f1      	lsls	r1, r6, #31
 80050b0:	d508      	bpl.n	80050c4 <_dtoa_r+0x35c>
 80050b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80050b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050ba:	f7fb fa1d 	bl	80004f8 <__aeabi_dmul>
 80050be:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80050c2:	3501      	adds	r5, #1
 80050c4:	1076      	asrs	r6, r6, #1
 80050c6:	3708      	adds	r7, #8
 80050c8:	2e00      	cmp	r6, #0
 80050ca:	d1f0      	bne.n	80050ae <_dtoa_r+0x346>
 80050cc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80050d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050d4:	f7fb fb3a 	bl	800074c <__aeabi_ddiv>
 80050d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050dc:	e01b      	b.n	8005116 <_dtoa_r+0x3ae>
 80050de:	2502      	movs	r5, #2
 80050e0:	e7a0      	b.n	8005024 <_dtoa_r+0x2bc>
 80050e2:	f000 80a4 	beq.w	800522e <_dtoa_r+0x4c6>
 80050e6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80050ea:	f1ca 0600 	rsb	r6, sl, #0
 80050ee:	4ba0      	ldr	r3, [pc, #640]	; (8005370 <_dtoa_r+0x608>)
 80050f0:	f006 020f 	and.w	r2, r6, #15
 80050f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80050f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fc:	f7fb f9fc 	bl	80004f8 <__aeabi_dmul>
 8005100:	2502      	movs	r5, #2
 8005102:	2300      	movs	r3, #0
 8005104:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005108:	4f9a      	ldr	r7, [pc, #616]	; (8005374 <_dtoa_r+0x60c>)
 800510a:	1136      	asrs	r6, r6, #4
 800510c:	2e00      	cmp	r6, #0
 800510e:	f040 8083 	bne.w	8005218 <_dtoa_r+0x4b0>
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1e0      	bne.n	80050d8 <_dtoa_r+0x370>
 8005116:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005118:	2b00      	cmp	r3, #0
 800511a:	f000 808a 	beq.w	8005232 <_dtoa_r+0x4ca>
 800511e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005122:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005126:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800512a:	2200      	movs	r2, #0
 800512c:	4b92      	ldr	r3, [pc, #584]	; (8005378 <_dtoa_r+0x610>)
 800512e:	f7fb fc55 	bl	80009dc <__aeabi_dcmplt>
 8005132:	2800      	cmp	r0, #0
 8005134:	d07d      	beq.n	8005232 <_dtoa_r+0x4ca>
 8005136:	f1b8 0f00 	cmp.w	r8, #0
 800513a:	d07a      	beq.n	8005232 <_dtoa_r+0x4ca>
 800513c:	9b04      	ldr	r3, [sp, #16]
 800513e:	2b00      	cmp	r3, #0
 8005140:	dd36      	ble.n	80051b0 <_dtoa_r+0x448>
 8005142:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005146:	2200      	movs	r2, #0
 8005148:	4b8c      	ldr	r3, [pc, #560]	; (800537c <_dtoa_r+0x614>)
 800514a:	f7fb f9d5 	bl	80004f8 <__aeabi_dmul>
 800514e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005152:	9e04      	ldr	r6, [sp, #16]
 8005154:	f10a 37ff 	add.w	r7, sl, #4294967295
 8005158:	3501      	adds	r5, #1
 800515a:	4628      	mov	r0, r5
 800515c:	f7fb f962 	bl	8000424 <__aeabi_i2d>
 8005160:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005164:	f7fb f9c8 	bl	80004f8 <__aeabi_dmul>
 8005168:	2200      	movs	r2, #0
 800516a:	4b85      	ldr	r3, [pc, #532]	; (8005380 <_dtoa_r+0x618>)
 800516c:	f7fb f80e 	bl	800018c <__adddf3>
 8005170:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005174:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005178:	950b      	str	r5, [sp, #44]	; 0x2c
 800517a:	2e00      	cmp	r6, #0
 800517c:	d15c      	bne.n	8005238 <_dtoa_r+0x4d0>
 800517e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005182:	2200      	movs	r2, #0
 8005184:	4b7f      	ldr	r3, [pc, #508]	; (8005384 <_dtoa_r+0x61c>)
 8005186:	f7fa ffff 	bl	8000188 <__aeabi_dsub>
 800518a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800518c:	462b      	mov	r3, r5
 800518e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005192:	f7fb fc41 	bl	8000a18 <__aeabi_dcmpgt>
 8005196:	2800      	cmp	r0, #0
 8005198:	f040 8281 	bne.w	800569e <_dtoa_r+0x936>
 800519c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80051a2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80051a6:	f7fb fc19 	bl	80009dc <__aeabi_dcmplt>
 80051aa:	2800      	cmp	r0, #0
 80051ac:	f040 8275 	bne.w	800569a <_dtoa_r+0x932>
 80051b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80051b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80051b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f2c0 814b 	blt.w	8005456 <_dtoa_r+0x6ee>
 80051c0:	f1ba 0f0e 	cmp.w	sl, #14
 80051c4:	f300 8147 	bgt.w	8005456 <_dtoa_r+0x6ee>
 80051c8:	4b69      	ldr	r3, [pc, #420]	; (8005370 <_dtoa_r+0x608>)
 80051ca:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80051ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80051d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f280 80d7 	bge.w	800538c <_dtoa_r+0x624>
 80051de:	f1b8 0f00 	cmp.w	r8, #0
 80051e2:	f300 80d3 	bgt.w	800538c <_dtoa_r+0x624>
 80051e6:	f040 8257 	bne.w	8005698 <_dtoa_r+0x930>
 80051ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051ee:	2200      	movs	r2, #0
 80051f0:	4b64      	ldr	r3, [pc, #400]	; (8005384 <_dtoa_r+0x61c>)
 80051f2:	f7fb f981 	bl	80004f8 <__aeabi_dmul>
 80051f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80051fa:	f7fb fc03 	bl	8000a04 <__aeabi_dcmpge>
 80051fe:	4646      	mov	r6, r8
 8005200:	4647      	mov	r7, r8
 8005202:	2800      	cmp	r0, #0
 8005204:	f040 822d 	bne.w	8005662 <_dtoa_r+0x8fa>
 8005208:	9b06      	ldr	r3, [sp, #24]
 800520a:	9a06      	ldr	r2, [sp, #24]
 800520c:	1c5d      	adds	r5, r3, #1
 800520e:	2331      	movs	r3, #49	; 0x31
 8005210:	f10a 0a01 	add.w	sl, sl, #1
 8005214:	7013      	strb	r3, [r2, #0]
 8005216:	e228      	b.n	800566a <_dtoa_r+0x902>
 8005218:	07f2      	lsls	r2, r6, #31
 800521a:	d505      	bpl.n	8005228 <_dtoa_r+0x4c0>
 800521c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005220:	f7fb f96a 	bl	80004f8 <__aeabi_dmul>
 8005224:	2301      	movs	r3, #1
 8005226:	3501      	adds	r5, #1
 8005228:	1076      	asrs	r6, r6, #1
 800522a:	3708      	adds	r7, #8
 800522c:	e76e      	b.n	800510c <_dtoa_r+0x3a4>
 800522e:	2502      	movs	r5, #2
 8005230:	e771      	b.n	8005116 <_dtoa_r+0x3ae>
 8005232:	4657      	mov	r7, sl
 8005234:	4646      	mov	r6, r8
 8005236:	e790      	b.n	800515a <_dtoa_r+0x3f2>
 8005238:	4b4d      	ldr	r3, [pc, #308]	; (8005370 <_dtoa_r+0x608>)
 800523a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800523e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005244:	2b00      	cmp	r3, #0
 8005246:	d048      	beq.n	80052da <_dtoa_r+0x572>
 8005248:	4602      	mov	r2, r0
 800524a:	460b      	mov	r3, r1
 800524c:	2000      	movs	r0, #0
 800524e:	494e      	ldr	r1, [pc, #312]	; (8005388 <_dtoa_r+0x620>)
 8005250:	f7fb fa7c 	bl	800074c <__aeabi_ddiv>
 8005254:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005258:	f7fa ff96 	bl	8000188 <__aeabi_dsub>
 800525c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005260:	9d06      	ldr	r5, [sp, #24]
 8005262:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005266:	f7fb fbf7 	bl	8000a58 <__aeabi_d2iz>
 800526a:	9011      	str	r0, [sp, #68]	; 0x44
 800526c:	f7fb f8da 	bl	8000424 <__aeabi_i2d>
 8005270:	4602      	mov	r2, r0
 8005272:	460b      	mov	r3, r1
 8005274:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005278:	f7fa ff86 	bl	8000188 <__aeabi_dsub>
 800527c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800527e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005282:	3330      	adds	r3, #48	; 0x30
 8005284:	f805 3b01 	strb.w	r3, [r5], #1
 8005288:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800528c:	f7fb fba6 	bl	80009dc <__aeabi_dcmplt>
 8005290:	2800      	cmp	r0, #0
 8005292:	d163      	bne.n	800535c <_dtoa_r+0x5f4>
 8005294:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005298:	2000      	movs	r0, #0
 800529a:	4937      	ldr	r1, [pc, #220]	; (8005378 <_dtoa_r+0x610>)
 800529c:	f7fa ff74 	bl	8000188 <__aeabi_dsub>
 80052a0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80052a4:	f7fb fb9a 	bl	80009dc <__aeabi_dcmplt>
 80052a8:	2800      	cmp	r0, #0
 80052aa:	f040 80b5 	bne.w	8005418 <_dtoa_r+0x6b0>
 80052ae:	9b06      	ldr	r3, [sp, #24]
 80052b0:	1aeb      	subs	r3, r5, r3
 80052b2:	429e      	cmp	r6, r3
 80052b4:	f77f af7c 	ble.w	80051b0 <_dtoa_r+0x448>
 80052b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80052bc:	2200      	movs	r2, #0
 80052be:	4b2f      	ldr	r3, [pc, #188]	; (800537c <_dtoa_r+0x614>)
 80052c0:	f7fb f91a 	bl	80004f8 <__aeabi_dmul>
 80052c4:	2200      	movs	r2, #0
 80052c6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80052ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052ce:	4b2b      	ldr	r3, [pc, #172]	; (800537c <_dtoa_r+0x614>)
 80052d0:	f7fb f912 	bl	80004f8 <__aeabi_dmul>
 80052d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052d8:	e7c3      	b.n	8005262 <_dtoa_r+0x4fa>
 80052da:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80052de:	f7fb f90b 	bl	80004f8 <__aeabi_dmul>
 80052e2:	9b06      	ldr	r3, [sp, #24]
 80052e4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80052e8:	199d      	adds	r5, r3, r6
 80052ea:	461e      	mov	r6, r3
 80052ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052f0:	f7fb fbb2 	bl	8000a58 <__aeabi_d2iz>
 80052f4:	9011      	str	r0, [sp, #68]	; 0x44
 80052f6:	f7fb f895 	bl	8000424 <__aeabi_i2d>
 80052fa:	4602      	mov	r2, r0
 80052fc:	460b      	mov	r3, r1
 80052fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005302:	f7fa ff41 	bl	8000188 <__aeabi_dsub>
 8005306:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005308:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800530c:	3330      	adds	r3, #48	; 0x30
 800530e:	f806 3b01 	strb.w	r3, [r6], #1
 8005312:	42ae      	cmp	r6, r5
 8005314:	f04f 0200 	mov.w	r2, #0
 8005318:	d124      	bne.n	8005364 <_dtoa_r+0x5fc>
 800531a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800531e:	4b1a      	ldr	r3, [pc, #104]	; (8005388 <_dtoa_r+0x620>)
 8005320:	f7fa ff34 	bl	800018c <__adddf3>
 8005324:	4602      	mov	r2, r0
 8005326:	460b      	mov	r3, r1
 8005328:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800532c:	f7fb fb74 	bl	8000a18 <__aeabi_dcmpgt>
 8005330:	2800      	cmp	r0, #0
 8005332:	d171      	bne.n	8005418 <_dtoa_r+0x6b0>
 8005334:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005338:	2000      	movs	r0, #0
 800533a:	4913      	ldr	r1, [pc, #76]	; (8005388 <_dtoa_r+0x620>)
 800533c:	f7fa ff24 	bl	8000188 <__aeabi_dsub>
 8005340:	4602      	mov	r2, r0
 8005342:	460b      	mov	r3, r1
 8005344:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005348:	f7fb fb48 	bl	80009dc <__aeabi_dcmplt>
 800534c:	2800      	cmp	r0, #0
 800534e:	f43f af2f 	beq.w	80051b0 <_dtoa_r+0x448>
 8005352:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005356:	1e6a      	subs	r2, r5, #1
 8005358:	2b30      	cmp	r3, #48	; 0x30
 800535a:	d001      	beq.n	8005360 <_dtoa_r+0x5f8>
 800535c:	46ba      	mov	sl, r7
 800535e:	e04a      	b.n	80053f6 <_dtoa_r+0x68e>
 8005360:	4615      	mov	r5, r2
 8005362:	e7f6      	b.n	8005352 <_dtoa_r+0x5ea>
 8005364:	4b05      	ldr	r3, [pc, #20]	; (800537c <_dtoa_r+0x614>)
 8005366:	f7fb f8c7 	bl	80004f8 <__aeabi_dmul>
 800536a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800536e:	e7bd      	b.n	80052ec <_dtoa_r+0x584>
 8005370:	0800a1f8 	.word	0x0800a1f8
 8005374:	0800a1d0 	.word	0x0800a1d0
 8005378:	3ff00000 	.word	0x3ff00000
 800537c:	40240000 	.word	0x40240000
 8005380:	401c0000 	.word	0x401c0000
 8005384:	40140000 	.word	0x40140000
 8005388:	3fe00000 	.word	0x3fe00000
 800538c:	9d06      	ldr	r5, [sp, #24]
 800538e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005392:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005396:	4630      	mov	r0, r6
 8005398:	4639      	mov	r1, r7
 800539a:	f7fb f9d7 	bl	800074c <__aeabi_ddiv>
 800539e:	f7fb fb5b 	bl	8000a58 <__aeabi_d2iz>
 80053a2:	4681      	mov	r9, r0
 80053a4:	f7fb f83e 	bl	8000424 <__aeabi_i2d>
 80053a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053ac:	f7fb f8a4 	bl	80004f8 <__aeabi_dmul>
 80053b0:	4602      	mov	r2, r0
 80053b2:	460b      	mov	r3, r1
 80053b4:	4630      	mov	r0, r6
 80053b6:	4639      	mov	r1, r7
 80053b8:	f7fa fee6 	bl	8000188 <__aeabi_dsub>
 80053bc:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80053c0:	f805 6b01 	strb.w	r6, [r5], #1
 80053c4:	9e06      	ldr	r6, [sp, #24]
 80053c6:	4602      	mov	r2, r0
 80053c8:	1bae      	subs	r6, r5, r6
 80053ca:	45b0      	cmp	r8, r6
 80053cc:	460b      	mov	r3, r1
 80053ce:	d135      	bne.n	800543c <_dtoa_r+0x6d4>
 80053d0:	f7fa fedc 	bl	800018c <__adddf3>
 80053d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053d8:	4606      	mov	r6, r0
 80053da:	460f      	mov	r7, r1
 80053dc:	f7fb fb1c 	bl	8000a18 <__aeabi_dcmpgt>
 80053e0:	b9c8      	cbnz	r0, 8005416 <_dtoa_r+0x6ae>
 80053e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053e6:	4630      	mov	r0, r6
 80053e8:	4639      	mov	r1, r7
 80053ea:	f7fb faed 	bl	80009c8 <__aeabi_dcmpeq>
 80053ee:	b110      	cbz	r0, 80053f6 <_dtoa_r+0x68e>
 80053f0:	f019 0f01 	tst.w	r9, #1
 80053f4:	d10f      	bne.n	8005416 <_dtoa_r+0x6ae>
 80053f6:	4659      	mov	r1, fp
 80053f8:	4620      	mov	r0, r4
 80053fa:	f000 fe1a 	bl	8006032 <_Bfree>
 80053fe:	2300      	movs	r3, #0
 8005400:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005402:	702b      	strb	r3, [r5, #0]
 8005404:	f10a 0301 	add.w	r3, sl, #1
 8005408:	6013      	str	r3, [r2, #0]
 800540a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800540c:	2b00      	cmp	r3, #0
 800540e:	f43f acf3 	beq.w	8004df8 <_dtoa_r+0x90>
 8005412:	601d      	str	r5, [r3, #0]
 8005414:	e4f0      	b.n	8004df8 <_dtoa_r+0x90>
 8005416:	4657      	mov	r7, sl
 8005418:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800541c:	1e6b      	subs	r3, r5, #1
 800541e:	2a39      	cmp	r2, #57	; 0x39
 8005420:	d106      	bne.n	8005430 <_dtoa_r+0x6c8>
 8005422:	9a06      	ldr	r2, [sp, #24]
 8005424:	429a      	cmp	r2, r3
 8005426:	d107      	bne.n	8005438 <_dtoa_r+0x6d0>
 8005428:	2330      	movs	r3, #48	; 0x30
 800542a:	7013      	strb	r3, [r2, #0]
 800542c:	4613      	mov	r3, r2
 800542e:	3701      	adds	r7, #1
 8005430:	781a      	ldrb	r2, [r3, #0]
 8005432:	3201      	adds	r2, #1
 8005434:	701a      	strb	r2, [r3, #0]
 8005436:	e791      	b.n	800535c <_dtoa_r+0x5f4>
 8005438:	461d      	mov	r5, r3
 800543a:	e7ed      	b.n	8005418 <_dtoa_r+0x6b0>
 800543c:	2200      	movs	r2, #0
 800543e:	4b99      	ldr	r3, [pc, #612]	; (80056a4 <_dtoa_r+0x93c>)
 8005440:	f7fb f85a 	bl	80004f8 <__aeabi_dmul>
 8005444:	2200      	movs	r2, #0
 8005446:	2300      	movs	r3, #0
 8005448:	4606      	mov	r6, r0
 800544a:	460f      	mov	r7, r1
 800544c:	f7fb fabc 	bl	80009c8 <__aeabi_dcmpeq>
 8005450:	2800      	cmp	r0, #0
 8005452:	d09e      	beq.n	8005392 <_dtoa_r+0x62a>
 8005454:	e7cf      	b.n	80053f6 <_dtoa_r+0x68e>
 8005456:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005458:	2a00      	cmp	r2, #0
 800545a:	f000 8088 	beq.w	800556e <_dtoa_r+0x806>
 800545e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005460:	2a01      	cmp	r2, #1
 8005462:	dc6d      	bgt.n	8005540 <_dtoa_r+0x7d8>
 8005464:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005466:	2a00      	cmp	r2, #0
 8005468:	d066      	beq.n	8005538 <_dtoa_r+0x7d0>
 800546a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800546e:	464d      	mov	r5, r9
 8005470:	9e08      	ldr	r6, [sp, #32]
 8005472:	9a07      	ldr	r2, [sp, #28]
 8005474:	2101      	movs	r1, #1
 8005476:	441a      	add	r2, r3
 8005478:	4620      	mov	r0, r4
 800547a:	4499      	add	r9, r3
 800547c:	9207      	str	r2, [sp, #28]
 800547e:	f000 feb6 	bl	80061ee <__i2b>
 8005482:	4607      	mov	r7, r0
 8005484:	2d00      	cmp	r5, #0
 8005486:	dd0b      	ble.n	80054a0 <_dtoa_r+0x738>
 8005488:	9b07      	ldr	r3, [sp, #28]
 800548a:	2b00      	cmp	r3, #0
 800548c:	dd08      	ble.n	80054a0 <_dtoa_r+0x738>
 800548e:	42ab      	cmp	r3, r5
 8005490:	bfa8      	it	ge
 8005492:	462b      	movge	r3, r5
 8005494:	9a07      	ldr	r2, [sp, #28]
 8005496:	eba9 0903 	sub.w	r9, r9, r3
 800549a:	1aed      	subs	r5, r5, r3
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	9307      	str	r3, [sp, #28]
 80054a0:	9b08      	ldr	r3, [sp, #32]
 80054a2:	b1eb      	cbz	r3, 80054e0 <_dtoa_r+0x778>
 80054a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d065      	beq.n	8005576 <_dtoa_r+0x80e>
 80054aa:	b18e      	cbz	r6, 80054d0 <_dtoa_r+0x768>
 80054ac:	4639      	mov	r1, r7
 80054ae:	4632      	mov	r2, r6
 80054b0:	4620      	mov	r0, r4
 80054b2:	f000 ff3b 	bl	800632c <__pow5mult>
 80054b6:	465a      	mov	r2, fp
 80054b8:	4601      	mov	r1, r0
 80054ba:	4607      	mov	r7, r0
 80054bc:	4620      	mov	r0, r4
 80054be:	f000 fe9f 	bl	8006200 <__multiply>
 80054c2:	4659      	mov	r1, fp
 80054c4:	900a      	str	r0, [sp, #40]	; 0x28
 80054c6:	4620      	mov	r0, r4
 80054c8:	f000 fdb3 	bl	8006032 <_Bfree>
 80054cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054ce:	469b      	mov	fp, r3
 80054d0:	9b08      	ldr	r3, [sp, #32]
 80054d2:	1b9a      	subs	r2, r3, r6
 80054d4:	d004      	beq.n	80054e0 <_dtoa_r+0x778>
 80054d6:	4659      	mov	r1, fp
 80054d8:	4620      	mov	r0, r4
 80054da:	f000 ff27 	bl	800632c <__pow5mult>
 80054de:	4683      	mov	fp, r0
 80054e0:	2101      	movs	r1, #1
 80054e2:	4620      	mov	r0, r4
 80054e4:	f000 fe83 	bl	80061ee <__i2b>
 80054e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80054ea:	4606      	mov	r6, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 81c6 	beq.w	800587e <_dtoa_r+0xb16>
 80054f2:	461a      	mov	r2, r3
 80054f4:	4601      	mov	r1, r0
 80054f6:	4620      	mov	r0, r4
 80054f8:	f000 ff18 	bl	800632c <__pow5mult>
 80054fc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80054fe:	4606      	mov	r6, r0
 8005500:	2b01      	cmp	r3, #1
 8005502:	dc3e      	bgt.n	8005582 <_dtoa_r+0x81a>
 8005504:	9b02      	ldr	r3, [sp, #8]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d137      	bne.n	800557a <_dtoa_r+0x812>
 800550a:	9b03      	ldr	r3, [sp, #12]
 800550c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005510:	2b00      	cmp	r3, #0
 8005512:	d134      	bne.n	800557e <_dtoa_r+0x816>
 8005514:	9b03      	ldr	r3, [sp, #12]
 8005516:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800551a:	0d1b      	lsrs	r3, r3, #20
 800551c:	051b      	lsls	r3, r3, #20
 800551e:	b12b      	cbz	r3, 800552c <_dtoa_r+0x7c4>
 8005520:	9b07      	ldr	r3, [sp, #28]
 8005522:	f109 0901 	add.w	r9, r9, #1
 8005526:	3301      	adds	r3, #1
 8005528:	9307      	str	r3, [sp, #28]
 800552a:	2301      	movs	r3, #1
 800552c:	9308      	str	r3, [sp, #32]
 800552e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005530:	2b00      	cmp	r3, #0
 8005532:	d128      	bne.n	8005586 <_dtoa_r+0x81e>
 8005534:	2001      	movs	r0, #1
 8005536:	e02e      	b.n	8005596 <_dtoa_r+0x82e>
 8005538:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800553a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800553e:	e796      	b.n	800546e <_dtoa_r+0x706>
 8005540:	9b08      	ldr	r3, [sp, #32]
 8005542:	f108 36ff 	add.w	r6, r8, #4294967295
 8005546:	42b3      	cmp	r3, r6
 8005548:	bfb7      	itett	lt
 800554a:	9b08      	ldrlt	r3, [sp, #32]
 800554c:	1b9e      	subge	r6, r3, r6
 800554e:	1af2      	sublt	r2, r6, r3
 8005550:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005552:	bfbf      	itttt	lt
 8005554:	9608      	strlt	r6, [sp, #32]
 8005556:	189b      	addlt	r3, r3, r2
 8005558:	930c      	strlt	r3, [sp, #48]	; 0x30
 800555a:	2600      	movlt	r6, #0
 800555c:	f1b8 0f00 	cmp.w	r8, #0
 8005560:	bfb9      	ittee	lt
 8005562:	eba9 0508 	sublt.w	r5, r9, r8
 8005566:	2300      	movlt	r3, #0
 8005568:	464d      	movge	r5, r9
 800556a:	4643      	movge	r3, r8
 800556c:	e781      	b.n	8005472 <_dtoa_r+0x70a>
 800556e:	9e08      	ldr	r6, [sp, #32]
 8005570:	464d      	mov	r5, r9
 8005572:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005574:	e786      	b.n	8005484 <_dtoa_r+0x71c>
 8005576:	9a08      	ldr	r2, [sp, #32]
 8005578:	e7ad      	b.n	80054d6 <_dtoa_r+0x76e>
 800557a:	2300      	movs	r3, #0
 800557c:	e7d6      	b.n	800552c <_dtoa_r+0x7c4>
 800557e:	9b02      	ldr	r3, [sp, #8]
 8005580:	e7d4      	b.n	800552c <_dtoa_r+0x7c4>
 8005582:	2300      	movs	r3, #0
 8005584:	9308      	str	r3, [sp, #32]
 8005586:	6933      	ldr	r3, [r6, #16]
 8005588:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800558c:	6918      	ldr	r0, [r3, #16]
 800558e:	f000 fde0 	bl	8006152 <__hi0bits>
 8005592:	f1c0 0020 	rsb	r0, r0, #32
 8005596:	9b07      	ldr	r3, [sp, #28]
 8005598:	4418      	add	r0, r3
 800559a:	f010 001f 	ands.w	r0, r0, #31
 800559e:	d047      	beq.n	8005630 <_dtoa_r+0x8c8>
 80055a0:	f1c0 0320 	rsb	r3, r0, #32
 80055a4:	2b04      	cmp	r3, #4
 80055a6:	dd3b      	ble.n	8005620 <_dtoa_r+0x8b8>
 80055a8:	9b07      	ldr	r3, [sp, #28]
 80055aa:	f1c0 001c 	rsb	r0, r0, #28
 80055ae:	4481      	add	r9, r0
 80055b0:	4405      	add	r5, r0
 80055b2:	4403      	add	r3, r0
 80055b4:	9307      	str	r3, [sp, #28]
 80055b6:	f1b9 0f00 	cmp.w	r9, #0
 80055ba:	dd05      	ble.n	80055c8 <_dtoa_r+0x860>
 80055bc:	4659      	mov	r1, fp
 80055be:	464a      	mov	r2, r9
 80055c0:	4620      	mov	r0, r4
 80055c2:	f000 ff01 	bl	80063c8 <__lshift>
 80055c6:	4683      	mov	fp, r0
 80055c8:	9b07      	ldr	r3, [sp, #28]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	dd05      	ble.n	80055da <_dtoa_r+0x872>
 80055ce:	4631      	mov	r1, r6
 80055d0:	461a      	mov	r2, r3
 80055d2:	4620      	mov	r0, r4
 80055d4:	f000 fef8 	bl	80063c8 <__lshift>
 80055d8:	4606      	mov	r6, r0
 80055da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055dc:	b353      	cbz	r3, 8005634 <_dtoa_r+0x8cc>
 80055de:	4631      	mov	r1, r6
 80055e0:	4658      	mov	r0, fp
 80055e2:	f000 ff45 	bl	8006470 <__mcmp>
 80055e6:	2800      	cmp	r0, #0
 80055e8:	da24      	bge.n	8005634 <_dtoa_r+0x8cc>
 80055ea:	2300      	movs	r3, #0
 80055ec:	4659      	mov	r1, fp
 80055ee:	220a      	movs	r2, #10
 80055f0:	4620      	mov	r0, r4
 80055f2:	f000 fd35 	bl	8006060 <__multadd>
 80055f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055fc:	4683      	mov	fp, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f000 8144 	beq.w	800588c <_dtoa_r+0xb24>
 8005604:	2300      	movs	r3, #0
 8005606:	4639      	mov	r1, r7
 8005608:	220a      	movs	r2, #10
 800560a:	4620      	mov	r0, r4
 800560c:	f000 fd28 	bl	8006060 <__multadd>
 8005610:	9b04      	ldr	r3, [sp, #16]
 8005612:	4607      	mov	r7, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	dc4d      	bgt.n	80056b4 <_dtoa_r+0x94c>
 8005618:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800561a:	2b02      	cmp	r3, #2
 800561c:	dd4a      	ble.n	80056b4 <_dtoa_r+0x94c>
 800561e:	e011      	b.n	8005644 <_dtoa_r+0x8dc>
 8005620:	d0c9      	beq.n	80055b6 <_dtoa_r+0x84e>
 8005622:	9a07      	ldr	r2, [sp, #28]
 8005624:	331c      	adds	r3, #28
 8005626:	441a      	add	r2, r3
 8005628:	4499      	add	r9, r3
 800562a:	441d      	add	r5, r3
 800562c:	4613      	mov	r3, r2
 800562e:	e7c1      	b.n	80055b4 <_dtoa_r+0x84c>
 8005630:	4603      	mov	r3, r0
 8005632:	e7f6      	b.n	8005622 <_dtoa_r+0x8ba>
 8005634:	f1b8 0f00 	cmp.w	r8, #0
 8005638:	dc36      	bgt.n	80056a8 <_dtoa_r+0x940>
 800563a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800563c:	2b02      	cmp	r3, #2
 800563e:	dd33      	ble.n	80056a8 <_dtoa_r+0x940>
 8005640:	f8cd 8010 	str.w	r8, [sp, #16]
 8005644:	9b04      	ldr	r3, [sp, #16]
 8005646:	b963      	cbnz	r3, 8005662 <_dtoa_r+0x8fa>
 8005648:	4631      	mov	r1, r6
 800564a:	2205      	movs	r2, #5
 800564c:	4620      	mov	r0, r4
 800564e:	f000 fd07 	bl	8006060 <__multadd>
 8005652:	4601      	mov	r1, r0
 8005654:	4606      	mov	r6, r0
 8005656:	4658      	mov	r0, fp
 8005658:	f000 ff0a 	bl	8006470 <__mcmp>
 800565c:	2800      	cmp	r0, #0
 800565e:	f73f add3 	bgt.w	8005208 <_dtoa_r+0x4a0>
 8005662:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005664:	9d06      	ldr	r5, [sp, #24]
 8005666:	ea6f 0a03 	mvn.w	sl, r3
 800566a:	f04f 0900 	mov.w	r9, #0
 800566e:	4631      	mov	r1, r6
 8005670:	4620      	mov	r0, r4
 8005672:	f000 fcde 	bl	8006032 <_Bfree>
 8005676:	2f00      	cmp	r7, #0
 8005678:	f43f aebd 	beq.w	80053f6 <_dtoa_r+0x68e>
 800567c:	f1b9 0f00 	cmp.w	r9, #0
 8005680:	d005      	beq.n	800568e <_dtoa_r+0x926>
 8005682:	45b9      	cmp	r9, r7
 8005684:	d003      	beq.n	800568e <_dtoa_r+0x926>
 8005686:	4649      	mov	r1, r9
 8005688:	4620      	mov	r0, r4
 800568a:	f000 fcd2 	bl	8006032 <_Bfree>
 800568e:	4639      	mov	r1, r7
 8005690:	4620      	mov	r0, r4
 8005692:	f000 fcce 	bl	8006032 <_Bfree>
 8005696:	e6ae      	b.n	80053f6 <_dtoa_r+0x68e>
 8005698:	2600      	movs	r6, #0
 800569a:	4637      	mov	r7, r6
 800569c:	e7e1      	b.n	8005662 <_dtoa_r+0x8fa>
 800569e:	46ba      	mov	sl, r7
 80056a0:	4637      	mov	r7, r6
 80056a2:	e5b1      	b.n	8005208 <_dtoa_r+0x4a0>
 80056a4:	40240000 	.word	0x40240000
 80056a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056aa:	f8cd 8010 	str.w	r8, [sp, #16]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f000 80f3 	beq.w	800589a <_dtoa_r+0xb32>
 80056b4:	2d00      	cmp	r5, #0
 80056b6:	dd05      	ble.n	80056c4 <_dtoa_r+0x95c>
 80056b8:	4639      	mov	r1, r7
 80056ba:	462a      	mov	r2, r5
 80056bc:	4620      	mov	r0, r4
 80056be:	f000 fe83 	bl	80063c8 <__lshift>
 80056c2:	4607      	mov	r7, r0
 80056c4:	9b08      	ldr	r3, [sp, #32]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d04c      	beq.n	8005764 <_dtoa_r+0x9fc>
 80056ca:	6879      	ldr	r1, [r7, #4]
 80056cc:	4620      	mov	r0, r4
 80056ce:	f000 fc7c 	bl	8005fca <_Balloc>
 80056d2:	4605      	mov	r5, r0
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	f107 010c 	add.w	r1, r7, #12
 80056da:	3202      	adds	r2, #2
 80056dc:	0092      	lsls	r2, r2, #2
 80056de:	300c      	adds	r0, #12
 80056e0:	f000 fc68 	bl	8005fb4 <memcpy>
 80056e4:	2201      	movs	r2, #1
 80056e6:	4629      	mov	r1, r5
 80056e8:	4620      	mov	r0, r4
 80056ea:	f000 fe6d 	bl	80063c8 <__lshift>
 80056ee:	46b9      	mov	r9, r7
 80056f0:	4607      	mov	r7, r0
 80056f2:	9b06      	ldr	r3, [sp, #24]
 80056f4:	9307      	str	r3, [sp, #28]
 80056f6:	9b02      	ldr	r3, [sp, #8]
 80056f8:	f003 0301 	and.w	r3, r3, #1
 80056fc:	9308      	str	r3, [sp, #32]
 80056fe:	4631      	mov	r1, r6
 8005700:	4658      	mov	r0, fp
 8005702:	f7ff faa3 	bl	8004c4c <quorem>
 8005706:	4649      	mov	r1, r9
 8005708:	4605      	mov	r5, r0
 800570a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800570e:	4658      	mov	r0, fp
 8005710:	f000 feae 	bl	8006470 <__mcmp>
 8005714:	463a      	mov	r2, r7
 8005716:	9002      	str	r0, [sp, #8]
 8005718:	4631      	mov	r1, r6
 800571a:	4620      	mov	r0, r4
 800571c:	f000 fec2 	bl	80064a4 <__mdiff>
 8005720:	68c3      	ldr	r3, [r0, #12]
 8005722:	4602      	mov	r2, r0
 8005724:	bb03      	cbnz	r3, 8005768 <_dtoa_r+0xa00>
 8005726:	4601      	mov	r1, r0
 8005728:	9009      	str	r0, [sp, #36]	; 0x24
 800572a:	4658      	mov	r0, fp
 800572c:	f000 fea0 	bl	8006470 <__mcmp>
 8005730:	4603      	mov	r3, r0
 8005732:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005734:	4611      	mov	r1, r2
 8005736:	4620      	mov	r0, r4
 8005738:	9309      	str	r3, [sp, #36]	; 0x24
 800573a:	f000 fc7a 	bl	8006032 <_Bfree>
 800573e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005740:	b9a3      	cbnz	r3, 800576c <_dtoa_r+0xa04>
 8005742:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005744:	b992      	cbnz	r2, 800576c <_dtoa_r+0xa04>
 8005746:	9a08      	ldr	r2, [sp, #32]
 8005748:	b982      	cbnz	r2, 800576c <_dtoa_r+0xa04>
 800574a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800574e:	d029      	beq.n	80057a4 <_dtoa_r+0xa3c>
 8005750:	9b02      	ldr	r3, [sp, #8]
 8005752:	2b00      	cmp	r3, #0
 8005754:	dd01      	ble.n	800575a <_dtoa_r+0x9f2>
 8005756:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800575a:	9b07      	ldr	r3, [sp, #28]
 800575c:	1c5d      	adds	r5, r3, #1
 800575e:	f883 8000 	strb.w	r8, [r3]
 8005762:	e784      	b.n	800566e <_dtoa_r+0x906>
 8005764:	4638      	mov	r0, r7
 8005766:	e7c2      	b.n	80056ee <_dtoa_r+0x986>
 8005768:	2301      	movs	r3, #1
 800576a:	e7e3      	b.n	8005734 <_dtoa_r+0x9cc>
 800576c:	9a02      	ldr	r2, [sp, #8]
 800576e:	2a00      	cmp	r2, #0
 8005770:	db04      	blt.n	800577c <_dtoa_r+0xa14>
 8005772:	d123      	bne.n	80057bc <_dtoa_r+0xa54>
 8005774:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005776:	bb0a      	cbnz	r2, 80057bc <_dtoa_r+0xa54>
 8005778:	9a08      	ldr	r2, [sp, #32]
 800577a:	b9fa      	cbnz	r2, 80057bc <_dtoa_r+0xa54>
 800577c:	2b00      	cmp	r3, #0
 800577e:	ddec      	ble.n	800575a <_dtoa_r+0x9f2>
 8005780:	4659      	mov	r1, fp
 8005782:	2201      	movs	r2, #1
 8005784:	4620      	mov	r0, r4
 8005786:	f000 fe1f 	bl	80063c8 <__lshift>
 800578a:	4631      	mov	r1, r6
 800578c:	4683      	mov	fp, r0
 800578e:	f000 fe6f 	bl	8006470 <__mcmp>
 8005792:	2800      	cmp	r0, #0
 8005794:	dc03      	bgt.n	800579e <_dtoa_r+0xa36>
 8005796:	d1e0      	bne.n	800575a <_dtoa_r+0x9f2>
 8005798:	f018 0f01 	tst.w	r8, #1
 800579c:	d0dd      	beq.n	800575a <_dtoa_r+0x9f2>
 800579e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80057a2:	d1d8      	bne.n	8005756 <_dtoa_r+0x9ee>
 80057a4:	9b07      	ldr	r3, [sp, #28]
 80057a6:	9a07      	ldr	r2, [sp, #28]
 80057a8:	1c5d      	adds	r5, r3, #1
 80057aa:	2339      	movs	r3, #57	; 0x39
 80057ac:	7013      	strb	r3, [r2, #0]
 80057ae:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80057b2:	1e6a      	subs	r2, r5, #1
 80057b4:	2b39      	cmp	r3, #57	; 0x39
 80057b6:	d04d      	beq.n	8005854 <_dtoa_r+0xaec>
 80057b8:	3301      	adds	r3, #1
 80057ba:	e052      	b.n	8005862 <_dtoa_r+0xafa>
 80057bc:	9a07      	ldr	r2, [sp, #28]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f102 0501 	add.w	r5, r2, #1
 80057c4:	dd06      	ble.n	80057d4 <_dtoa_r+0xa6c>
 80057c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80057ca:	d0eb      	beq.n	80057a4 <_dtoa_r+0xa3c>
 80057cc:	f108 0801 	add.w	r8, r8, #1
 80057d0:	9b07      	ldr	r3, [sp, #28]
 80057d2:	e7c4      	b.n	800575e <_dtoa_r+0x9f6>
 80057d4:	9b06      	ldr	r3, [sp, #24]
 80057d6:	9a04      	ldr	r2, [sp, #16]
 80057d8:	1aeb      	subs	r3, r5, r3
 80057da:	4293      	cmp	r3, r2
 80057dc:	f805 8c01 	strb.w	r8, [r5, #-1]
 80057e0:	d021      	beq.n	8005826 <_dtoa_r+0xabe>
 80057e2:	4659      	mov	r1, fp
 80057e4:	2300      	movs	r3, #0
 80057e6:	220a      	movs	r2, #10
 80057e8:	4620      	mov	r0, r4
 80057ea:	f000 fc39 	bl	8006060 <__multadd>
 80057ee:	45b9      	cmp	r9, r7
 80057f0:	4683      	mov	fp, r0
 80057f2:	f04f 0300 	mov.w	r3, #0
 80057f6:	f04f 020a 	mov.w	r2, #10
 80057fa:	4649      	mov	r1, r9
 80057fc:	4620      	mov	r0, r4
 80057fe:	d105      	bne.n	800580c <_dtoa_r+0xaa4>
 8005800:	f000 fc2e 	bl	8006060 <__multadd>
 8005804:	4681      	mov	r9, r0
 8005806:	4607      	mov	r7, r0
 8005808:	9507      	str	r5, [sp, #28]
 800580a:	e778      	b.n	80056fe <_dtoa_r+0x996>
 800580c:	f000 fc28 	bl	8006060 <__multadd>
 8005810:	4639      	mov	r1, r7
 8005812:	4681      	mov	r9, r0
 8005814:	2300      	movs	r3, #0
 8005816:	220a      	movs	r2, #10
 8005818:	4620      	mov	r0, r4
 800581a:	f000 fc21 	bl	8006060 <__multadd>
 800581e:	4607      	mov	r7, r0
 8005820:	e7f2      	b.n	8005808 <_dtoa_r+0xaa0>
 8005822:	f04f 0900 	mov.w	r9, #0
 8005826:	4659      	mov	r1, fp
 8005828:	2201      	movs	r2, #1
 800582a:	4620      	mov	r0, r4
 800582c:	f000 fdcc 	bl	80063c8 <__lshift>
 8005830:	4631      	mov	r1, r6
 8005832:	4683      	mov	fp, r0
 8005834:	f000 fe1c 	bl	8006470 <__mcmp>
 8005838:	2800      	cmp	r0, #0
 800583a:	dcb8      	bgt.n	80057ae <_dtoa_r+0xa46>
 800583c:	d102      	bne.n	8005844 <_dtoa_r+0xadc>
 800583e:	f018 0f01 	tst.w	r8, #1
 8005842:	d1b4      	bne.n	80057ae <_dtoa_r+0xa46>
 8005844:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005848:	1e6a      	subs	r2, r5, #1
 800584a:	2b30      	cmp	r3, #48	; 0x30
 800584c:	f47f af0f 	bne.w	800566e <_dtoa_r+0x906>
 8005850:	4615      	mov	r5, r2
 8005852:	e7f7      	b.n	8005844 <_dtoa_r+0xadc>
 8005854:	9b06      	ldr	r3, [sp, #24]
 8005856:	4293      	cmp	r3, r2
 8005858:	d105      	bne.n	8005866 <_dtoa_r+0xafe>
 800585a:	2331      	movs	r3, #49	; 0x31
 800585c:	9a06      	ldr	r2, [sp, #24]
 800585e:	f10a 0a01 	add.w	sl, sl, #1
 8005862:	7013      	strb	r3, [r2, #0]
 8005864:	e703      	b.n	800566e <_dtoa_r+0x906>
 8005866:	4615      	mov	r5, r2
 8005868:	e7a1      	b.n	80057ae <_dtoa_r+0xa46>
 800586a:	4b17      	ldr	r3, [pc, #92]	; (80058c8 <_dtoa_r+0xb60>)
 800586c:	f7ff bae1 	b.w	8004e32 <_dtoa_r+0xca>
 8005870:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005872:	2b00      	cmp	r3, #0
 8005874:	f47f aabb 	bne.w	8004dee <_dtoa_r+0x86>
 8005878:	4b14      	ldr	r3, [pc, #80]	; (80058cc <_dtoa_r+0xb64>)
 800587a:	f7ff bada 	b.w	8004e32 <_dtoa_r+0xca>
 800587e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005880:	2b01      	cmp	r3, #1
 8005882:	f77f ae3f 	ble.w	8005504 <_dtoa_r+0x79c>
 8005886:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005888:	9308      	str	r3, [sp, #32]
 800588a:	e653      	b.n	8005534 <_dtoa_r+0x7cc>
 800588c:	9b04      	ldr	r3, [sp, #16]
 800588e:	2b00      	cmp	r3, #0
 8005890:	dc03      	bgt.n	800589a <_dtoa_r+0xb32>
 8005892:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005894:	2b02      	cmp	r3, #2
 8005896:	f73f aed5 	bgt.w	8005644 <_dtoa_r+0x8dc>
 800589a:	9d06      	ldr	r5, [sp, #24]
 800589c:	4631      	mov	r1, r6
 800589e:	4658      	mov	r0, fp
 80058a0:	f7ff f9d4 	bl	8004c4c <quorem>
 80058a4:	9b06      	ldr	r3, [sp, #24]
 80058a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80058aa:	f805 8b01 	strb.w	r8, [r5], #1
 80058ae:	9a04      	ldr	r2, [sp, #16]
 80058b0:	1aeb      	subs	r3, r5, r3
 80058b2:	429a      	cmp	r2, r3
 80058b4:	ddb5      	ble.n	8005822 <_dtoa_r+0xaba>
 80058b6:	4659      	mov	r1, fp
 80058b8:	2300      	movs	r3, #0
 80058ba:	220a      	movs	r2, #10
 80058bc:	4620      	mov	r0, r4
 80058be:	f000 fbcf 	bl	8006060 <__multadd>
 80058c2:	4683      	mov	fp, r0
 80058c4:	e7ea      	b.n	800589c <_dtoa_r+0xb34>
 80058c6:	bf00      	nop
 80058c8:	0800a2f3 	.word	0x0800a2f3
 80058cc:	0800a1b8 	.word	0x0800a1b8

080058d0 <rshift>:
 80058d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058d2:	6906      	ldr	r6, [r0, #16]
 80058d4:	114b      	asrs	r3, r1, #5
 80058d6:	429e      	cmp	r6, r3
 80058d8:	f100 0414 	add.w	r4, r0, #20
 80058dc:	dd31      	ble.n	8005942 <rshift+0x72>
 80058de:	f011 011f 	ands.w	r1, r1, #31
 80058e2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80058e6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80058ea:	d108      	bne.n	80058fe <rshift+0x2e>
 80058ec:	4621      	mov	r1, r4
 80058ee:	42b2      	cmp	r2, r6
 80058f0:	460b      	mov	r3, r1
 80058f2:	d211      	bcs.n	8005918 <rshift+0x48>
 80058f4:	f852 3b04 	ldr.w	r3, [r2], #4
 80058f8:	f841 3b04 	str.w	r3, [r1], #4
 80058fc:	e7f7      	b.n	80058ee <rshift+0x1e>
 80058fe:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8005902:	4623      	mov	r3, r4
 8005904:	f1c1 0c20 	rsb	ip, r1, #32
 8005908:	40cd      	lsrs	r5, r1
 800590a:	3204      	adds	r2, #4
 800590c:	42b2      	cmp	r2, r6
 800590e:	4617      	mov	r7, r2
 8005910:	d30d      	bcc.n	800592e <rshift+0x5e>
 8005912:	601d      	str	r5, [r3, #0]
 8005914:	b105      	cbz	r5, 8005918 <rshift+0x48>
 8005916:	3304      	adds	r3, #4
 8005918:	42a3      	cmp	r3, r4
 800591a:	eba3 0204 	sub.w	r2, r3, r4
 800591e:	bf08      	it	eq
 8005920:	2300      	moveq	r3, #0
 8005922:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005926:	6102      	str	r2, [r0, #16]
 8005928:	bf08      	it	eq
 800592a:	6143      	streq	r3, [r0, #20]
 800592c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800592e:	683f      	ldr	r7, [r7, #0]
 8005930:	fa07 f70c 	lsl.w	r7, r7, ip
 8005934:	433d      	orrs	r5, r7
 8005936:	f843 5b04 	str.w	r5, [r3], #4
 800593a:	f852 5b04 	ldr.w	r5, [r2], #4
 800593e:	40cd      	lsrs	r5, r1
 8005940:	e7e4      	b.n	800590c <rshift+0x3c>
 8005942:	4623      	mov	r3, r4
 8005944:	e7e8      	b.n	8005918 <rshift+0x48>

08005946 <__hexdig_fun>:
 8005946:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800594a:	2b09      	cmp	r3, #9
 800594c:	d802      	bhi.n	8005954 <__hexdig_fun+0xe>
 800594e:	3820      	subs	r0, #32
 8005950:	b2c0      	uxtb	r0, r0
 8005952:	4770      	bx	lr
 8005954:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005958:	2b05      	cmp	r3, #5
 800595a:	d801      	bhi.n	8005960 <__hexdig_fun+0x1a>
 800595c:	3847      	subs	r0, #71	; 0x47
 800595e:	e7f7      	b.n	8005950 <__hexdig_fun+0xa>
 8005960:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005964:	2b05      	cmp	r3, #5
 8005966:	d801      	bhi.n	800596c <__hexdig_fun+0x26>
 8005968:	3827      	subs	r0, #39	; 0x27
 800596a:	e7f1      	b.n	8005950 <__hexdig_fun+0xa>
 800596c:	2000      	movs	r0, #0
 800596e:	4770      	bx	lr

08005970 <__gethex>:
 8005970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005974:	b08b      	sub	sp, #44	; 0x2c
 8005976:	9002      	str	r0, [sp, #8]
 8005978:	9816      	ldr	r0, [sp, #88]	; 0x58
 800597a:	468a      	mov	sl, r1
 800597c:	4690      	mov	r8, r2
 800597e:	9306      	str	r3, [sp, #24]
 8005980:	f000 fae0 	bl	8005f44 <__localeconv_l>
 8005984:	6803      	ldr	r3, [r0, #0]
 8005986:	f04f 0b00 	mov.w	fp, #0
 800598a:	4618      	mov	r0, r3
 800598c:	9303      	str	r3, [sp, #12]
 800598e:	f7fa fbef 	bl	8000170 <strlen>
 8005992:	9b03      	ldr	r3, [sp, #12]
 8005994:	9001      	str	r0, [sp, #4]
 8005996:	4403      	add	r3, r0
 8005998:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800599c:	9307      	str	r3, [sp, #28]
 800599e:	f8da 3000 	ldr.w	r3, [sl]
 80059a2:	3302      	adds	r3, #2
 80059a4:	461f      	mov	r7, r3
 80059a6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80059aa:	2830      	cmp	r0, #48	; 0x30
 80059ac:	d06c      	beq.n	8005a88 <__gethex+0x118>
 80059ae:	f7ff ffca 	bl	8005946 <__hexdig_fun>
 80059b2:	4604      	mov	r4, r0
 80059b4:	2800      	cmp	r0, #0
 80059b6:	d16a      	bne.n	8005a8e <__gethex+0x11e>
 80059b8:	9a01      	ldr	r2, [sp, #4]
 80059ba:	9903      	ldr	r1, [sp, #12]
 80059bc:	4638      	mov	r0, r7
 80059be:	f001 fc46 	bl	800724e <strncmp>
 80059c2:	2800      	cmp	r0, #0
 80059c4:	d166      	bne.n	8005a94 <__gethex+0x124>
 80059c6:	9b01      	ldr	r3, [sp, #4]
 80059c8:	5cf8      	ldrb	r0, [r7, r3]
 80059ca:	18fe      	adds	r6, r7, r3
 80059cc:	f7ff ffbb 	bl	8005946 <__hexdig_fun>
 80059d0:	2800      	cmp	r0, #0
 80059d2:	d062      	beq.n	8005a9a <__gethex+0x12a>
 80059d4:	4633      	mov	r3, r6
 80059d6:	7818      	ldrb	r0, [r3, #0]
 80059d8:	461f      	mov	r7, r3
 80059da:	2830      	cmp	r0, #48	; 0x30
 80059dc:	f103 0301 	add.w	r3, r3, #1
 80059e0:	d0f9      	beq.n	80059d6 <__gethex+0x66>
 80059e2:	f7ff ffb0 	bl	8005946 <__hexdig_fun>
 80059e6:	fab0 f580 	clz	r5, r0
 80059ea:	4634      	mov	r4, r6
 80059ec:	f04f 0b01 	mov.w	fp, #1
 80059f0:	096d      	lsrs	r5, r5, #5
 80059f2:	463a      	mov	r2, r7
 80059f4:	4616      	mov	r6, r2
 80059f6:	7830      	ldrb	r0, [r6, #0]
 80059f8:	3201      	adds	r2, #1
 80059fa:	f7ff ffa4 	bl	8005946 <__hexdig_fun>
 80059fe:	2800      	cmp	r0, #0
 8005a00:	d1f8      	bne.n	80059f4 <__gethex+0x84>
 8005a02:	9a01      	ldr	r2, [sp, #4]
 8005a04:	9903      	ldr	r1, [sp, #12]
 8005a06:	4630      	mov	r0, r6
 8005a08:	f001 fc21 	bl	800724e <strncmp>
 8005a0c:	b950      	cbnz	r0, 8005a24 <__gethex+0xb4>
 8005a0e:	b954      	cbnz	r4, 8005a26 <__gethex+0xb6>
 8005a10:	9b01      	ldr	r3, [sp, #4]
 8005a12:	18f4      	adds	r4, r6, r3
 8005a14:	4622      	mov	r2, r4
 8005a16:	4616      	mov	r6, r2
 8005a18:	7830      	ldrb	r0, [r6, #0]
 8005a1a:	3201      	adds	r2, #1
 8005a1c:	f7ff ff93 	bl	8005946 <__hexdig_fun>
 8005a20:	2800      	cmp	r0, #0
 8005a22:	d1f8      	bne.n	8005a16 <__gethex+0xa6>
 8005a24:	b10c      	cbz	r4, 8005a2a <__gethex+0xba>
 8005a26:	1ba4      	subs	r4, r4, r6
 8005a28:	00a4      	lsls	r4, r4, #2
 8005a2a:	7833      	ldrb	r3, [r6, #0]
 8005a2c:	2b50      	cmp	r3, #80	; 0x50
 8005a2e:	d001      	beq.n	8005a34 <__gethex+0xc4>
 8005a30:	2b70      	cmp	r3, #112	; 0x70
 8005a32:	d140      	bne.n	8005ab6 <__gethex+0x146>
 8005a34:	7873      	ldrb	r3, [r6, #1]
 8005a36:	2b2b      	cmp	r3, #43	; 0x2b
 8005a38:	d031      	beq.n	8005a9e <__gethex+0x12e>
 8005a3a:	2b2d      	cmp	r3, #45	; 0x2d
 8005a3c:	d033      	beq.n	8005aa6 <__gethex+0x136>
 8005a3e:	f04f 0900 	mov.w	r9, #0
 8005a42:	1c71      	adds	r1, r6, #1
 8005a44:	7808      	ldrb	r0, [r1, #0]
 8005a46:	f7ff ff7e 	bl	8005946 <__hexdig_fun>
 8005a4a:	1e43      	subs	r3, r0, #1
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b18      	cmp	r3, #24
 8005a50:	d831      	bhi.n	8005ab6 <__gethex+0x146>
 8005a52:	f1a0 0210 	sub.w	r2, r0, #16
 8005a56:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005a5a:	f7ff ff74 	bl	8005946 <__hexdig_fun>
 8005a5e:	1e43      	subs	r3, r0, #1
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b18      	cmp	r3, #24
 8005a64:	d922      	bls.n	8005aac <__gethex+0x13c>
 8005a66:	f1b9 0f00 	cmp.w	r9, #0
 8005a6a:	d000      	beq.n	8005a6e <__gethex+0xfe>
 8005a6c:	4252      	negs	r2, r2
 8005a6e:	4414      	add	r4, r2
 8005a70:	f8ca 1000 	str.w	r1, [sl]
 8005a74:	b30d      	cbz	r5, 8005aba <__gethex+0x14a>
 8005a76:	f1bb 0f00 	cmp.w	fp, #0
 8005a7a:	bf0c      	ite	eq
 8005a7c:	2706      	moveq	r7, #6
 8005a7e:	2700      	movne	r7, #0
 8005a80:	4638      	mov	r0, r7
 8005a82:	b00b      	add	sp, #44	; 0x2c
 8005a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a88:	f10b 0b01 	add.w	fp, fp, #1
 8005a8c:	e78a      	b.n	80059a4 <__gethex+0x34>
 8005a8e:	2500      	movs	r5, #0
 8005a90:	462c      	mov	r4, r5
 8005a92:	e7ae      	b.n	80059f2 <__gethex+0x82>
 8005a94:	463e      	mov	r6, r7
 8005a96:	2501      	movs	r5, #1
 8005a98:	e7c7      	b.n	8005a2a <__gethex+0xba>
 8005a9a:	4604      	mov	r4, r0
 8005a9c:	e7fb      	b.n	8005a96 <__gethex+0x126>
 8005a9e:	f04f 0900 	mov.w	r9, #0
 8005aa2:	1cb1      	adds	r1, r6, #2
 8005aa4:	e7ce      	b.n	8005a44 <__gethex+0xd4>
 8005aa6:	f04f 0901 	mov.w	r9, #1
 8005aaa:	e7fa      	b.n	8005aa2 <__gethex+0x132>
 8005aac:	230a      	movs	r3, #10
 8005aae:	fb03 0202 	mla	r2, r3, r2, r0
 8005ab2:	3a10      	subs	r2, #16
 8005ab4:	e7cf      	b.n	8005a56 <__gethex+0xe6>
 8005ab6:	4631      	mov	r1, r6
 8005ab8:	e7da      	b.n	8005a70 <__gethex+0x100>
 8005aba:	4629      	mov	r1, r5
 8005abc:	1bf3      	subs	r3, r6, r7
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	2b07      	cmp	r3, #7
 8005ac2:	dc49      	bgt.n	8005b58 <__gethex+0x1e8>
 8005ac4:	9802      	ldr	r0, [sp, #8]
 8005ac6:	f000 fa80 	bl	8005fca <_Balloc>
 8005aca:	f04f 0b00 	mov.w	fp, #0
 8005ace:	4605      	mov	r5, r0
 8005ad0:	46da      	mov	sl, fp
 8005ad2:	9b01      	ldr	r3, [sp, #4]
 8005ad4:	f100 0914 	add.w	r9, r0, #20
 8005ad8:	f1c3 0301 	rsb	r3, r3, #1
 8005adc:	f8cd 9010 	str.w	r9, [sp, #16]
 8005ae0:	9308      	str	r3, [sp, #32]
 8005ae2:	42b7      	cmp	r7, r6
 8005ae4:	d33b      	bcc.n	8005b5e <__gethex+0x1ee>
 8005ae6:	9804      	ldr	r0, [sp, #16]
 8005ae8:	f840 ab04 	str.w	sl, [r0], #4
 8005aec:	eba0 0009 	sub.w	r0, r0, r9
 8005af0:	1080      	asrs	r0, r0, #2
 8005af2:	6128      	str	r0, [r5, #16]
 8005af4:	0147      	lsls	r7, r0, #5
 8005af6:	4650      	mov	r0, sl
 8005af8:	f000 fb2b 	bl	8006152 <__hi0bits>
 8005afc:	f8d8 6000 	ldr.w	r6, [r8]
 8005b00:	1a3f      	subs	r7, r7, r0
 8005b02:	42b7      	cmp	r7, r6
 8005b04:	dd64      	ble.n	8005bd0 <__gethex+0x260>
 8005b06:	1bbf      	subs	r7, r7, r6
 8005b08:	4639      	mov	r1, r7
 8005b0a:	4628      	mov	r0, r5
 8005b0c:	f000 fe35 	bl	800677a <__any_on>
 8005b10:	4682      	mov	sl, r0
 8005b12:	b178      	cbz	r0, 8005b34 <__gethex+0x1c4>
 8005b14:	f04f 0a01 	mov.w	sl, #1
 8005b18:	1e7b      	subs	r3, r7, #1
 8005b1a:	1159      	asrs	r1, r3, #5
 8005b1c:	f003 021f 	and.w	r2, r3, #31
 8005b20:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005b24:	fa0a f202 	lsl.w	r2, sl, r2
 8005b28:	420a      	tst	r2, r1
 8005b2a:	d003      	beq.n	8005b34 <__gethex+0x1c4>
 8005b2c:	4553      	cmp	r3, sl
 8005b2e:	dc46      	bgt.n	8005bbe <__gethex+0x24e>
 8005b30:	f04f 0a02 	mov.w	sl, #2
 8005b34:	4639      	mov	r1, r7
 8005b36:	4628      	mov	r0, r5
 8005b38:	f7ff feca 	bl	80058d0 <rshift>
 8005b3c:	443c      	add	r4, r7
 8005b3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005b42:	42a3      	cmp	r3, r4
 8005b44:	da52      	bge.n	8005bec <__gethex+0x27c>
 8005b46:	4629      	mov	r1, r5
 8005b48:	9802      	ldr	r0, [sp, #8]
 8005b4a:	f000 fa72 	bl	8006032 <_Bfree>
 8005b4e:	2300      	movs	r3, #0
 8005b50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005b52:	27a3      	movs	r7, #163	; 0xa3
 8005b54:	6013      	str	r3, [r2, #0]
 8005b56:	e793      	b.n	8005a80 <__gethex+0x110>
 8005b58:	3101      	adds	r1, #1
 8005b5a:	105b      	asrs	r3, r3, #1
 8005b5c:	e7b0      	b.n	8005ac0 <__gethex+0x150>
 8005b5e:	1e73      	subs	r3, r6, #1
 8005b60:	9305      	str	r3, [sp, #20]
 8005b62:	9a07      	ldr	r2, [sp, #28]
 8005b64:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d018      	beq.n	8005b9e <__gethex+0x22e>
 8005b6c:	f1bb 0f20 	cmp.w	fp, #32
 8005b70:	d107      	bne.n	8005b82 <__gethex+0x212>
 8005b72:	9b04      	ldr	r3, [sp, #16]
 8005b74:	f8c3 a000 	str.w	sl, [r3]
 8005b78:	f04f 0a00 	mov.w	sl, #0
 8005b7c:	46d3      	mov	fp, sl
 8005b7e:	3304      	adds	r3, #4
 8005b80:	9304      	str	r3, [sp, #16]
 8005b82:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005b86:	f7ff fede 	bl	8005946 <__hexdig_fun>
 8005b8a:	f000 000f 	and.w	r0, r0, #15
 8005b8e:	fa00 f00b 	lsl.w	r0, r0, fp
 8005b92:	ea4a 0a00 	orr.w	sl, sl, r0
 8005b96:	f10b 0b04 	add.w	fp, fp, #4
 8005b9a:	9b05      	ldr	r3, [sp, #20]
 8005b9c:	e00d      	b.n	8005bba <__gethex+0x24a>
 8005b9e:	9b05      	ldr	r3, [sp, #20]
 8005ba0:	9a08      	ldr	r2, [sp, #32]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	42bb      	cmp	r3, r7
 8005ba6:	d3e1      	bcc.n	8005b6c <__gethex+0x1fc>
 8005ba8:	4618      	mov	r0, r3
 8005baa:	9a01      	ldr	r2, [sp, #4]
 8005bac:	9903      	ldr	r1, [sp, #12]
 8005bae:	9309      	str	r3, [sp, #36]	; 0x24
 8005bb0:	f001 fb4d 	bl	800724e <strncmp>
 8005bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bb6:	2800      	cmp	r0, #0
 8005bb8:	d1d8      	bne.n	8005b6c <__gethex+0x1fc>
 8005bba:	461e      	mov	r6, r3
 8005bbc:	e791      	b.n	8005ae2 <__gethex+0x172>
 8005bbe:	1eb9      	subs	r1, r7, #2
 8005bc0:	4628      	mov	r0, r5
 8005bc2:	f000 fdda 	bl	800677a <__any_on>
 8005bc6:	2800      	cmp	r0, #0
 8005bc8:	d0b2      	beq.n	8005b30 <__gethex+0x1c0>
 8005bca:	f04f 0a03 	mov.w	sl, #3
 8005bce:	e7b1      	b.n	8005b34 <__gethex+0x1c4>
 8005bd0:	da09      	bge.n	8005be6 <__gethex+0x276>
 8005bd2:	1bf7      	subs	r7, r6, r7
 8005bd4:	4629      	mov	r1, r5
 8005bd6:	463a      	mov	r2, r7
 8005bd8:	9802      	ldr	r0, [sp, #8]
 8005bda:	f000 fbf5 	bl	80063c8 <__lshift>
 8005bde:	4605      	mov	r5, r0
 8005be0:	1be4      	subs	r4, r4, r7
 8005be2:	f100 0914 	add.w	r9, r0, #20
 8005be6:	f04f 0a00 	mov.w	sl, #0
 8005bea:	e7a8      	b.n	8005b3e <__gethex+0x1ce>
 8005bec:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005bf0:	42a0      	cmp	r0, r4
 8005bf2:	dd6b      	ble.n	8005ccc <__gethex+0x35c>
 8005bf4:	1b04      	subs	r4, r0, r4
 8005bf6:	42a6      	cmp	r6, r4
 8005bf8:	dc2e      	bgt.n	8005c58 <__gethex+0x2e8>
 8005bfa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d022      	beq.n	8005c48 <__gethex+0x2d8>
 8005c02:	2b03      	cmp	r3, #3
 8005c04:	d024      	beq.n	8005c50 <__gethex+0x2e0>
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d115      	bne.n	8005c36 <__gethex+0x2c6>
 8005c0a:	42a6      	cmp	r6, r4
 8005c0c:	d113      	bne.n	8005c36 <__gethex+0x2c6>
 8005c0e:	2e01      	cmp	r6, #1
 8005c10:	dc0b      	bgt.n	8005c2a <__gethex+0x2ba>
 8005c12:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005c16:	9a06      	ldr	r2, [sp, #24]
 8005c18:	2762      	movs	r7, #98	; 0x62
 8005c1a:	6013      	str	r3, [r2, #0]
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	612b      	str	r3, [r5, #16]
 8005c20:	f8c9 3000 	str.w	r3, [r9]
 8005c24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005c26:	601d      	str	r5, [r3, #0]
 8005c28:	e72a      	b.n	8005a80 <__gethex+0x110>
 8005c2a:	1e71      	subs	r1, r6, #1
 8005c2c:	4628      	mov	r0, r5
 8005c2e:	f000 fda4 	bl	800677a <__any_on>
 8005c32:	2800      	cmp	r0, #0
 8005c34:	d1ed      	bne.n	8005c12 <__gethex+0x2a2>
 8005c36:	4629      	mov	r1, r5
 8005c38:	9802      	ldr	r0, [sp, #8]
 8005c3a:	f000 f9fa 	bl	8006032 <_Bfree>
 8005c3e:	2300      	movs	r3, #0
 8005c40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005c42:	2750      	movs	r7, #80	; 0x50
 8005c44:	6013      	str	r3, [r2, #0]
 8005c46:	e71b      	b.n	8005a80 <__gethex+0x110>
 8005c48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d0e1      	beq.n	8005c12 <__gethex+0x2a2>
 8005c4e:	e7f2      	b.n	8005c36 <__gethex+0x2c6>
 8005c50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1dd      	bne.n	8005c12 <__gethex+0x2a2>
 8005c56:	e7ee      	b.n	8005c36 <__gethex+0x2c6>
 8005c58:	1e67      	subs	r7, r4, #1
 8005c5a:	f1ba 0f00 	cmp.w	sl, #0
 8005c5e:	d132      	bne.n	8005cc6 <__gethex+0x356>
 8005c60:	b127      	cbz	r7, 8005c6c <__gethex+0x2fc>
 8005c62:	4639      	mov	r1, r7
 8005c64:	4628      	mov	r0, r5
 8005c66:	f000 fd88 	bl	800677a <__any_on>
 8005c6a:	4682      	mov	sl, r0
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	117a      	asrs	r2, r7, #5
 8005c70:	f007 071f 	and.w	r7, r7, #31
 8005c74:	fa03 f707 	lsl.w	r7, r3, r7
 8005c78:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8005c7c:	4621      	mov	r1, r4
 8005c7e:	421f      	tst	r7, r3
 8005c80:	f04f 0702 	mov.w	r7, #2
 8005c84:	4628      	mov	r0, r5
 8005c86:	bf18      	it	ne
 8005c88:	f04a 0a02 	orrne.w	sl, sl, #2
 8005c8c:	1b36      	subs	r6, r6, r4
 8005c8e:	f7ff fe1f 	bl	80058d0 <rshift>
 8005c92:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8005c96:	f1ba 0f00 	cmp.w	sl, #0
 8005c9a:	d048      	beq.n	8005d2e <__gethex+0x3be>
 8005c9c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d015      	beq.n	8005cd0 <__gethex+0x360>
 8005ca4:	2b03      	cmp	r3, #3
 8005ca6:	d017      	beq.n	8005cd8 <__gethex+0x368>
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d109      	bne.n	8005cc0 <__gethex+0x350>
 8005cac:	f01a 0f02 	tst.w	sl, #2
 8005cb0:	d006      	beq.n	8005cc0 <__gethex+0x350>
 8005cb2:	f8d9 3000 	ldr.w	r3, [r9]
 8005cb6:	ea4a 0a03 	orr.w	sl, sl, r3
 8005cba:	f01a 0f01 	tst.w	sl, #1
 8005cbe:	d10e      	bne.n	8005cde <__gethex+0x36e>
 8005cc0:	f047 0710 	orr.w	r7, r7, #16
 8005cc4:	e033      	b.n	8005d2e <__gethex+0x3be>
 8005cc6:	f04f 0a01 	mov.w	sl, #1
 8005cca:	e7cf      	b.n	8005c6c <__gethex+0x2fc>
 8005ccc:	2701      	movs	r7, #1
 8005cce:	e7e2      	b.n	8005c96 <__gethex+0x326>
 8005cd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005cd2:	f1c3 0301 	rsb	r3, r3, #1
 8005cd6:	9315      	str	r3, [sp, #84]	; 0x54
 8005cd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d0f0      	beq.n	8005cc0 <__gethex+0x350>
 8005cde:	f04f 0c00 	mov.w	ip, #0
 8005ce2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8005ce6:	f105 0314 	add.w	r3, r5, #20
 8005cea:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8005cee:	eb03 010a 	add.w	r1, r3, sl
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cf8:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005cfc:	d01c      	beq.n	8005d38 <__gethex+0x3c8>
 8005cfe:	3201      	adds	r2, #1
 8005d00:	6002      	str	r2, [r0, #0]
 8005d02:	2f02      	cmp	r7, #2
 8005d04:	f105 0314 	add.w	r3, r5, #20
 8005d08:	d138      	bne.n	8005d7c <__gethex+0x40c>
 8005d0a:	f8d8 2000 	ldr.w	r2, [r8]
 8005d0e:	3a01      	subs	r2, #1
 8005d10:	42b2      	cmp	r2, r6
 8005d12:	d10a      	bne.n	8005d2a <__gethex+0x3ba>
 8005d14:	2201      	movs	r2, #1
 8005d16:	1171      	asrs	r1, r6, #5
 8005d18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005d1c:	f006 061f 	and.w	r6, r6, #31
 8005d20:	fa02 f606 	lsl.w	r6, r2, r6
 8005d24:	421e      	tst	r6, r3
 8005d26:	bf18      	it	ne
 8005d28:	4617      	movne	r7, r2
 8005d2a:	f047 0720 	orr.w	r7, r7, #32
 8005d2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005d30:	601d      	str	r5, [r3, #0]
 8005d32:	9b06      	ldr	r3, [sp, #24]
 8005d34:	601c      	str	r4, [r3, #0]
 8005d36:	e6a3      	b.n	8005a80 <__gethex+0x110>
 8005d38:	4299      	cmp	r1, r3
 8005d3a:	f843 cc04 	str.w	ip, [r3, #-4]
 8005d3e:	d8d8      	bhi.n	8005cf2 <__gethex+0x382>
 8005d40:	68ab      	ldr	r3, [r5, #8]
 8005d42:	4599      	cmp	r9, r3
 8005d44:	db12      	blt.n	8005d6c <__gethex+0x3fc>
 8005d46:	6869      	ldr	r1, [r5, #4]
 8005d48:	9802      	ldr	r0, [sp, #8]
 8005d4a:	3101      	adds	r1, #1
 8005d4c:	f000 f93d 	bl	8005fca <_Balloc>
 8005d50:	4683      	mov	fp, r0
 8005d52:	692a      	ldr	r2, [r5, #16]
 8005d54:	f105 010c 	add.w	r1, r5, #12
 8005d58:	3202      	adds	r2, #2
 8005d5a:	0092      	lsls	r2, r2, #2
 8005d5c:	300c      	adds	r0, #12
 8005d5e:	f000 f929 	bl	8005fb4 <memcpy>
 8005d62:	4629      	mov	r1, r5
 8005d64:	9802      	ldr	r0, [sp, #8]
 8005d66:	f000 f964 	bl	8006032 <_Bfree>
 8005d6a:	465d      	mov	r5, fp
 8005d6c:	692b      	ldr	r3, [r5, #16]
 8005d6e:	1c5a      	adds	r2, r3, #1
 8005d70:	612a      	str	r2, [r5, #16]
 8005d72:	2201      	movs	r2, #1
 8005d74:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005d78:	615a      	str	r2, [r3, #20]
 8005d7a:	e7c2      	b.n	8005d02 <__gethex+0x392>
 8005d7c:	692a      	ldr	r2, [r5, #16]
 8005d7e:	454a      	cmp	r2, r9
 8005d80:	dd0b      	ble.n	8005d9a <__gethex+0x42a>
 8005d82:	2101      	movs	r1, #1
 8005d84:	4628      	mov	r0, r5
 8005d86:	f7ff fda3 	bl	80058d0 <rshift>
 8005d8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005d8e:	3401      	adds	r4, #1
 8005d90:	42a3      	cmp	r3, r4
 8005d92:	f6ff aed8 	blt.w	8005b46 <__gethex+0x1d6>
 8005d96:	2701      	movs	r7, #1
 8005d98:	e7c7      	b.n	8005d2a <__gethex+0x3ba>
 8005d9a:	f016 061f 	ands.w	r6, r6, #31
 8005d9e:	d0fa      	beq.n	8005d96 <__gethex+0x426>
 8005da0:	449a      	add	sl, r3
 8005da2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8005da6:	f000 f9d4 	bl	8006152 <__hi0bits>
 8005daa:	f1c6 0620 	rsb	r6, r6, #32
 8005dae:	42b0      	cmp	r0, r6
 8005db0:	dbe7      	blt.n	8005d82 <__gethex+0x412>
 8005db2:	e7f0      	b.n	8005d96 <__gethex+0x426>

08005db4 <L_shift>:
 8005db4:	f1c2 0208 	rsb	r2, r2, #8
 8005db8:	0092      	lsls	r2, r2, #2
 8005dba:	b570      	push	{r4, r5, r6, lr}
 8005dbc:	f1c2 0620 	rsb	r6, r2, #32
 8005dc0:	6843      	ldr	r3, [r0, #4]
 8005dc2:	6804      	ldr	r4, [r0, #0]
 8005dc4:	fa03 f506 	lsl.w	r5, r3, r6
 8005dc8:	432c      	orrs	r4, r5
 8005dca:	40d3      	lsrs	r3, r2
 8005dcc:	6004      	str	r4, [r0, #0]
 8005dce:	f840 3f04 	str.w	r3, [r0, #4]!
 8005dd2:	4288      	cmp	r0, r1
 8005dd4:	d3f4      	bcc.n	8005dc0 <L_shift+0xc>
 8005dd6:	bd70      	pop	{r4, r5, r6, pc}

08005dd8 <__match>:
 8005dd8:	b530      	push	{r4, r5, lr}
 8005dda:	6803      	ldr	r3, [r0, #0]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005de2:	b914      	cbnz	r4, 8005dea <__match+0x12>
 8005de4:	6003      	str	r3, [r0, #0]
 8005de6:	2001      	movs	r0, #1
 8005de8:	bd30      	pop	{r4, r5, pc}
 8005dea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005dee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8005df2:	2d19      	cmp	r5, #25
 8005df4:	bf98      	it	ls
 8005df6:	3220      	addls	r2, #32
 8005df8:	42a2      	cmp	r2, r4
 8005dfa:	d0f0      	beq.n	8005dde <__match+0x6>
 8005dfc:	2000      	movs	r0, #0
 8005dfe:	e7f3      	b.n	8005de8 <__match+0x10>

08005e00 <__hexnan>:
 8005e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e04:	2500      	movs	r5, #0
 8005e06:	680b      	ldr	r3, [r1, #0]
 8005e08:	4682      	mov	sl, r0
 8005e0a:	115f      	asrs	r7, r3, #5
 8005e0c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8005e10:	f013 031f 	ands.w	r3, r3, #31
 8005e14:	bf18      	it	ne
 8005e16:	3704      	addne	r7, #4
 8005e18:	1f3e      	subs	r6, r7, #4
 8005e1a:	4690      	mov	r8, r2
 8005e1c:	46b1      	mov	r9, r6
 8005e1e:	4634      	mov	r4, r6
 8005e20:	46ab      	mov	fp, r5
 8005e22:	b087      	sub	sp, #28
 8005e24:	6801      	ldr	r1, [r0, #0]
 8005e26:	9301      	str	r3, [sp, #4]
 8005e28:	f847 5c04 	str.w	r5, [r7, #-4]
 8005e2c:	9502      	str	r5, [sp, #8]
 8005e2e:	784a      	ldrb	r2, [r1, #1]
 8005e30:	1c4b      	adds	r3, r1, #1
 8005e32:	9303      	str	r3, [sp, #12]
 8005e34:	b342      	cbz	r2, 8005e88 <__hexnan+0x88>
 8005e36:	4610      	mov	r0, r2
 8005e38:	9105      	str	r1, [sp, #20]
 8005e3a:	9204      	str	r2, [sp, #16]
 8005e3c:	f7ff fd83 	bl	8005946 <__hexdig_fun>
 8005e40:	2800      	cmp	r0, #0
 8005e42:	d143      	bne.n	8005ecc <__hexnan+0xcc>
 8005e44:	9a04      	ldr	r2, [sp, #16]
 8005e46:	9905      	ldr	r1, [sp, #20]
 8005e48:	2a20      	cmp	r2, #32
 8005e4a:	d818      	bhi.n	8005e7e <__hexnan+0x7e>
 8005e4c:	9b02      	ldr	r3, [sp, #8]
 8005e4e:	459b      	cmp	fp, r3
 8005e50:	dd13      	ble.n	8005e7a <__hexnan+0x7a>
 8005e52:	454c      	cmp	r4, r9
 8005e54:	d206      	bcs.n	8005e64 <__hexnan+0x64>
 8005e56:	2d07      	cmp	r5, #7
 8005e58:	dc04      	bgt.n	8005e64 <__hexnan+0x64>
 8005e5a:	462a      	mov	r2, r5
 8005e5c:	4649      	mov	r1, r9
 8005e5e:	4620      	mov	r0, r4
 8005e60:	f7ff ffa8 	bl	8005db4 <L_shift>
 8005e64:	4544      	cmp	r4, r8
 8005e66:	d944      	bls.n	8005ef2 <__hexnan+0xf2>
 8005e68:	2300      	movs	r3, #0
 8005e6a:	f1a4 0904 	sub.w	r9, r4, #4
 8005e6e:	f844 3c04 	str.w	r3, [r4, #-4]
 8005e72:	461d      	mov	r5, r3
 8005e74:	464c      	mov	r4, r9
 8005e76:	f8cd b008 	str.w	fp, [sp, #8]
 8005e7a:	9903      	ldr	r1, [sp, #12]
 8005e7c:	e7d7      	b.n	8005e2e <__hexnan+0x2e>
 8005e7e:	2a29      	cmp	r2, #41	; 0x29
 8005e80:	d14a      	bne.n	8005f18 <__hexnan+0x118>
 8005e82:	3102      	adds	r1, #2
 8005e84:	f8ca 1000 	str.w	r1, [sl]
 8005e88:	f1bb 0f00 	cmp.w	fp, #0
 8005e8c:	d044      	beq.n	8005f18 <__hexnan+0x118>
 8005e8e:	454c      	cmp	r4, r9
 8005e90:	d206      	bcs.n	8005ea0 <__hexnan+0xa0>
 8005e92:	2d07      	cmp	r5, #7
 8005e94:	dc04      	bgt.n	8005ea0 <__hexnan+0xa0>
 8005e96:	462a      	mov	r2, r5
 8005e98:	4649      	mov	r1, r9
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	f7ff ff8a 	bl	8005db4 <L_shift>
 8005ea0:	4544      	cmp	r4, r8
 8005ea2:	d928      	bls.n	8005ef6 <__hexnan+0xf6>
 8005ea4:	4643      	mov	r3, r8
 8005ea6:	f854 2b04 	ldr.w	r2, [r4], #4
 8005eaa:	42a6      	cmp	r6, r4
 8005eac:	f843 2b04 	str.w	r2, [r3], #4
 8005eb0:	d2f9      	bcs.n	8005ea6 <__hexnan+0xa6>
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f843 2b04 	str.w	r2, [r3], #4
 8005eb8:	429e      	cmp	r6, r3
 8005eba:	d2fb      	bcs.n	8005eb4 <__hexnan+0xb4>
 8005ebc:	6833      	ldr	r3, [r6, #0]
 8005ebe:	b91b      	cbnz	r3, 8005ec8 <__hexnan+0xc8>
 8005ec0:	4546      	cmp	r6, r8
 8005ec2:	d127      	bne.n	8005f14 <__hexnan+0x114>
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	6033      	str	r3, [r6, #0]
 8005ec8:	2005      	movs	r0, #5
 8005eca:	e026      	b.n	8005f1a <__hexnan+0x11a>
 8005ecc:	3501      	adds	r5, #1
 8005ece:	2d08      	cmp	r5, #8
 8005ed0:	f10b 0b01 	add.w	fp, fp, #1
 8005ed4:	dd06      	ble.n	8005ee4 <__hexnan+0xe4>
 8005ed6:	4544      	cmp	r4, r8
 8005ed8:	d9cf      	bls.n	8005e7a <__hexnan+0x7a>
 8005eda:	2300      	movs	r3, #0
 8005edc:	2501      	movs	r5, #1
 8005ede:	f844 3c04 	str.w	r3, [r4, #-4]
 8005ee2:	3c04      	subs	r4, #4
 8005ee4:	6822      	ldr	r2, [r4, #0]
 8005ee6:	f000 000f 	and.w	r0, r0, #15
 8005eea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8005eee:	6020      	str	r0, [r4, #0]
 8005ef0:	e7c3      	b.n	8005e7a <__hexnan+0x7a>
 8005ef2:	2508      	movs	r5, #8
 8005ef4:	e7c1      	b.n	8005e7a <__hexnan+0x7a>
 8005ef6:	9b01      	ldr	r3, [sp, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d0df      	beq.n	8005ebc <__hexnan+0xbc>
 8005efc:	f04f 32ff 	mov.w	r2, #4294967295
 8005f00:	f1c3 0320 	rsb	r3, r3, #32
 8005f04:	fa22 f303 	lsr.w	r3, r2, r3
 8005f08:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8005f0c:	401a      	ands	r2, r3
 8005f0e:	f847 2c04 	str.w	r2, [r7, #-4]
 8005f12:	e7d3      	b.n	8005ebc <__hexnan+0xbc>
 8005f14:	3e04      	subs	r6, #4
 8005f16:	e7d1      	b.n	8005ebc <__hexnan+0xbc>
 8005f18:	2004      	movs	r0, #4
 8005f1a:	b007      	add	sp, #28
 8005f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005f20 <__locale_ctype_ptr_l>:
 8005f20:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005f24:	4770      	bx	lr
	...

08005f28 <__locale_ctype_ptr>:
 8005f28:	4b04      	ldr	r3, [pc, #16]	; (8005f3c <__locale_ctype_ptr+0x14>)
 8005f2a:	4a05      	ldr	r2, [pc, #20]	; (8005f40 <__locale_ctype_ptr+0x18>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	6a1b      	ldr	r3, [r3, #32]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	bf08      	it	eq
 8005f34:	4613      	moveq	r3, r2
 8005f36:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8005f3a:	4770      	bx	lr
 8005f3c:	20000004 	.word	0x20000004
 8005f40:	20000068 	.word	0x20000068

08005f44 <__localeconv_l>:
 8005f44:	30f0      	adds	r0, #240	; 0xf0
 8005f46:	4770      	bx	lr

08005f48 <_localeconv_r>:
 8005f48:	4b04      	ldr	r3, [pc, #16]	; (8005f5c <_localeconv_r+0x14>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6a18      	ldr	r0, [r3, #32]
 8005f4e:	4b04      	ldr	r3, [pc, #16]	; (8005f60 <_localeconv_r+0x18>)
 8005f50:	2800      	cmp	r0, #0
 8005f52:	bf08      	it	eq
 8005f54:	4618      	moveq	r0, r3
 8005f56:	30f0      	adds	r0, #240	; 0xf0
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	20000004 	.word	0x20000004
 8005f60:	20000068 	.word	0x20000068

08005f64 <malloc>:
 8005f64:	4b02      	ldr	r3, [pc, #8]	; (8005f70 <malloc+0xc>)
 8005f66:	4601      	mov	r1, r0
 8005f68:	6818      	ldr	r0, [r3, #0]
 8005f6a:	f000 bc81 	b.w	8006870 <_malloc_r>
 8005f6e:	bf00      	nop
 8005f70:	20000004 	.word	0x20000004

08005f74 <__ascii_mbtowc>:
 8005f74:	b082      	sub	sp, #8
 8005f76:	b901      	cbnz	r1, 8005f7a <__ascii_mbtowc+0x6>
 8005f78:	a901      	add	r1, sp, #4
 8005f7a:	b142      	cbz	r2, 8005f8e <__ascii_mbtowc+0x1a>
 8005f7c:	b14b      	cbz	r3, 8005f92 <__ascii_mbtowc+0x1e>
 8005f7e:	7813      	ldrb	r3, [r2, #0]
 8005f80:	600b      	str	r3, [r1, #0]
 8005f82:	7812      	ldrb	r2, [r2, #0]
 8005f84:	1c10      	adds	r0, r2, #0
 8005f86:	bf18      	it	ne
 8005f88:	2001      	movne	r0, #1
 8005f8a:	b002      	add	sp, #8
 8005f8c:	4770      	bx	lr
 8005f8e:	4610      	mov	r0, r2
 8005f90:	e7fb      	b.n	8005f8a <__ascii_mbtowc+0x16>
 8005f92:	f06f 0001 	mvn.w	r0, #1
 8005f96:	e7f8      	b.n	8005f8a <__ascii_mbtowc+0x16>

08005f98 <memchr>:
 8005f98:	b510      	push	{r4, lr}
 8005f9a:	b2c9      	uxtb	r1, r1
 8005f9c:	4402      	add	r2, r0
 8005f9e:	4290      	cmp	r0, r2
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	d101      	bne.n	8005fa8 <memchr+0x10>
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	e003      	b.n	8005fb0 <memchr+0x18>
 8005fa8:	781c      	ldrb	r4, [r3, #0]
 8005faa:	3001      	adds	r0, #1
 8005fac:	428c      	cmp	r4, r1
 8005fae:	d1f6      	bne.n	8005f9e <memchr+0x6>
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	bd10      	pop	{r4, pc}

08005fb4 <memcpy>:
 8005fb4:	b510      	push	{r4, lr}
 8005fb6:	1e43      	subs	r3, r0, #1
 8005fb8:	440a      	add	r2, r1
 8005fba:	4291      	cmp	r1, r2
 8005fbc:	d100      	bne.n	8005fc0 <memcpy+0xc>
 8005fbe:	bd10      	pop	{r4, pc}
 8005fc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fc8:	e7f7      	b.n	8005fba <memcpy+0x6>

08005fca <_Balloc>:
 8005fca:	b570      	push	{r4, r5, r6, lr}
 8005fcc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005fce:	4604      	mov	r4, r0
 8005fd0:	460e      	mov	r6, r1
 8005fd2:	b93d      	cbnz	r5, 8005fe4 <_Balloc+0x1a>
 8005fd4:	2010      	movs	r0, #16
 8005fd6:	f7ff ffc5 	bl	8005f64 <malloc>
 8005fda:	6260      	str	r0, [r4, #36]	; 0x24
 8005fdc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005fe0:	6005      	str	r5, [r0, #0]
 8005fe2:	60c5      	str	r5, [r0, #12]
 8005fe4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005fe6:	68eb      	ldr	r3, [r5, #12]
 8005fe8:	b183      	cbz	r3, 800600c <_Balloc+0x42>
 8005fea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005ff2:	b9b8      	cbnz	r0, 8006024 <_Balloc+0x5a>
 8005ff4:	2101      	movs	r1, #1
 8005ff6:	fa01 f506 	lsl.w	r5, r1, r6
 8005ffa:	1d6a      	adds	r2, r5, #5
 8005ffc:	0092      	lsls	r2, r2, #2
 8005ffe:	4620      	mov	r0, r4
 8006000:	f000 fbdc 	bl	80067bc <_calloc_r>
 8006004:	b160      	cbz	r0, 8006020 <_Balloc+0x56>
 8006006:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800600a:	e00e      	b.n	800602a <_Balloc+0x60>
 800600c:	2221      	movs	r2, #33	; 0x21
 800600e:	2104      	movs	r1, #4
 8006010:	4620      	mov	r0, r4
 8006012:	f000 fbd3 	bl	80067bc <_calloc_r>
 8006016:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006018:	60e8      	str	r0, [r5, #12]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d1e4      	bne.n	8005fea <_Balloc+0x20>
 8006020:	2000      	movs	r0, #0
 8006022:	bd70      	pop	{r4, r5, r6, pc}
 8006024:	6802      	ldr	r2, [r0, #0]
 8006026:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800602a:	2300      	movs	r3, #0
 800602c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006030:	e7f7      	b.n	8006022 <_Balloc+0x58>

08006032 <_Bfree>:
 8006032:	b570      	push	{r4, r5, r6, lr}
 8006034:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006036:	4606      	mov	r6, r0
 8006038:	460d      	mov	r5, r1
 800603a:	b93c      	cbnz	r4, 800604c <_Bfree+0x1a>
 800603c:	2010      	movs	r0, #16
 800603e:	f7ff ff91 	bl	8005f64 <malloc>
 8006042:	6270      	str	r0, [r6, #36]	; 0x24
 8006044:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006048:	6004      	str	r4, [r0, #0]
 800604a:	60c4      	str	r4, [r0, #12]
 800604c:	b13d      	cbz	r5, 800605e <_Bfree+0x2c>
 800604e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006050:	686a      	ldr	r2, [r5, #4]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006058:	6029      	str	r1, [r5, #0]
 800605a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800605e:	bd70      	pop	{r4, r5, r6, pc}

08006060 <__multadd>:
 8006060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006064:	461f      	mov	r7, r3
 8006066:	4606      	mov	r6, r0
 8006068:	460c      	mov	r4, r1
 800606a:	2300      	movs	r3, #0
 800606c:	690d      	ldr	r5, [r1, #16]
 800606e:	f101 0c14 	add.w	ip, r1, #20
 8006072:	f8dc 0000 	ldr.w	r0, [ip]
 8006076:	3301      	adds	r3, #1
 8006078:	b281      	uxth	r1, r0
 800607a:	fb02 7101 	mla	r1, r2, r1, r7
 800607e:	0c00      	lsrs	r0, r0, #16
 8006080:	0c0f      	lsrs	r7, r1, #16
 8006082:	fb02 7000 	mla	r0, r2, r0, r7
 8006086:	b289      	uxth	r1, r1
 8006088:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800608c:	429d      	cmp	r5, r3
 800608e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006092:	f84c 1b04 	str.w	r1, [ip], #4
 8006096:	dcec      	bgt.n	8006072 <__multadd+0x12>
 8006098:	b1d7      	cbz	r7, 80060d0 <__multadd+0x70>
 800609a:	68a3      	ldr	r3, [r4, #8]
 800609c:	42ab      	cmp	r3, r5
 800609e:	dc12      	bgt.n	80060c6 <__multadd+0x66>
 80060a0:	6861      	ldr	r1, [r4, #4]
 80060a2:	4630      	mov	r0, r6
 80060a4:	3101      	adds	r1, #1
 80060a6:	f7ff ff90 	bl	8005fca <_Balloc>
 80060aa:	4680      	mov	r8, r0
 80060ac:	6922      	ldr	r2, [r4, #16]
 80060ae:	f104 010c 	add.w	r1, r4, #12
 80060b2:	3202      	adds	r2, #2
 80060b4:	0092      	lsls	r2, r2, #2
 80060b6:	300c      	adds	r0, #12
 80060b8:	f7ff ff7c 	bl	8005fb4 <memcpy>
 80060bc:	4621      	mov	r1, r4
 80060be:	4630      	mov	r0, r6
 80060c0:	f7ff ffb7 	bl	8006032 <_Bfree>
 80060c4:	4644      	mov	r4, r8
 80060c6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80060ca:	3501      	adds	r5, #1
 80060cc:	615f      	str	r7, [r3, #20]
 80060ce:	6125      	str	r5, [r4, #16]
 80060d0:	4620      	mov	r0, r4
 80060d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080060d6 <__s2b>:
 80060d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060da:	4615      	mov	r5, r2
 80060dc:	2209      	movs	r2, #9
 80060de:	461f      	mov	r7, r3
 80060e0:	3308      	adds	r3, #8
 80060e2:	460c      	mov	r4, r1
 80060e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80060e8:	4606      	mov	r6, r0
 80060ea:	2201      	movs	r2, #1
 80060ec:	2100      	movs	r1, #0
 80060ee:	429a      	cmp	r2, r3
 80060f0:	db20      	blt.n	8006134 <__s2b+0x5e>
 80060f2:	4630      	mov	r0, r6
 80060f4:	f7ff ff69 	bl	8005fca <_Balloc>
 80060f8:	9b08      	ldr	r3, [sp, #32]
 80060fa:	2d09      	cmp	r5, #9
 80060fc:	6143      	str	r3, [r0, #20]
 80060fe:	f04f 0301 	mov.w	r3, #1
 8006102:	6103      	str	r3, [r0, #16]
 8006104:	dd19      	ble.n	800613a <__s2b+0x64>
 8006106:	f104 0809 	add.w	r8, r4, #9
 800610a:	46c1      	mov	r9, r8
 800610c:	442c      	add	r4, r5
 800610e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8006112:	4601      	mov	r1, r0
 8006114:	3b30      	subs	r3, #48	; 0x30
 8006116:	220a      	movs	r2, #10
 8006118:	4630      	mov	r0, r6
 800611a:	f7ff ffa1 	bl	8006060 <__multadd>
 800611e:	45a1      	cmp	r9, r4
 8006120:	d1f5      	bne.n	800610e <__s2b+0x38>
 8006122:	eb08 0405 	add.w	r4, r8, r5
 8006126:	3c08      	subs	r4, #8
 8006128:	1b2d      	subs	r5, r5, r4
 800612a:	1963      	adds	r3, r4, r5
 800612c:	42bb      	cmp	r3, r7
 800612e:	db07      	blt.n	8006140 <__s2b+0x6a>
 8006130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006134:	0052      	lsls	r2, r2, #1
 8006136:	3101      	adds	r1, #1
 8006138:	e7d9      	b.n	80060ee <__s2b+0x18>
 800613a:	340a      	adds	r4, #10
 800613c:	2509      	movs	r5, #9
 800613e:	e7f3      	b.n	8006128 <__s2b+0x52>
 8006140:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006144:	4601      	mov	r1, r0
 8006146:	3b30      	subs	r3, #48	; 0x30
 8006148:	220a      	movs	r2, #10
 800614a:	4630      	mov	r0, r6
 800614c:	f7ff ff88 	bl	8006060 <__multadd>
 8006150:	e7eb      	b.n	800612a <__s2b+0x54>

08006152 <__hi0bits>:
 8006152:	0c02      	lsrs	r2, r0, #16
 8006154:	0412      	lsls	r2, r2, #16
 8006156:	4603      	mov	r3, r0
 8006158:	b9b2      	cbnz	r2, 8006188 <__hi0bits+0x36>
 800615a:	0403      	lsls	r3, r0, #16
 800615c:	2010      	movs	r0, #16
 800615e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006162:	bf04      	itt	eq
 8006164:	021b      	lsleq	r3, r3, #8
 8006166:	3008      	addeq	r0, #8
 8006168:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800616c:	bf04      	itt	eq
 800616e:	011b      	lsleq	r3, r3, #4
 8006170:	3004      	addeq	r0, #4
 8006172:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006176:	bf04      	itt	eq
 8006178:	009b      	lsleq	r3, r3, #2
 800617a:	3002      	addeq	r0, #2
 800617c:	2b00      	cmp	r3, #0
 800617e:	db06      	blt.n	800618e <__hi0bits+0x3c>
 8006180:	005b      	lsls	r3, r3, #1
 8006182:	d503      	bpl.n	800618c <__hi0bits+0x3a>
 8006184:	3001      	adds	r0, #1
 8006186:	4770      	bx	lr
 8006188:	2000      	movs	r0, #0
 800618a:	e7e8      	b.n	800615e <__hi0bits+0xc>
 800618c:	2020      	movs	r0, #32
 800618e:	4770      	bx	lr

08006190 <__lo0bits>:
 8006190:	6803      	ldr	r3, [r0, #0]
 8006192:	4601      	mov	r1, r0
 8006194:	f013 0207 	ands.w	r2, r3, #7
 8006198:	d00b      	beq.n	80061b2 <__lo0bits+0x22>
 800619a:	07da      	lsls	r2, r3, #31
 800619c:	d423      	bmi.n	80061e6 <__lo0bits+0x56>
 800619e:	0798      	lsls	r0, r3, #30
 80061a0:	bf49      	itett	mi
 80061a2:	085b      	lsrmi	r3, r3, #1
 80061a4:	089b      	lsrpl	r3, r3, #2
 80061a6:	2001      	movmi	r0, #1
 80061a8:	600b      	strmi	r3, [r1, #0]
 80061aa:	bf5c      	itt	pl
 80061ac:	600b      	strpl	r3, [r1, #0]
 80061ae:	2002      	movpl	r0, #2
 80061b0:	4770      	bx	lr
 80061b2:	b298      	uxth	r0, r3
 80061b4:	b9a8      	cbnz	r0, 80061e2 <__lo0bits+0x52>
 80061b6:	2010      	movs	r0, #16
 80061b8:	0c1b      	lsrs	r3, r3, #16
 80061ba:	f013 0fff 	tst.w	r3, #255	; 0xff
 80061be:	bf04      	itt	eq
 80061c0:	0a1b      	lsreq	r3, r3, #8
 80061c2:	3008      	addeq	r0, #8
 80061c4:	071a      	lsls	r2, r3, #28
 80061c6:	bf04      	itt	eq
 80061c8:	091b      	lsreq	r3, r3, #4
 80061ca:	3004      	addeq	r0, #4
 80061cc:	079a      	lsls	r2, r3, #30
 80061ce:	bf04      	itt	eq
 80061d0:	089b      	lsreq	r3, r3, #2
 80061d2:	3002      	addeq	r0, #2
 80061d4:	07da      	lsls	r2, r3, #31
 80061d6:	d402      	bmi.n	80061de <__lo0bits+0x4e>
 80061d8:	085b      	lsrs	r3, r3, #1
 80061da:	d006      	beq.n	80061ea <__lo0bits+0x5a>
 80061dc:	3001      	adds	r0, #1
 80061de:	600b      	str	r3, [r1, #0]
 80061e0:	4770      	bx	lr
 80061e2:	4610      	mov	r0, r2
 80061e4:	e7e9      	b.n	80061ba <__lo0bits+0x2a>
 80061e6:	2000      	movs	r0, #0
 80061e8:	4770      	bx	lr
 80061ea:	2020      	movs	r0, #32
 80061ec:	4770      	bx	lr

080061ee <__i2b>:
 80061ee:	b510      	push	{r4, lr}
 80061f0:	460c      	mov	r4, r1
 80061f2:	2101      	movs	r1, #1
 80061f4:	f7ff fee9 	bl	8005fca <_Balloc>
 80061f8:	2201      	movs	r2, #1
 80061fa:	6144      	str	r4, [r0, #20]
 80061fc:	6102      	str	r2, [r0, #16]
 80061fe:	bd10      	pop	{r4, pc}

08006200 <__multiply>:
 8006200:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006204:	4614      	mov	r4, r2
 8006206:	690a      	ldr	r2, [r1, #16]
 8006208:	6923      	ldr	r3, [r4, #16]
 800620a:	4688      	mov	r8, r1
 800620c:	429a      	cmp	r2, r3
 800620e:	bfbe      	ittt	lt
 8006210:	460b      	movlt	r3, r1
 8006212:	46a0      	movlt	r8, r4
 8006214:	461c      	movlt	r4, r3
 8006216:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800621a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800621e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006222:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006226:	eb07 0609 	add.w	r6, r7, r9
 800622a:	42b3      	cmp	r3, r6
 800622c:	bfb8      	it	lt
 800622e:	3101      	addlt	r1, #1
 8006230:	f7ff fecb 	bl	8005fca <_Balloc>
 8006234:	f100 0514 	add.w	r5, r0, #20
 8006238:	462b      	mov	r3, r5
 800623a:	2200      	movs	r2, #0
 800623c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006240:	4573      	cmp	r3, lr
 8006242:	d316      	bcc.n	8006272 <__multiply+0x72>
 8006244:	f104 0214 	add.w	r2, r4, #20
 8006248:	f108 0114 	add.w	r1, r8, #20
 800624c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006250:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	9b00      	ldr	r3, [sp, #0]
 8006258:	9201      	str	r2, [sp, #4]
 800625a:	4293      	cmp	r3, r2
 800625c:	d80c      	bhi.n	8006278 <__multiply+0x78>
 800625e:	2e00      	cmp	r6, #0
 8006260:	dd03      	ble.n	800626a <__multiply+0x6a>
 8006262:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006266:	2b00      	cmp	r3, #0
 8006268:	d05d      	beq.n	8006326 <__multiply+0x126>
 800626a:	6106      	str	r6, [r0, #16]
 800626c:	b003      	add	sp, #12
 800626e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006272:	f843 2b04 	str.w	r2, [r3], #4
 8006276:	e7e3      	b.n	8006240 <__multiply+0x40>
 8006278:	f8b2 b000 	ldrh.w	fp, [r2]
 800627c:	f1bb 0f00 	cmp.w	fp, #0
 8006280:	d023      	beq.n	80062ca <__multiply+0xca>
 8006282:	4689      	mov	r9, r1
 8006284:	46ac      	mov	ip, r5
 8006286:	f04f 0800 	mov.w	r8, #0
 800628a:	f859 4b04 	ldr.w	r4, [r9], #4
 800628e:	f8dc a000 	ldr.w	sl, [ip]
 8006292:	b2a3      	uxth	r3, r4
 8006294:	fa1f fa8a 	uxth.w	sl, sl
 8006298:	fb0b a303 	mla	r3, fp, r3, sl
 800629c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80062a0:	f8dc 4000 	ldr.w	r4, [ip]
 80062a4:	4443      	add	r3, r8
 80062a6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80062aa:	fb0b 840a 	mla	r4, fp, sl, r8
 80062ae:	46e2      	mov	sl, ip
 80062b0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80062ba:	454f      	cmp	r7, r9
 80062bc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80062c0:	f84a 3b04 	str.w	r3, [sl], #4
 80062c4:	d82b      	bhi.n	800631e <__multiply+0x11e>
 80062c6:	f8cc 8004 	str.w	r8, [ip, #4]
 80062ca:	9b01      	ldr	r3, [sp, #4]
 80062cc:	3204      	adds	r2, #4
 80062ce:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80062d2:	f1ba 0f00 	cmp.w	sl, #0
 80062d6:	d020      	beq.n	800631a <__multiply+0x11a>
 80062d8:	4689      	mov	r9, r1
 80062da:	46a8      	mov	r8, r5
 80062dc:	f04f 0b00 	mov.w	fp, #0
 80062e0:	682b      	ldr	r3, [r5, #0]
 80062e2:	f8b9 c000 	ldrh.w	ip, [r9]
 80062e6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	fb0a 440c 	mla	r4, sl, ip, r4
 80062f0:	46c4      	mov	ip, r8
 80062f2:	445c      	add	r4, fp
 80062f4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80062f8:	f84c 3b04 	str.w	r3, [ip], #4
 80062fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8006300:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006304:	0c1b      	lsrs	r3, r3, #16
 8006306:	fb0a b303 	mla	r3, sl, r3, fp
 800630a:	454f      	cmp	r7, r9
 800630c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006310:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006314:	d805      	bhi.n	8006322 <__multiply+0x122>
 8006316:	f8c8 3004 	str.w	r3, [r8, #4]
 800631a:	3504      	adds	r5, #4
 800631c:	e79b      	b.n	8006256 <__multiply+0x56>
 800631e:	46d4      	mov	ip, sl
 8006320:	e7b3      	b.n	800628a <__multiply+0x8a>
 8006322:	46e0      	mov	r8, ip
 8006324:	e7dd      	b.n	80062e2 <__multiply+0xe2>
 8006326:	3e01      	subs	r6, #1
 8006328:	e799      	b.n	800625e <__multiply+0x5e>
	...

0800632c <__pow5mult>:
 800632c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006330:	4615      	mov	r5, r2
 8006332:	f012 0203 	ands.w	r2, r2, #3
 8006336:	4606      	mov	r6, r0
 8006338:	460f      	mov	r7, r1
 800633a:	d007      	beq.n	800634c <__pow5mult+0x20>
 800633c:	4c21      	ldr	r4, [pc, #132]	; (80063c4 <__pow5mult+0x98>)
 800633e:	3a01      	subs	r2, #1
 8006340:	2300      	movs	r3, #0
 8006342:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006346:	f7ff fe8b 	bl	8006060 <__multadd>
 800634a:	4607      	mov	r7, r0
 800634c:	10ad      	asrs	r5, r5, #2
 800634e:	d035      	beq.n	80063bc <__pow5mult+0x90>
 8006350:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006352:	b93c      	cbnz	r4, 8006364 <__pow5mult+0x38>
 8006354:	2010      	movs	r0, #16
 8006356:	f7ff fe05 	bl	8005f64 <malloc>
 800635a:	6270      	str	r0, [r6, #36]	; 0x24
 800635c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006360:	6004      	str	r4, [r0, #0]
 8006362:	60c4      	str	r4, [r0, #12]
 8006364:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006368:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800636c:	b94c      	cbnz	r4, 8006382 <__pow5mult+0x56>
 800636e:	f240 2171 	movw	r1, #625	; 0x271
 8006372:	4630      	mov	r0, r6
 8006374:	f7ff ff3b 	bl	80061ee <__i2b>
 8006378:	2300      	movs	r3, #0
 800637a:	4604      	mov	r4, r0
 800637c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006380:	6003      	str	r3, [r0, #0]
 8006382:	f04f 0800 	mov.w	r8, #0
 8006386:	07eb      	lsls	r3, r5, #31
 8006388:	d50a      	bpl.n	80063a0 <__pow5mult+0x74>
 800638a:	4639      	mov	r1, r7
 800638c:	4622      	mov	r2, r4
 800638e:	4630      	mov	r0, r6
 8006390:	f7ff ff36 	bl	8006200 <__multiply>
 8006394:	4681      	mov	r9, r0
 8006396:	4639      	mov	r1, r7
 8006398:	4630      	mov	r0, r6
 800639a:	f7ff fe4a 	bl	8006032 <_Bfree>
 800639e:	464f      	mov	r7, r9
 80063a0:	106d      	asrs	r5, r5, #1
 80063a2:	d00b      	beq.n	80063bc <__pow5mult+0x90>
 80063a4:	6820      	ldr	r0, [r4, #0]
 80063a6:	b938      	cbnz	r0, 80063b8 <__pow5mult+0x8c>
 80063a8:	4622      	mov	r2, r4
 80063aa:	4621      	mov	r1, r4
 80063ac:	4630      	mov	r0, r6
 80063ae:	f7ff ff27 	bl	8006200 <__multiply>
 80063b2:	6020      	str	r0, [r4, #0]
 80063b4:	f8c0 8000 	str.w	r8, [r0]
 80063b8:	4604      	mov	r4, r0
 80063ba:	e7e4      	b.n	8006386 <__pow5mult+0x5a>
 80063bc:	4638      	mov	r0, r7
 80063be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063c2:	bf00      	nop
 80063c4:	0800a2c0 	.word	0x0800a2c0

080063c8 <__lshift>:
 80063c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063cc:	460c      	mov	r4, r1
 80063ce:	4607      	mov	r7, r0
 80063d0:	4616      	mov	r6, r2
 80063d2:	6923      	ldr	r3, [r4, #16]
 80063d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80063d8:	eb0a 0903 	add.w	r9, sl, r3
 80063dc:	6849      	ldr	r1, [r1, #4]
 80063de:	68a3      	ldr	r3, [r4, #8]
 80063e0:	f109 0501 	add.w	r5, r9, #1
 80063e4:	42ab      	cmp	r3, r5
 80063e6:	db32      	blt.n	800644e <__lshift+0x86>
 80063e8:	4638      	mov	r0, r7
 80063ea:	f7ff fdee 	bl	8005fca <_Balloc>
 80063ee:	2300      	movs	r3, #0
 80063f0:	4680      	mov	r8, r0
 80063f2:	461a      	mov	r2, r3
 80063f4:	f100 0114 	add.w	r1, r0, #20
 80063f8:	4553      	cmp	r3, sl
 80063fa:	db2b      	blt.n	8006454 <__lshift+0x8c>
 80063fc:	6920      	ldr	r0, [r4, #16]
 80063fe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006402:	f104 0314 	add.w	r3, r4, #20
 8006406:	f016 021f 	ands.w	r2, r6, #31
 800640a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800640e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006412:	d025      	beq.n	8006460 <__lshift+0x98>
 8006414:	2000      	movs	r0, #0
 8006416:	f1c2 0e20 	rsb	lr, r2, #32
 800641a:	468a      	mov	sl, r1
 800641c:	681e      	ldr	r6, [r3, #0]
 800641e:	4096      	lsls	r6, r2
 8006420:	4330      	orrs	r0, r6
 8006422:	f84a 0b04 	str.w	r0, [sl], #4
 8006426:	f853 0b04 	ldr.w	r0, [r3], #4
 800642a:	459c      	cmp	ip, r3
 800642c:	fa20 f00e 	lsr.w	r0, r0, lr
 8006430:	d814      	bhi.n	800645c <__lshift+0x94>
 8006432:	6048      	str	r0, [r1, #4]
 8006434:	b108      	cbz	r0, 800643a <__lshift+0x72>
 8006436:	f109 0502 	add.w	r5, r9, #2
 800643a:	3d01      	subs	r5, #1
 800643c:	4638      	mov	r0, r7
 800643e:	f8c8 5010 	str.w	r5, [r8, #16]
 8006442:	4621      	mov	r1, r4
 8006444:	f7ff fdf5 	bl	8006032 <_Bfree>
 8006448:	4640      	mov	r0, r8
 800644a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800644e:	3101      	adds	r1, #1
 8006450:	005b      	lsls	r3, r3, #1
 8006452:	e7c7      	b.n	80063e4 <__lshift+0x1c>
 8006454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006458:	3301      	adds	r3, #1
 800645a:	e7cd      	b.n	80063f8 <__lshift+0x30>
 800645c:	4651      	mov	r1, sl
 800645e:	e7dc      	b.n	800641a <__lshift+0x52>
 8006460:	3904      	subs	r1, #4
 8006462:	f853 2b04 	ldr.w	r2, [r3], #4
 8006466:	459c      	cmp	ip, r3
 8006468:	f841 2f04 	str.w	r2, [r1, #4]!
 800646c:	d8f9      	bhi.n	8006462 <__lshift+0x9a>
 800646e:	e7e4      	b.n	800643a <__lshift+0x72>

08006470 <__mcmp>:
 8006470:	6903      	ldr	r3, [r0, #16]
 8006472:	690a      	ldr	r2, [r1, #16]
 8006474:	b530      	push	{r4, r5, lr}
 8006476:	1a9b      	subs	r3, r3, r2
 8006478:	d10c      	bne.n	8006494 <__mcmp+0x24>
 800647a:	0092      	lsls	r2, r2, #2
 800647c:	3014      	adds	r0, #20
 800647e:	3114      	adds	r1, #20
 8006480:	1884      	adds	r4, r0, r2
 8006482:	4411      	add	r1, r2
 8006484:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006488:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800648c:	4295      	cmp	r5, r2
 800648e:	d003      	beq.n	8006498 <__mcmp+0x28>
 8006490:	d305      	bcc.n	800649e <__mcmp+0x2e>
 8006492:	2301      	movs	r3, #1
 8006494:	4618      	mov	r0, r3
 8006496:	bd30      	pop	{r4, r5, pc}
 8006498:	42a0      	cmp	r0, r4
 800649a:	d3f3      	bcc.n	8006484 <__mcmp+0x14>
 800649c:	e7fa      	b.n	8006494 <__mcmp+0x24>
 800649e:	f04f 33ff 	mov.w	r3, #4294967295
 80064a2:	e7f7      	b.n	8006494 <__mcmp+0x24>

080064a4 <__mdiff>:
 80064a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064a8:	460d      	mov	r5, r1
 80064aa:	4607      	mov	r7, r0
 80064ac:	4611      	mov	r1, r2
 80064ae:	4628      	mov	r0, r5
 80064b0:	4614      	mov	r4, r2
 80064b2:	f7ff ffdd 	bl	8006470 <__mcmp>
 80064b6:	1e06      	subs	r6, r0, #0
 80064b8:	d108      	bne.n	80064cc <__mdiff+0x28>
 80064ba:	4631      	mov	r1, r6
 80064bc:	4638      	mov	r0, r7
 80064be:	f7ff fd84 	bl	8005fca <_Balloc>
 80064c2:	2301      	movs	r3, #1
 80064c4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80064c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064cc:	bfa4      	itt	ge
 80064ce:	4623      	movge	r3, r4
 80064d0:	462c      	movge	r4, r5
 80064d2:	4638      	mov	r0, r7
 80064d4:	6861      	ldr	r1, [r4, #4]
 80064d6:	bfa6      	itte	ge
 80064d8:	461d      	movge	r5, r3
 80064da:	2600      	movge	r6, #0
 80064dc:	2601      	movlt	r6, #1
 80064de:	f7ff fd74 	bl	8005fca <_Balloc>
 80064e2:	f04f 0e00 	mov.w	lr, #0
 80064e6:	60c6      	str	r6, [r0, #12]
 80064e8:	692b      	ldr	r3, [r5, #16]
 80064ea:	6926      	ldr	r6, [r4, #16]
 80064ec:	f104 0214 	add.w	r2, r4, #20
 80064f0:	f105 0914 	add.w	r9, r5, #20
 80064f4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80064f8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80064fc:	f100 0114 	add.w	r1, r0, #20
 8006500:	f852 ab04 	ldr.w	sl, [r2], #4
 8006504:	f859 5b04 	ldr.w	r5, [r9], #4
 8006508:	fa1f f38a 	uxth.w	r3, sl
 800650c:	4473      	add	r3, lr
 800650e:	b2ac      	uxth	r4, r5
 8006510:	1b1b      	subs	r3, r3, r4
 8006512:	0c2c      	lsrs	r4, r5, #16
 8006514:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8006518:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800651c:	b29b      	uxth	r3, r3
 800651e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8006522:	45c8      	cmp	r8, r9
 8006524:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006528:	4694      	mov	ip, r2
 800652a:	f841 4b04 	str.w	r4, [r1], #4
 800652e:	d8e7      	bhi.n	8006500 <__mdiff+0x5c>
 8006530:	45bc      	cmp	ip, r7
 8006532:	d304      	bcc.n	800653e <__mdiff+0x9a>
 8006534:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006538:	b183      	cbz	r3, 800655c <__mdiff+0xb8>
 800653a:	6106      	str	r6, [r0, #16]
 800653c:	e7c4      	b.n	80064c8 <__mdiff+0x24>
 800653e:	f85c 4b04 	ldr.w	r4, [ip], #4
 8006542:	b2a2      	uxth	r2, r4
 8006544:	4472      	add	r2, lr
 8006546:	1413      	asrs	r3, r2, #16
 8006548:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800654c:	b292      	uxth	r2, r2
 800654e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006552:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006556:	f841 2b04 	str.w	r2, [r1], #4
 800655a:	e7e9      	b.n	8006530 <__mdiff+0x8c>
 800655c:	3e01      	subs	r6, #1
 800655e:	e7e9      	b.n	8006534 <__mdiff+0x90>

08006560 <__ulp>:
 8006560:	4b10      	ldr	r3, [pc, #64]	; (80065a4 <__ulp+0x44>)
 8006562:	400b      	ands	r3, r1
 8006564:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006568:	2b00      	cmp	r3, #0
 800656a:	dd02      	ble.n	8006572 <__ulp+0x12>
 800656c:	2000      	movs	r0, #0
 800656e:	4619      	mov	r1, r3
 8006570:	4770      	bx	lr
 8006572:	425b      	negs	r3, r3
 8006574:	151b      	asrs	r3, r3, #20
 8006576:	2b13      	cmp	r3, #19
 8006578:	f04f 0000 	mov.w	r0, #0
 800657c:	f04f 0100 	mov.w	r1, #0
 8006580:	dc04      	bgt.n	800658c <__ulp+0x2c>
 8006582:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006586:	fa42 f103 	asr.w	r1, r2, r3
 800658a:	4770      	bx	lr
 800658c:	2201      	movs	r2, #1
 800658e:	3b14      	subs	r3, #20
 8006590:	2b1e      	cmp	r3, #30
 8006592:	bfce      	itee	gt
 8006594:	4613      	movgt	r3, r2
 8006596:	f1c3 031f 	rsble	r3, r3, #31
 800659a:	fa02 f303 	lslle.w	r3, r2, r3
 800659e:	4618      	mov	r0, r3
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	7ff00000 	.word	0x7ff00000

080065a8 <__b2d>:
 80065a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065ac:	6907      	ldr	r7, [r0, #16]
 80065ae:	f100 0914 	add.w	r9, r0, #20
 80065b2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80065b6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80065ba:	f1a7 0804 	sub.w	r8, r7, #4
 80065be:	4630      	mov	r0, r6
 80065c0:	f7ff fdc7 	bl	8006152 <__hi0bits>
 80065c4:	f1c0 0320 	rsb	r3, r0, #32
 80065c8:	280a      	cmp	r0, #10
 80065ca:	600b      	str	r3, [r1, #0]
 80065cc:	491e      	ldr	r1, [pc, #120]	; (8006648 <__b2d+0xa0>)
 80065ce:	dc17      	bgt.n	8006600 <__b2d+0x58>
 80065d0:	45c1      	cmp	r9, r8
 80065d2:	bf28      	it	cs
 80065d4:	2200      	movcs	r2, #0
 80065d6:	f1c0 0c0b 	rsb	ip, r0, #11
 80065da:	fa26 f30c 	lsr.w	r3, r6, ip
 80065de:	bf38      	it	cc
 80065e0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80065e4:	ea43 0501 	orr.w	r5, r3, r1
 80065e8:	f100 0315 	add.w	r3, r0, #21
 80065ec:	fa06 f303 	lsl.w	r3, r6, r3
 80065f0:	fa22 f20c 	lsr.w	r2, r2, ip
 80065f4:	ea43 0402 	orr.w	r4, r3, r2
 80065f8:	4620      	mov	r0, r4
 80065fa:	4629      	mov	r1, r5
 80065fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006600:	45c1      	cmp	r9, r8
 8006602:	bf3a      	itte	cc
 8006604:	f1a7 0808 	subcc.w	r8, r7, #8
 8006608:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800660c:	2200      	movcs	r2, #0
 800660e:	f1b0 030b 	subs.w	r3, r0, #11
 8006612:	d015      	beq.n	8006640 <__b2d+0x98>
 8006614:	409e      	lsls	r6, r3
 8006616:	f1c3 0720 	rsb	r7, r3, #32
 800661a:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800661e:	fa22 f107 	lsr.w	r1, r2, r7
 8006622:	45c8      	cmp	r8, r9
 8006624:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8006628:	ea46 0501 	orr.w	r5, r6, r1
 800662c:	bf94      	ite	ls
 800662e:	2100      	movls	r1, #0
 8006630:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8006634:	fa02 f003 	lsl.w	r0, r2, r3
 8006638:	40f9      	lsrs	r1, r7
 800663a:	ea40 0401 	orr.w	r4, r0, r1
 800663e:	e7db      	b.n	80065f8 <__b2d+0x50>
 8006640:	ea46 0501 	orr.w	r5, r6, r1
 8006644:	4614      	mov	r4, r2
 8006646:	e7d7      	b.n	80065f8 <__b2d+0x50>
 8006648:	3ff00000 	.word	0x3ff00000

0800664c <__d2b>:
 800664c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006650:	461c      	mov	r4, r3
 8006652:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8006656:	2101      	movs	r1, #1
 8006658:	4690      	mov	r8, r2
 800665a:	f7ff fcb6 	bl	8005fca <_Balloc>
 800665e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006662:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006666:	4607      	mov	r7, r0
 8006668:	bb34      	cbnz	r4, 80066b8 <__d2b+0x6c>
 800666a:	9201      	str	r2, [sp, #4]
 800666c:	f1b8 0200 	subs.w	r2, r8, #0
 8006670:	d027      	beq.n	80066c2 <__d2b+0x76>
 8006672:	a802      	add	r0, sp, #8
 8006674:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006678:	f7ff fd8a 	bl	8006190 <__lo0bits>
 800667c:	9900      	ldr	r1, [sp, #0]
 800667e:	b1f0      	cbz	r0, 80066be <__d2b+0x72>
 8006680:	9a01      	ldr	r2, [sp, #4]
 8006682:	f1c0 0320 	rsb	r3, r0, #32
 8006686:	fa02 f303 	lsl.w	r3, r2, r3
 800668a:	430b      	orrs	r3, r1
 800668c:	40c2      	lsrs	r2, r0
 800668e:	617b      	str	r3, [r7, #20]
 8006690:	9201      	str	r2, [sp, #4]
 8006692:	9b01      	ldr	r3, [sp, #4]
 8006694:	2b00      	cmp	r3, #0
 8006696:	bf14      	ite	ne
 8006698:	2102      	movne	r1, #2
 800669a:	2101      	moveq	r1, #1
 800669c:	61bb      	str	r3, [r7, #24]
 800669e:	6139      	str	r1, [r7, #16]
 80066a0:	b1c4      	cbz	r4, 80066d4 <__d2b+0x88>
 80066a2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80066a6:	4404      	add	r4, r0
 80066a8:	6034      	str	r4, [r6, #0]
 80066aa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80066ae:	6028      	str	r0, [r5, #0]
 80066b0:	4638      	mov	r0, r7
 80066b2:	b002      	add	sp, #8
 80066b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066b8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80066bc:	e7d5      	b.n	800666a <__d2b+0x1e>
 80066be:	6179      	str	r1, [r7, #20]
 80066c0:	e7e7      	b.n	8006692 <__d2b+0x46>
 80066c2:	a801      	add	r0, sp, #4
 80066c4:	f7ff fd64 	bl	8006190 <__lo0bits>
 80066c8:	2101      	movs	r1, #1
 80066ca:	9b01      	ldr	r3, [sp, #4]
 80066cc:	6139      	str	r1, [r7, #16]
 80066ce:	617b      	str	r3, [r7, #20]
 80066d0:	3020      	adds	r0, #32
 80066d2:	e7e5      	b.n	80066a0 <__d2b+0x54>
 80066d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80066d8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80066dc:	6030      	str	r0, [r6, #0]
 80066de:	6918      	ldr	r0, [r3, #16]
 80066e0:	f7ff fd37 	bl	8006152 <__hi0bits>
 80066e4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80066e8:	e7e1      	b.n	80066ae <__d2b+0x62>

080066ea <__ratio>:
 80066ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ee:	4688      	mov	r8, r1
 80066f0:	4669      	mov	r1, sp
 80066f2:	4681      	mov	r9, r0
 80066f4:	f7ff ff58 	bl	80065a8 <__b2d>
 80066f8:	468b      	mov	fp, r1
 80066fa:	4606      	mov	r6, r0
 80066fc:	460f      	mov	r7, r1
 80066fe:	4640      	mov	r0, r8
 8006700:	a901      	add	r1, sp, #4
 8006702:	f7ff ff51 	bl	80065a8 <__b2d>
 8006706:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800670a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800670e:	460d      	mov	r5, r1
 8006710:	eba3 0c02 	sub.w	ip, r3, r2
 8006714:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006718:	1a9b      	subs	r3, r3, r2
 800671a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800671e:	2b00      	cmp	r3, #0
 8006720:	bfd5      	itete	le
 8006722:	460a      	movle	r2, r1
 8006724:	463a      	movgt	r2, r7
 8006726:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800672a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800672e:	bfd8      	it	le
 8006730:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8006734:	462b      	mov	r3, r5
 8006736:	4602      	mov	r2, r0
 8006738:	4659      	mov	r1, fp
 800673a:	4630      	mov	r0, r6
 800673c:	f7fa f806 	bl	800074c <__aeabi_ddiv>
 8006740:	b003      	add	sp, #12
 8006742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006746 <__copybits>:
 8006746:	3901      	subs	r1, #1
 8006748:	b510      	push	{r4, lr}
 800674a:	1149      	asrs	r1, r1, #5
 800674c:	6914      	ldr	r4, [r2, #16]
 800674e:	3101      	adds	r1, #1
 8006750:	f102 0314 	add.w	r3, r2, #20
 8006754:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006758:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800675c:	42a3      	cmp	r3, r4
 800675e:	4602      	mov	r2, r0
 8006760:	d303      	bcc.n	800676a <__copybits+0x24>
 8006762:	2300      	movs	r3, #0
 8006764:	428a      	cmp	r2, r1
 8006766:	d305      	bcc.n	8006774 <__copybits+0x2e>
 8006768:	bd10      	pop	{r4, pc}
 800676a:	f853 2b04 	ldr.w	r2, [r3], #4
 800676e:	f840 2b04 	str.w	r2, [r0], #4
 8006772:	e7f3      	b.n	800675c <__copybits+0x16>
 8006774:	f842 3b04 	str.w	r3, [r2], #4
 8006778:	e7f4      	b.n	8006764 <__copybits+0x1e>

0800677a <__any_on>:
 800677a:	f100 0214 	add.w	r2, r0, #20
 800677e:	6900      	ldr	r0, [r0, #16]
 8006780:	114b      	asrs	r3, r1, #5
 8006782:	4298      	cmp	r0, r3
 8006784:	b510      	push	{r4, lr}
 8006786:	db11      	blt.n	80067ac <__any_on+0x32>
 8006788:	dd0a      	ble.n	80067a0 <__any_on+0x26>
 800678a:	f011 011f 	ands.w	r1, r1, #31
 800678e:	d007      	beq.n	80067a0 <__any_on+0x26>
 8006790:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006794:	fa24 f001 	lsr.w	r0, r4, r1
 8006798:	fa00 f101 	lsl.w	r1, r0, r1
 800679c:	428c      	cmp	r4, r1
 800679e:	d10b      	bne.n	80067b8 <__any_on+0x3e>
 80067a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d803      	bhi.n	80067b0 <__any_on+0x36>
 80067a8:	2000      	movs	r0, #0
 80067aa:	bd10      	pop	{r4, pc}
 80067ac:	4603      	mov	r3, r0
 80067ae:	e7f7      	b.n	80067a0 <__any_on+0x26>
 80067b0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80067b4:	2900      	cmp	r1, #0
 80067b6:	d0f5      	beq.n	80067a4 <__any_on+0x2a>
 80067b8:	2001      	movs	r0, #1
 80067ba:	e7f6      	b.n	80067aa <__any_on+0x30>

080067bc <_calloc_r>:
 80067bc:	b538      	push	{r3, r4, r5, lr}
 80067be:	fb02 f401 	mul.w	r4, r2, r1
 80067c2:	4621      	mov	r1, r4
 80067c4:	f000 f854 	bl	8006870 <_malloc_r>
 80067c8:	4605      	mov	r5, r0
 80067ca:	b118      	cbz	r0, 80067d4 <_calloc_r+0x18>
 80067cc:	4622      	mov	r2, r4
 80067ce:	2100      	movs	r1, #0
 80067d0:	f7fc fcc0 	bl	8003154 <memset>
 80067d4:	4628      	mov	r0, r5
 80067d6:	bd38      	pop	{r3, r4, r5, pc}

080067d8 <_free_r>:
 80067d8:	b538      	push	{r3, r4, r5, lr}
 80067da:	4605      	mov	r5, r0
 80067dc:	2900      	cmp	r1, #0
 80067de:	d043      	beq.n	8006868 <_free_r+0x90>
 80067e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067e4:	1f0c      	subs	r4, r1, #4
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	bfb8      	it	lt
 80067ea:	18e4      	addlt	r4, r4, r3
 80067ec:	f000 fe2e 	bl	800744c <__malloc_lock>
 80067f0:	4a1e      	ldr	r2, [pc, #120]	; (800686c <_free_r+0x94>)
 80067f2:	6813      	ldr	r3, [r2, #0]
 80067f4:	4610      	mov	r0, r2
 80067f6:	b933      	cbnz	r3, 8006806 <_free_r+0x2e>
 80067f8:	6063      	str	r3, [r4, #4]
 80067fa:	6014      	str	r4, [r2, #0]
 80067fc:	4628      	mov	r0, r5
 80067fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006802:	f000 be29 	b.w	8007458 <__malloc_unlock>
 8006806:	42a3      	cmp	r3, r4
 8006808:	d90b      	bls.n	8006822 <_free_r+0x4a>
 800680a:	6821      	ldr	r1, [r4, #0]
 800680c:	1862      	adds	r2, r4, r1
 800680e:	4293      	cmp	r3, r2
 8006810:	bf01      	itttt	eq
 8006812:	681a      	ldreq	r2, [r3, #0]
 8006814:	685b      	ldreq	r3, [r3, #4]
 8006816:	1852      	addeq	r2, r2, r1
 8006818:	6022      	streq	r2, [r4, #0]
 800681a:	6063      	str	r3, [r4, #4]
 800681c:	6004      	str	r4, [r0, #0]
 800681e:	e7ed      	b.n	80067fc <_free_r+0x24>
 8006820:	4613      	mov	r3, r2
 8006822:	685a      	ldr	r2, [r3, #4]
 8006824:	b10a      	cbz	r2, 800682a <_free_r+0x52>
 8006826:	42a2      	cmp	r2, r4
 8006828:	d9fa      	bls.n	8006820 <_free_r+0x48>
 800682a:	6819      	ldr	r1, [r3, #0]
 800682c:	1858      	adds	r0, r3, r1
 800682e:	42a0      	cmp	r0, r4
 8006830:	d10b      	bne.n	800684a <_free_r+0x72>
 8006832:	6820      	ldr	r0, [r4, #0]
 8006834:	4401      	add	r1, r0
 8006836:	1858      	adds	r0, r3, r1
 8006838:	4282      	cmp	r2, r0
 800683a:	6019      	str	r1, [r3, #0]
 800683c:	d1de      	bne.n	80067fc <_free_r+0x24>
 800683e:	6810      	ldr	r0, [r2, #0]
 8006840:	6852      	ldr	r2, [r2, #4]
 8006842:	4401      	add	r1, r0
 8006844:	6019      	str	r1, [r3, #0]
 8006846:	605a      	str	r2, [r3, #4]
 8006848:	e7d8      	b.n	80067fc <_free_r+0x24>
 800684a:	d902      	bls.n	8006852 <_free_r+0x7a>
 800684c:	230c      	movs	r3, #12
 800684e:	602b      	str	r3, [r5, #0]
 8006850:	e7d4      	b.n	80067fc <_free_r+0x24>
 8006852:	6820      	ldr	r0, [r4, #0]
 8006854:	1821      	adds	r1, r4, r0
 8006856:	428a      	cmp	r2, r1
 8006858:	bf01      	itttt	eq
 800685a:	6811      	ldreq	r1, [r2, #0]
 800685c:	6852      	ldreq	r2, [r2, #4]
 800685e:	1809      	addeq	r1, r1, r0
 8006860:	6021      	streq	r1, [r4, #0]
 8006862:	6062      	str	r2, [r4, #4]
 8006864:	605c      	str	r4, [r3, #4]
 8006866:	e7c9      	b.n	80067fc <_free_r+0x24>
 8006868:	bd38      	pop	{r3, r4, r5, pc}
 800686a:	bf00      	nop
 800686c:	2000047c 	.word	0x2000047c

08006870 <_malloc_r>:
 8006870:	b570      	push	{r4, r5, r6, lr}
 8006872:	1ccd      	adds	r5, r1, #3
 8006874:	f025 0503 	bic.w	r5, r5, #3
 8006878:	3508      	adds	r5, #8
 800687a:	2d0c      	cmp	r5, #12
 800687c:	bf38      	it	cc
 800687e:	250c      	movcc	r5, #12
 8006880:	2d00      	cmp	r5, #0
 8006882:	4606      	mov	r6, r0
 8006884:	db01      	blt.n	800688a <_malloc_r+0x1a>
 8006886:	42a9      	cmp	r1, r5
 8006888:	d903      	bls.n	8006892 <_malloc_r+0x22>
 800688a:	230c      	movs	r3, #12
 800688c:	6033      	str	r3, [r6, #0]
 800688e:	2000      	movs	r0, #0
 8006890:	bd70      	pop	{r4, r5, r6, pc}
 8006892:	f000 fddb 	bl	800744c <__malloc_lock>
 8006896:	4a21      	ldr	r2, [pc, #132]	; (800691c <_malloc_r+0xac>)
 8006898:	6814      	ldr	r4, [r2, #0]
 800689a:	4621      	mov	r1, r4
 800689c:	b991      	cbnz	r1, 80068c4 <_malloc_r+0x54>
 800689e:	4c20      	ldr	r4, [pc, #128]	; (8006920 <_malloc_r+0xb0>)
 80068a0:	6823      	ldr	r3, [r4, #0]
 80068a2:	b91b      	cbnz	r3, 80068ac <_malloc_r+0x3c>
 80068a4:	4630      	mov	r0, r6
 80068a6:	f000 fc91 	bl	80071cc <_sbrk_r>
 80068aa:	6020      	str	r0, [r4, #0]
 80068ac:	4629      	mov	r1, r5
 80068ae:	4630      	mov	r0, r6
 80068b0:	f000 fc8c 	bl	80071cc <_sbrk_r>
 80068b4:	1c43      	adds	r3, r0, #1
 80068b6:	d124      	bne.n	8006902 <_malloc_r+0x92>
 80068b8:	230c      	movs	r3, #12
 80068ba:	4630      	mov	r0, r6
 80068bc:	6033      	str	r3, [r6, #0]
 80068be:	f000 fdcb 	bl	8007458 <__malloc_unlock>
 80068c2:	e7e4      	b.n	800688e <_malloc_r+0x1e>
 80068c4:	680b      	ldr	r3, [r1, #0]
 80068c6:	1b5b      	subs	r3, r3, r5
 80068c8:	d418      	bmi.n	80068fc <_malloc_r+0x8c>
 80068ca:	2b0b      	cmp	r3, #11
 80068cc:	d90f      	bls.n	80068ee <_malloc_r+0x7e>
 80068ce:	600b      	str	r3, [r1, #0]
 80068d0:	18cc      	adds	r4, r1, r3
 80068d2:	50cd      	str	r5, [r1, r3]
 80068d4:	4630      	mov	r0, r6
 80068d6:	f000 fdbf 	bl	8007458 <__malloc_unlock>
 80068da:	f104 000b 	add.w	r0, r4, #11
 80068de:	1d23      	adds	r3, r4, #4
 80068e0:	f020 0007 	bic.w	r0, r0, #7
 80068e4:	1ac3      	subs	r3, r0, r3
 80068e6:	d0d3      	beq.n	8006890 <_malloc_r+0x20>
 80068e8:	425a      	negs	r2, r3
 80068ea:	50e2      	str	r2, [r4, r3]
 80068ec:	e7d0      	b.n	8006890 <_malloc_r+0x20>
 80068ee:	684b      	ldr	r3, [r1, #4]
 80068f0:	428c      	cmp	r4, r1
 80068f2:	bf16      	itet	ne
 80068f4:	6063      	strne	r3, [r4, #4]
 80068f6:	6013      	streq	r3, [r2, #0]
 80068f8:	460c      	movne	r4, r1
 80068fa:	e7eb      	b.n	80068d4 <_malloc_r+0x64>
 80068fc:	460c      	mov	r4, r1
 80068fe:	6849      	ldr	r1, [r1, #4]
 8006900:	e7cc      	b.n	800689c <_malloc_r+0x2c>
 8006902:	1cc4      	adds	r4, r0, #3
 8006904:	f024 0403 	bic.w	r4, r4, #3
 8006908:	42a0      	cmp	r0, r4
 800690a:	d005      	beq.n	8006918 <_malloc_r+0xa8>
 800690c:	1a21      	subs	r1, r4, r0
 800690e:	4630      	mov	r0, r6
 8006910:	f000 fc5c 	bl	80071cc <_sbrk_r>
 8006914:	3001      	adds	r0, #1
 8006916:	d0cf      	beq.n	80068b8 <_malloc_r+0x48>
 8006918:	6025      	str	r5, [r4, #0]
 800691a:	e7db      	b.n	80068d4 <_malloc_r+0x64>
 800691c:	2000047c 	.word	0x2000047c
 8006920:	20000480 	.word	0x20000480

08006924 <__ssputs_r>:
 8006924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006928:	688e      	ldr	r6, [r1, #8]
 800692a:	4682      	mov	sl, r0
 800692c:	429e      	cmp	r6, r3
 800692e:	460c      	mov	r4, r1
 8006930:	4690      	mov	r8, r2
 8006932:	4699      	mov	r9, r3
 8006934:	d837      	bhi.n	80069a6 <__ssputs_r+0x82>
 8006936:	898a      	ldrh	r2, [r1, #12]
 8006938:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800693c:	d031      	beq.n	80069a2 <__ssputs_r+0x7e>
 800693e:	2302      	movs	r3, #2
 8006940:	6825      	ldr	r5, [r4, #0]
 8006942:	6909      	ldr	r1, [r1, #16]
 8006944:	1a6f      	subs	r7, r5, r1
 8006946:	6965      	ldr	r5, [r4, #20]
 8006948:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800694c:	fb95 f5f3 	sdiv	r5, r5, r3
 8006950:	f109 0301 	add.w	r3, r9, #1
 8006954:	443b      	add	r3, r7
 8006956:	429d      	cmp	r5, r3
 8006958:	bf38      	it	cc
 800695a:	461d      	movcc	r5, r3
 800695c:	0553      	lsls	r3, r2, #21
 800695e:	d530      	bpl.n	80069c2 <__ssputs_r+0x9e>
 8006960:	4629      	mov	r1, r5
 8006962:	f7ff ff85 	bl	8006870 <_malloc_r>
 8006966:	4606      	mov	r6, r0
 8006968:	b950      	cbnz	r0, 8006980 <__ssputs_r+0x5c>
 800696a:	230c      	movs	r3, #12
 800696c:	f04f 30ff 	mov.w	r0, #4294967295
 8006970:	f8ca 3000 	str.w	r3, [sl]
 8006974:	89a3      	ldrh	r3, [r4, #12]
 8006976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800697a:	81a3      	strh	r3, [r4, #12]
 800697c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006980:	463a      	mov	r2, r7
 8006982:	6921      	ldr	r1, [r4, #16]
 8006984:	f7ff fb16 	bl	8005fb4 <memcpy>
 8006988:	89a3      	ldrh	r3, [r4, #12]
 800698a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800698e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006992:	81a3      	strh	r3, [r4, #12]
 8006994:	6126      	str	r6, [r4, #16]
 8006996:	443e      	add	r6, r7
 8006998:	6026      	str	r6, [r4, #0]
 800699a:	464e      	mov	r6, r9
 800699c:	6165      	str	r5, [r4, #20]
 800699e:	1bed      	subs	r5, r5, r7
 80069a0:	60a5      	str	r5, [r4, #8]
 80069a2:	454e      	cmp	r6, r9
 80069a4:	d900      	bls.n	80069a8 <__ssputs_r+0x84>
 80069a6:	464e      	mov	r6, r9
 80069a8:	4632      	mov	r2, r6
 80069aa:	4641      	mov	r1, r8
 80069ac:	6820      	ldr	r0, [r4, #0]
 80069ae:	f000 fd34 	bl	800741a <memmove>
 80069b2:	68a3      	ldr	r3, [r4, #8]
 80069b4:	2000      	movs	r0, #0
 80069b6:	1b9b      	subs	r3, r3, r6
 80069b8:	60a3      	str	r3, [r4, #8]
 80069ba:	6823      	ldr	r3, [r4, #0]
 80069bc:	441e      	add	r6, r3
 80069be:	6026      	str	r6, [r4, #0]
 80069c0:	e7dc      	b.n	800697c <__ssputs_r+0x58>
 80069c2:	462a      	mov	r2, r5
 80069c4:	f000 fd4e 	bl	8007464 <_realloc_r>
 80069c8:	4606      	mov	r6, r0
 80069ca:	2800      	cmp	r0, #0
 80069cc:	d1e2      	bne.n	8006994 <__ssputs_r+0x70>
 80069ce:	6921      	ldr	r1, [r4, #16]
 80069d0:	4650      	mov	r0, sl
 80069d2:	f7ff ff01 	bl	80067d8 <_free_r>
 80069d6:	e7c8      	b.n	800696a <__ssputs_r+0x46>

080069d8 <_svfiprintf_r>:
 80069d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069dc:	461d      	mov	r5, r3
 80069de:	898b      	ldrh	r3, [r1, #12]
 80069e0:	b09d      	sub	sp, #116	; 0x74
 80069e2:	061f      	lsls	r7, r3, #24
 80069e4:	4680      	mov	r8, r0
 80069e6:	460c      	mov	r4, r1
 80069e8:	4616      	mov	r6, r2
 80069ea:	d50f      	bpl.n	8006a0c <_svfiprintf_r+0x34>
 80069ec:	690b      	ldr	r3, [r1, #16]
 80069ee:	b96b      	cbnz	r3, 8006a0c <_svfiprintf_r+0x34>
 80069f0:	2140      	movs	r1, #64	; 0x40
 80069f2:	f7ff ff3d 	bl	8006870 <_malloc_r>
 80069f6:	6020      	str	r0, [r4, #0]
 80069f8:	6120      	str	r0, [r4, #16]
 80069fa:	b928      	cbnz	r0, 8006a08 <_svfiprintf_r+0x30>
 80069fc:	230c      	movs	r3, #12
 80069fe:	f8c8 3000 	str.w	r3, [r8]
 8006a02:	f04f 30ff 	mov.w	r0, #4294967295
 8006a06:	e0c8      	b.n	8006b9a <_svfiprintf_r+0x1c2>
 8006a08:	2340      	movs	r3, #64	; 0x40
 8006a0a:	6163      	str	r3, [r4, #20]
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a10:	2320      	movs	r3, #32
 8006a12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a16:	2330      	movs	r3, #48	; 0x30
 8006a18:	f04f 0b01 	mov.w	fp, #1
 8006a1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a20:	9503      	str	r5, [sp, #12]
 8006a22:	4637      	mov	r7, r6
 8006a24:	463d      	mov	r5, r7
 8006a26:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006a2a:	b10b      	cbz	r3, 8006a30 <_svfiprintf_r+0x58>
 8006a2c:	2b25      	cmp	r3, #37	; 0x25
 8006a2e:	d13e      	bne.n	8006aae <_svfiprintf_r+0xd6>
 8006a30:	ebb7 0a06 	subs.w	sl, r7, r6
 8006a34:	d00b      	beq.n	8006a4e <_svfiprintf_r+0x76>
 8006a36:	4653      	mov	r3, sl
 8006a38:	4632      	mov	r2, r6
 8006a3a:	4621      	mov	r1, r4
 8006a3c:	4640      	mov	r0, r8
 8006a3e:	f7ff ff71 	bl	8006924 <__ssputs_r>
 8006a42:	3001      	adds	r0, #1
 8006a44:	f000 80a4 	beq.w	8006b90 <_svfiprintf_r+0x1b8>
 8006a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a4a:	4453      	add	r3, sl
 8006a4c:	9309      	str	r3, [sp, #36]	; 0x24
 8006a4e:	783b      	ldrb	r3, [r7, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 809d 	beq.w	8006b90 <_svfiprintf_r+0x1b8>
 8006a56:	2300      	movs	r3, #0
 8006a58:	f04f 32ff 	mov.w	r2, #4294967295
 8006a5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a60:	9304      	str	r3, [sp, #16]
 8006a62:	9307      	str	r3, [sp, #28]
 8006a64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a68:	931a      	str	r3, [sp, #104]	; 0x68
 8006a6a:	462f      	mov	r7, r5
 8006a6c:	2205      	movs	r2, #5
 8006a6e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006a72:	4850      	ldr	r0, [pc, #320]	; (8006bb4 <_svfiprintf_r+0x1dc>)
 8006a74:	f7ff fa90 	bl	8005f98 <memchr>
 8006a78:	9b04      	ldr	r3, [sp, #16]
 8006a7a:	b9d0      	cbnz	r0, 8006ab2 <_svfiprintf_r+0xda>
 8006a7c:	06d9      	lsls	r1, r3, #27
 8006a7e:	bf44      	itt	mi
 8006a80:	2220      	movmi	r2, #32
 8006a82:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006a86:	071a      	lsls	r2, r3, #28
 8006a88:	bf44      	itt	mi
 8006a8a:	222b      	movmi	r2, #43	; 0x2b
 8006a8c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006a90:	782a      	ldrb	r2, [r5, #0]
 8006a92:	2a2a      	cmp	r2, #42	; 0x2a
 8006a94:	d015      	beq.n	8006ac2 <_svfiprintf_r+0xea>
 8006a96:	462f      	mov	r7, r5
 8006a98:	2000      	movs	r0, #0
 8006a9a:	250a      	movs	r5, #10
 8006a9c:	9a07      	ldr	r2, [sp, #28]
 8006a9e:	4639      	mov	r1, r7
 8006aa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006aa4:	3b30      	subs	r3, #48	; 0x30
 8006aa6:	2b09      	cmp	r3, #9
 8006aa8:	d94d      	bls.n	8006b46 <_svfiprintf_r+0x16e>
 8006aaa:	b1b8      	cbz	r0, 8006adc <_svfiprintf_r+0x104>
 8006aac:	e00f      	b.n	8006ace <_svfiprintf_r+0xf6>
 8006aae:	462f      	mov	r7, r5
 8006ab0:	e7b8      	b.n	8006a24 <_svfiprintf_r+0x4c>
 8006ab2:	4a40      	ldr	r2, [pc, #256]	; (8006bb4 <_svfiprintf_r+0x1dc>)
 8006ab4:	463d      	mov	r5, r7
 8006ab6:	1a80      	subs	r0, r0, r2
 8006ab8:	fa0b f000 	lsl.w	r0, fp, r0
 8006abc:	4318      	orrs	r0, r3
 8006abe:	9004      	str	r0, [sp, #16]
 8006ac0:	e7d3      	b.n	8006a6a <_svfiprintf_r+0x92>
 8006ac2:	9a03      	ldr	r2, [sp, #12]
 8006ac4:	1d11      	adds	r1, r2, #4
 8006ac6:	6812      	ldr	r2, [r2, #0]
 8006ac8:	9103      	str	r1, [sp, #12]
 8006aca:	2a00      	cmp	r2, #0
 8006acc:	db01      	blt.n	8006ad2 <_svfiprintf_r+0xfa>
 8006ace:	9207      	str	r2, [sp, #28]
 8006ad0:	e004      	b.n	8006adc <_svfiprintf_r+0x104>
 8006ad2:	4252      	negs	r2, r2
 8006ad4:	f043 0302 	orr.w	r3, r3, #2
 8006ad8:	9207      	str	r2, [sp, #28]
 8006ada:	9304      	str	r3, [sp, #16]
 8006adc:	783b      	ldrb	r3, [r7, #0]
 8006ade:	2b2e      	cmp	r3, #46	; 0x2e
 8006ae0:	d10c      	bne.n	8006afc <_svfiprintf_r+0x124>
 8006ae2:	787b      	ldrb	r3, [r7, #1]
 8006ae4:	2b2a      	cmp	r3, #42	; 0x2a
 8006ae6:	d133      	bne.n	8006b50 <_svfiprintf_r+0x178>
 8006ae8:	9b03      	ldr	r3, [sp, #12]
 8006aea:	3702      	adds	r7, #2
 8006aec:	1d1a      	adds	r2, r3, #4
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	9203      	str	r2, [sp, #12]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	bfb8      	it	lt
 8006af6:	f04f 33ff 	movlt.w	r3, #4294967295
 8006afa:	9305      	str	r3, [sp, #20]
 8006afc:	4d2e      	ldr	r5, [pc, #184]	; (8006bb8 <_svfiprintf_r+0x1e0>)
 8006afe:	2203      	movs	r2, #3
 8006b00:	7839      	ldrb	r1, [r7, #0]
 8006b02:	4628      	mov	r0, r5
 8006b04:	f7ff fa48 	bl	8005f98 <memchr>
 8006b08:	b138      	cbz	r0, 8006b1a <_svfiprintf_r+0x142>
 8006b0a:	2340      	movs	r3, #64	; 0x40
 8006b0c:	1b40      	subs	r0, r0, r5
 8006b0e:	fa03 f000 	lsl.w	r0, r3, r0
 8006b12:	9b04      	ldr	r3, [sp, #16]
 8006b14:	3701      	adds	r7, #1
 8006b16:	4303      	orrs	r3, r0
 8006b18:	9304      	str	r3, [sp, #16]
 8006b1a:	7839      	ldrb	r1, [r7, #0]
 8006b1c:	2206      	movs	r2, #6
 8006b1e:	4827      	ldr	r0, [pc, #156]	; (8006bbc <_svfiprintf_r+0x1e4>)
 8006b20:	1c7e      	adds	r6, r7, #1
 8006b22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b26:	f7ff fa37 	bl	8005f98 <memchr>
 8006b2a:	2800      	cmp	r0, #0
 8006b2c:	d038      	beq.n	8006ba0 <_svfiprintf_r+0x1c8>
 8006b2e:	4b24      	ldr	r3, [pc, #144]	; (8006bc0 <_svfiprintf_r+0x1e8>)
 8006b30:	bb13      	cbnz	r3, 8006b78 <_svfiprintf_r+0x1a0>
 8006b32:	9b03      	ldr	r3, [sp, #12]
 8006b34:	3307      	adds	r3, #7
 8006b36:	f023 0307 	bic.w	r3, r3, #7
 8006b3a:	3308      	adds	r3, #8
 8006b3c:	9303      	str	r3, [sp, #12]
 8006b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b40:	444b      	add	r3, r9
 8006b42:	9309      	str	r3, [sp, #36]	; 0x24
 8006b44:	e76d      	b.n	8006a22 <_svfiprintf_r+0x4a>
 8006b46:	fb05 3202 	mla	r2, r5, r2, r3
 8006b4a:	2001      	movs	r0, #1
 8006b4c:	460f      	mov	r7, r1
 8006b4e:	e7a6      	b.n	8006a9e <_svfiprintf_r+0xc6>
 8006b50:	2300      	movs	r3, #0
 8006b52:	250a      	movs	r5, #10
 8006b54:	4619      	mov	r1, r3
 8006b56:	3701      	adds	r7, #1
 8006b58:	9305      	str	r3, [sp, #20]
 8006b5a:	4638      	mov	r0, r7
 8006b5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b60:	3a30      	subs	r2, #48	; 0x30
 8006b62:	2a09      	cmp	r2, #9
 8006b64:	d903      	bls.n	8006b6e <_svfiprintf_r+0x196>
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d0c8      	beq.n	8006afc <_svfiprintf_r+0x124>
 8006b6a:	9105      	str	r1, [sp, #20]
 8006b6c:	e7c6      	b.n	8006afc <_svfiprintf_r+0x124>
 8006b6e:	fb05 2101 	mla	r1, r5, r1, r2
 8006b72:	2301      	movs	r3, #1
 8006b74:	4607      	mov	r7, r0
 8006b76:	e7f0      	b.n	8006b5a <_svfiprintf_r+0x182>
 8006b78:	ab03      	add	r3, sp, #12
 8006b7a:	9300      	str	r3, [sp, #0]
 8006b7c:	4622      	mov	r2, r4
 8006b7e:	4b11      	ldr	r3, [pc, #68]	; (8006bc4 <_svfiprintf_r+0x1ec>)
 8006b80:	a904      	add	r1, sp, #16
 8006b82:	4640      	mov	r0, r8
 8006b84:	f7fc fb80 	bl	8003288 <_printf_float>
 8006b88:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006b8c:	4681      	mov	r9, r0
 8006b8e:	d1d6      	bne.n	8006b3e <_svfiprintf_r+0x166>
 8006b90:	89a3      	ldrh	r3, [r4, #12]
 8006b92:	065b      	lsls	r3, r3, #25
 8006b94:	f53f af35 	bmi.w	8006a02 <_svfiprintf_r+0x2a>
 8006b98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b9a:	b01d      	add	sp, #116	; 0x74
 8006b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ba0:	ab03      	add	r3, sp, #12
 8006ba2:	9300      	str	r3, [sp, #0]
 8006ba4:	4622      	mov	r2, r4
 8006ba6:	4b07      	ldr	r3, [pc, #28]	; (8006bc4 <_svfiprintf_r+0x1ec>)
 8006ba8:	a904      	add	r1, sp, #16
 8006baa:	4640      	mov	r0, r8
 8006bac:	f7fc fe18 	bl	80037e0 <_printf_i>
 8006bb0:	e7ea      	b.n	8006b88 <_svfiprintf_r+0x1b0>
 8006bb2:	bf00      	nop
 8006bb4:	0800a2cc 	.word	0x0800a2cc
 8006bb8:	0800a2d2 	.word	0x0800a2d2
 8006bbc:	0800a2d6 	.word	0x0800a2d6
 8006bc0:	08003289 	.word	0x08003289
 8006bc4:	08006925 	.word	0x08006925

08006bc8 <_sungetc_r>:
 8006bc8:	b538      	push	{r3, r4, r5, lr}
 8006bca:	1c4b      	adds	r3, r1, #1
 8006bcc:	4614      	mov	r4, r2
 8006bce:	d103      	bne.n	8006bd8 <_sungetc_r+0x10>
 8006bd0:	f04f 35ff 	mov.w	r5, #4294967295
 8006bd4:	4628      	mov	r0, r5
 8006bd6:	bd38      	pop	{r3, r4, r5, pc}
 8006bd8:	8993      	ldrh	r3, [r2, #12]
 8006bda:	b2cd      	uxtb	r5, r1
 8006bdc:	f023 0320 	bic.w	r3, r3, #32
 8006be0:	8193      	strh	r3, [r2, #12]
 8006be2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006be4:	6852      	ldr	r2, [r2, #4]
 8006be6:	b18b      	cbz	r3, 8006c0c <_sungetc_r+0x44>
 8006be8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006bea:	4293      	cmp	r3, r2
 8006bec:	dd08      	ble.n	8006c00 <_sungetc_r+0x38>
 8006bee:	6823      	ldr	r3, [r4, #0]
 8006bf0:	1e5a      	subs	r2, r3, #1
 8006bf2:	6022      	str	r2, [r4, #0]
 8006bf4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006bf8:	6863      	ldr	r3, [r4, #4]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	6063      	str	r3, [r4, #4]
 8006bfe:	e7e9      	b.n	8006bd4 <_sungetc_r+0xc>
 8006c00:	4621      	mov	r1, r4
 8006c02:	f000 fbc3 	bl	800738c <__submore>
 8006c06:	2800      	cmp	r0, #0
 8006c08:	d0f1      	beq.n	8006bee <_sungetc_r+0x26>
 8006c0a:	e7e1      	b.n	8006bd0 <_sungetc_r+0x8>
 8006c0c:	6921      	ldr	r1, [r4, #16]
 8006c0e:	6823      	ldr	r3, [r4, #0]
 8006c10:	b151      	cbz	r1, 8006c28 <_sungetc_r+0x60>
 8006c12:	4299      	cmp	r1, r3
 8006c14:	d208      	bcs.n	8006c28 <_sungetc_r+0x60>
 8006c16:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8006c1a:	42a9      	cmp	r1, r5
 8006c1c:	d104      	bne.n	8006c28 <_sungetc_r+0x60>
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	3201      	adds	r2, #1
 8006c22:	6023      	str	r3, [r4, #0]
 8006c24:	6062      	str	r2, [r4, #4]
 8006c26:	e7d5      	b.n	8006bd4 <_sungetc_r+0xc>
 8006c28:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8006c2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c30:	6363      	str	r3, [r4, #52]	; 0x34
 8006c32:	2303      	movs	r3, #3
 8006c34:	63a3      	str	r3, [r4, #56]	; 0x38
 8006c36:	4623      	mov	r3, r4
 8006c38:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006c3c:	6023      	str	r3, [r4, #0]
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e7dc      	b.n	8006bfc <_sungetc_r+0x34>

08006c42 <__ssrefill_r>:
 8006c42:	b510      	push	{r4, lr}
 8006c44:	460c      	mov	r4, r1
 8006c46:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006c48:	b169      	cbz	r1, 8006c66 <__ssrefill_r+0x24>
 8006c4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c4e:	4299      	cmp	r1, r3
 8006c50:	d001      	beq.n	8006c56 <__ssrefill_r+0x14>
 8006c52:	f7ff fdc1 	bl	80067d8 <_free_r>
 8006c56:	2000      	movs	r0, #0
 8006c58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c5a:	6360      	str	r0, [r4, #52]	; 0x34
 8006c5c:	6063      	str	r3, [r4, #4]
 8006c5e:	b113      	cbz	r3, 8006c66 <__ssrefill_r+0x24>
 8006c60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006c62:	6023      	str	r3, [r4, #0]
 8006c64:	bd10      	pop	{r4, pc}
 8006c66:	6923      	ldr	r3, [r4, #16]
 8006c68:	f04f 30ff 	mov.w	r0, #4294967295
 8006c6c:	6023      	str	r3, [r4, #0]
 8006c6e:	2300      	movs	r3, #0
 8006c70:	6063      	str	r3, [r4, #4]
 8006c72:	89a3      	ldrh	r3, [r4, #12]
 8006c74:	f043 0320 	orr.w	r3, r3, #32
 8006c78:	81a3      	strh	r3, [r4, #12]
 8006c7a:	e7f3      	b.n	8006c64 <__ssrefill_r+0x22>

08006c7c <__ssvfiscanf_r>:
 8006c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c80:	460c      	mov	r4, r1
 8006c82:	2100      	movs	r1, #0
 8006c84:	4606      	mov	r6, r0
 8006c86:	4692      	mov	sl, r2
 8006c88:	270a      	movs	r7, #10
 8006c8a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8006c8e:	9144      	str	r1, [sp, #272]	; 0x110
 8006c90:	9145      	str	r1, [sp, #276]	; 0x114
 8006c92:	499e      	ldr	r1, [pc, #632]	; (8006f0c <__ssvfiscanf_r+0x290>)
 8006c94:	f10d 0804 	add.w	r8, sp, #4
 8006c98:	91a0      	str	r1, [sp, #640]	; 0x280
 8006c9a:	499d      	ldr	r1, [pc, #628]	; (8006f10 <__ssvfiscanf_r+0x294>)
 8006c9c:	f8df 9274 	ldr.w	r9, [pc, #628]	; 8006f14 <__ssvfiscanf_r+0x298>
 8006ca0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8006ca4:	91a1      	str	r1, [sp, #644]	; 0x284
 8006ca6:	9300      	str	r3, [sp, #0]
 8006ca8:	f89a 3000 	ldrb.w	r3, [sl]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f000 812a 	beq.w	8006f06 <__ssvfiscanf_r+0x28a>
 8006cb2:	4655      	mov	r5, sl
 8006cb4:	f7ff f938 	bl	8005f28 <__locale_ctype_ptr>
 8006cb8:	f815 bb01 	ldrb.w	fp, [r5], #1
 8006cbc:	4458      	add	r0, fp
 8006cbe:	7843      	ldrb	r3, [r0, #1]
 8006cc0:	f013 0308 	ands.w	r3, r3, #8
 8006cc4:	d01c      	beq.n	8006d00 <__ssvfiscanf_r+0x84>
 8006cc6:	6863      	ldr	r3, [r4, #4]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	dd12      	ble.n	8006cf2 <__ssvfiscanf_r+0x76>
 8006ccc:	f7ff f92c 	bl	8005f28 <__locale_ctype_ptr>
 8006cd0:	6823      	ldr	r3, [r4, #0]
 8006cd2:	781a      	ldrb	r2, [r3, #0]
 8006cd4:	4410      	add	r0, r2
 8006cd6:	7842      	ldrb	r2, [r0, #1]
 8006cd8:	0712      	lsls	r2, r2, #28
 8006cda:	d401      	bmi.n	8006ce0 <__ssvfiscanf_r+0x64>
 8006cdc:	46aa      	mov	sl, r5
 8006cde:	e7e3      	b.n	8006ca8 <__ssvfiscanf_r+0x2c>
 8006ce0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	3201      	adds	r2, #1
 8006ce6:	9245      	str	r2, [sp, #276]	; 0x114
 8006ce8:	6862      	ldr	r2, [r4, #4]
 8006cea:	6023      	str	r3, [r4, #0]
 8006cec:	3a01      	subs	r2, #1
 8006cee:	6062      	str	r2, [r4, #4]
 8006cf0:	e7e9      	b.n	8006cc6 <__ssvfiscanf_r+0x4a>
 8006cf2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006cf4:	4621      	mov	r1, r4
 8006cf6:	4630      	mov	r0, r6
 8006cf8:	4798      	blx	r3
 8006cfa:	2800      	cmp	r0, #0
 8006cfc:	d0e6      	beq.n	8006ccc <__ssvfiscanf_r+0x50>
 8006cfe:	e7ed      	b.n	8006cdc <__ssvfiscanf_r+0x60>
 8006d00:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8006d04:	f040 8082 	bne.w	8006e0c <__ssvfiscanf_r+0x190>
 8006d08:	9343      	str	r3, [sp, #268]	; 0x10c
 8006d0a:	9341      	str	r3, [sp, #260]	; 0x104
 8006d0c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8006d10:	2b2a      	cmp	r3, #42	; 0x2a
 8006d12:	d103      	bne.n	8006d1c <__ssvfiscanf_r+0xa0>
 8006d14:	2310      	movs	r3, #16
 8006d16:	f10a 0502 	add.w	r5, sl, #2
 8006d1a:	9341      	str	r3, [sp, #260]	; 0x104
 8006d1c:	46aa      	mov	sl, r5
 8006d1e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8006d22:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006d26:	2a09      	cmp	r2, #9
 8006d28:	d922      	bls.n	8006d70 <__ssvfiscanf_r+0xf4>
 8006d2a:	2203      	movs	r2, #3
 8006d2c:	4879      	ldr	r0, [pc, #484]	; (8006f14 <__ssvfiscanf_r+0x298>)
 8006d2e:	f7ff f933 	bl	8005f98 <memchr>
 8006d32:	b138      	cbz	r0, 8006d44 <__ssvfiscanf_r+0xc8>
 8006d34:	eba0 0309 	sub.w	r3, r0, r9
 8006d38:	2001      	movs	r0, #1
 8006d3a:	46aa      	mov	sl, r5
 8006d3c:	4098      	lsls	r0, r3
 8006d3e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006d40:	4318      	orrs	r0, r3
 8006d42:	9041      	str	r0, [sp, #260]	; 0x104
 8006d44:	f89a 3000 	ldrb.w	r3, [sl]
 8006d48:	f10a 0501 	add.w	r5, sl, #1
 8006d4c:	2b67      	cmp	r3, #103	; 0x67
 8006d4e:	d82b      	bhi.n	8006da8 <__ssvfiscanf_r+0x12c>
 8006d50:	2b65      	cmp	r3, #101	; 0x65
 8006d52:	f080 809f 	bcs.w	8006e94 <__ssvfiscanf_r+0x218>
 8006d56:	2b47      	cmp	r3, #71	; 0x47
 8006d58:	d810      	bhi.n	8006d7c <__ssvfiscanf_r+0x100>
 8006d5a:	2b45      	cmp	r3, #69	; 0x45
 8006d5c:	f080 809a 	bcs.w	8006e94 <__ssvfiscanf_r+0x218>
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d06c      	beq.n	8006e3e <__ssvfiscanf_r+0x1c2>
 8006d64:	2b25      	cmp	r3, #37	; 0x25
 8006d66:	d051      	beq.n	8006e0c <__ssvfiscanf_r+0x190>
 8006d68:	2303      	movs	r3, #3
 8006d6a:	9742      	str	r7, [sp, #264]	; 0x108
 8006d6c:	9347      	str	r3, [sp, #284]	; 0x11c
 8006d6e:	e027      	b.n	8006dc0 <__ssvfiscanf_r+0x144>
 8006d70:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006d72:	fb07 1303 	mla	r3, r7, r3, r1
 8006d76:	3b30      	subs	r3, #48	; 0x30
 8006d78:	9343      	str	r3, [sp, #268]	; 0x10c
 8006d7a:	e7cf      	b.n	8006d1c <__ssvfiscanf_r+0xa0>
 8006d7c:	2b5b      	cmp	r3, #91	; 0x5b
 8006d7e:	d06a      	beq.n	8006e56 <__ssvfiscanf_r+0x1da>
 8006d80:	d80c      	bhi.n	8006d9c <__ssvfiscanf_r+0x120>
 8006d82:	2b58      	cmp	r3, #88	; 0x58
 8006d84:	d1f0      	bne.n	8006d68 <__ssvfiscanf_r+0xec>
 8006d86:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006d88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d8c:	9241      	str	r2, [sp, #260]	; 0x104
 8006d8e:	2210      	movs	r2, #16
 8006d90:	9242      	str	r2, [sp, #264]	; 0x108
 8006d92:	2b6e      	cmp	r3, #110	; 0x6e
 8006d94:	bf8c      	ite	hi
 8006d96:	2304      	movhi	r3, #4
 8006d98:	2303      	movls	r3, #3
 8006d9a:	e010      	b.n	8006dbe <__ssvfiscanf_r+0x142>
 8006d9c:	2b63      	cmp	r3, #99	; 0x63
 8006d9e:	d065      	beq.n	8006e6c <__ssvfiscanf_r+0x1f0>
 8006da0:	2b64      	cmp	r3, #100	; 0x64
 8006da2:	d1e1      	bne.n	8006d68 <__ssvfiscanf_r+0xec>
 8006da4:	9742      	str	r7, [sp, #264]	; 0x108
 8006da6:	e7f4      	b.n	8006d92 <__ssvfiscanf_r+0x116>
 8006da8:	2b70      	cmp	r3, #112	; 0x70
 8006daa:	d04b      	beq.n	8006e44 <__ssvfiscanf_r+0x1c8>
 8006dac:	d826      	bhi.n	8006dfc <__ssvfiscanf_r+0x180>
 8006dae:	2b6e      	cmp	r3, #110	; 0x6e
 8006db0:	d062      	beq.n	8006e78 <__ssvfiscanf_r+0x1fc>
 8006db2:	d84c      	bhi.n	8006e4e <__ssvfiscanf_r+0x1d2>
 8006db4:	2b69      	cmp	r3, #105	; 0x69
 8006db6:	d1d7      	bne.n	8006d68 <__ssvfiscanf_r+0xec>
 8006db8:	2300      	movs	r3, #0
 8006dba:	9342      	str	r3, [sp, #264]	; 0x108
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	9347      	str	r3, [sp, #284]	; 0x11c
 8006dc0:	6863      	ldr	r3, [r4, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	dd68      	ble.n	8006e98 <__ssvfiscanf_r+0x21c>
 8006dc6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006dc8:	0659      	lsls	r1, r3, #25
 8006dca:	d407      	bmi.n	8006ddc <__ssvfiscanf_r+0x160>
 8006dcc:	f7ff f8ac 	bl	8005f28 <__locale_ctype_ptr>
 8006dd0:	6823      	ldr	r3, [r4, #0]
 8006dd2:	781a      	ldrb	r2, [r3, #0]
 8006dd4:	4410      	add	r0, r2
 8006dd6:	7842      	ldrb	r2, [r0, #1]
 8006dd8:	0712      	lsls	r2, r2, #28
 8006dda:	d464      	bmi.n	8006ea6 <__ssvfiscanf_r+0x22a>
 8006ddc:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	dc73      	bgt.n	8006eca <__ssvfiscanf_r+0x24e>
 8006de2:	466b      	mov	r3, sp
 8006de4:	4622      	mov	r2, r4
 8006de6:	a941      	add	r1, sp, #260	; 0x104
 8006de8:	4630      	mov	r0, r6
 8006dea:	f000 f897 	bl	8006f1c <_scanf_chars>
 8006dee:	2801      	cmp	r0, #1
 8006df0:	f000 8089 	beq.w	8006f06 <__ssvfiscanf_r+0x28a>
 8006df4:	2802      	cmp	r0, #2
 8006df6:	f47f af71 	bne.w	8006cdc <__ssvfiscanf_r+0x60>
 8006dfa:	e01d      	b.n	8006e38 <__ssvfiscanf_r+0x1bc>
 8006dfc:	2b75      	cmp	r3, #117	; 0x75
 8006dfe:	d0d1      	beq.n	8006da4 <__ssvfiscanf_r+0x128>
 8006e00:	2b78      	cmp	r3, #120	; 0x78
 8006e02:	d0c0      	beq.n	8006d86 <__ssvfiscanf_r+0x10a>
 8006e04:	2b73      	cmp	r3, #115	; 0x73
 8006e06:	d1af      	bne.n	8006d68 <__ssvfiscanf_r+0xec>
 8006e08:	2302      	movs	r3, #2
 8006e0a:	e7d8      	b.n	8006dbe <__ssvfiscanf_r+0x142>
 8006e0c:	6863      	ldr	r3, [r4, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	dd0c      	ble.n	8006e2c <__ssvfiscanf_r+0x1b0>
 8006e12:	6823      	ldr	r3, [r4, #0]
 8006e14:	781a      	ldrb	r2, [r3, #0]
 8006e16:	455a      	cmp	r2, fp
 8006e18:	d175      	bne.n	8006f06 <__ssvfiscanf_r+0x28a>
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	6862      	ldr	r2, [r4, #4]
 8006e1e:	6023      	str	r3, [r4, #0]
 8006e20:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006e22:	3a01      	subs	r2, #1
 8006e24:	3301      	adds	r3, #1
 8006e26:	6062      	str	r2, [r4, #4]
 8006e28:	9345      	str	r3, [sp, #276]	; 0x114
 8006e2a:	e757      	b.n	8006cdc <__ssvfiscanf_r+0x60>
 8006e2c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006e2e:	4621      	mov	r1, r4
 8006e30:	4630      	mov	r0, r6
 8006e32:	4798      	blx	r3
 8006e34:	2800      	cmp	r0, #0
 8006e36:	d0ec      	beq.n	8006e12 <__ssvfiscanf_r+0x196>
 8006e38:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006e3a:	2800      	cmp	r0, #0
 8006e3c:	d159      	bne.n	8006ef2 <__ssvfiscanf_r+0x276>
 8006e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8006e42:	e05c      	b.n	8006efe <__ssvfiscanf_r+0x282>
 8006e44:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006e46:	f042 0220 	orr.w	r2, r2, #32
 8006e4a:	9241      	str	r2, [sp, #260]	; 0x104
 8006e4c:	e79b      	b.n	8006d86 <__ssvfiscanf_r+0x10a>
 8006e4e:	2308      	movs	r3, #8
 8006e50:	9342      	str	r3, [sp, #264]	; 0x108
 8006e52:	2304      	movs	r3, #4
 8006e54:	e7b3      	b.n	8006dbe <__ssvfiscanf_r+0x142>
 8006e56:	4629      	mov	r1, r5
 8006e58:	4640      	mov	r0, r8
 8006e5a:	f000 f9c7 	bl	80071ec <__sccl>
 8006e5e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006e60:	4605      	mov	r5, r0
 8006e62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e66:	9341      	str	r3, [sp, #260]	; 0x104
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e7a8      	b.n	8006dbe <__ssvfiscanf_r+0x142>
 8006e6c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006e6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e72:	9341      	str	r3, [sp, #260]	; 0x104
 8006e74:	2300      	movs	r3, #0
 8006e76:	e7a2      	b.n	8006dbe <__ssvfiscanf_r+0x142>
 8006e78:	9841      	ldr	r0, [sp, #260]	; 0x104
 8006e7a:	06c3      	lsls	r3, r0, #27
 8006e7c:	f53f af2e 	bmi.w	8006cdc <__ssvfiscanf_r+0x60>
 8006e80:	9b00      	ldr	r3, [sp, #0]
 8006e82:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006e84:	1d19      	adds	r1, r3, #4
 8006e86:	9100      	str	r1, [sp, #0]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	07c0      	lsls	r0, r0, #31
 8006e8c:	bf4c      	ite	mi
 8006e8e:	801a      	strhmi	r2, [r3, #0]
 8006e90:	601a      	strpl	r2, [r3, #0]
 8006e92:	e723      	b.n	8006cdc <__ssvfiscanf_r+0x60>
 8006e94:	2305      	movs	r3, #5
 8006e96:	e792      	b.n	8006dbe <__ssvfiscanf_r+0x142>
 8006e98:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006e9a:	4621      	mov	r1, r4
 8006e9c:	4630      	mov	r0, r6
 8006e9e:	4798      	blx	r3
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	d090      	beq.n	8006dc6 <__ssvfiscanf_r+0x14a>
 8006ea4:	e7c8      	b.n	8006e38 <__ssvfiscanf_r+0x1bc>
 8006ea6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006ea8:	3201      	adds	r2, #1
 8006eaa:	9245      	str	r2, [sp, #276]	; 0x114
 8006eac:	6862      	ldr	r2, [r4, #4]
 8006eae:	3a01      	subs	r2, #1
 8006eb0:	2a00      	cmp	r2, #0
 8006eb2:	6062      	str	r2, [r4, #4]
 8006eb4:	dd02      	ble.n	8006ebc <__ssvfiscanf_r+0x240>
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	6023      	str	r3, [r4, #0]
 8006eba:	e787      	b.n	8006dcc <__ssvfiscanf_r+0x150>
 8006ebc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006ebe:	4621      	mov	r1, r4
 8006ec0:	4630      	mov	r0, r6
 8006ec2:	4798      	blx	r3
 8006ec4:	2800      	cmp	r0, #0
 8006ec6:	d081      	beq.n	8006dcc <__ssvfiscanf_r+0x150>
 8006ec8:	e7b6      	b.n	8006e38 <__ssvfiscanf_r+0x1bc>
 8006eca:	2b04      	cmp	r3, #4
 8006ecc:	dc06      	bgt.n	8006edc <__ssvfiscanf_r+0x260>
 8006ece:	466b      	mov	r3, sp
 8006ed0:	4622      	mov	r2, r4
 8006ed2:	a941      	add	r1, sp, #260	; 0x104
 8006ed4:	4630      	mov	r0, r6
 8006ed6:	f000 f883 	bl	8006fe0 <_scanf_i>
 8006eda:	e788      	b.n	8006dee <__ssvfiscanf_r+0x172>
 8006edc:	4b0e      	ldr	r3, [pc, #56]	; (8006f18 <__ssvfiscanf_r+0x29c>)
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	f43f aefc 	beq.w	8006cdc <__ssvfiscanf_r+0x60>
 8006ee4:	466b      	mov	r3, sp
 8006ee6:	4622      	mov	r2, r4
 8006ee8:	a941      	add	r1, sp, #260	; 0x104
 8006eea:	4630      	mov	r0, r6
 8006eec:	f7fc fd8a 	bl	8003a04 <_scanf_float>
 8006ef0:	e77d      	b.n	8006dee <__ssvfiscanf_r+0x172>
 8006ef2:	89a3      	ldrh	r3, [r4, #12]
 8006ef4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006ef8:	bf18      	it	ne
 8006efa:	f04f 30ff 	movne.w	r0, #4294967295
 8006efe:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8006f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f06:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006f08:	e7f9      	b.n	8006efe <__ssvfiscanf_r+0x282>
 8006f0a:	bf00      	nop
 8006f0c:	08006bc9 	.word	0x08006bc9
 8006f10:	08006c43 	.word	0x08006c43
 8006f14:	0800a2d2 	.word	0x0800a2d2
 8006f18:	08003a05 	.word	0x08003a05

08006f1c <_scanf_chars>:
 8006f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f20:	4615      	mov	r5, r2
 8006f22:	688a      	ldr	r2, [r1, #8]
 8006f24:	4680      	mov	r8, r0
 8006f26:	460c      	mov	r4, r1
 8006f28:	b932      	cbnz	r2, 8006f38 <_scanf_chars+0x1c>
 8006f2a:	698a      	ldr	r2, [r1, #24]
 8006f2c:	2a00      	cmp	r2, #0
 8006f2e:	bf14      	ite	ne
 8006f30:	f04f 32ff 	movne.w	r2, #4294967295
 8006f34:	2201      	moveq	r2, #1
 8006f36:	608a      	str	r2, [r1, #8]
 8006f38:	2600      	movs	r6, #0
 8006f3a:	6822      	ldr	r2, [r4, #0]
 8006f3c:	06d1      	lsls	r1, r2, #27
 8006f3e:	bf5f      	itttt	pl
 8006f40:	681a      	ldrpl	r2, [r3, #0]
 8006f42:	1d11      	addpl	r1, r2, #4
 8006f44:	6019      	strpl	r1, [r3, #0]
 8006f46:	6817      	ldrpl	r7, [r2, #0]
 8006f48:	69a3      	ldr	r3, [r4, #24]
 8006f4a:	b1db      	cbz	r3, 8006f84 <_scanf_chars+0x68>
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d107      	bne.n	8006f60 <_scanf_chars+0x44>
 8006f50:	682b      	ldr	r3, [r5, #0]
 8006f52:	6962      	ldr	r2, [r4, #20]
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	5cd3      	ldrb	r3, [r2, r3]
 8006f58:	b9a3      	cbnz	r3, 8006f84 <_scanf_chars+0x68>
 8006f5a:	2e00      	cmp	r6, #0
 8006f5c:	d131      	bne.n	8006fc2 <_scanf_chars+0xa6>
 8006f5e:	e006      	b.n	8006f6e <_scanf_chars+0x52>
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d007      	beq.n	8006f74 <_scanf_chars+0x58>
 8006f64:	2e00      	cmp	r6, #0
 8006f66:	d12c      	bne.n	8006fc2 <_scanf_chars+0xa6>
 8006f68:	69a3      	ldr	r3, [r4, #24]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d129      	bne.n	8006fc2 <_scanf_chars+0xa6>
 8006f6e:	2001      	movs	r0, #1
 8006f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f74:	f7fe ffd8 	bl	8005f28 <__locale_ctype_ptr>
 8006f78:	682b      	ldr	r3, [r5, #0]
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	4418      	add	r0, r3
 8006f7e:	7843      	ldrb	r3, [r0, #1]
 8006f80:	071b      	lsls	r3, r3, #28
 8006f82:	d4ef      	bmi.n	8006f64 <_scanf_chars+0x48>
 8006f84:	6823      	ldr	r3, [r4, #0]
 8006f86:	3601      	adds	r6, #1
 8006f88:	06da      	lsls	r2, r3, #27
 8006f8a:	bf5e      	ittt	pl
 8006f8c:	682b      	ldrpl	r3, [r5, #0]
 8006f8e:	781b      	ldrbpl	r3, [r3, #0]
 8006f90:	703b      	strbpl	r3, [r7, #0]
 8006f92:	682a      	ldr	r2, [r5, #0]
 8006f94:	686b      	ldr	r3, [r5, #4]
 8006f96:	f102 0201 	add.w	r2, r2, #1
 8006f9a:	602a      	str	r2, [r5, #0]
 8006f9c:	68a2      	ldr	r2, [r4, #8]
 8006f9e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006fa2:	f102 32ff 	add.w	r2, r2, #4294967295
 8006fa6:	606b      	str	r3, [r5, #4]
 8006fa8:	bf58      	it	pl
 8006faa:	3701      	addpl	r7, #1
 8006fac:	60a2      	str	r2, [r4, #8]
 8006fae:	b142      	cbz	r2, 8006fc2 <_scanf_chars+0xa6>
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	dcc9      	bgt.n	8006f48 <_scanf_chars+0x2c>
 8006fb4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006fb8:	4629      	mov	r1, r5
 8006fba:	4640      	mov	r0, r8
 8006fbc:	4798      	blx	r3
 8006fbe:	2800      	cmp	r0, #0
 8006fc0:	d0c2      	beq.n	8006f48 <_scanf_chars+0x2c>
 8006fc2:	6823      	ldr	r3, [r4, #0]
 8006fc4:	f013 0310 	ands.w	r3, r3, #16
 8006fc8:	d105      	bne.n	8006fd6 <_scanf_chars+0xba>
 8006fca:	68e2      	ldr	r2, [r4, #12]
 8006fcc:	3201      	adds	r2, #1
 8006fce:	60e2      	str	r2, [r4, #12]
 8006fd0:	69a2      	ldr	r2, [r4, #24]
 8006fd2:	b102      	cbz	r2, 8006fd6 <_scanf_chars+0xba>
 8006fd4:	703b      	strb	r3, [r7, #0]
 8006fd6:	6923      	ldr	r3, [r4, #16]
 8006fd8:	2000      	movs	r0, #0
 8006fda:	441e      	add	r6, r3
 8006fdc:	6126      	str	r6, [r4, #16]
 8006fde:	e7c7      	b.n	8006f70 <_scanf_chars+0x54>

08006fe0 <_scanf_i>:
 8006fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe4:	460c      	mov	r4, r1
 8006fe6:	469a      	mov	sl, r3
 8006fe8:	4b74      	ldr	r3, [pc, #464]	; (80071bc <_scanf_i+0x1dc>)
 8006fea:	b087      	sub	sp, #28
 8006fec:	4683      	mov	fp, r0
 8006fee:	4616      	mov	r6, r2
 8006ff0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006ff4:	ab03      	add	r3, sp, #12
 8006ff6:	68a7      	ldr	r7, [r4, #8]
 8006ff8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006ffc:	4b70      	ldr	r3, [pc, #448]	; (80071c0 <_scanf_i+0x1e0>)
 8006ffe:	69a1      	ldr	r1, [r4, #24]
 8007000:	4a70      	ldr	r2, [pc, #448]	; (80071c4 <_scanf_i+0x1e4>)
 8007002:	f104 091c 	add.w	r9, r4, #28
 8007006:	2903      	cmp	r1, #3
 8007008:	bf08      	it	eq
 800700a:	461a      	moveq	r2, r3
 800700c:	1e7b      	subs	r3, r7, #1
 800700e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8007012:	bf84      	itt	hi
 8007014:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007018:	60a3      	strhi	r3, [r4, #8]
 800701a:	6823      	ldr	r3, [r4, #0]
 800701c:	bf88      	it	hi
 800701e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007022:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8007026:	6023      	str	r3, [r4, #0]
 8007028:	bf98      	it	ls
 800702a:	2700      	movls	r7, #0
 800702c:	464b      	mov	r3, r9
 800702e:	f04f 0800 	mov.w	r8, #0
 8007032:	9200      	str	r2, [sp, #0]
 8007034:	bf88      	it	hi
 8007036:	197f      	addhi	r7, r7, r5
 8007038:	6831      	ldr	r1, [r6, #0]
 800703a:	9301      	str	r3, [sp, #4]
 800703c:	ab03      	add	r3, sp, #12
 800703e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007042:	2202      	movs	r2, #2
 8007044:	7809      	ldrb	r1, [r1, #0]
 8007046:	f7fe ffa7 	bl	8005f98 <memchr>
 800704a:	9b01      	ldr	r3, [sp, #4]
 800704c:	b330      	cbz	r0, 800709c <_scanf_i+0xbc>
 800704e:	f1b8 0f01 	cmp.w	r8, #1
 8007052:	d15a      	bne.n	800710a <_scanf_i+0x12a>
 8007054:	6862      	ldr	r2, [r4, #4]
 8007056:	b92a      	cbnz	r2, 8007064 <_scanf_i+0x84>
 8007058:	2108      	movs	r1, #8
 800705a:	6822      	ldr	r2, [r4, #0]
 800705c:	6061      	str	r1, [r4, #4]
 800705e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007062:	6022      	str	r2, [r4, #0]
 8007064:	6822      	ldr	r2, [r4, #0]
 8007066:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800706a:	6022      	str	r2, [r4, #0]
 800706c:	68a2      	ldr	r2, [r4, #8]
 800706e:	1e51      	subs	r1, r2, #1
 8007070:	60a1      	str	r1, [r4, #8]
 8007072:	b19a      	cbz	r2, 800709c <_scanf_i+0xbc>
 8007074:	6832      	ldr	r2, [r6, #0]
 8007076:	1c5d      	adds	r5, r3, #1
 8007078:	1c51      	adds	r1, r2, #1
 800707a:	6031      	str	r1, [r6, #0]
 800707c:	7812      	ldrb	r2, [r2, #0]
 800707e:	701a      	strb	r2, [r3, #0]
 8007080:	6873      	ldr	r3, [r6, #4]
 8007082:	3b01      	subs	r3, #1
 8007084:	2b00      	cmp	r3, #0
 8007086:	6073      	str	r3, [r6, #4]
 8007088:	dc07      	bgt.n	800709a <_scanf_i+0xba>
 800708a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800708e:	4631      	mov	r1, r6
 8007090:	4658      	mov	r0, fp
 8007092:	4798      	blx	r3
 8007094:	2800      	cmp	r0, #0
 8007096:	f040 8087 	bne.w	80071a8 <_scanf_i+0x1c8>
 800709a:	462b      	mov	r3, r5
 800709c:	f108 0801 	add.w	r8, r8, #1
 80070a0:	f1b8 0f03 	cmp.w	r8, #3
 80070a4:	d1c8      	bne.n	8007038 <_scanf_i+0x58>
 80070a6:	6862      	ldr	r2, [r4, #4]
 80070a8:	b90a      	cbnz	r2, 80070ae <_scanf_i+0xce>
 80070aa:	220a      	movs	r2, #10
 80070ac:	6062      	str	r2, [r4, #4]
 80070ae:	6862      	ldr	r2, [r4, #4]
 80070b0:	4945      	ldr	r1, [pc, #276]	; (80071c8 <_scanf_i+0x1e8>)
 80070b2:	6960      	ldr	r0, [r4, #20]
 80070b4:	1a89      	subs	r1, r1, r2
 80070b6:	9301      	str	r3, [sp, #4]
 80070b8:	f000 f898 	bl	80071ec <__sccl>
 80070bc:	9b01      	ldr	r3, [sp, #4]
 80070be:	f04f 0800 	mov.w	r8, #0
 80070c2:	461d      	mov	r5, r3
 80070c4:	68a3      	ldr	r3, [r4, #8]
 80070c6:	6822      	ldr	r2, [r4, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d03b      	beq.n	8007144 <_scanf_i+0x164>
 80070cc:	6831      	ldr	r1, [r6, #0]
 80070ce:	6960      	ldr	r0, [r4, #20]
 80070d0:	f891 c000 	ldrb.w	ip, [r1]
 80070d4:	f810 000c 	ldrb.w	r0, [r0, ip]
 80070d8:	2800      	cmp	r0, #0
 80070da:	d033      	beq.n	8007144 <_scanf_i+0x164>
 80070dc:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80070e0:	d121      	bne.n	8007126 <_scanf_i+0x146>
 80070e2:	0510      	lsls	r0, r2, #20
 80070e4:	d51f      	bpl.n	8007126 <_scanf_i+0x146>
 80070e6:	f108 0801 	add.w	r8, r8, #1
 80070ea:	b117      	cbz	r7, 80070f2 <_scanf_i+0x112>
 80070ec:	3301      	adds	r3, #1
 80070ee:	3f01      	subs	r7, #1
 80070f0:	60a3      	str	r3, [r4, #8]
 80070f2:	6873      	ldr	r3, [r6, #4]
 80070f4:	3b01      	subs	r3, #1
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	6073      	str	r3, [r6, #4]
 80070fa:	dd1c      	ble.n	8007136 <_scanf_i+0x156>
 80070fc:	6833      	ldr	r3, [r6, #0]
 80070fe:	3301      	adds	r3, #1
 8007100:	6033      	str	r3, [r6, #0]
 8007102:	68a3      	ldr	r3, [r4, #8]
 8007104:	3b01      	subs	r3, #1
 8007106:	60a3      	str	r3, [r4, #8]
 8007108:	e7dc      	b.n	80070c4 <_scanf_i+0xe4>
 800710a:	f1b8 0f02 	cmp.w	r8, #2
 800710e:	d1ad      	bne.n	800706c <_scanf_i+0x8c>
 8007110:	6822      	ldr	r2, [r4, #0]
 8007112:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8007116:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800711a:	d1bf      	bne.n	800709c <_scanf_i+0xbc>
 800711c:	2110      	movs	r1, #16
 800711e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007122:	6061      	str	r1, [r4, #4]
 8007124:	e7a1      	b.n	800706a <_scanf_i+0x8a>
 8007126:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800712a:	6022      	str	r2, [r4, #0]
 800712c:	780b      	ldrb	r3, [r1, #0]
 800712e:	3501      	adds	r5, #1
 8007130:	f805 3c01 	strb.w	r3, [r5, #-1]
 8007134:	e7dd      	b.n	80070f2 <_scanf_i+0x112>
 8007136:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800713a:	4631      	mov	r1, r6
 800713c:	4658      	mov	r0, fp
 800713e:	4798      	blx	r3
 8007140:	2800      	cmp	r0, #0
 8007142:	d0de      	beq.n	8007102 <_scanf_i+0x122>
 8007144:	6823      	ldr	r3, [r4, #0]
 8007146:	05d9      	lsls	r1, r3, #23
 8007148:	d50c      	bpl.n	8007164 <_scanf_i+0x184>
 800714a:	454d      	cmp	r5, r9
 800714c:	d908      	bls.n	8007160 <_scanf_i+0x180>
 800714e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007152:	1e6f      	subs	r7, r5, #1
 8007154:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007158:	4632      	mov	r2, r6
 800715a:	4658      	mov	r0, fp
 800715c:	4798      	blx	r3
 800715e:	463d      	mov	r5, r7
 8007160:	454d      	cmp	r5, r9
 8007162:	d029      	beq.n	80071b8 <_scanf_i+0x1d8>
 8007164:	6822      	ldr	r2, [r4, #0]
 8007166:	f012 0210 	ands.w	r2, r2, #16
 800716a:	d113      	bne.n	8007194 <_scanf_i+0x1b4>
 800716c:	702a      	strb	r2, [r5, #0]
 800716e:	6863      	ldr	r3, [r4, #4]
 8007170:	4649      	mov	r1, r9
 8007172:	4658      	mov	r0, fp
 8007174:	9e00      	ldr	r6, [sp, #0]
 8007176:	47b0      	blx	r6
 8007178:	f8da 3000 	ldr.w	r3, [sl]
 800717c:	6821      	ldr	r1, [r4, #0]
 800717e:	1d1a      	adds	r2, r3, #4
 8007180:	f8ca 2000 	str.w	r2, [sl]
 8007184:	f011 0f20 	tst.w	r1, #32
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	d010      	beq.n	80071ae <_scanf_i+0x1ce>
 800718c:	6018      	str	r0, [r3, #0]
 800718e:	68e3      	ldr	r3, [r4, #12]
 8007190:	3301      	adds	r3, #1
 8007192:	60e3      	str	r3, [r4, #12]
 8007194:	2000      	movs	r0, #0
 8007196:	eba5 0509 	sub.w	r5, r5, r9
 800719a:	44a8      	add	r8, r5
 800719c:	6925      	ldr	r5, [r4, #16]
 800719e:	4445      	add	r5, r8
 80071a0:	6125      	str	r5, [r4, #16]
 80071a2:	b007      	add	sp, #28
 80071a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071a8:	f04f 0800 	mov.w	r8, #0
 80071ac:	e7ca      	b.n	8007144 <_scanf_i+0x164>
 80071ae:	07ca      	lsls	r2, r1, #31
 80071b0:	bf4c      	ite	mi
 80071b2:	8018      	strhmi	r0, [r3, #0]
 80071b4:	6018      	strpl	r0, [r3, #0]
 80071b6:	e7ea      	b.n	800718e <_scanf_i+0x1ae>
 80071b8:	2001      	movs	r0, #1
 80071ba:	e7f2      	b.n	80071a2 <_scanf_i+0x1c2>
 80071bc:	0800a0c0 	.word	0x0800a0c0
 80071c0:	08004c29 	.word	0x08004c29
 80071c4:	08007369 	.word	0x08007369
 80071c8:	0800a2ed 	.word	0x0800a2ed

080071cc <_sbrk_r>:
 80071cc:	b538      	push	{r3, r4, r5, lr}
 80071ce:	2300      	movs	r3, #0
 80071d0:	4c05      	ldr	r4, [pc, #20]	; (80071e8 <_sbrk_r+0x1c>)
 80071d2:	4605      	mov	r5, r0
 80071d4:	4608      	mov	r0, r1
 80071d6:	6023      	str	r3, [r4, #0]
 80071d8:	f7fb ff78 	bl	80030cc <_sbrk>
 80071dc:	1c43      	adds	r3, r0, #1
 80071de:	d102      	bne.n	80071e6 <_sbrk_r+0x1a>
 80071e0:	6823      	ldr	r3, [r4, #0]
 80071e2:	b103      	cbz	r3, 80071e6 <_sbrk_r+0x1a>
 80071e4:	602b      	str	r3, [r5, #0]
 80071e6:	bd38      	pop	{r3, r4, r5, pc}
 80071e8:	200006ac 	.word	0x200006ac

080071ec <__sccl>:
 80071ec:	b570      	push	{r4, r5, r6, lr}
 80071ee:	780b      	ldrb	r3, [r1, #0]
 80071f0:	1e44      	subs	r4, r0, #1
 80071f2:	2b5e      	cmp	r3, #94	; 0x5e
 80071f4:	bf13      	iteet	ne
 80071f6:	1c4a      	addne	r2, r1, #1
 80071f8:	1c8a      	addeq	r2, r1, #2
 80071fa:	784b      	ldrbeq	r3, [r1, #1]
 80071fc:	2100      	movne	r1, #0
 80071fe:	bf08      	it	eq
 8007200:	2101      	moveq	r1, #1
 8007202:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8007206:	f804 1f01 	strb.w	r1, [r4, #1]!
 800720a:	42ac      	cmp	r4, r5
 800720c:	d1fb      	bne.n	8007206 <__sccl+0x1a>
 800720e:	b913      	cbnz	r3, 8007216 <__sccl+0x2a>
 8007210:	3a01      	subs	r2, #1
 8007212:	4610      	mov	r0, r2
 8007214:	bd70      	pop	{r4, r5, r6, pc}
 8007216:	f081 0401 	eor.w	r4, r1, #1
 800721a:	54c4      	strb	r4, [r0, r3]
 800721c:	1c51      	adds	r1, r2, #1
 800721e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8007222:	1e4e      	subs	r6, r1, #1
 8007224:	2d2d      	cmp	r5, #45	; 0x2d
 8007226:	460a      	mov	r2, r1
 8007228:	d006      	beq.n	8007238 <__sccl+0x4c>
 800722a:	2d5d      	cmp	r5, #93	; 0x5d
 800722c:	d0f1      	beq.n	8007212 <__sccl+0x26>
 800722e:	b90d      	cbnz	r5, 8007234 <__sccl+0x48>
 8007230:	4632      	mov	r2, r6
 8007232:	e7ee      	b.n	8007212 <__sccl+0x26>
 8007234:	462b      	mov	r3, r5
 8007236:	e7f0      	b.n	800721a <__sccl+0x2e>
 8007238:	780e      	ldrb	r6, [r1, #0]
 800723a:	2e5d      	cmp	r6, #93	; 0x5d
 800723c:	d0fa      	beq.n	8007234 <__sccl+0x48>
 800723e:	42b3      	cmp	r3, r6
 8007240:	dcf8      	bgt.n	8007234 <__sccl+0x48>
 8007242:	3301      	adds	r3, #1
 8007244:	429e      	cmp	r6, r3
 8007246:	54c4      	strb	r4, [r0, r3]
 8007248:	dcfb      	bgt.n	8007242 <__sccl+0x56>
 800724a:	3102      	adds	r1, #2
 800724c:	e7e7      	b.n	800721e <__sccl+0x32>

0800724e <strncmp>:
 800724e:	b510      	push	{r4, lr}
 8007250:	b16a      	cbz	r2, 800726e <strncmp+0x20>
 8007252:	3901      	subs	r1, #1
 8007254:	1884      	adds	r4, r0, r2
 8007256:	f810 3b01 	ldrb.w	r3, [r0], #1
 800725a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800725e:	4293      	cmp	r3, r2
 8007260:	d103      	bne.n	800726a <strncmp+0x1c>
 8007262:	42a0      	cmp	r0, r4
 8007264:	d001      	beq.n	800726a <strncmp+0x1c>
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1f5      	bne.n	8007256 <strncmp+0x8>
 800726a:	1a98      	subs	r0, r3, r2
 800726c:	bd10      	pop	{r4, pc}
 800726e:	4610      	mov	r0, r2
 8007270:	e7fc      	b.n	800726c <strncmp+0x1e>

08007272 <_strtoul_l.isra.0>:
 8007272:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007276:	4680      	mov	r8, r0
 8007278:	4689      	mov	r9, r1
 800727a:	4692      	mov	sl, r2
 800727c:	461e      	mov	r6, r3
 800727e:	460f      	mov	r7, r1
 8007280:	463d      	mov	r5, r7
 8007282:	9808      	ldr	r0, [sp, #32]
 8007284:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007288:	f7fe fe4a 	bl	8005f20 <__locale_ctype_ptr_l>
 800728c:	4420      	add	r0, r4
 800728e:	7843      	ldrb	r3, [r0, #1]
 8007290:	f013 0308 	ands.w	r3, r3, #8
 8007294:	d130      	bne.n	80072f8 <_strtoul_l.isra.0+0x86>
 8007296:	2c2d      	cmp	r4, #45	; 0x2d
 8007298:	d130      	bne.n	80072fc <_strtoul_l.isra.0+0x8a>
 800729a:	2101      	movs	r1, #1
 800729c:	787c      	ldrb	r4, [r7, #1]
 800729e:	1cbd      	adds	r5, r7, #2
 80072a0:	2e00      	cmp	r6, #0
 80072a2:	d05c      	beq.n	800735e <_strtoul_l.isra.0+0xec>
 80072a4:	2e10      	cmp	r6, #16
 80072a6:	d109      	bne.n	80072bc <_strtoul_l.isra.0+0x4a>
 80072a8:	2c30      	cmp	r4, #48	; 0x30
 80072aa:	d107      	bne.n	80072bc <_strtoul_l.isra.0+0x4a>
 80072ac:	782b      	ldrb	r3, [r5, #0]
 80072ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80072b2:	2b58      	cmp	r3, #88	; 0x58
 80072b4:	d14e      	bne.n	8007354 <_strtoul_l.isra.0+0xe2>
 80072b6:	2610      	movs	r6, #16
 80072b8:	786c      	ldrb	r4, [r5, #1]
 80072ba:	3502      	adds	r5, #2
 80072bc:	f04f 32ff 	mov.w	r2, #4294967295
 80072c0:	fbb2 f2f6 	udiv	r2, r2, r6
 80072c4:	2300      	movs	r3, #0
 80072c6:	fb06 fc02 	mul.w	ip, r6, r2
 80072ca:	4618      	mov	r0, r3
 80072cc:	ea6f 0c0c 	mvn.w	ip, ip
 80072d0:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80072d4:	2f09      	cmp	r7, #9
 80072d6:	d817      	bhi.n	8007308 <_strtoul_l.isra.0+0x96>
 80072d8:	463c      	mov	r4, r7
 80072da:	42a6      	cmp	r6, r4
 80072dc:	dd23      	ble.n	8007326 <_strtoul_l.isra.0+0xb4>
 80072de:	2b00      	cmp	r3, #0
 80072e0:	db1e      	blt.n	8007320 <_strtoul_l.isra.0+0xae>
 80072e2:	4282      	cmp	r2, r0
 80072e4:	d31c      	bcc.n	8007320 <_strtoul_l.isra.0+0xae>
 80072e6:	d101      	bne.n	80072ec <_strtoul_l.isra.0+0x7a>
 80072e8:	45a4      	cmp	ip, r4
 80072ea:	db19      	blt.n	8007320 <_strtoul_l.isra.0+0xae>
 80072ec:	2301      	movs	r3, #1
 80072ee:	fb00 4006 	mla	r0, r0, r6, r4
 80072f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072f6:	e7eb      	b.n	80072d0 <_strtoul_l.isra.0+0x5e>
 80072f8:	462f      	mov	r7, r5
 80072fa:	e7c1      	b.n	8007280 <_strtoul_l.isra.0+0xe>
 80072fc:	2c2b      	cmp	r4, #43	; 0x2b
 80072fe:	bf04      	itt	eq
 8007300:	1cbd      	addeq	r5, r7, #2
 8007302:	787c      	ldrbeq	r4, [r7, #1]
 8007304:	4619      	mov	r1, r3
 8007306:	e7cb      	b.n	80072a0 <_strtoul_l.isra.0+0x2e>
 8007308:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800730c:	2f19      	cmp	r7, #25
 800730e:	d801      	bhi.n	8007314 <_strtoul_l.isra.0+0xa2>
 8007310:	3c37      	subs	r4, #55	; 0x37
 8007312:	e7e2      	b.n	80072da <_strtoul_l.isra.0+0x68>
 8007314:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007318:	2f19      	cmp	r7, #25
 800731a:	d804      	bhi.n	8007326 <_strtoul_l.isra.0+0xb4>
 800731c:	3c57      	subs	r4, #87	; 0x57
 800731e:	e7dc      	b.n	80072da <_strtoul_l.isra.0+0x68>
 8007320:	f04f 33ff 	mov.w	r3, #4294967295
 8007324:	e7e5      	b.n	80072f2 <_strtoul_l.isra.0+0x80>
 8007326:	2b00      	cmp	r3, #0
 8007328:	da09      	bge.n	800733e <_strtoul_l.isra.0+0xcc>
 800732a:	2322      	movs	r3, #34	; 0x22
 800732c:	f04f 30ff 	mov.w	r0, #4294967295
 8007330:	f8c8 3000 	str.w	r3, [r8]
 8007334:	f1ba 0f00 	cmp.w	sl, #0
 8007338:	d107      	bne.n	800734a <_strtoul_l.isra.0+0xd8>
 800733a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800733e:	b101      	cbz	r1, 8007342 <_strtoul_l.isra.0+0xd0>
 8007340:	4240      	negs	r0, r0
 8007342:	f1ba 0f00 	cmp.w	sl, #0
 8007346:	d0f8      	beq.n	800733a <_strtoul_l.isra.0+0xc8>
 8007348:	b10b      	cbz	r3, 800734e <_strtoul_l.isra.0+0xdc>
 800734a:	f105 39ff 	add.w	r9, r5, #4294967295
 800734e:	f8ca 9000 	str.w	r9, [sl]
 8007352:	e7f2      	b.n	800733a <_strtoul_l.isra.0+0xc8>
 8007354:	2430      	movs	r4, #48	; 0x30
 8007356:	2e00      	cmp	r6, #0
 8007358:	d1b0      	bne.n	80072bc <_strtoul_l.isra.0+0x4a>
 800735a:	2608      	movs	r6, #8
 800735c:	e7ae      	b.n	80072bc <_strtoul_l.isra.0+0x4a>
 800735e:	2c30      	cmp	r4, #48	; 0x30
 8007360:	d0a4      	beq.n	80072ac <_strtoul_l.isra.0+0x3a>
 8007362:	260a      	movs	r6, #10
 8007364:	e7aa      	b.n	80072bc <_strtoul_l.isra.0+0x4a>
	...

08007368 <_strtoul_r>:
 8007368:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800736a:	4c06      	ldr	r4, [pc, #24]	; (8007384 <_strtoul_r+0x1c>)
 800736c:	4d06      	ldr	r5, [pc, #24]	; (8007388 <_strtoul_r+0x20>)
 800736e:	6824      	ldr	r4, [r4, #0]
 8007370:	6a24      	ldr	r4, [r4, #32]
 8007372:	2c00      	cmp	r4, #0
 8007374:	bf08      	it	eq
 8007376:	462c      	moveq	r4, r5
 8007378:	9400      	str	r4, [sp, #0]
 800737a:	f7ff ff7a 	bl	8007272 <_strtoul_l.isra.0>
 800737e:	b003      	add	sp, #12
 8007380:	bd30      	pop	{r4, r5, pc}
 8007382:	bf00      	nop
 8007384:	20000004 	.word	0x20000004
 8007388:	20000068 	.word	0x20000068

0800738c <__submore>:
 800738c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007390:	460c      	mov	r4, r1
 8007392:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007394:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007398:	4299      	cmp	r1, r3
 800739a:	d11b      	bne.n	80073d4 <__submore+0x48>
 800739c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80073a0:	f7ff fa66 	bl	8006870 <_malloc_r>
 80073a4:	b918      	cbnz	r0, 80073ae <__submore+0x22>
 80073a6:	f04f 30ff 	mov.w	r0, #4294967295
 80073aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073b2:	63a3      	str	r3, [r4, #56]	; 0x38
 80073b4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80073b8:	6360      	str	r0, [r4, #52]	; 0x34
 80073ba:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80073be:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80073c2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80073c6:	7043      	strb	r3, [r0, #1]
 80073c8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80073cc:	7003      	strb	r3, [r0, #0]
 80073ce:	6020      	str	r0, [r4, #0]
 80073d0:	2000      	movs	r0, #0
 80073d2:	e7ea      	b.n	80073aa <__submore+0x1e>
 80073d4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80073d6:	0077      	lsls	r7, r6, #1
 80073d8:	463a      	mov	r2, r7
 80073da:	f000 f843 	bl	8007464 <_realloc_r>
 80073de:	4605      	mov	r5, r0
 80073e0:	2800      	cmp	r0, #0
 80073e2:	d0e0      	beq.n	80073a6 <__submore+0x1a>
 80073e4:	eb00 0806 	add.w	r8, r0, r6
 80073e8:	4601      	mov	r1, r0
 80073ea:	4632      	mov	r2, r6
 80073ec:	4640      	mov	r0, r8
 80073ee:	f7fe fde1 	bl	8005fb4 <memcpy>
 80073f2:	f8c4 8000 	str.w	r8, [r4]
 80073f6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80073fa:	e7e9      	b.n	80073d0 <__submore+0x44>

080073fc <__ascii_wctomb>:
 80073fc:	b149      	cbz	r1, 8007412 <__ascii_wctomb+0x16>
 80073fe:	2aff      	cmp	r2, #255	; 0xff
 8007400:	bf8b      	itete	hi
 8007402:	238a      	movhi	r3, #138	; 0x8a
 8007404:	700a      	strbls	r2, [r1, #0]
 8007406:	6003      	strhi	r3, [r0, #0]
 8007408:	2001      	movls	r0, #1
 800740a:	bf88      	it	hi
 800740c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007410:	4770      	bx	lr
 8007412:	4608      	mov	r0, r1
 8007414:	4770      	bx	lr

08007416 <__retarget_lock_acquire_recursive>:
 8007416:	4770      	bx	lr

08007418 <__retarget_lock_release_recursive>:
 8007418:	4770      	bx	lr

0800741a <memmove>:
 800741a:	4288      	cmp	r0, r1
 800741c:	b510      	push	{r4, lr}
 800741e:	eb01 0302 	add.w	r3, r1, r2
 8007422:	d807      	bhi.n	8007434 <memmove+0x1a>
 8007424:	1e42      	subs	r2, r0, #1
 8007426:	4299      	cmp	r1, r3
 8007428:	d00a      	beq.n	8007440 <memmove+0x26>
 800742a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800742e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007432:	e7f8      	b.n	8007426 <memmove+0xc>
 8007434:	4283      	cmp	r3, r0
 8007436:	d9f5      	bls.n	8007424 <memmove+0xa>
 8007438:	1881      	adds	r1, r0, r2
 800743a:	1ad2      	subs	r2, r2, r3
 800743c:	42d3      	cmn	r3, r2
 800743e:	d100      	bne.n	8007442 <memmove+0x28>
 8007440:	bd10      	pop	{r4, pc}
 8007442:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007446:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800744a:	e7f7      	b.n	800743c <memmove+0x22>

0800744c <__malloc_lock>:
 800744c:	4801      	ldr	r0, [pc, #4]	; (8007454 <__malloc_lock+0x8>)
 800744e:	f7ff bfe2 	b.w	8007416 <__retarget_lock_acquire_recursive>
 8007452:	bf00      	nop
 8007454:	200006b4 	.word	0x200006b4

08007458 <__malloc_unlock>:
 8007458:	4801      	ldr	r0, [pc, #4]	; (8007460 <__malloc_unlock+0x8>)
 800745a:	f7ff bfdd 	b.w	8007418 <__retarget_lock_release_recursive>
 800745e:	bf00      	nop
 8007460:	200006b4 	.word	0x200006b4

08007464 <_realloc_r>:
 8007464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007466:	4607      	mov	r7, r0
 8007468:	4614      	mov	r4, r2
 800746a:	460e      	mov	r6, r1
 800746c:	b921      	cbnz	r1, 8007478 <_realloc_r+0x14>
 800746e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007472:	4611      	mov	r1, r2
 8007474:	f7ff b9fc 	b.w	8006870 <_malloc_r>
 8007478:	b922      	cbnz	r2, 8007484 <_realloc_r+0x20>
 800747a:	f7ff f9ad 	bl	80067d8 <_free_r>
 800747e:	4625      	mov	r5, r4
 8007480:	4628      	mov	r0, r5
 8007482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007484:	f000 f814 	bl	80074b0 <_malloc_usable_size_r>
 8007488:	42a0      	cmp	r0, r4
 800748a:	d20f      	bcs.n	80074ac <_realloc_r+0x48>
 800748c:	4621      	mov	r1, r4
 800748e:	4638      	mov	r0, r7
 8007490:	f7ff f9ee 	bl	8006870 <_malloc_r>
 8007494:	4605      	mov	r5, r0
 8007496:	2800      	cmp	r0, #0
 8007498:	d0f2      	beq.n	8007480 <_realloc_r+0x1c>
 800749a:	4631      	mov	r1, r6
 800749c:	4622      	mov	r2, r4
 800749e:	f7fe fd89 	bl	8005fb4 <memcpy>
 80074a2:	4631      	mov	r1, r6
 80074a4:	4638      	mov	r0, r7
 80074a6:	f7ff f997 	bl	80067d8 <_free_r>
 80074aa:	e7e9      	b.n	8007480 <_realloc_r+0x1c>
 80074ac:	4635      	mov	r5, r6
 80074ae:	e7e7      	b.n	8007480 <_realloc_r+0x1c>

080074b0 <_malloc_usable_size_r>:
 80074b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074b4:	1f18      	subs	r0, r3, #4
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	bfbc      	itt	lt
 80074ba:	580b      	ldrlt	r3, [r1, r0]
 80074bc:	18c0      	addlt	r0, r0, r3
 80074be:	4770      	bx	lr

080074c0 <_init>:
 80074c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074c2:	bf00      	nop
 80074c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074c6:	bc08      	pop	{r3}
 80074c8:	469e      	mov	lr, r3
 80074ca:	4770      	bx	lr

080074cc <_fini>:
 80074cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ce:	bf00      	nop
 80074d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074d2:	bc08      	pop	{r3}
 80074d4:	469e      	mov	lr, r3
 80074d6:	4770      	bx	lr
