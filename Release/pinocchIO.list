
pinocchIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d00  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f7c  08006e30  08006e30  00016e30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009dac  08009dac  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08009dac  08009dac  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009dac  08009dac  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009dac  08009dac  00019dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009db0  08009db0  00019db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08009db4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  200001d4  08009f88  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  20000554  08009f88  00020554  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000063a7  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000e8f  00000000  00000000  000265a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000235d  00000000  00000000  00027433  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000004f8  00000000  00000000  00029790  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000558  00000000  00000000  00029c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001e3f  00000000  00000000  0002a1e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00001a49  00000000  00000000  0002c01f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002da68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021e0  00000000  00000000  0002dae4  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      000000a9  00000000  00000000  0002fcc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200001d4 	.word	0x200001d4
 800014c:	00000000 	.word	0x00000000
 8000150:	08006e18 	.word	0x08006e18

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200001d8 	.word	0x200001d8
 800016c:	08006e18 	.word	0x08006e18

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002be:	f1a4 0401 	sub.w	r4, r4, #1
 80002c2:	d1e9      	bne.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpun>:
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	d102      	bne.n	8000a3c <__aeabi_dcmpun+0x10>
 8000a36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3a:	d10a      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x20>
 8000a46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4a:	d102      	bne.n	8000a52 <__aeabi_dcmpun+0x26>
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	f04f 0001 	mov.w	r0, #1
 8000a56:	4770      	bx	lr

08000a58 <__aeabi_d2iz>:
 8000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a60:	d215      	bcs.n	8000a8e <__aeabi_d2iz+0x36>
 8000a62:	d511      	bpl.n	8000a88 <__aeabi_d2iz+0x30>
 8000a64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a6c:	d912      	bls.n	8000a94 <__aeabi_d2iz+0x3c>
 8000a6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	bf18      	it	ne
 8000a84:	4240      	negne	r0, r0
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d105      	bne.n	8000aa0 <__aeabi_d2iz+0x48>
 8000a94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a98:	bf08      	it	eq
 8000a9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a9e:	4770      	bx	lr
 8000aa0:	f04f 0000 	mov.w	r0, #0
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_d2uiz>:
 8000aa8:	004a      	lsls	r2, r1, #1
 8000aaa:	d211      	bcs.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d211      	bcs.n	8000ad6 <__aeabi_d2uiz+0x2e>
 8000ab2:	d50d      	bpl.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d40e      	bmi.n	8000adc <__aeabi_d2uiz+0x34>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	fa23 f002 	lsr.w	r0, r3, r2
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_d2uiz+0x3a>
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0000 	mov.w	r0, #0
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_d2f>:
 8000ae8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af0:	bf24      	itt	cs
 8000af2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000af6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000afa:	d90d      	bls.n	8000b18 <__aeabi_d2f+0x30>
 8000afc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b10:	bf08      	it	eq
 8000b12:	f020 0001 	biceq.w	r0, r0, #1
 8000b16:	4770      	bx	lr
 8000b18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b1c:	d121      	bne.n	8000b62 <__aeabi_d2f+0x7a>
 8000b1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b22:	bfbc      	itt	lt
 8000b24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b28:	4770      	bxlt	lr
 8000b2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b32:	f1c2 0218 	rsb	r2, r2, #24
 8000b36:	f1c2 0c20 	rsb	ip, r2, #32
 8000b3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b42:	bf18      	it	ne
 8000b44:	f040 0001 	orrne.w	r0, r0, #1
 8000b48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b54:	ea40 000c 	orr.w	r0, r0, ip
 8000b58:	fa23 f302 	lsr.w	r3, r3, r2
 8000b5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b60:	e7cc      	b.n	8000afc <__aeabi_d2f+0x14>
 8000b62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b66:	d107      	bne.n	8000b78 <__aeabi_d2f+0x90>
 8000b68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b6c:	bf1e      	ittt	ne
 8000b6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b76:	4770      	bxne	lr
 8000b78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <__aeabi_frsub>:
 8000b88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b8c:	e002      	b.n	8000b94 <__addsf3>
 8000b8e:	bf00      	nop

08000b90 <__aeabi_fsub>:
 8000b90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b94 <__addsf3>:
 8000b94:	0042      	lsls	r2, r0, #1
 8000b96:	bf1f      	itttt	ne
 8000b98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b9c:	ea92 0f03 	teqne	r2, r3
 8000ba0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ba4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba8:	d06a      	beq.n	8000c80 <__addsf3+0xec>
 8000baa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bb2:	bfc1      	itttt	gt
 8000bb4:	18d2      	addgt	r2, r2, r3
 8000bb6:	4041      	eorgt	r1, r0
 8000bb8:	4048      	eorgt	r0, r1
 8000bba:	4041      	eorgt	r1, r0
 8000bbc:	bfb8      	it	lt
 8000bbe:	425b      	neglt	r3, r3
 8000bc0:	2b19      	cmp	r3, #25
 8000bc2:	bf88      	it	hi
 8000bc4:	4770      	bxhi	lr
 8000bc6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bda:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bde:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4249      	negne	r1, r1
 8000be6:	ea92 0f03 	teq	r2, r3
 8000bea:	d03f      	beq.n	8000c6c <__addsf3+0xd8>
 8000bec:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bf4:	eb10 000c 	adds.w	r0, r0, ip
 8000bf8:	f1c3 0320 	rsb	r3, r3, #32
 8000bfc:	fa01 f103 	lsl.w	r1, r1, r3
 8000c00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c04:	d502      	bpl.n	8000c0c <__addsf3+0x78>
 8000c06:	4249      	negs	r1, r1
 8000c08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c10:	d313      	bcc.n	8000c3a <__addsf3+0xa6>
 8000c12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c16:	d306      	bcc.n	8000c26 <__addsf3+0x92>
 8000c18:	0840      	lsrs	r0, r0, #1
 8000c1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c1e:	f102 0201 	add.w	r2, r2, #1
 8000c22:	2afe      	cmp	r2, #254	; 0xfe
 8000c24:	d251      	bcs.n	8000cca <__addsf3+0x136>
 8000c26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c2e:	bf08      	it	eq
 8000c30:	f020 0001 	biceq.w	r0, r0, #1
 8000c34:	ea40 0003 	orr.w	r0, r0, r3
 8000c38:	4770      	bx	lr
 8000c3a:	0049      	lsls	r1, r1, #1
 8000c3c:	eb40 0000 	adc.w	r0, r0, r0
 8000c40:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c44:	f1a2 0201 	sub.w	r2, r2, #1
 8000c48:	d1ed      	bne.n	8000c26 <__addsf3+0x92>
 8000c4a:	fab0 fc80 	clz	ip, r0
 8000c4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c52:	ebb2 020c 	subs.w	r2, r2, ip
 8000c56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c5a:	bfaa      	itet	ge
 8000c5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c60:	4252      	neglt	r2, r2
 8000c62:	4318      	orrge	r0, r3
 8000c64:	bfbc      	itt	lt
 8000c66:	40d0      	lsrlt	r0, r2
 8000c68:	4318      	orrlt	r0, r3
 8000c6a:	4770      	bx	lr
 8000c6c:	f092 0f00 	teq	r2, #0
 8000c70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c74:	bf06      	itte	eq
 8000c76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c7a:	3201      	addeq	r2, #1
 8000c7c:	3b01      	subne	r3, #1
 8000c7e:	e7b5      	b.n	8000bec <__addsf3+0x58>
 8000c80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c88:	bf18      	it	ne
 8000c8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c8e:	d021      	beq.n	8000cd4 <__addsf3+0x140>
 8000c90:	ea92 0f03 	teq	r2, r3
 8000c94:	d004      	beq.n	8000ca0 <__addsf3+0x10c>
 8000c96:	f092 0f00 	teq	r2, #0
 8000c9a:	bf08      	it	eq
 8000c9c:	4608      	moveq	r0, r1
 8000c9e:	4770      	bx	lr
 8000ca0:	ea90 0f01 	teq	r0, r1
 8000ca4:	bf1c      	itt	ne
 8000ca6:	2000      	movne	r0, #0
 8000ca8:	4770      	bxne	lr
 8000caa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cae:	d104      	bne.n	8000cba <__addsf3+0x126>
 8000cb0:	0040      	lsls	r0, r0, #1
 8000cb2:	bf28      	it	cs
 8000cb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cb8:	4770      	bx	lr
 8000cba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cbe:	bf3c      	itt	cc
 8000cc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bxcc	lr
 8000cc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd2:	4770      	bx	lr
 8000cd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cd8:	bf16      	itet	ne
 8000cda:	4608      	movne	r0, r1
 8000cdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ce0:	4601      	movne	r1, r0
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	bf06      	itte	eq
 8000ce6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cea:	ea90 0f01 	teqeq	r0, r1
 8000cee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cf2:	4770      	bx	lr

08000cf4 <__aeabi_ui2f>:
 8000cf4:	f04f 0300 	mov.w	r3, #0
 8000cf8:	e004      	b.n	8000d04 <__aeabi_i2f+0x8>
 8000cfa:	bf00      	nop

08000cfc <__aeabi_i2f>:
 8000cfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d00:	bf48      	it	mi
 8000d02:	4240      	negmi	r0, r0
 8000d04:	ea5f 0c00 	movs.w	ip, r0
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d10:	4601      	mov	r1, r0
 8000d12:	f04f 0000 	mov.w	r0, #0
 8000d16:	e01c      	b.n	8000d52 <__aeabi_l2f+0x2a>

08000d18 <__aeabi_ul2f>:
 8000d18:	ea50 0201 	orrs.w	r2, r0, r1
 8000d1c:	bf08      	it	eq
 8000d1e:	4770      	bxeq	lr
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	e00a      	b.n	8000d3c <__aeabi_l2f+0x14>
 8000d26:	bf00      	nop

08000d28 <__aeabi_l2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d34:	d502      	bpl.n	8000d3c <__aeabi_l2f+0x14>
 8000d36:	4240      	negs	r0, r0
 8000d38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3c:	ea5f 0c01 	movs.w	ip, r1
 8000d40:	bf02      	ittt	eq
 8000d42:	4684      	moveq	ip, r0
 8000d44:	4601      	moveq	r1, r0
 8000d46:	2000      	moveq	r0, #0
 8000d48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d4c:	bf08      	it	eq
 8000d4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d56:	fabc f28c 	clz	r2, ip
 8000d5a:	3a08      	subs	r2, #8
 8000d5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d60:	db10      	blt.n	8000d84 <__aeabi_l2f+0x5c>
 8000d62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d66:	4463      	add	r3, ip
 8000d68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d74:	fa20 f202 	lsr.w	r2, r0, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	f020 0001 	biceq.w	r0, r0, #1
 8000d82:	4770      	bx	lr
 8000d84:	f102 0220 	add.w	r2, r2, #32
 8000d88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d8c:	f1c2 0220 	rsb	r2, r2, #32
 8000d90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d94:	fa21 f202 	lsr.w	r2, r1, r2
 8000d98:	eb43 0002 	adc.w	r0, r3, r2
 8000d9c:	bf08      	it	eq
 8000d9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da2:	4770      	bx	lr

08000da4 <__aeabi_fmul>:
 8000da4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000da8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dac:	bf1e      	ittt	ne
 8000dae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000db2:	ea92 0f0c 	teqne	r2, ip
 8000db6:	ea93 0f0c 	teqne	r3, ip
 8000dba:	d06f      	beq.n	8000e9c <__aeabi_fmul+0xf8>
 8000dbc:	441a      	add	r2, r3
 8000dbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000dc2:	0240      	lsls	r0, r0, #9
 8000dc4:	bf18      	it	ne
 8000dc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dca:	d01e      	beq.n	8000e0a <__aeabi_fmul+0x66>
 8000dcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000ddc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000de0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000de4:	bf3e      	ittt	cc
 8000de6:	0049      	lslcc	r1, r1, #1
 8000de8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dec:	005b      	lslcc	r3, r3, #1
 8000dee:	ea40 0001 	orr.w	r0, r0, r1
 8000df2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000df6:	2afd      	cmp	r2, #253	; 0xfd
 8000df8:	d81d      	bhi.n	8000e36 <__aeabi_fmul+0x92>
 8000dfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e02:	bf08      	it	eq
 8000e04:	f020 0001 	biceq.w	r0, r0, #1
 8000e08:	4770      	bx	lr
 8000e0a:	f090 0f00 	teq	r0, #0
 8000e0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e12:	bf08      	it	eq
 8000e14:	0249      	lsleq	r1, r1, #9
 8000e16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e1e:	3a7f      	subs	r2, #127	; 0x7f
 8000e20:	bfc2      	ittt	gt
 8000e22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e2a:	4770      	bxgt	lr
 8000e2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	3a01      	subs	r2, #1
 8000e36:	dc5d      	bgt.n	8000ef4 <__aeabi_fmul+0x150>
 8000e38:	f112 0f19 	cmn.w	r2, #25
 8000e3c:	bfdc      	itt	le
 8000e3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e42:	4770      	bxle	lr
 8000e44:	f1c2 0200 	rsb	r2, r2, #0
 8000e48:	0041      	lsls	r1, r0, #1
 8000e4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e4e:	f1c2 0220 	rsb	r2, r2, #32
 8000e52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e5a:	f140 0000 	adc.w	r0, r0, #0
 8000e5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e62:	bf08      	it	eq
 8000e64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e68:	4770      	bx	lr
 8000e6a:	f092 0f00 	teq	r2, #0
 8000e6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e72:	bf02      	ittt	eq
 8000e74:	0040      	lsleq	r0, r0, #1
 8000e76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e7a:	3a01      	subeq	r2, #1
 8000e7c:	d0f9      	beq.n	8000e72 <__aeabi_fmul+0xce>
 8000e7e:	ea40 000c 	orr.w	r0, r0, ip
 8000e82:	f093 0f00 	teq	r3, #0
 8000e86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0049      	lsleq	r1, r1, #1
 8000e8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e92:	3b01      	subeq	r3, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xe6>
 8000e96:	ea41 010c 	orr.w	r1, r1, ip
 8000e9a:	e78f      	b.n	8000dbc <__aeabi_fmul+0x18>
 8000e9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ea0:	ea92 0f0c 	teq	r2, ip
 8000ea4:	bf18      	it	ne
 8000ea6:	ea93 0f0c 	teqne	r3, ip
 8000eaa:	d00a      	beq.n	8000ec2 <__aeabi_fmul+0x11e>
 8000eac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000eb0:	bf18      	it	ne
 8000eb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eb6:	d1d8      	bne.n	8000e6a <__aeabi_fmul+0xc6>
 8000eb8:	ea80 0001 	eor.w	r0, r0, r1
 8000ebc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	bf17      	itett	ne
 8000ec8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ecc:	4608      	moveq	r0, r1
 8000ece:	f091 0f00 	teqne	r1, #0
 8000ed2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ed6:	d014      	beq.n	8000f02 <__aeabi_fmul+0x15e>
 8000ed8:	ea92 0f0c 	teq	r2, ip
 8000edc:	d101      	bne.n	8000ee2 <__aeabi_fmul+0x13e>
 8000ede:	0242      	lsls	r2, r0, #9
 8000ee0:	d10f      	bne.n	8000f02 <__aeabi_fmul+0x15e>
 8000ee2:	ea93 0f0c 	teq	r3, ip
 8000ee6:	d103      	bne.n	8000ef0 <__aeabi_fmul+0x14c>
 8000ee8:	024b      	lsls	r3, r1, #9
 8000eea:	bf18      	it	ne
 8000eec:	4608      	movne	r0, r1
 8000eee:	d108      	bne.n	8000f02 <__aeabi_fmul+0x15e>
 8000ef0:	ea80 0001 	eor.w	r0, r0, r1
 8000ef4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ef8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000efc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f00:	4770      	bx	lr
 8000f02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f0a:	4770      	bx	lr

08000f0c <__aeabi_fdiv>:
 8000f0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f14:	bf1e      	ittt	ne
 8000f16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f1a:	ea92 0f0c 	teqne	r2, ip
 8000f1e:	ea93 0f0c 	teqne	r3, ip
 8000f22:	d069      	beq.n	8000ff8 <__aeabi_fdiv+0xec>
 8000f24:	eba2 0203 	sub.w	r2, r2, r3
 8000f28:	ea80 0c01 	eor.w	ip, r0, r1
 8000f2c:	0249      	lsls	r1, r1, #9
 8000f2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f32:	d037      	beq.n	8000fa4 <__aeabi_fdiv+0x98>
 8000f34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f44:	428b      	cmp	r3, r1
 8000f46:	bf38      	it	cc
 8000f48:	005b      	lslcc	r3, r3, #1
 8000f4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f52:	428b      	cmp	r3, r1
 8000f54:	bf24      	itt	cs
 8000f56:	1a5b      	subcs	r3, r3, r1
 8000f58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f60:	bf24      	itt	cs
 8000f62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f6e:	bf24      	itt	cs
 8000f70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f7c:	bf24      	itt	cs
 8000f7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	bf18      	it	ne
 8000f8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f8e:	d1e0      	bne.n	8000f52 <__aeabi_fdiv+0x46>
 8000f90:	2afd      	cmp	r2, #253	; 0xfd
 8000f92:	f63f af50 	bhi.w	8000e36 <__aeabi_fmul+0x92>
 8000f96:	428b      	cmp	r3, r1
 8000f98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f9c:	bf08      	it	eq
 8000f9e:	f020 0001 	biceq.w	r0, r0, #1
 8000fa2:	4770      	bx	lr
 8000fa4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fa8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fac:	327f      	adds	r2, #127	; 0x7f
 8000fae:	bfc2      	ittt	gt
 8000fb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fb8:	4770      	bxgt	lr
 8000fba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fbe:	f04f 0300 	mov.w	r3, #0
 8000fc2:	3a01      	subs	r2, #1
 8000fc4:	e737      	b.n	8000e36 <__aeabi_fmul+0x92>
 8000fc6:	f092 0f00 	teq	r2, #0
 8000fca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fce:	bf02      	ittt	eq
 8000fd0:	0040      	lsleq	r0, r0, #1
 8000fd2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fd6:	3a01      	subeq	r2, #1
 8000fd8:	d0f9      	beq.n	8000fce <__aeabi_fdiv+0xc2>
 8000fda:	ea40 000c 	orr.w	r0, r0, ip
 8000fde:	f093 0f00 	teq	r3, #0
 8000fe2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0049      	lsleq	r1, r1, #1
 8000fea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fee:	3b01      	subeq	r3, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xda>
 8000ff2:	ea41 010c 	orr.w	r1, r1, ip
 8000ff6:	e795      	b.n	8000f24 <__aeabi_fdiv+0x18>
 8000ff8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ffc:	ea92 0f0c 	teq	r2, ip
 8001000:	d108      	bne.n	8001014 <__aeabi_fdiv+0x108>
 8001002:	0242      	lsls	r2, r0, #9
 8001004:	f47f af7d 	bne.w	8000f02 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	f47f af70 	bne.w	8000ef0 <__aeabi_fmul+0x14c>
 8001010:	4608      	mov	r0, r1
 8001012:	e776      	b.n	8000f02 <__aeabi_fmul+0x15e>
 8001014:	ea93 0f0c 	teq	r3, ip
 8001018:	d104      	bne.n	8001024 <__aeabi_fdiv+0x118>
 800101a:	024b      	lsls	r3, r1, #9
 800101c:	f43f af4c 	beq.w	8000eb8 <__aeabi_fmul+0x114>
 8001020:	4608      	mov	r0, r1
 8001022:	e76e      	b.n	8000f02 <__aeabi_fmul+0x15e>
 8001024:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001028:	bf18      	it	ne
 800102a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800102e:	d1ca      	bne.n	8000fc6 <__aeabi_fdiv+0xba>
 8001030:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001034:	f47f af5c 	bne.w	8000ef0 <__aeabi_fmul+0x14c>
 8001038:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800103c:	f47f af3c 	bne.w	8000eb8 <__aeabi_fmul+0x114>
 8001040:	e75f      	b.n	8000f02 <__aeabi_fmul+0x15e>
 8001042:	bf00      	nop

08001044 <__gesf2>:
 8001044:	f04f 3cff 	mov.w	ip, #4294967295
 8001048:	e006      	b.n	8001058 <__cmpsf2+0x4>
 800104a:	bf00      	nop

0800104c <__lesf2>:
 800104c:	f04f 0c01 	mov.w	ip, #1
 8001050:	e002      	b.n	8001058 <__cmpsf2+0x4>
 8001052:	bf00      	nop

08001054 <__cmpsf2>:
 8001054:	f04f 0c01 	mov.w	ip, #1
 8001058:	f84d cd04 	str.w	ip, [sp, #-4]!
 800105c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001060:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001064:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001068:	bf18      	it	ne
 800106a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800106e:	d011      	beq.n	8001094 <__cmpsf2+0x40>
 8001070:	b001      	add	sp, #4
 8001072:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001076:	bf18      	it	ne
 8001078:	ea90 0f01 	teqne	r0, r1
 800107c:	bf58      	it	pl
 800107e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001082:	bf88      	it	hi
 8001084:	17c8      	asrhi	r0, r1, #31
 8001086:	bf38      	it	cc
 8001088:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800108c:	bf18      	it	ne
 800108e:	f040 0001 	orrne.w	r0, r0, #1
 8001092:	4770      	bx	lr
 8001094:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001098:	d102      	bne.n	80010a0 <__cmpsf2+0x4c>
 800109a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800109e:	d105      	bne.n	80010ac <__cmpsf2+0x58>
 80010a0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010a4:	d1e4      	bne.n	8001070 <__cmpsf2+0x1c>
 80010a6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010aa:	d0e1      	beq.n	8001070 <__cmpsf2+0x1c>
 80010ac:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop

080010b4 <__aeabi_cfrcmple>:
 80010b4:	4684      	mov	ip, r0
 80010b6:	4608      	mov	r0, r1
 80010b8:	4661      	mov	r1, ip
 80010ba:	e7ff      	b.n	80010bc <__aeabi_cfcmpeq>

080010bc <__aeabi_cfcmpeq>:
 80010bc:	b50f      	push	{r0, r1, r2, r3, lr}
 80010be:	f7ff ffc9 	bl	8001054 <__cmpsf2>
 80010c2:	2800      	cmp	r0, #0
 80010c4:	bf48      	it	mi
 80010c6:	f110 0f00 	cmnmi.w	r0, #0
 80010ca:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010cc <__aeabi_fcmpeq>:
 80010cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d0:	f7ff fff4 	bl	80010bc <__aeabi_cfcmpeq>
 80010d4:	bf0c      	ite	eq
 80010d6:	2001      	moveq	r0, #1
 80010d8:	2000      	movne	r0, #0
 80010da:	f85d fb08 	ldr.w	pc, [sp], #8
 80010de:	bf00      	nop

080010e0 <__aeabi_fcmplt>:
 80010e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e4:	f7ff ffea 	bl	80010bc <__aeabi_cfcmpeq>
 80010e8:	bf34      	ite	cc
 80010ea:	2001      	movcc	r0, #1
 80010ec:	2000      	movcs	r0, #0
 80010ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f2:	bf00      	nop

080010f4 <__aeabi_fcmple>:
 80010f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f8:	f7ff ffe0 	bl	80010bc <__aeabi_cfcmpeq>
 80010fc:	bf94      	ite	ls
 80010fe:	2001      	movls	r0, #1
 8001100:	2000      	movhi	r0, #0
 8001102:	f85d fb08 	ldr.w	pc, [sp], #8
 8001106:	bf00      	nop

08001108 <__aeabi_fcmpge>:
 8001108:	f84d ed08 	str.w	lr, [sp, #-8]!
 800110c:	f7ff ffd2 	bl	80010b4 <__aeabi_cfrcmple>
 8001110:	bf94      	ite	ls
 8001112:	2001      	movls	r0, #1
 8001114:	2000      	movhi	r0, #0
 8001116:	f85d fb08 	ldr.w	pc, [sp], #8
 800111a:	bf00      	nop

0800111c <__aeabi_fcmpgt>:
 800111c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001120:	f7ff ffc8 	bl	80010b4 <__aeabi_cfrcmple>
 8001124:	bf34      	ite	cc
 8001126:	2001      	movcc	r0, #1
 8001128:	2000      	movcs	r0, #0
 800112a:	f85d fb08 	ldr.w	pc, [sp], #8
 800112e:	bf00      	nop

08001130 <__aeabi_f2uiz>:
 8001130:	0042      	lsls	r2, r0, #1
 8001132:	d20e      	bcs.n	8001152 <__aeabi_f2uiz+0x22>
 8001134:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001138:	d30b      	bcc.n	8001152 <__aeabi_f2uiz+0x22>
 800113a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800113e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001142:	d409      	bmi.n	8001158 <__aeabi_f2uiz+0x28>
 8001144:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001148:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800114c:	fa23 f002 	lsr.w	r0, r3, r2
 8001150:	4770      	bx	lr
 8001152:	f04f 0000 	mov.w	r0, #0
 8001156:	4770      	bx	lr
 8001158:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800115c:	d101      	bne.n	8001162 <__aeabi_f2uiz+0x32>
 800115e:	0242      	lsls	r2, r0, #9
 8001160:	d102      	bne.n	8001168 <__aeabi_f2uiz+0x38>
 8001162:	f04f 30ff 	mov.w	r0, #4294967295
 8001166:	4770      	bx	lr
 8001168:	f04f 0000 	mov.w	r0, #0
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop

08001170 <initDbgLed>:
#define MAX_DAC_VAL			( 4096-1  )
#define MIN_DAC_VOLT		-10.000
#define MAX_DAC_VOLT		10.000


void initDbgLed()	{   MODIFY_REG(GPIOC->CRH, GPIO_CRH_CNF13 + GPIO_CRH_MODE13, GPIO_CRH_MODE13_0);	}
 8001170:	4a03      	ldr	r2, [pc, #12]	; (8001180 <initDbgLed+0x10>)
 8001172:	6853      	ldr	r3, [r2, #4]
 8001174:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001178:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800117c:	6053      	str	r3, [r2, #4]
 800117e:	4770      	bx	lr
 8001180:	40011000 	.word	0x40011000

08001184 <setDbgLED>:
void setDbgLED()	{	WRITE_REG(GPIOC->BSRR, GPIO_BSRR_BS13);	}
 8001184:	4b02      	ldr	r3, [pc, #8]	; (8001190 <setDbgLED+0xc>)
 8001186:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800118a:	611a      	str	r2, [r3, #16]
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	40011000 	.word	0x40011000

08001194 <clrDbgLED>:
void clrDbgLED()	{	WRITE_REG(GPIOC->BSRR, GPIO_BSRR_BR13);	}
 8001194:	4b02      	ldr	r3, [pc, #8]	; (80011a0 <clrDbgLED+0xc>)
 8001196:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800119a:	611a      	str	r2, [r3, #16]
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	40011000 	.word	0x40011000

080011a4 <initRelays>:

void initRelays()
{	//	PB0 , 1
	MODIFY_REG(GPIOB->CRL, GPIO_CRL_CNF0 + GPIO_CRL_MODE0, GPIO_CRL_MODE0_0);
 80011a4:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <initRelays+0x20>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	f022 020f 	bic.w	r2, r2, #15
 80011ac:	f042 0201 	orr.w	r2, r2, #1
 80011b0:	601a      	str	r2, [r3, #0]
	MODIFY_REG(GPIOB->CRL, GPIO_CRL_CNF1 + GPIO_CRL_MODE1, GPIO_CRL_MODE1_0);
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80011b8:	f042 0210 	orr.w	r2, r2, #16
 80011bc:	601a      	str	r2, [r3, #0]

	GPIOB->BRR = 0b0000000000000011; // clear PB0 , 1
 80011be:	2203      	movs	r2, #3
 80011c0:	615a      	str	r2, [r3, #20]
}
 80011c2:	4770      	bx	lr
 80011c4:	40010c00 	.word	0x40010c00

080011c8 <setRelay0>:

void setRelay0()	{	SET_BIT(GPIOB->BSRR, GPIO_BSRR_BS0);				}
 80011c8:	4a02      	ldr	r2, [pc, #8]	; (80011d4 <setRelay0+0xc>)
 80011ca:	6913      	ldr	r3, [r2, #16]
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	6113      	str	r3, [r2, #16]
 80011d2:	4770      	bx	lr
 80011d4:	40010c00 	.word	0x40010c00

080011d8 <clrRelay0>:
void clrRelay0()	{	SET_BIT(GPIOB->BRR, GPIO_BRR_BR0);					}
 80011d8:	4a02      	ldr	r2, [pc, #8]	; (80011e4 <clrRelay0+0xc>)
 80011da:	6953      	ldr	r3, [r2, #20]
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6153      	str	r3, [r2, #20]
 80011e2:	4770      	bx	lr
 80011e4:	40010c00 	.word	0x40010c00

080011e8 <getRelay0>:
bool getRelay0()	{	return READ_BIT(GPIOB->IDR, GPIO_IDR_IDR0) != 0;	}
 80011e8:	4b02      	ldr	r3, [pc, #8]	; (80011f4 <getRelay0+0xc>)
 80011ea:	6898      	ldr	r0, [r3, #8]
 80011ec:	f000 0001 	and.w	r0, r0, #1
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	40010c00 	.word	0x40010c00

080011f8 <setRelay1>:
void setRelay1()	{	SET_BIT(GPIOB->BSRR, GPIO_BSRR_BS1);				}
 80011f8:	4a02      	ldr	r2, [pc, #8]	; (8001204 <setRelay1+0xc>)
 80011fa:	6913      	ldr	r3, [r2, #16]
 80011fc:	f043 0302 	orr.w	r3, r3, #2
 8001200:	6113      	str	r3, [r2, #16]
 8001202:	4770      	bx	lr
 8001204:	40010c00 	.word	0x40010c00

08001208 <clrRelay1>:
void clrRelay1()	{	SET_BIT(GPIOB->BRR, GPIO_BRR_BR1);					}
 8001208:	4a02      	ldr	r2, [pc, #8]	; (8001214 <clrRelay1+0xc>)
 800120a:	6953      	ldr	r3, [r2, #20]
 800120c:	f043 0302 	orr.w	r3, r3, #2
 8001210:	6153      	str	r3, [r2, #20]
 8001212:	4770      	bx	lr
 8001214:	40010c00 	.word	0x40010c00

08001218 <getRelay1>:
bool getRelay1()	{	return (READ_BIT(GPIOB->IDR, GPIO_IDR_IDR1) != 0);	}
 8001218:	4b02      	ldr	r3, [pc, #8]	; (8001224 <getRelay1+0xc>)
 800121a:	6898      	ldr	r0, [r3, #8]
 800121c:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40010c00 	.word	0x40010c00

08001228 <initDACs>:


// VOUTA = PA4 -> DAC_OUT1
// VOUTB = PA5 -> DAC_OUT2
void initDACs()
{	SET_BIT(RCC->APB1ENR, RCC_APB1ENR_DACEN);	// enable DAC Clock
 8001228:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <initDACs+0x40>)
 800122a:	69d3      	ldr	r3, [r2, #28]
 800122c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001230:	61d3      	str	r3, [r2, #28]

	SET_BIT(DAC->CR, DAC_CR_EN1);
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <initDACs+0x44>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	f042 0201 	orr.w	r2, r2, #1
 800123a:	601a      	str	r2, [r3, #0]
	SET_BIT(DAC->CR, DAC_CR_EN2);
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001242:	601a      	str	r2, [r3, #0]

	// ensure trigger is turned off and holding regs directly pushed to our regs:
	CLEAR_BIT(DAC->CR, DAC_CR_TEN1);
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	f022 0204 	bic.w	r2, r2, #4
 800124a:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(DAC->CR, DAC_CR_TEN2);
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001252:	601a      	str	r2, [r3, #0]

	// ensure output buffer is on
	CLEAR_BIT(DAC->CR, DAC_CR_BOFF1);
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	f022 0202 	bic.w	r2, r2, #2
 800125a:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(DAC->CR, DAC_CR_BOFF2);
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001262:	601a      	str	r2, [r3, #0]

}
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40021000 	.word	0x40021000
 800126c:	40007400 	.word	0x40007400

08001270 <writeDacRaw>:
 * @return		'true' if correct inputs were supplied, otherwise 'false'.
 *
 */

bool writeDacRaw(int channel, int dacval)
{	if ( 0 <= dacval && dacval <= MAX_DAC_VAL )
 8001270:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8001274:	d20c      	bcs.n	8001290 <writeDacRaw+0x20>
	{	if ( 1 == channel )
 8001276:	2801      	cmp	r0, #1
 8001278:	d003      	beq.n	8001282 <writeDacRaw+0x12>
		{		DAC->DHR12R1 = dacval;
			//	DAC->DOR1;
		}
		else if ( 2 == channel )
 800127a:	2802      	cmp	r0, #2
 800127c:	d004      	beq.n	8001288 <writeDacRaw+0x18>
		{		DAC->DHR12R2 = dacval;
			//	DAC->DOR2;
		}
		else
			return false;
 800127e:	2000      	movs	r0, #0
		return true;
	}else{
		return false;
	}
}
 8001280:	4770      	bx	lr
		{		DAC->DHR12R1 = dacval;
 8001282:	4b04      	ldr	r3, [pc, #16]	; (8001294 <writeDacRaw+0x24>)
 8001284:	6099      	str	r1, [r3, #8]
 8001286:	4770      	bx	lr
		{		DAC->DHR12R2 = dacval;
 8001288:	4b02      	ldr	r3, [pc, #8]	; (8001294 <writeDacRaw+0x24>)
 800128a:	6159      	str	r1, [r3, #20]
		return true;
 800128c:	2001      	movs	r0, #1
 800128e:	4770      	bx	lr
		return false;
 8001290:	2000      	movs	r0, #0
 8001292:	4770      	bx	lr
 8001294:	40007400 	.word	0x40007400

08001298 <readDacRaw>:
		return false;
}


int  readDacRaw(int channel)
{	if ( 1 == channel )
 8001298:	2801      	cmp	r0, #1
 800129a:	d005      	beq.n	80012a8 <readDacRaw+0x10>
		return	DAC->DOR1;
	else if ( 2 == channel )
 800129c:	2802      	cmp	r0, #2
		return DAC->DOR2;
 800129e:	bf06      	itte	eq
 80012a0:	4b03      	ldreq	r3, [pc, #12]	; (80012b0 <readDacRaw+0x18>)
 80012a2:	6b18      	ldreq	r0, [r3, #48]	; 0x30
	else
		return false;
 80012a4:	2000      	movne	r0, #0
}
 80012a6:	4770      	bx	lr
		return	DAC->DOR1;
 80012a8:	4b01      	ldr	r3, [pc, #4]	; (80012b0 <readDacRaw+0x18>)
 80012aa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	40007400 	.word	0x40007400
 80012b4:	00000000 	.word	0x00000000

080012b8 <dacVoltToRaw>:
/*
 * @brief	calculate the raw integer equivalent of a given DAC Voltage
 * 			implements y = k*x + d
 * */
int		dacVoltToRaw(float voltage)
{	return	(MAX_DAC_VAL/2 - voltage*MAX_DAC_VAL/(MAX_DAC_VOLT - MIN_DAC_VOLT));
 80012b8:	b508      	push	{r3, lr}
 80012ba:	490b      	ldr	r1, [pc, #44]	; (80012e8 <dacVoltToRaw+0x30>)
 80012bc:	f7ff fd72 	bl	8000da4 <__aeabi_fmul>
 80012c0:	f7ff f8c2 	bl	8000448 <__aeabi_f2d>
 80012c4:	2200      	movs	r2, #0
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <dacVoltToRaw+0x34>)
 80012c8:	f7ff fa40 	bl	800074c <__aeabi_ddiv>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	a103      	add	r1, pc, #12	; (adr r1, 80012e0 <dacVoltToRaw+0x28>)
 80012d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012d6:	f7fe ff57 	bl	8000188 <__aeabi_dsub>
 80012da:	f7ff fbbd 	bl	8000a58 <__aeabi_d2iz>
}
 80012de:	bd08      	pop	{r3, pc}
 80012e0:	00000000 	.word	0x00000000
 80012e4:	409ffc00 	.word	0x409ffc00
 80012e8:	457ff000 	.word	0x457ff000
 80012ec:	40340000 	.word	0x40340000

080012f0 <writeDacVolts>:
{
 80012f0:	b538      	push	{r3, r4, r5, lr}
 80012f2:	4605      	mov	r5, r0
 80012f4:	460c      	mov	r4, r1
	if ( MIN_DAC_VOLT <= voltage && voltage <= MAX_DAC_VOLT )
 80012f6:	490b      	ldr	r1, [pc, #44]	; (8001324 <writeDacVolts+0x34>)
 80012f8:	4620      	mov	r0, r4
 80012fa:	f7ff ff05 	bl	8001108 <__aeabi_fcmpge>
 80012fe:	b178      	cbz	r0, 8001320 <writeDacVolts+0x30>
 8001300:	4909      	ldr	r1, [pc, #36]	; (8001328 <writeDacVolts+0x38>)
 8001302:	4620      	mov	r0, r4
 8001304:	f7ff fef6 	bl	80010f4 <__aeabi_fcmple>
 8001308:	b908      	cbnz	r0, 800130e <writeDacVolts+0x1e>
		return false;
 800130a:	2000      	movs	r0, #0
 800130c:	e009      	b.n	8001322 <writeDacVolts+0x32>
	{	writeDacRaw(channel, dacVoltToRaw(voltage));
 800130e:	4620      	mov	r0, r4
 8001310:	f7ff ffd2 	bl	80012b8 <dacVoltToRaw>
 8001314:	4601      	mov	r1, r0
 8001316:	4628      	mov	r0, r5
 8001318:	f7ff ffaa 	bl	8001270 <writeDacRaw>
		return true;
 800131c:	2001      	movs	r0, #1
 800131e:	e000      	b.n	8001322 <writeDacVolts+0x32>
		return false;
 8001320:	2000      	movs	r0, #0
}
 8001322:	bd38      	pop	{r3, r4, r5, pc}
 8001324:	c1200000 	.word	0xc1200000
 8001328:	41200000 	.word	0x41200000
 800132c:	00000000 	.word	0x00000000

08001330 <dacRawToVolt>:

/*
 * @brief	calculate the analogue voltage equivalent of a given DAC raw value
 * */
float	dacRawToVolt(int dacval)
{	return - (dacval - MAX_DAC_VAL/2)*(MAX_DAC_VOLT - MIN_DAC_VOLT)/MAX_DAC_VAL;
 8001330:	b508      	push	{r3, lr}
 8001332:	f5c0 60ff 	rsb	r0, r0, #2040	; 0x7f8
 8001336:	3007      	adds	r0, #7
 8001338:	f7ff f874 	bl	8000424 <__aeabi_i2d>
 800133c:	2200      	movs	r2, #0
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <dacRawToVolt+0x30>)
 8001340:	f7ff f8da 	bl	80004f8 <__aeabi_dmul>
 8001344:	a304      	add	r3, pc, #16	; (adr r3, 8001358 <dacRawToVolt+0x28>)
 8001346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134a:	f7ff f9ff 	bl	800074c <__aeabi_ddiv>
 800134e:	f7ff fbcb 	bl	8000ae8 <__aeabi_d2f>
}
 8001352:	bd08      	pop	{r3, pc}
 8001354:	f3af 8000 	nop.w
 8001358:	00000000 	.word	0x00000000
 800135c:	40affe00 	.word	0x40affe00
 8001360:	40340000 	.word	0x40340000

08001364 <readDacVolts>:

float  readDacVolts(int channel)
{	return	dacRawToVolt(readDacRaw(channel));
 8001364:	b508      	push	{r3, lr}
 8001366:	f7ff ff97 	bl	8001298 <readDacRaw>
 800136a:	f7ff ffe1 	bl	8001330 <dacRawToVolt>
}
 800136e:	bd08      	pop	{r3, pc}

08001370 <initHal>:

void initHal()
{
 8001370:	b508      	push	{r3, lr}
    // Enable clocks for Port A, B and C
    SET_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPAEN + RCC_APB2ENR_IOPBEN + RCC_APB2ENR_IOPCEN);
 8001372:	4a05      	ldr	r2, [pc, #20]	; (8001388 <initHal+0x18>)
 8001374:	6993      	ldr	r3, [r2, #24]
 8001376:	f043 031c 	orr.w	r3, r3, #28
 800137a:	6193      	str	r3, [r2, #24]

	initDbgLed();
 800137c:	f7ff fef8 	bl	8001170 <initDbgLed>
	initRelays();
 8001380:	f7ff ff10 	bl	80011a4 <initRelays>

}
 8001384:	bd08      	pop	{r3, pc}
 8001386:	bf00      	nop
 8001388:	40021000 	.word	0x40021000

0800138c <usbCdcInit>:
 * USB-Setup
 * Clock must be set up already before
 * @retval	TRUE on success, FALSE otherwise
 */
bool usbCdcInit()
{	UsbSetup();		//
 800138c:	b508      	push	{r3, lr}
 800138e:	f001 f9cb 	bl	8002728 <UsbSetup>
bool usbCdcActive(){	return UsbActive();	}
 8001392:	f001 fab3 	bl	80028fc <UsbActive>
	return usbCdcActive();
}
 8001396:	bd08      	pop	{r3, pc}

08001398 <usbCdcTxEnqueueStrsInt>:
 *
 * */
bool usbCdcTxEnqueueStrsInt(int intt, int num, ...);

bool usbCdcTxEnqueueStrsInt(int intt, int num, ...)
{
 8001398:	b40e      	push	{r1, r2, r3}
 800139a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800139c:	b088      	sub	sp, #32
 800139e:	4607      	mov	r7, r0
 80013a0:	ab0d      	add	r3, sp, #52	; 0x34
 80013a2:	f853 5b04 	ldr.w	r5, [r3], #4
	va_list valist;
	va_start(valist, num);
 80013a6:	9307      	str	r3, [sp, #28]
	for(int idx=0; idx<num; idx++)
 80013a8:	2d00      	cmp	r5, #0
 80013aa:	dd0b      	ble.n	80013c4 <usbCdcTxEnqueueStrsInt+0x2c>
 80013ac:	2400      	movs	r4, #0
		strcat(usbTxBuf, va_arg(valist, const char * ));
 80013ae:	4e1b      	ldr	r6, [pc, #108]	; (800141c <usbCdcTxEnqueueStrsInt+0x84>)
 80013b0:	9b07      	ldr	r3, [sp, #28]
 80013b2:	1d1a      	adds	r2, r3, #4
 80013b4:	9207      	str	r2, [sp, #28]
 80013b6:	6819      	ldr	r1, [r3, #0]
 80013b8:	4630      	mov	r0, r6
 80013ba:	f002 f9ff 	bl	80037bc <strcat>
	for(int idx=0; idx<num; idx++)
 80013be:	3401      	adds	r4, #1
 80013c0:	42a5      	cmp	r5, r4
 80013c2:	d1f5      	bne.n	80013b0 <usbCdcTxEnqueueStrsInt+0x18>
	va_end(valist);

	char intBuf[25];
	sprintf(intBuf, " %d", intt);
 80013c4:	463a      	mov	r2, r7
 80013c6:	4916      	ldr	r1, [pc, #88]	; (8001420 <usbCdcTxEnqueueStrsInt+0x88>)
 80013c8:	4668      	mov	r0, sp
 80013ca:	f002 f9ab 	bl	8003724 <siprintf>

	strcat(usbTxBuf, intBuf);
 80013ce:	4c13      	ldr	r4, [pc, #76]	; (800141c <usbCdcTxEnqueueStrsInt+0x84>)
 80013d0:	4669      	mov	r1, sp
 80013d2:	4620      	mov	r0, r4
 80013d4:	f002 f9f2 	bl	80037bc <strcat>
	strcat(usbTxBuf, "\n");
 80013d8:	4620      	mov	r0, r4
 80013da:	f7fe fec9 	bl	8000170 <strlen>
 80013de:	4b11      	ldr	r3, [pc, #68]	; (8001424 <usbCdcTxEnqueueStrsInt+0x8c>)
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	5223      	strh	r3, [r4, r0]
int	 usbCdcSendStr(char* str, uint32_t timeout_ms){	return	 UsbSendStr(str, timeout_ms);	}
 80013e4:	210a      	movs	r1, #10
 80013e6:	4620      	mov	r0, r4
 80013e8:	f001 fabc 	bl	8002964 <UsbSendStr>
 80013ec:	4605      	mov	r5, r0

	int sentChars = usbCdcSendStr(usbTxBuf, STD_TX_TIMEOUT);
	if( strlen(usbTxBuf) == sentChars )
 80013ee:	4620      	mov	r0, r4
 80013f0:	f7fe febe 	bl	8000170 <strlen>
 80013f4:	42a8      	cmp	r0, r5
 80013f6:	d005      	beq.n	8001404 <usbCdcTxEnqueueStrsInt+0x6c>
	{	usbTxBuf[0] = 0;
		memset(usbTxBuf, 0, strlen(usbTxBuf));
		return true;
	}else

	return false;
 80013f8:	2000      	movs	r0, #0
}
 80013fa:	b008      	add	sp, #32
 80013fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001400:	b003      	add	sp, #12
 8001402:	4770      	bx	lr
	{	usbTxBuf[0] = 0;
 8001404:	2500      	movs	r5, #0
 8001406:	7025      	strb	r5, [r4, #0]
		memset(usbTxBuf, 0, strlen(usbTxBuf));
 8001408:	4620      	mov	r0, r4
 800140a:	f7fe feb1 	bl	8000170 <strlen>
 800140e:	4602      	mov	r2, r0
 8001410:	4629      	mov	r1, r5
 8001412:	4620      	mov	r0, r4
 8001414:	f001 fb4a 	bl	8002aac <memset>
		return true;
 8001418:	2001      	movs	r0, #1
 800141a:	e7ee      	b.n	80013fa <usbCdcTxEnqueueStrsInt+0x62>
 800141c:	200001f0 	.word	0x200001f0
 8001420:	08009a24 	.word	0x08009a24
 8001424:	08009a28 	.word	0x08009a28

08001428 <usbCdcTxEnqueueStrsFloat>:


/// \todo move to scpi module, also all other string manipulations
bool usbCdcTxEnqueueStrsFloat(float flott, int num, ...) // ...variable number of strings, then a float
{
 8001428:	b40e      	push	{r1, r2, r3}
 800142a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800142c:	b088      	sub	sp, #32
 800142e:	4607      	mov	r7, r0
 8001430:	ab0d      	add	r3, sp, #52	; 0x34
 8001432:	f853 5b04 	ldr.w	r5, [r3], #4
	va_list valist;
	va_start(valist, num);
 8001436:	9307      	str	r3, [sp, #28]
	for(int idx=0; idx<num; idx++)
 8001438:	2d00      	cmp	r5, #0
 800143a:	dd0b      	ble.n	8001454 <usbCdcTxEnqueueStrsFloat+0x2c>
 800143c:	2400      	movs	r4, #0
		strcat(usbTxBuf, va_arg(valist, const char * ));
 800143e:	4e1d      	ldr	r6, [pc, #116]	; (80014b4 <usbCdcTxEnqueueStrsFloat+0x8c>)
 8001440:	9b07      	ldr	r3, [sp, #28]
 8001442:	1d1a      	adds	r2, r3, #4
 8001444:	9207      	str	r2, [sp, #28]
 8001446:	6819      	ldr	r1, [r3, #0]
 8001448:	4630      	mov	r0, r6
 800144a:	f002 f9b7 	bl	80037bc <strcat>
	for(int idx=0; idx<num; idx++)
 800144e:	3401      	adds	r4, #1
 8001450:	42a5      	cmp	r5, r4
 8001452:	d1f5      	bne.n	8001440 <usbCdcTxEnqueueStrsFloat+0x18>
	va_end(valist);

	char floatBuf[25];
	sprintf(floatBuf, " %2.3e", flott);
 8001454:	4638      	mov	r0, r7
 8001456:	f7fe fff7 	bl	8000448 <__aeabi_f2d>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4916      	ldr	r1, [pc, #88]	; (80014b8 <usbCdcTxEnqueueStrsFloat+0x90>)
 8001460:	4668      	mov	r0, sp
 8001462:	f002 f95f 	bl	8003724 <siprintf>

	strcat(usbTxBuf, floatBuf);
 8001466:	4c13      	ldr	r4, [pc, #76]	; (80014b4 <usbCdcTxEnqueueStrsFloat+0x8c>)
 8001468:	4669      	mov	r1, sp
 800146a:	4620      	mov	r0, r4
 800146c:	f002 f9a6 	bl	80037bc <strcat>
	strcat(usbTxBuf, "\n");
 8001470:	4620      	mov	r0, r4
 8001472:	f7fe fe7d 	bl	8000170 <strlen>
 8001476:	4b11      	ldr	r3, [pc, #68]	; (80014bc <usbCdcTxEnqueueStrsFloat+0x94>)
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	5223      	strh	r3, [r4, r0]
int	 usbCdcSendStr(char* str, uint32_t timeout_ms){	return	 UsbSendStr(str, timeout_ms);	}
 800147c:	210a      	movs	r1, #10
 800147e:	4620      	mov	r0, r4
 8001480:	f001 fa70 	bl	8002964 <UsbSendStr>
 8001484:	4605      	mov	r5, r0

	int sentChars = usbCdcSendStr(usbTxBuf, STD_TX_TIMEOUT);
	if( strlen(usbTxBuf) == sentChars )
 8001486:	4620      	mov	r0, r4
 8001488:	f7fe fe72 	bl	8000170 <strlen>
 800148c:	42a8      	cmp	r0, r5
 800148e:	d005      	beq.n	800149c <usbCdcTxEnqueueStrsFloat+0x74>
	{	usbTxBuf[0] = 0;
		memset(usbTxBuf, 0, strlen(usbTxBuf));
		return true;
	}else

	return false;
 8001490:	2000      	movs	r0, #0
}
 8001492:	b008      	add	sp, #32
 8001494:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001498:	b003      	add	sp, #12
 800149a:	4770      	bx	lr
	{	usbTxBuf[0] = 0;
 800149c:	2500      	movs	r5, #0
 800149e:	7025      	strb	r5, [r4, #0]
		memset(usbTxBuf, 0, strlen(usbTxBuf));
 80014a0:	4620      	mov	r0, r4
 80014a2:	f7fe fe65 	bl	8000170 <strlen>
 80014a6:	4602      	mov	r2, r0
 80014a8:	4629      	mov	r1, r5
 80014aa:	4620      	mov	r0, r4
 80014ac:	f001 fafe 	bl	8002aac <memset>
		return true;
 80014b0:	2001      	movs	r0, #1
 80014b2:	e7ee      	b.n	8001492 <usbCdcTxEnqueueStrsFloat+0x6a>
 80014b4:	200001f0 	.word	0x200001f0
 80014b8:	08009a2c 	.word	0x08009a2c
 80014bc:	08009a28 	.word	0x08009a28

080014c0 <usbCdcTxEnqueueStrs>:
 *
 *
 *
 * */
bool usbCdcTxEnqueueStrs(int num, ...)
{
 80014c0:	b40f      	push	{r0, r1, r2, r3}
 80014c2:	b570      	push	{r4, r5, r6, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	ab06      	add	r3, sp, #24
 80014c8:	f853 5b04 	ldr.w	r5, [r3], #4

	va_list valist;
	va_start(valist, num);
 80014cc:	9301      	str	r3, [sp, #4]

	for(int idx=0; idx<num; idx++)
 80014ce:	2d00      	cmp	r5, #0
 80014d0:	dd0b      	ble.n	80014ea <usbCdcTxEnqueueStrs+0x2a>
 80014d2:	2400      	movs	r4, #0
		strcat(usbTxBuf, va_arg(valist, const char * ));
 80014d4:	4e16      	ldr	r6, [pc, #88]	; (8001530 <usbCdcTxEnqueueStrs+0x70>)
 80014d6:	9b01      	ldr	r3, [sp, #4]
 80014d8:	1d1a      	adds	r2, r3, #4
 80014da:	9201      	str	r2, [sp, #4]
 80014dc:	6819      	ldr	r1, [r3, #0]
 80014de:	4630      	mov	r0, r6
 80014e0:	f002 f96c 	bl	80037bc <strcat>
	for(int idx=0; idx<num; idx++)
 80014e4:	3401      	adds	r4, #1
 80014e6:	42a5      	cmp	r5, r4
 80014e8:	d1f5      	bne.n	80014d6 <usbCdcTxEnqueueStrs+0x16>
	va_end(valist);

	strcat(usbTxBuf, "\n");
 80014ea:	4c11      	ldr	r4, [pc, #68]	; (8001530 <usbCdcTxEnqueueStrs+0x70>)
 80014ec:	4620      	mov	r0, r4
 80014ee:	f7fe fe3f 	bl	8000170 <strlen>
 80014f2:	4b10      	ldr	r3, [pc, #64]	; (8001534 <usbCdcTxEnqueueStrs+0x74>)
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	5223      	strh	r3, [r4, r0]
int	 usbCdcSendStr(char* str, uint32_t timeout_ms){	return	 UsbSendStr(str, timeout_ms);	}
 80014f8:	210a      	movs	r1, #10
 80014fa:	4620      	mov	r0, r4
 80014fc:	f001 fa32 	bl	8002964 <UsbSendStr>
 8001500:	4605      	mov	r5, r0

	int sentChars = usbCdcSendStr(usbTxBuf, STD_TX_TIMEOUT);
	if( strlen(usbTxBuf) == sentChars )
 8001502:	4620      	mov	r0, r4
 8001504:	f7fe fe34 	bl	8000170 <strlen>
 8001508:	42a8      	cmp	r0, r5
 800150a:	d005      	beq.n	8001518 <usbCdcTxEnqueueStrs+0x58>
	{	usbTxBuf[0] = 0;
		memset(usbTxBuf, 0, strlen(usbTxBuf));
		return true;
	}else

	return false;
 800150c:	2000      	movs	r0, #0
}
 800150e:	b002      	add	sp, #8
 8001510:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001514:	b004      	add	sp, #16
 8001516:	4770      	bx	lr
	{	usbTxBuf[0] = 0;
 8001518:	2500      	movs	r5, #0
 800151a:	7025      	strb	r5, [r4, #0]
		memset(usbTxBuf, 0, strlen(usbTxBuf));
 800151c:	4620      	mov	r0, r4
 800151e:	f7fe fe27 	bl	8000170 <strlen>
 8001522:	4602      	mov	r2, r0
 8001524:	4629      	mov	r1, r5
 8001526:	4620      	mov	r0, r4
 8001528:	f001 fac0 	bl	8002aac <memset>
		return true;
 800152c:	2001      	movs	r0, #1
 800152e:	e7ee      	b.n	800150e <usbCdcTxEnqueueStrs+0x4e>
 8001530:	200001f0 	.word	0x200001f0
 8001534:	08009a28 	.word	0x08009a28

08001538 <usbCdcTxEnqueueStr>:
/**
 * @brief	enqueues strings for transmission
 * @retval	number of transmitted chars
 */
bool usbCdcTxEnqueueStr(const char * str)
{
 8001538:	b538      	push	{r3, r4, r5, lr}
		return strcat(usbTxBuf, str);
	#endif // USB_ENQUEUEING

	#ifndef USB_ENQUEUEING
		// strcat(usbTxBuf, "\n");
		sprintf(usbTxBuf, "%s \n", str);
 800153a:	4c0f      	ldr	r4, [pc, #60]	; (8001578 <usbCdcTxEnqueueStr+0x40>)
 800153c:	4602      	mov	r2, r0
 800153e:	490f      	ldr	r1, [pc, #60]	; (800157c <usbCdcTxEnqueueStr+0x44>)
 8001540:	4620      	mov	r0, r4
 8001542:	f002 f8ef 	bl	8003724 <siprintf>
int	 usbCdcSendStr(char* str, uint32_t timeout_ms){	return	 UsbSendStr(str, timeout_ms);	}
 8001546:	210a      	movs	r1, #10
 8001548:	4620      	mov	r0, r4
 800154a:	f001 fa0b 	bl	8002964 <UsbSendStr>
 800154e:	4605      	mov	r5, r0
		//		return	 strlen(usbTxBuf) == usbCdcSendStr(usbTxBuf, STD_TX_TIMEOUT);
		int sentChars = usbCdcSendStr(usbTxBuf, STD_TX_TIMEOUT);
		if( strlen(usbTxBuf) == sentChars )
 8001550:	4620      	mov	r0, r4
 8001552:	f7fe fe0d 	bl	8000170 <strlen>
 8001556:	42a8      	cmp	r0, r5
 8001558:	d001      	beq.n	800155e <usbCdcTxEnqueueStr+0x26>
		{	usbTxBuf[0] = 0;
			memset(usbTxBuf, 0, strlen(usbTxBuf));
			return true;
		}else
			return false;
 800155a:	2000      	movs	r0, #0
	#endif // USB_ENQUEUEING

}
 800155c:	bd38      	pop	{r3, r4, r5, pc}
		{	usbTxBuf[0] = 0;
 800155e:	2500      	movs	r5, #0
 8001560:	7025      	strb	r5, [r4, #0]
			memset(usbTxBuf, 0, strlen(usbTxBuf));
 8001562:	4620      	mov	r0, r4
 8001564:	f7fe fe04 	bl	8000170 <strlen>
 8001568:	4602      	mov	r2, r0
 800156a:	4629      	mov	r1, r5
 800156c:	4620      	mov	r0, r4
 800156e:	f001 fa9d 	bl	8002aac <memset>
			return true;
 8001572:	2001      	movs	r0, #1
 8001574:	e7f2      	b.n	800155c <usbCdcTxEnqueueStr+0x24>
 8001576:	bf00      	nop
 8001578:	200001f0 	.word	0x200001f0
 800157c:	08009a34 	.word	0x08009a34

08001580 <usbCdcRxDequeue>:
			return false;
	}
#endif // USB_ENQUEUEING

bool usbCdcRxDequeue(char* buffer, int bufSize, char terminator)
{
 8001580:	b508      	push	{r3, lr}
int  usbCdcGetStr(char* buffer, int bufSize, char terminator, uint32_t timeout_ms){	return  UsbGetStr(buffer, bufSize, terminator, timeout_ms);	}
 8001582:	230a      	movs	r3, #10
 8001584:	f001 f96c 	bl	8002860 <UsbGetStr>
	res = usbCdcGetStr(buffer, bufSize, terminator, STD_RX_TIMEOUT);
	if(res > 0)
		return true;
	else
		return false;
}
 8001588:	2800      	cmp	r0, #0
 800158a:	bfd4      	ite	le
 800158c:	2000      	movle	r0, #0
 800158e:	2001      	movgt	r0, #1
 8001590:	bd08      	pop	{r3, pc}
	...

08001594 <getScpiIdfromMsg>:
}scpiTxIDs;



int getScpiIdfromMsg(char * scpiCmd)
{
 8001594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001598:	4680      	mov	r8, r0
 800159a:	4d15      	ldr	r5, [pc, #84]	; (80015f0 <getScpiIdfromMsg+0x5c>)
	int scpiID = -1;

	for(int idx = 0; idx < SCPI_IN_STRCNT; idx ++)
 800159c:	2400      	movs	r4, #0
	int scpiID = -1;
 800159e:	f04f 37ff 	mov.w	r7, #4294967295
 80015a2:	f8df 9050 	ldr.w	r9, [pc, #80]	; 80015f4 <getScpiIdfromMsg+0x60>
 80015a6:	e004      	b.n	80015b2 <getScpiIdfromMsg+0x1e>
 80015a8:	4627      	mov	r7, r4
	for(int idx = 0; idx < SCPI_IN_STRCNT; idx ++)
 80015aa:	3401      	adds	r4, #1
 80015ac:	3523      	adds	r5, #35	; 0x23
 80015ae:	2c8a      	cmp	r4, #138	; 0x8a
 80015b0:	d01a      	beq.n	80015e8 <getScpiIdfromMsg+0x54>
	{
			if ( 0 == strncasecmp(scpiCmd, scpiRxShortMsgs[idx], strlen(scpiRxShortMsgs[idx]) ) )
 80015b2:	4628      	mov	r0, r5
 80015b4:	f7fe fddc 	bl	8000170 <strlen>
 80015b8:	4602      	mov	r2, r0
 80015ba:	4629      	mov	r1, r5
 80015bc:	4640      	mov	r0, r8
 80015be:	f002 f90c 	bl	80037da <strncasecmp>
 80015c2:	2800      	cmp	r0, #0
 80015c4:	d0f0      	beq.n	80015a8 <getScpiIdfromMsg+0x14>
 80015c6:	eb04 0684 	add.w	r6, r4, r4, lsl #2
 80015ca:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 80015ce:	444e      	add	r6, r9
					scpiID = idx;
			else if ( 0 == strncasecmp(scpiCmd, scpiRxLongMsgs[idx], strlen(scpiRxLongMsgs[idx]) ) )
 80015d0:	4630      	mov	r0, r6
 80015d2:	f7fe fdcd 	bl	8000170 <strlen>
 80015d6:	4602      	mov	r2, r0
 80015d8:	4631      	mov	r1, r6
 80015da:	4640      	mov	r0, r8
 80015dc:	f002 f8fd 	bl	80037da <strncasecmp>
 80015e0:	2800      	cmp	r0, #0
 80015e2:	bf08      	it	eq
 80015e4:	4627      	moveq	r7, r4
 80015e6:	e7e0      	b.n	80015aa <getScpiIdfromMsg+0x16>
			//	else
			//		scpiID = -1;
	}

	return scpiID;
}
 80015e8:	4638      	mov	r0, r7
 80015ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80015ee:	bf00      	nop
 80015f0:	080073ac 	.word	0x080073ac
 80015f4:	0800868c 	.word	0x0800868c

080015f8 <TIM1_UP_IRQHandler>:
	NVIC_DisableIRQ( TIM1_UP_IRQn);
	return true;
}

void TIM1_UP_IRQHandler(void)
{
 80015f8:	b508      	push	{r3, lr}

	tim1SetRanout();
 80015fa:	f000 fbfb 	bl	8001df4 <tim1SetRanout>


	// keepaliveSetRanout();
	TIM1 -> SR = 0;
 80015fe:	4b02      	ldr	r3, [pc, #8]	; (8001608 <TIM1_UP_IRQHandler+0x10>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
}
 8001604:	bd08      	pop	{r3, pc}
 8001606:	bf00      	nop
 8001608:	40012c00 	.word	0x40012c00

0800160c <keepaliveDelayMs>:
bool keepaliveGetRanout();
void keepaliveClrRanout();

void keepaliveDelayMs(int ms)
{
    uint32_t ka_start=systick_count;
 800160c:	4b03      	ldr	r3, [pc, #12]	; (800161c <keepaliveDelayMs+0x10>)
 800160e:	6819      	ldr	r1, [r3, #0]
    while (systick_count-ka_start<ms);
 8001610:	461a      	mov	r2, r3
 8001612:	6813      	ldr	r3, [r2, #0]
 8001614:	1a5b      	subs	r3, r3, r1
 8001616:	4283      	cmp	r3, r0
 8001618:	d3fb      	bcc.n	8001612 <keepaliveDelayMs+0x6>
}
 800161a:	4770      	bx	lr
 800161c:	2000031c 	.word	0x2000031c

08001620 <initKeepalive>:




bool initKeepalive()
{	keepaliveClrRanout();
 8001620:	b570      	push	{r4, r5, r6, lr}
//	return keealiveRanOut;
}
void keepaliveClrRanout()
{

tim1ClrRanout();
 8001622:	f000 fbf7 	bl	8001e14 <tim1ClrRanout>
	tim1SetRegUpdating();
 8001626:	f000 fbd9 	bl	8001ddc <tim1SetRegUpdating>
	int psc = getTimerPSC(STD_KEEPALIVE_PERIOD);
 800162a:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 800162e:	4628      	mov	r0, r5
 8001630:	f000 fa96 	bl	8001b60 <getTimerPSC>
 8001634:	4606      	mov	r6, r0
	int arr = getTimerARR(STD_KEEPALIVE_PERIOD, psc);
 8001636:	4601      	mov	r1, r0
 8001638:	4628      	mov	r0, r5
 800163a:	f000 fb15 	bl	8001c68 <getTimerARR>
	initTIM(TIM1, psc, arr);
 800163e:	4c0b      	ldr	r4, [pc, #44]	; (800166c <initKeepalive+0x4c>)
 8001640:	4602      	mov	r2, r0
 8001642:	4631      	mov	r1, r6
 8001644:	4620      	mov	r0, r4
 8001646:	f000 fb51 	bl	8001cec <initTIM>
    setTIM(TIM1, STD_KEEPALIVE_PERIOD);
 800164a:	4629      	mov	r1, r5
 800164c:	4620      	mov	r0, r4
 800164e:	f000 fb9b 	bl	8001d88 <setTIM>
    resetTIM(TIM1);
 8001652:	4620      	mov	r0, r4
 8001654:	f000 fb8c 	bl	8001d70 <resetTIM>
    updateEventTIM(TIM1);
 8001658:	4620      	mov	r0, r4
 800165a:	f000 fb90 	bl	8001d7e <updateEventTIM>
    keepaliveDelayMs(2);
 800165e:	2002      	movs	r0, #2
 8001660:	f7ff ffd4 	bl	800160c <keepaliveDelayMs>
    tim1ClrRegUpdating();
 8001664:	f000 fbc0 	bl	8001de8 <tim1ClrRegUpdating>
}
 8001668:	2001      	movs	r0, #1
 800166a:	bd70      	pop	{r4, r5, r6, pc}
 800166c:	40012c00 	.word	0x40012c00

08001670 <keepaliveSetPeriod>:
{	tim1SetRegUpdating();
 8001670:	b538      	push	{r3, r4, r5, lr}
 8001672:	4605      	mov	r5, r0
 8001674:	f000 fbb2 	bl	8001ddc <tim1SetRegUpdating>
	bool resetted = setTIM(TIM1, period);
 8001678:	4c09      	ldr	r4, [pc, #36]	; (80016a0 <keepaliveSetPeriod+0x30>)
 800167a:	4629      	mov	r1, r5
 800167c:	4620      	mov	r0, r4
 800167e:	f000 fb83 	bl	8001d88 <setTIM>
 8001682:	4605      	mov	r5, r0
	resetTIM(TIM1);
 8001684:	4620      	mov	r0, r4
 8001686:	f000 fb73 	bl	8001d70 <resetTIM>
    updateEventTIM(TIM1);
 800168a:	4620      	mov	r0, r4
 800168c:	f000 fb77 	bl	8001d7e <updateEventTIM>
    keepaliveDelayMs(2);
 8001690:	2002      	movs	r0, #2
 8001692:	f7ff ffbb 	bl	800160c <keepaliveDelayMs>
    tim1ClrRegUpdating();
 8001696:	f000 fba7 	bl	8001de8 <tim1ClrRegUpdating>
}
 800169a:	4628      	mov	r0, r5
 800169c:	bd38      	pop	{r3, r4, r5, pc}
 800169e:	bf00      	nop
 80016a0:	40012c00 	.word	0x40012c00

080016a4 <keepaliveStart>:
{
 80016a4:	b508      	push	{r3, lr}
	return startTIM(TIM1);
 80016a6:	4802      	ldr	r0, [pc, #8]	; (80016b0 <keepaliveStart+0xc>)
 80016a8:	f000 fb56 	bl	8001d58 <startTIM>
}
 80016ac:	bd08      	pop	{r3, pc}
 80016ae:	bf00      	nop
 80016b0:	40012c00 	.word	0x40012c00

080016b4 <keepaliveStop>:
{
 80016b4:	b508      	push	{r3, lr}
	stopTIM(TIM1);
 80016b6:	4802      	ldr	r0, [pc, #8]	; (80016c0 <keepaliveStop+0xc>)
 80016b8:	f000 fb42 	bl	8001d40 <stopTIM>
}
 80016bc:	bd08      	pop	{r3, pc}
 80016be:	bf00      	nop
 80016c0:	40012c00 	.word	0x40012c00

080016c4 <rstMain>:
    deinitHal();
}


static void rstMain()
{
 80016c4:	b510      	push	{r4, lr}
	keepaliveStop();
 80016c6:	f7ff fff5 	bl	80016b4 <keepaliveStop>

	writeDacVolts(1, 0.0);
 80016ca:	2400      	movs	r4, #0
 80016cc:	4621      	mov	r1, r4
 80016ce:	2001      	movs	r0, #1
 80016d0:	f7ff fe0e 	bl	80012f0 <writeDacVolts>
	writeDacVolts(2, 0.0);
 80016d4:	4621      	mov	r1, r4
 80016d6:	2002      	movs	r0, #2
 80016d8:	f7ff fe0a 	bl	80012f0 <writeDacVolts>
	
	clrRelay0();
 80016dc:	f7ff fd7c 	bl	80011d8 <clrRelay0>
	clrRelay1();
 80016e0:	f7ff fd92 	bl	8001208 <clrRelay1>

}
 80016e4:	bd10      	pop	{r4, pc}
	...

080016e8 <keepaliveReset>:
bool keepaliveReset()				{	return resetTIM(TIM1);				}
 80016e8:	b508      	push	{r3, lr}
 80016ea:	4802      	ldr	r0, [pc, #8]	; (80016f4 <keepaliveReset+0xc>)
 80016ec:	f000 fb40 	bl	8001d70 <resetTIM>
 80016f0:	bd08      	pop	{r3, pc}
 80016f2:	bf00      	nop
 80016f4:	40012c00 	.word	0x40012c00

080016f8 <keepaliveGetState>:
bool keepaliveGetState()			{	return getTimerState(TIM1);	}
 80016f8:	b508      	push	{r3, lr}
 80016fa:	4802      	ldr	r0, [pc, #8]	; (8001704 <keepaliveGetState+0xc>)
 80016fc:	f000 faf2 	bl	8001ce4 <getTimerState>
 8001700:	bd08      	pop	{r3, pc}
 8001702:	bf00      	nop
 8001704:	40012c00 	.word	0x40012c00

08001708 <SysTick_Handler>:

// Interrupt handler
void SysTick_Handler(void)	{	systick_count++;	}
 8001708:	4a02      	ldr	r2, [pc, #8]	; (8001714 <SysTick_Handler+0xc>)
 800170a:	6813      	ldr	r3, [r2, #0]
 800170c:	3301      	adds	r3, #1
 800170e:	6013      	str	r3, [r2, #0]
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	2000031c 	.word	0x2000031c

08001718 <delay_ms>:

// Delay some milliseconds
void delay_ms(int ms)
{
    uint32_t start=systick_count;
 8001718:	4b03      	ldr	r3, [pc, #12]	; (8001728 <delay_ms+0x10>)
 800171a:	6819      	ldr	r1, [r3, #0]
    while (systick_count-start<ms);
 800171c:	461a      	mov	r2, r3
 800171e:	6813      	ldr	r3, [r2, #0]
 8001720:	1a5b      	subs	r3, r3, r1
 8001722:	4283      	cmp	r3, r0
 8001724:	d3fb      	bcc.n	800171e <delay_ms+0x6>
}
 8001726:	4770      	bx	lr
 8001728:	2000031c 	.word	0x2000031c

0800172c <blinkDbgLed>:
}



static void blinkDbgLed()
{
 800172c:	b508      	push	{r3, lr}
	setDbgLED();	delay_ms(200);	clrDbgLED();	delay_ms(200);
 800172e:	f7ff fd29 	bl	8001184 <setDbgLED>
 8001732:	20c8      	movs	r0, #200	; 0xc8
 8001734:	f7ff fff0 	bl	8001718 <delay_ms>
 8001738:	f7ff fd2c 	bl	8001194 <clrDbgLED>
 800173c:	20c8      	movs	r0, #200	; 0xc8
 800173e:	f7ff ffeb 	bl	8001718 <delay_ms>
	setDbgLED();	delay_ms(200);	clrDbgLED();	delay_ms(200);
 8001742:	f7ff fd1f 	bl	8001184 <setDbgLED>
 8001746:	20c8      	movs	r0, #200	; 0xc8
 8001748:	f7ff ffe6 	bl	8001718 <delay_ms>
 800174c:	f7ff fd22 	bl	8001194 <clrDbgLED>
 8001750:	20c8      	movs	r0, #200	; 0xc8
 8001752:	f7ff ffe1 	bl	8001718 <delay_ms>

	setDbgLED();	delay_ms(75);	clrDbgLED();	delay_ms(75);
 8001756:	f7ff fd15 	bl	8001184 <setDbgLED>
 800175a:	204b      	movs	r0, #75	; 0x4b
 800175c:	f7ff ffdc 	bl	8001718 <delay_ms>
 8001760:	f7ff fd18 	bl	8001194 <clrDbgLED>
 8001764:	204b      	movs	r0, #75	; 0x4b
 8001766:	f7ff ffd7 	bl	8001718 <delay_ms>
	setDbgLED();	delay_ms(75);	clrDbgLED();	delay_ms(75);
 800176a:	f7ff fd0b 	bl	8001184 <setDbgLED>
 800176e:	204b      	movs	r0, #75	; 0x4b
 8001770:	f7ff ffd2 	bl	8001718 <delay_ms>
 8001774:	f7ff fd0e 	bl	8001194 <clrDbgLED>
 8001778:	204b      	movs	r0, #75	; 0x4b
 800177a:	f7ff ffcd 	bl	8001718 <delay_ms>
	setDbgLED();	delay_ms(75);	clrDbgLED();	delay_ms(75);
 800177e:	f7ff fd01 	bl	8001184 <setDbgLED>
 8001782:	204b      	movs	r0, #75	; 0x4b
 8001784:	f7ff ffc8 	bl	8001718 <delay_ms>
 8001788:	f7ff fd04 	bl	8001194 <clrDbgLED>
 800178c:	204b      	movs	r0, #75	; 0x4b
 800178e:	f7ff ffc3 	bl	8001718 <delay_ms>
	setDbgLED();	// delay_ms(100);	clrDbgLED();	delay_ms(100);
 8001792:	f7ff fcf7 	bl	8001184 <setDbgLED>
	setDbgLED();
 8001796:	f7ff fcf5 	bl	8001184 <setDbgLED>

}
 800179a:	bd08      	pop	{r3, pc}

0800179c <main>:
{
 800179c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800179e:	b0c5      	sub	sp, #276	; 0x114
{   SET_BIT(RCC->CR, RCC_CR_HSION);
 80017a0:	4abd      	ldr	r2, [pc, #756]	; (8001a98 <main+0x2fc>)
 80017a2:	6813      	ldr	r3, [r2, #0]
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6013      	str	r3, [r2, #0]
    while(!READ_BIT(RCC->CR, RCC_CR_HSIRDY)) {}
 80017aa:	4613      	mov	r3, r2
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	f012 0f02 	tst.w	r2, #2
 80017b2:	d0fb      	beq.n	80017ac <main+0x10>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_CFGR_SW_HSI);
 80017b4:	4ab8      	ldr	r2, [pc, #736]	; (8001a98 <main+0x2fc>)
 80017b6:	6853      	ldr	r3, [r2, #4]
 80017b8:	f023 0303 	bic.w	r3, r3, #3
 80017bc:	6053      	str	r3, [r2, #4]
    while ((RCC->CFGR & RCC_CFGR_SWS_Msk) != RCC_CFGR_SWS_HSI) {}
 80017be:	4613      	mov	r3, r2
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	f012 0f0c 	tst.w	r2, #12
 80017c6:	d1fb      	bne.n	80017c0 <main+0x24>
    CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80017c8:	4ab3      	ldr	r2, [pc, #716]	; (8001a98 <main+0x2fc>)
 80017ca:	6813      	ldr	r3, [r2, #0]
 80017cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017d0:	6013      	str	r3, [r2, #0]
    while(READ_BIT(RCC->CR, RCC_CR_PLLRDY)) {}
 80017d2:	4613      	mov	r3, r2
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80017da:	d1fb      	bne.n	80017d4 <main+0x38>
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, FLASH_ACR_LATENCY_0);
 80017dc:	4aaf      	ldr	r2, [pc, #700]	; (8001a9c <main+0x300>)
 80017de:	6813      	ldr	r3, [r2, #0]
 80017e0:	f023 0307 	bic.w	r3, r3, #7
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6013      	str	r3, [r2, #0]
    SET_BIT(RCC->CR, RCC_CR_HSEON);
 80017ea:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
 80017ee:	6813      	ldr	r3, [r2, #0]
 80017f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f4:	6013      	str	r3, [r2, #0]
    while(!READ_BIT(RCC->CR, RCC_CR_HSERDY)) {}
 80017f6:	4613      	mov	r3, r2
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80017fe:	d0fb      	beq.n	80017f8 <main+0x5c>
    WRITE_REG(RCC->CFGR, RCC_CFGR_PLLSRC + RCC_CFGR_PLLMULL6 + RCC_CFGR_PPRE1_DIV2);
 8001800:	4ba5      	ldr	r3, [pc, #660]	; (8001a98 <main+0x2fc>)
 8001802:	4aa7      	ldr	r2, [pc, #668]	; (8001aa0 <main+0x304>)
 8001804:	605a      	str	r2, [r3, #4]
    SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800180c:	601a      	str	r2, [r3, #0]
    while(!READ_BIT(RCC->CR, RCC_CR_PLLRDY)) {}
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001814:	d0fb      	beq.n	800180e <main+0x72>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_CFGR_SW_PLL);
 8001816:	4ba0      	ldr	r3, [pc, #640]	; (8001a98 <main+0x2fc>)
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	f022 0203 	bic.w	r2, r2, #3
 800181e:	f042 0202 	orr.w	r2, r2, #2
 8001822:	605a      	str	r2, [r3, #4]
    SystemCoreClock=48000000;
 8001824:	4a9f      	ldr	r2, [pc, #636]	; (8001aa4 <main+0x308>)
 8001826:	49a0      	ldr	r1, [pc, #640]	; (8001aa8 <main+0x30c>)
 8001828:	6011      	str	r1, [r2, #0]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_USBPRE, RCC_CFGR_USBPRE);
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001830:	605a      	str	r2, [r3, #4]
    SET_BIT(RCC->APB1ENR, RCC_APB1ENR_USBEN);
 8001832:	69da      	ldr	r2, [r3, #28]
 8001834:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001838:	61da      	str	r2, [r3, #28]
	systick_count=0;
 800183a:	2200      	movs	r2, #0
 800183c:	4b9b      	ldr	r3, [pc, #620]	; (8001aac <main+0x310>)
 800183e:	601a      	str	r2, [r3, #0]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001840:	4b9b      	ldr	r3, [pc, #620]	; (8001ab0 <main+0x314>)
 8001842:	f64b 317f 	movw	r1, #47999	; 0xbb7f
 8001846:	6059      	str	r1, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001848:	499a      	ldr	r1, [pc, #616]	; (8001ab4 <main+0x318>)
 800184a:	20f0      	movs	r0, #240	; 0xf0
 800184c:	f881 0023 	strb.w	r0, [r1, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001850:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001852:	2207      	movs	r2, #7
 8001854:	601a      	str	r2, [r3, #0]
	initHal();
 8001856:	f7ff fd8b 	bl	8001370 <initHal>
	initKeepalive();
 800185a:	f7ff fee1 	bl	8001620 <initKeepalive>
	usbCdcInit();
 800185e:	f7ff fd95 	bl	800138c <usbCdcInit>
tim1ClrRanout();
 8001862:	f000 fad7 	bl	8001e14 <tim1ClrRanout>
	initDACs();
 8001866:	f7ff fcdf 	bl	8001228 <initDACs>
	rstMain();
 800186a:	f7ff ff2b 	bl	80016c4 <rstMain>
    blinkDbgLed();
 800186e:	f7ff ff5d 	bl	800172c <blinkDbgLed>
				default:				usbEnq(scpiTxMsgs[TX_ERR]);													break;
 8001872:	4c91      	ldr	r4, [pc, #580]	; (8001ab8 <main+0x31c>)
 8001874:	f104 0623 	add.w	r6, r4, #35	; 0x23
	return result;
}

static int getIntFromStr(char * source)
{	int result;
	sscanf( source, "%*s%d", &result);
 8001878:	4d90      	ldr	r5, [pc, #576]	; (8001abc <main+0x320>)
 800187a:	e007      	b.n	800188c <main+0xf0>
            	case	RX_IDNq:		usbEnq( scpiTxMsgs[TX_IDNq] );          							break;
 800187c:	4620      	mov	r0, r4
 800187e:	f7ff fe5b 	bl	8001538 <usbCdcTxEnqueueStr>
return tim1GetRanout();
 8001882:	f000 fac1 	bl	8001e08 <tim1GetRanout>
        if(keepaliveGetRanout())
 8001886:	2800      	cmp	r0, #0
 8001888:	f040 814d 	bne.w	8001b26 <main+0x38a>
    {	char usbInBuf[USB_RXLEN] = "";
 800188c:	2100      	movs	r1, #0
 800188e:	9104      	str	r1, [sp, #16]
 8001890:	22fc      	movs	r2, #252	; 0xfc
 8001892:	a805      	add	r0, sp, #20
 8001894:	f001 f90a 	bl	8002aac <memset>
bool usbCdcRxBufferContains(char c){	return UsbRxBufferContains(c);	}
 8001898:	200a      	movs	r0, #10
 800189a:	f000 ff79 	bl	8002790 <UsbRxBufferContains>
        if (usbCdcRxBufferContains('\n'))
 800189e:	2800      	cmp	r0, #0
 80018a0:	d0ef      	beq.n	8001882 <main+0xe6>
        {   usbCdcRxDequeue(usbInBuf,sizeof(usbInBuf),'\n');
 80018a2:	220a      	movs	r2, #10
 80018a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018a8:	a804      	add	r0, sp, #16
 80018aa:	f7ff fe69 	bl	8001580 <usbCdcRxDequeue>
            int scpiID = getScpiIdfromMsg(usbInBuf);
 80018ae:	a804      	add	r0, sp, #16
 80018b0:	f7ff fe70 	bl	8001594 <getScpiIdfromMsg>
            switch(scpiID)
 80018b4:	2814      	cmp	r0, #20
 80018b6:	f200 8132 	bhi.w	8001b1e <main+0x382>
 80018ba:	a301      	add	r3, pc, #4	; (adr r3, 80018c0 <main+0x124>)
 80018bc:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 80018c0:	0800187d 	.word	0x0800187d
 80018c4:	08001915 	.word	0x08001915
 80018c8:	0800191b 	.word	0x0800191b
 80018cc:	08001921 	.word	0x08001921
 80018d0:	08001927 	.word	0x08001927
 80018d4:	08001943 	.word	0x08001943
 80018d8:	08001949 	.word	0x08001949
 80018dc:	0800194f 	.word	0x0800194f
 80018e0:	0800196b 	.word	0x0800196b
 80018e4:	08001993 	.word	0x08001993
 80018e8:	080019bb 	.word	0x080019bb
 80018ec:	080019cb 	.word	0x080019cb
 80018f0:	080019db 	.word	0x080019db
 80018f4:	08001a01 	.word	0x08001a01
 80018f8:	08001a27 	.word	0x08001a27
 80018fc:	08001a3b 	.word	0x08001a3b
 8001900:	08001a61 	.word	0x08001a61
 8001904:	08001a91 	.word	0x08001a91
 8001908:	08001ad1 	.word	0x08001ad1
 800190c:	08001aeb 	.word	0x08001aeb
 8001910:	08001b05 	.word	0x08001b05
             	case	RX_RST:			rstMain();										            		break;
 8001914:	f7ff fed6 	bl	80016c4 <rstMain>
 8001918:	e7b3      	b.n	8001882 <main+0xe6>
            	case	RX_REL0_ON:		setRelay0();         												break;
 800191a:	f7ff fc55 	bl	80011c8 <setRelay0>
 800191e:	e7b0      	b.n	8001882 <main+0xe6>
				case	RX_REL0_OFF:	clrRelay0();    					     							break;
 8001920:	f7ff fc5a 	bl	80011d8 <clrRelay0>
 8001924:	e7ad      	b.n	8001882 <main+0xe6>
				case	RX_REL0q: 		usbEnqStrs(2, subSyses[SYSID_RELAY0], getRelay0() ? scpiTxMsgs[TX_ON] : scpiTxMsgs[TX_OFF] );
 8001926:	f7ff fc5f 	bl	80011e8 <getRelay0>
 800192a:	b938      	cbnz	r0, 800193c <main+0x1a0>
 800192c:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 8001930:	f504 716d 	add.w	r1, r4, #948	; 0x3b4
 8001934:	2002      	movs	r0, #2
 8001936:	f7ff fdc3 	bl	80014c0 <usbCdcTxEnqueueStrs>
					break;
 800193a:	e7a2      	b.n	8001882 <main+0xe6>
				case	RX_REL0q: 		usbEnqStrs(2, subSyses[SYSID_RELAY0], getRelay0() ? scpiTxMsgs[TX_ON] : scpiTxMsgs[TX_OFF] );
 800193c:	f104 0269 	add.w	r2, r4, #105	; 0x69
 8001940:	e7f6      	b.n	8001930 <main+0x194>
				case	RX_REL1_ON: 	setRelay1();         												break;
 8001942:	f7ff fc59 	bl	80011f8 <setRelay1>
 8001946:	e79c      	b.n	8001882 <main+0xe6>
				case	RX_REL1_OFF: 	clrRelay1();      					 						  		break;
 8001948:	f7ff fc5e 	bl	8001208 <clrRelay1>
 800194c:	e799      	b.n	8001882 <main+0xe6>
				case	RX_REL1q:		usbEnqStrs(2, subSyses[SYSID_RELAY1], getRelay1() ? scpiTxMsgs[TX_ON] : scpiTxMsgs[TX_OFF] );
 800194e:	f7ff fc63 	bl	8001218 <getRelay1>
 8001952:	b938      	cbnz	r0, 8001964 <main+0x1c8>
 8001954:	f104 028c 	add.w	r2, r4, #140	; 0x8c
 8001958:	f204 31d7 	addw	r1, r4, #983	; 0x3d7
 800195c:	2002      	movs	r0, #2
 800195e:	f7ff fdaf 	bl	80014c0 <usbCdcTxEnqueueStrs>
					break;
 8001962:	e78e      	b.n	8001882 <main+0xe6>
				case	RX_REL1q:		usbEnqStrs(2, subSyses[SYSID_RELAY1], getRelay1() ? scpiTxMsgs[TX_ON] : scpiTxMsgs[TX_OFF] );
 8001964:	f104 0269 	add.w	r2, r4, #105	; 0x69
 8001968:	e7f6      	b.n	8001958 <main+0x1bc>
	sscanf( source, "%*s%f", &result);
 800196a:	aa03      	add	r2, sp, #12
 800196c:	4954      	ldr	r1, [pc, #336]	; (8001ac0 <main+0x324>)
 800196e:	a804      	add	r0, sp, #16
 8001970:	f001 fef8 	bl	8003764 <siscanf>
				case	RX_VOUTA_VOLT:		writeDacVolts(1, getFloatFromStr(usbInBuf)) ? usbEnq(scpiTxMsgs[TX_PARAM_OK ]) : usbEnq(scpiTxMsgs[TX_PARAM_ERR ]);	break;
 8001974:	9903      	ldr	r1, [sp, #12]
 8001976:	2001      	movs	r0, #1
 8001978:	f7ff fcba 	bl	80012f0 <writeDacVolts>
 800197c:	b120      	cbz	r0, 8001988 <main+0x1ec>
 800197e:	f104 00af 	add.w	r0, r4, #175	; 0xaf
 8001982:	f7ff fdd9 	bl	8001538 <usbCdcTxEnqueueStr>
 8001986:	e77c      	b.n	8001882 <main+0xe6>
 8001988:	f104 0046 	add.w	r0, r4, #70	; 0x46
 800198c:	f7ff fdd4 	bl	8001538 <usbCdcTxEnqueueStr>
 8001990:	e777      	b.n	8001882 <main+0xe6>
 8001992:	aa03      	add	r2, sp, #12
 8001994:	494a      	ldr	r1, [pc, #296]	; (8001ac0 <main+0x324>)
 8001996:	a804      	add	r0, sp, #16
 8001998:	f001 fee4 	bl	8003764 <siscanf>
				case	RX_VOUTB_VOLT:		writeDacVolts(2, getFloatFromStr(usbInBuf)) ? usbEnq(scpiTxMsgs[TX_PARAM_OK ]) : usbEnq(scpiTxMsgs[TX_PARAM_ERR ]);	break;
 800199c:	9903      	ldr	r1, [sp, #12]
 800199e:	2002      	movs	r0, #2
 80019a0:	f7ff fca6 	bl	80012f0 <writeDacVolts>
 80019a4:	b120      	cbz	r0, 80019b0 <main+0x214>
 80019a6:	f104 00af 	add.w	r0, r4, #175	; 0xaf
 80019aa:	f7ff fdc5 	bl	8001538 <usbCdcTxEnqueueStr>
 80019ae:	e768      	b.n	8001882 <main+0xe6>
 80019b0:	f104 0046 	add.w	r0, r4, #70	; 0x46
 80019b4:	f7ff fdc0 	bl	8001538 <usbCdcTxEnqueueStr>
 80019b8:	e763      	b.n	8001882 <main+0xe6>
				case	RX_VOUTA_VOLTq:		usbCdcTxEnqueueStrsFloat(readDacVolts(1), 1, "VOUTA:");			break;
 80019ba:	2001      	movs	r0, #1
 80019bc:	f7ff fcd2 	bl	8001364 <readDacVolts>
 80019c0:	4a40      	ldr	r2, [pc, #256]	; (8001ac4 <main+0x328>)
 80019c2:	2101      	movs	r1, #1
 80019c4:	f7ff fd30 	bl	8001428 <usbCdcTxEnqueueStrsFloat>
 80019c8:	e75b      	b.n	8001882 <main+0xe6>
				case	RX_VOUTB_VOLTq:		usbCdcTxEnqueueStrsFloat(readDacVolts(2), 1, "VOUTB:");			break;
 80019ca:	2002      	movs	r0, #2
 80019cc:	f7ff fcca 	bl	8001364 <readDacVolts>
 80019d0:	4a3d      	ldr	r2, [pc, #244]	; (8001ac8 <main+0x32c>)
 80019d2:	2101      	movs	r1, #1
 80019d4:	f7ff fd28 	bl	8001428 <usbCdcTxEnqueueStrsFloat>
 80019d8:	e753      	b.n	8001882 <main+0xe6>
 80019da:	aa03      	add	r2, sp, #12
 80019dc:	4938      	ldr	r1, [pc, #224]	; (8001ac0 <main+0x324>)
 80019de:	a804      	add	r0, sp, #16
 80019e0:	f001 fec0 	bl	8003764 <siscanf>
				case	RX_KA_peri:		keepaliveSetPeriod(getFloatFromStr(usbInBuf)) ? usbEnq(scpiTxMsgs[TX_PARAM_OK]) : usbEnq(scpiTxMsgs[TX_PARAM_ERR]);
 80019e4:	9803      	ldr	r0, [sp, #12]
 80019e6:	f7ff fe43 	bl	8001670 <keepaliveSetPeriod>
 80019ea:	b120      	cbz	r0, 80019f6 <main+0x25a>
 80019ec:	f104 00af 	add.w	r0, r4, #175	; 0xaf
 80019f0:	f7ff fda2 	bl	8001538 <usbCdcTxEnqueueStr>
 80019f4:	e745      	b.n	8001882 <main+0xe6>
 80019f6:	f104 0046 	add.w	r0, r4, #70	; 0x46
 80019fa:	f7ff fd9d 	bl	8001538 <usbCdcTxEnqueueStr>
 80019fe:	e740      	b.n	8001882 <main+0xe6>
				case	RX_KA_on:   	keepaliveStart() ? usbEnqStrs(2, subSyses[SYSID_KEEPALIVE], scpiTxMsgs[TX_STARTED]) : usbEnqStrs(2, subSyses[SYSID_KEEPALIVE], scpiTxMsgs[TX_NOT_STARTED]);
 8001a00:	f7ff fe50 	bl	80016a4 <keepaliveStart>
 8001a04:	b138      	cbz	r0, 8001a16 <main+0x27a>
 8001a06:	f104 02d2 	add.w	r2, r4, #210	; 0xd2
 8001a0a:	f204 5135 	addw	r1, r4, #1333	; 0x535
 8001a0e:	2002      	movs	r0, #2
 8001a10:	f7ff fd56 	bl	80014c0 <usbCdcTxEnqueueStrs>
 8001a14:	e735      	b.n	8001882 <main+0xe6>
 8001a16:	f104 02f5 	add.w	r2, r4, #245	; 0xf5
 8001a1a:	f204 5135 	addw	r1, r4, #1333	; 0x535
 8001a1e:	2002      	movs	r0, #2
 8001a20:	f7ff fd4e 	bl	80014c0 <usbCdcTxEnqueueStrs>
 8001a24:	e72d      	b.n	8001882 <main+0xe6>
				case	RX_KA_off:   	keepaliveStop();
 8001a26:	f7ff fe45 	bl	80016b4 <keepaliveStop>
										usbEnqStrs(2, subSyses[SYSID_KEEPALIVE], scpiTxMsgs[TX_STOPPED]);
 8001a2a:	f504 728c 	add.w	r2, r4, #280	; 0x118
 8001a2e:	f204 5135 	addw	r1, r4, #1333	; 0x535
 8001a32:	2002      	movs	r0, #2
 8001a34:	f7ff fd44 	bl	80014c0 <usbCdcTxEnqueueStrs>
					break;
 8001a38:	e723      	b.n	8001882 <main+0xe6>
				case	RX_KA_up:   	keepaliveReset() ? usbEnqStrs(2, subSyses[SYSID_KEEPALIVE], scpiTxMsgs[TX_RESET]) : usbEnqStrs(2, subSyses[SYSID_KEEPALIVE], scpiTxMsgs[TX_NOT_RESET]);
 8001a3a:	f7ff fe55 	bl	80016e8 <keepaliveReset>
 8001a3e:	b138      	cbz	r0, 8001a50 <main+0x2b4>
 8001a40:	f504 72af 	add.w	r2, r4, #350	; 0x15e
 8001a44:	f204 5135 	addw	r1, r4, #1333	; 0x535
 8001a48:	2002      	movs	r0, #2
 8001a4a:	f7ff fd39 	bl	80014c0 <usbCdcTxEnqueueStrs>
 8001a4e:	e718      	b.n	8001882 <main+0xe6>
 8001a50:	f204 1281 	addw	r2, r4, #385	; 0x181
 8001a54:	f204 5135 	addw	r1, r4, #1333	; 0x535
 8001a58:	2002      	movs	r0, #2
 8001a5a:	f7ff fd31 	bl	80014c0 <usbCdcTxEnqueueStrs>
 8001a5e:	e710      	b.n	8001882 <main+0xe6>
				case	RX_KAq:			usbCdcTxEnqueueStrsFloat(getTimerPeriod(TIM1->PSC, TIM1->ARR), 3, subSyses[SYSID_KEEPALIVE], keepaliveGetState() ? scpiTxMsgs[TX_ON] : scpiTxMsgs[TX_OFF], scpiTxMsgs[TX_PERIOD]);
 8001a60:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <main+0x330>)
 8001a62:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001a64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a66:	f000 f92b 	bl	8001cc0 <getTimerPeriod>
 8001a6a:	4607      	mov	r7, r0
 8001a6c:	f7ff fe44 	bl	80016f8 <keepaliveGetState>
 8001a70:	b958      	cbnz	r0, 8001a8a <main+0x2ee>
 8001a72:	f104 038c 	add.w	r3, r4, #140	; 0x8c
 8001a76:	f504 72d2 	add.w	r2, r4, #420	; 0x1a4
 8001a7a:	9200      	str	r2, [sp, #0]
 8001a7c:	f204 5235 	addw	r2, r4, #1333	; 0x535
 8001a80:	2103      	movs	r1, #3
 8001a82:	4638      	mov	r0, r7
 8001a84:	f7ff fcd0 	bl	8001428 <usbCdcTxEnqueueStrsFloat>
					break;
 8001a88:	e6fb      	b.n	8001882 <main+0xe6>
				case	RX_KAq:			usbCdcTxEnqueueStrsFloat(getTimerPeriod(TIM1->PSC, TIM1->ARR), 3, subSyses[SYSID_KEEPALIVE], keepaliveGetState() ? scpiTxMsgs[TX_ON] : scpiTxMsgs[TX_OFF], scpiTxMsgs[TX_PERIOD]);
 8001a8a:	f104 0369 	add.w	r3, r4, #105	; 0x69
 8001a8e:	e7f2      	b.n	8001a76 <main+0x2da>
				case	RX_DBG_BLINK:	blinkDbgLed();														break;
 8001a90:	f7ff fe4c 	bl	800172c <blinkDbgLed>
 8001a94:	e6f5      	b.n	8001882 <main+0xe6>
 8001a96:	bf00      	nop
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40022000 	.word	0x40022000
 8001aa0:	00110400 	.word	0x00110400
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	02dc6c00 	.word	0x02dc6c00
 8001aac:	2000031c 	.word	0x2000031c
 8001ab0:	e000e010 	.word	0xe000e010
 8001ab4:	e000ed00 	.word	0xe000ed00
 8001ab8:	08006e30 	.word	0x08006e30
 8001abc:	08009a70 	.word	0x08009a70
 8001ac0:	08009a3c 	.word	0x08009a3c
 8001ac4:	08009a44 	.word	0x08009a44
 8001ac8:	08009a4c 	.word	0x08009a4c
 8001acc:	40012c00 	.word	0x40012c00
						usbCdcTxEnqueueStrsInt( ID_GetUnique32(0) + ID_GetUnique32(1) + ID_GetUnique32(2) + ID_GetUnique32(3), 1, "sum of CPU IDs: ") ;
 8001ad0:	4b1c      	ldr	r3, [pc, #112]	; (8001b44 <main+0x3a8>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a1c      	ldr	r2, [pc, #112]	; (8001b48 <main+0x3ac>)
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	4413      	add	r3, r2
 8001ada:	4a1c      	ldr	r2, [pc, #112]	; (8001b4c <main+0x3b0>)
 8001adc:	6810      	ldr	r0, [r2, #0]
 8001ade:	4a1c      	ldr	r2, [pc, #112]	; (8001b50 <main+0x3b4>)
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	4418      	add	r0, r3
 8001ae4:	f7ff fc58 	bl	8001398 <usbCdcTxEnqueueStrsInt>
					break;
 8001ae8:	e6cb      	b.n	8001882 <main+0xe6>
 8001aea:	aa03      	add	r2, sp, #12
 8001aec:	4919      	ldr	r1, [pc, #100]	; (8001b54 <main+0x3b8>)
 8001aee:	a804      	add	r0, sp, #16
 8001af0:	f001 fe38 	bl	8003764 <siscanf>
				case	RX_DBG_dacVoltToRaw:    usbCdcTxEnqueueStrsInt( dacVoltToRaw(getFloatFromStr(usbInBuf)), 1, "raw: " );  break;
 8001af4:	9803      	ldr	r0, [sp, #12]
 8001af6:	f7ff fbdf 	bl	80012b8 <dacVoltToRaw>
 8001afa:	4a17      	ldr	r2, [pc, #92]	; (8001b58 <main+0x3bc>)
 8001afc:	2101      	movs	r1, #1
 8001afe:	f7ff fc4b 	bl	8001398 <usbCdcTxEnqueueStrsInt>
 8001b02:	e6be      	b.n	8001882 <main+0xe6>
	sscanf( source, "%*s%d", &result);
 8001b04:	aa03      	add	r2, sp, #12
 8001b06:	4629      	mov	r1, r5
 8001b08:	a804      	add	r0, sp, #16
 8001b0a:	f001 fe2b 	bl	8003764 <siscanf>
				case	RX_DBG_dacRawToVolt:    usbCdcTxEnqueueStrsFloat( dacRawToVolt(getIntFromStr(usbInBuf)), 1, "volts: "); break;
 8001b0e:	9803      	ldr	r0, [sp, #12]
 8001b10:	f7ff fc0e 	bl	8001330 <dacRawToVolt>
 8001b14:	4a11      	ldr	r2, [pc, #68]	; (8001b5c <main+0x3c0>)
 8001b16:	2101      	movs	r1, #1
 8001b18:	f7ff fc86 	bl	8001428 <usbCdcTxEnqueueStrsFloat>
 8001b1c:	e6b1      	b.n	8001882 <main+0xe6>
				default:				usbEnq(scpiTxMsgs[TX_ERR]);													break;
 8001b1e:	4630      	mov	r0, r6
 8001b20:	f7ff fd0a 	bl	8001538 <usbCdcTxEnqueueStr>
 8001b24:	e6ad      	b.n	8001882 <main+0xe6>
tim1ClrRanout();
 8001b26:	f000 f975 	bl	8001e14 <tim1ClrRanout>
        	keepaliveStop();
 8001b2a:	f7ff fdc3 	bl	80016b4 <keepaliveStop>
        	rstMain();
 8001b2e:	f7ff fdc9 	bl	80016c4 <rstMain>
        	usbEnqStrs(2 , subSyses[SYSID_KEEPALIVE], scpiTxMsgs[TX_OVERFLOW]);
 8001b32:	f504 72f5 	add.w	r2, r4, #490	; 0x1ea
 8001b36:	f204 5135 	addw	r1, r4, #1333	; 0x535
 8001b3a:	2002      	movs	r0, #2
 8001b3c:	f7ff fcc0 	bl	80014c0 <usbCdcTxEnqueueStrs>
    {	char usbInBuf[USB_RXLEN] = "";
 8001b40:	e6a4      	b.n	800188c <main+0xf0>
 8001b42:	bf00      	nop
 8001b44:	1ffff7e8 	.word	0x1ffff7e8
 8001b48:	1ffff7ec 	.word	0x1ffff7ec
 8001b4c:	1ffff7f0 	.word	0x1ffff7f0
 8001b50:	08009a54 	.word	0x08009a54
 8001b54:	08009a3c 	.word	0x08009a3c
 8001b58:	08009a68 	.word	0x08009a68
 8001b5c:	08009a78 	.word	0x08009a78

08001b60 <getTimerPSC>:

uint32_t getSysClk()	{	return SystemCoreClock;	}
uint32_t getP1TimClk()	{	return getSysClk();		}

uint32_t getTimerPSC(float period)
{	uint32_t psc = 0;
 8001b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b62:	4605      	mov	r5, r0

	// implicit sanity-check: 4us > period > 50s leaves psc to '0'
	if(   4.00E-06 	<= period && period <  40.00E-06)	psc =  1 ;  //  t max  83.33E-09  min t,    2.73E-03
 8001b64:	f7fe fc70 	bl	8000448 <__aeabi_f2d>
 8001b68:	4606      	mov	r6, r0
 8001b6a:	460f      	mov	r7, r1
 8001b6c:	a334      	add	r3, pc, #208	; (adr r3, 8001c40 <getTimerPSC+0xe0>)
 8001b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b72:	f7fe ff47 	bl	8000a04 <__aeabi_dcmpge>
 8001b76:	2800      	cmp	r0, #0
 8001b78:	d05e      	beq.n	8001c38 <getTimerPSC+0xd8>
 8001b7a:	a333      	add	r3, pc, #204	; (adr r3, 8001c48 <getTimerPSC+0xe8>)
 8001b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b80:	4630      	mov	r0, r6
 8001b82:	4639      	mov	r1, r7
 8001b84:	f7fe ff2a 	bl	80009dc <__aeabi_dcmplt>
{	uint32_t psc = 0;
 8001b88:	1c04      	adds	r4, r0, #0
 8001b8a:	bf18      	it	ne
 8001b8c:	2401      	movne	r4, #1
	if(  40.00E-06 	<= period && period <  10.00E-03)	psc =  9 ;  //  t max 416.67E-09  min t,   13.65E-03
 8001b8e:	a32e      	add	r3, pc, #184	; (adr r3, 8001c48 <getTimerPSC+0xe8>)
 8001b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b94:	4630      	mov	r0, r6
 8001b96:	4639      	mov	r1, r7
 8001b98:	f7fe ff34 	bl	8000a04 <__aeabi_dcmpge>
 8001b9c:	b148      	cbz	r0, 8001bb2 <getTimerPSC+0x52>
 8001b9e:	a32c      	add	r3, pc, #176	; (adr r3, 8001c50 <getTimerPSC+0xf0>)
 8001ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba4:	4630      	mov	r0, r6
 8001ba6:	4639      	mov	r1, r7
 8001ba8:	f7fe ff18 	bl	80009dc <__aeabi_dcmplt>
 8001bac:	2800      	cmp	r0, #0
 8001bae:	bf18      	it	ne
 8001bb0:	2409      	movne	r4, #9
	if(  10.00E-03 	<= period && period < 100.00E-03)	psc =  99 ;  //  t max   4.17E-06  min t,  136.53E-03
 8001bb2:	a327      	add	r3, pc, #156	; (adr r3, 8001c50 <getTimerPSC+0xf0>)
 8001bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb8:	4630      	mov	r0, r6
 8001bba:	4639      	mov	r1, r7
 8001bbc:	f7fe ff22 	bl	8000a04 <__aeabi_dcmpge>
 8001bc0:	b148      	cbz	r0, 8001bd6 <getTimerPSC+0x76>
 8001bc2:	a325      	add	r3, pc, #148	; (adr r3, 8001c58 <getTimerPSC+0xf8>)
 8001bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc8:	4630      	mov	r0, r6
 8001bca:	4639      	mov	r1, r7
 8001bcc:	f7fe ff06 	bl	80009dc <__aeabi_dcmplt>
 8001bd0:	2800      	cmp	r0, #0
 8001bd2:	bf18      	it	ne
 8001bd4:	2463      	movne	r4, #99	; 0x63
	if( 100.00E-03	<= period && period <   1.00E-00 )	psc =  999 ;  //  t max  41.67E-06  min t,    1.37E+00
 8001bd6:	a320      	add	r3, pc, #128	; (adr r3, 8001c58 <getTimerPSC+0xf8>)
 8001bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bdc:	4630      	mov	r0, r6
 8001bde:	4639      	mov	r1, r7
 8001be0:	f7fe ff10 	bl	8000a04 <__aeabi_dcmpge>
 8001be4:	b148      	cbz	r0, 8001bfa <getTimerPSC+0x9a>
 8001be6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001bea:	4628      	mov	r0, r5
 8001bec:	f7ff fa78 	bl	80010e0 <__aeabi_fcmplt>
 8001bf0:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001bf4:	2800      	cmp	r0, #0
 8001bf6:	bf18      	it	ne
 8001bf8:	461c      	movne	r4, r3
	if(   1.00E-00	<= period && period <  10.00E-00)	psc =  9999 ;  //  t max 416.67E-06  min t,   13.65E+00
 8001bfa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001bfe:	4628      	mov	r0, r5
 8001c00:	f7ff fa82 	bl	8001108 <__aeabi_fcmpge>
 8001c04:	b140      	cbz	r0, 8001c18 <getTimerPSC+0xb8>
 8001c06:	4916      	ldr	r1, [pc, #88]	; (8001c60 <getTimerPSC+0x100>)
 8001c08:	4628      	mov	r0, r5
 8001c0a:	f7ff fa69 	bl	80010e0 <__aeabi_fcmplt>
 8001c0e:	f242 730f 	movw	r3, #9999	; 0x270f
 8001c12:	2800      	cmp	r0, #0
 8001c14:	bf18      	it	ne
 8001c16:	461c      	movne	r4, r3
	if(  10.00E-00 	<= period && period <= 50.00E-00)	psc =  65535 ;  //  t max   2.73E-03  min t,   89.48E+00
 8001c18:	4911      	ldr	r1, [pc, #68]	; (8001c60 <getTimerPSC+0x100>)
 8001c1a:	4628      	mov	r0, r5
 8001c1c:	f7ff fa74 	bl	8001108 <__aeabi_fcmpge>
 8001c20:	b140      	cbz	r0, 8001c34 <getTimerPSC+0xd4>
 8001c22:	4910      	ldr	r1, [pc, #64]	; (8001c64 <getTimerPSC+0x104>)
 8001c24:	4628      	mov	r0, r5
 8001c26:	f7ff fa65 	bl	80010f4 <__aeabi_fcmple>
 8001c2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c2e:	2800      	cmp	r0, #0
 8001c30:	bf18      	it	ne
 8001c32:	461c      	movne	r4, r3

	return psc;
}
 8001c34:	4620      	mov	r0, r4
 8001c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{	uint32_t psc = 0;
 8001c38:	2400      	movs	r4, #0
 8001c3a:	e7a8      	b.n	8001b8e <getTimerPSC+0x2e>
 8001c3c:	f3af 8000 	nop.w
 8001c40:	a0b5ed8d 	.word	0xa0b5ed8d
 8001c44:	3ed0c6f7 	.word	0x3ed0c6f7
 8001c48:	88e368f1 	.word	0x88e368f1
 8001c4c:	3f04f8b5 	.word	0x3f04f8b5
 8001c50:	47ae147b 	.word	0x47ae147b
 8001c54:	3f847ae1 	.word	0x3f847ae1
 8001c58:	9999999a 	.word	0x9999999a
 8001c5c:	3fb99999 	.word	0x3fb99999
 8001c60:	41200000 	.word	0x41200000
 8001c64:	42480000 	.word	0x42480000

08001c68 <getTimerARR>:

uint32_t getTimerARR(float period, uint32_t psc)
{	uint32_t	arr = 0,
 8001c68:	b570      	push	{r4, r5, r6, lr}
 8001c6a:	4604      	mov	r4, r0
 8001c6c:	460e      	mov	r6, r1
uint32_t getSysClk()	{	return SystemCoreClock;	}
 8001c6e:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <getTimerARR+0x50>)
				TCLK = getP1TimClk();
	float periodCLK = period*TCLK;
 8001c70:	6818      	ldr	r0, [r3, #0]
 8001c72:	f7ff f83f 	bl	8000cf4 <__aeabi_ui2f>
 8001c76:	4621      	mov	r1, r4
 8001c78:	f7ff f894 	bl	8000da4 <__aeabi_fmul>
	float periodCLKbyPSC = periodCLK / (psc+1.0);
 8001c7c:	f7fe fbe4 	bl	8000448 <__aeabi_f2d>
 8001c80:	4604      	mov	r4, r0
 8001c82:	460d      	mov	r5, r1
 8001c84:	4630      	mov	r0, r6
 8001c86:	f7fe fbbd 	bl	8000404 <__aeabi_ui2d>
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <getTimerARR+0x54>)
 8001c8e:	f7fe fa7d 	bl	800018c <__adddf3>
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	4620      	mov	r0, r4
 8001c98:	4629      	mov	r1, r5
 8001c9a:	f7fe fd57 	bl	800074c <__aeabi_ddiv>
 8001c9e:	f7fe ff23 	bl	8000ae8 <__aeabi_d2f>
	arr = (uint32_t) ( periodCLKbyPSC  ) -1.0;
 8001ca2:	f7ff fa45 	bl	8001130 <__aeabi_f2uiz>
 8001ca6:	f7fe fbad 	bl	8000404 <__aeabi_ui2d>
 8001caa:	2200      	movs	r2, #0
 8001cac:	4b03      	ldr	r3, [pc, #12]	; (8001cbc <getTimerARR+0x54>)
 8001cae:	f7fe fa6b 	bl	8000188 <__aeabi_dsub>
 8001cb2:	f7fe fef9 	bl	8000aa8 <__aeabi_d2uiz>
	return arr;
}
 8001cb6:	bd70      	pop	{r4, r5, r6, pc}
 8001cb8:	20000000 	.word	0x20000000
 8001cbc:	3ff00000 	.word	0x3ff00000

08001cc0 <getTimerPeriod>:

float getTimerPeriod(uint32_t psc, uint32_t arr)
{	return 	(float)((psc+1)*(arr+1))/(getP1TimClk());
 8001cc0:	b510      	push	{r4, lr}
 8001cc2:	3101      	adds	r1, #1
 8001cc4:	fb00 1001 	mla	r0, r0, r1, r1
 8001cc8:	f7ff f814 	bl	8000cf4 <__aeabi_ui2f>
 8001ccc:	4604      	mov	r4, r0
uint32_t getSysClk()	{	return SystemCoreClock;	}
 8001cce:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <getTimerPeriod+0x20>)
{	return 	(float)((psc+1)*(arr+1))/(getP1TimClk());
 8001cd0:	6818      	ldr	r0, [r3, #0]
 8001cd2:	f7ff f80f 	bl	8000cf4 <__aeabi_ui2f>
 8001cd6:	4601      	mov	r1, r0
 8001cd8:	4620      	mov	r0, r4
 8001cda:	f7ff f917 	bl	8000f0c <__aeabi_fdiv>
}
 8001cde:	bd10      	pop	{r4, pc}
 8001ce0:	20000000 	.word	0x20000000

08001ce4 <getTimerState>:

bool	getTimerState(TIM_TypeDef * TIMx)
{	return READ_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001ce4:	6800      	ldr	r0, [r0, #0]
}
 8001ce6:	f000 0001 	and.w	r0, r0, #1
 8001cea:	4770      	bx	lr

08001cec <initTIM>:

bool initTIM(TIM_TypeDef * TIMx, int psc, int arr)
{
 8001cec:	b410      	push	{r4}
 8001cee:	4603      	mov	r3, r0
	if( TIM1 == TIMx )
 8001cf0:	4810      	ldr	r0, [pc, #64]	; (8001d34 <initTIM+0x48>)
 8001cf2:	4283      	cmp	r3, r0
 8001cf4:	d014      	beq.n	8001d20 <initTIM+0x34>
	{	RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;       // enable TIM2 clock
		NVIC_EnableIRQ( TIM1_UP_IRQn);
	}

	TIMx -> PSC = psc;							// set prescaler
 8001cf6:	6299      	str	r1, [r3, #40]	; 0x28
	TIMx -> DIER |= TIM_DIER_UIE;				// enable update interrupt
 8001cf8:	68d9      	ldr	r1, [r3, #12]
 8001cfa:	f041 0101 	orr.w	r1, r1, #1
 8001cfe:	60d9      	str	r1, [r3, #12]
	TIMx -> ARR = arr;							// set auto reload register
 8001d00:	62da      	str	r2, [r3, #44]	; 0x2c
	TIMx -> CR1 |= TIM_CR1_ARPE | TIM_CR1_CEN;	// autoreload on, counter enabled
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	f042 0281 	orr.w	r2, r2, #129	; 0x81
 8001d08:	601a      	str	r2, [r3, #0]
	TIMx -> EGR = 1;                  			// trigger update event to reload timer registers
 8001d0a:	2001      	movs	r0, #1
 8001d0c:	6158      	str	r0, [r3, #20]
	CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	f022 0201 	bic.w	r2, r2, #1
 8001d14:	601a      	str	r2, [r3, #0]
	SET_BIT(TIMx->EGR, TIM_EGR_UG); // ...update event
 8001d16:	695a      	ldr	r2, [r3, #20]
 8001d18:	4302      	orrs	r2, r0
 8001d1a:	615a      	str	r2, [r3, #20]

	return true;
}
 8001d1c:	bc10      	pop	{r4}
 8001d1e:	4770      	bx	lr
	{	RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;       // enable TIM2 clock
 8001d20:	4c05      	ldr	r4, [pc, #20]	; (8001d38 <initTIM+0x4c>)
 8001d22:	69a0      	ldr	r0, [r4, #24]
 8001d24:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8001d28:	61a0      	str	r0, [r4, #24]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001d2a:	4804      	ldr	r0, [pc, #16]	; (8001d3c <initTIM+0x50>)
 8001d2c:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001d30:	6004      	str	r4, [r0, #0]
 8001d32:	e7e0      	b.n	8001cf6 <initTIM+0xa>
 8001d34:	40012c00 	.word	0x40012c00
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	e000e100 	.word	0xe000e100

08001d40 <stopTIM>:

bool stopTIM(TIM_TypeDef * TIMx)
{	CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001d40:	6803      	ldr	r3, [r0, #0]
 8001d42:	f023 0301 	bic.w	r3, r3, #1
 8001d46:	6003      	str	r3, [r0, #0]
	CLEAR_REG(TIMx->CNT);
 8001d48:	2300      	movs	r3, #0
 8001d4a:	6243      	str	r3, [r0, #36]	; 0x24
	return false == READ_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001d4c:	6800      	ldr	r0, [r0, #0]
 8001d4e:	f080 0001 	eor.w	r0, r0, #1
}
 8001d52:	f000 0001 	and.w	r0, r0, #1
 8001d56:	4770      	bx	lr

08001d58 <startTIM>:

bool startTIM(TIM_TypeDef * TIMx)
{	stopTIM(TIMx);
 8001d58:	b510      	push	{r4, lr}
 8001d5a:	4604      	mov	r4, r0
 8001d5c:	f7ff fff0 	bl	8001d40 <stopTIM>
	SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001d60:	6823      	ldr	r3, [r4, #0]
 8001d62:	f043 0301 	orr.w	r3, r3, #1
 8001d66:	6023      	str	r3, [r4, #0]
	return 	true == READ_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001d68:	6820      	ldr	r0, [r4, #0]
}
 8001d6a:	f000 0001 	and.w	r0, r0, #1
 8001d6e:	bd10      	pop	{r4, pc}

08001d70 <resetTIM>:

bool resetTIM(TIM_TypeDef * TIMx)
{	CLEAR_REG(TIMx->CNT);
 8001d70:	2300      	movs	r3, #0
 8001d72:	6243      	str	r3, [r0, #36]	; 0x24
	return 0x00 == TIMx->CNT;
 8001d74:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 8001d76:	fab0 f080 	clz	r0, r0
 8001d7a:	0940      	lsrs	r0, r0, #5
 8001d7c:	4770      	bx	lr

08001d7e <updateEventTIM>:


void updateEventTIM(TIM_TypeDef * TIMx)
{	SET_BIT(TIMx->EGR, TIM_EGR_UG); // ...update event
 8001d7e:	6943      	ldr	r3, [r0, #20]
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	6143      	str	r3, [r0, #20]
}
 8001d86:	4770      	bx	lr

08001d88 <setTIM>:


bool setTIM(TIM_TypeDef * TIMx, float period)
{
 8001d88:	b570      	push	{r4, r5, r6, lr}
 8001d8a:	4605      	mov	r5, r0
 8001d8c:	460c      	mov	r4, r1
	if( TIM_MIN_PERIOD <= period && period <= TIM_MAX_PERIOD )//
 8001d8e:	4608      	mov	r0, r1
 8001d90:	f7fe fb5a 	bl	8000448 <__aeabi_f2d>
 8001d94:	a30e      	add	r3, pc, #56	; (adr r3, 8001dd0 <setTIM+0x48>)
 8001d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9a:	f7fe fe33 	bl	8000a04 <__aeabi_dcmpge>
 8001d9e:	b180      	cbz	r0, 8001dc2 <setTIM+0x3a>
 8001da0:	490d      	ldr	r1, [pc, #52]	; (8001dd8 <setTIM+0x50>)
 8001da2:	4620      	mov	r0, r4
 8001da4:	f7ff f9a6 	bl	80010f4 <__aeabi_fcmple>
 8001da8:	b168      	cbz	r0, 8001dc6 <setTIM+0x3e>
	{
		int psc = getTimerPSC(period);
 8001daa:	4620      	mov	r0, r4
 8001dac:	f7ff fed8 	bl	8001b60 <getTimerPSC>
 8001db0:	4606      	mov	r6, r0
		int arr = getTimerARR(period, psc);
 8001db2:	4601      	mov	r1, r0
 8001db4:	4620      	mov	r0, r4
 8001db6:	f7ff ff57 	bl	8001c68 <getTimerARR>

		TIMx -> PSC = psc;
 8001dba:	62ae      	str	r6, [r5, #40]	; 0x28
		TIMx -> ARR = arr;
 8001dbc:	62e8      	str	r0, [r5, #44]	; 0x2c

		return true;
 8001dbe:	2001      	movs	r0, #1
 8001dc0:	e000      	b.n	8001dc4 <setTIM+0x3c>
	}else{
		return false;
 8001dc2:	2000      	movs	r0, #0
	}
}
 8001dc4:	bd70      	pop	{r4, r5, r6, pc}
		return false;
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	e7fc      	b.n	8001dc4 <setTIM+0x3c>
 8001dca:	bf00      	nop
 8001dcc:	f3af 8000 	nop.w
 8001dd0:	88e368f1 	.word	0x88e368f1
 8001dd4:	3ee4f8b5 	.word	0x3ee4f8b5
 8001dd8:	41200000 	.word	0x41200000

08001ddc <tim1SetRegUpdating>:

bool tim1RegUpdating = false;
void tim1SetRegUpdating()			{	tim1RegUpdating = true;		}
 8001ddc:	4b01      	ldr	r3, [pc, #4]	; (8001de4 <tim1SetRegUpdating+0x8>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	701a      	strb	r2, [r3, #0]
 8001de2:	4770      	bx	lr
 8001de4:	200002f0 	.word	0x200002f0

08001de8 <tim1ClrRegUpdating>:
bool tim1GetRegUpdating()			{	return tim1RegUpdating;		}
void tim1ClrRegUpdating()			{	tim1RegUpdating = false;	}
 8001de8:	4b01      	ldr	r3, [pc, #4]	; (8001df0 <tim1ClrRegUpdating+0x8>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	701a      	strb	r2, [r3, #0]
 8001dee:	4770      	bx	lr
 8001df0:	200002f0 	.word	0x200002f0

08001df4 <tim1SetRanout>:
bool tim1GetRegUpdating()			{	return tim1RegUpdating;		}
 8001df4:	4b03      	ldr	r3, [pc, #12]	; (8001e04 <tim1SetRanout+0x10>)

bool tim1RanOut = false;
void tim1SetRanout()
{	if( !tim1GetRegUpdating() )
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	b913      	cbnz	r3, 8001e00 <tim1SetRanout+0xc>
	tim1RanOut = true;
 8001dfa:	4b02      	ldr	r3, [pc, #8]	; (8001e04 <tim1SetRanout+0x10>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	705a      	strb	r2, [r3, #1]
}
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	200002f0 	.word	0x200002f0

08001e08 <tim1GetRanout>:
bool tim1GetRanout()			{	return tim1RanOut;		}
 8001e08:	4b01      	ldr	r3, [pc, #4]	; (8001e10 <tim1GetRanout+0x8>)
 8001e0a:	7858      	ldrb	r0, [r3, #1]
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	200002f0 	.word	0x200002f0

08001e14 <tim1ClrRanout>:
void tim1ClrRanout()			{	tim1RanOut = false;	}
 8001e14:	4b01      	ldr	r3, [pc, #4]	; (8001e1c <tim1ClrRanout+0x8>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	705a      	strb	r2, [r3, #1]
 8001e1a:	4770      	bx	lr
 8001e1c:	200002f0 	.word	0x200002f0

08001e20 <Class_Start>:

// functions to start the virtual COM port:

void Class_Start(void)
{
    LineCoding.BaudRate = 9600;
 8001e20:	4a07      	ldr	r2, [pc, #28]	; (8001e40 <Class_Start+0x20>)
 8001e22:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001e26:	6013      	str	r3, [r2, #0]
    LineCoding.DataBits = 8;
 8001e28:	2308      	movs	r3, #8
 8001e2a:	7193      	strb	r3, [r2, #6]
    LineCoding.Stopbits = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	7113      	strb	r3, [r2, #4]
    LineCoding.ParityType = 0;
 8001e30:	7153      	strb	r3, [r2, #5]
    Dtr_Rts = 0;
 8001e32:	4a04      	ldr	r2, [pc, #16]	; (8001e44 <Class_Start+0x24>)
 8001e34:	8013      	strh	r3, [r2, #0]
    receiving = true;
 8001e36:	4a04      	ldr	r2, [pc, #16]	; (8001e48 <Class_Start+0x28>)
 8001e38:	2101      	movs	r1, #1
 8001e3a:	7011      	strb	r1, [r2, #0]
    transmitting = false;
 8001e3c:	7053      	strb	r3, [r2, #1]
}
 8001e3e:	4770      	bx	lr
 8001e40:	20000524 	.word	0x20000524
 8001e44:	20000320 	.word	0x20000320
 8001e48:	200002f4 	.word	0x200002f4

08001e4c <Stall>:
void Stall(int physEpNum)
{
    trace("stall\n");
    uint32_t D, S, Maske;
    int logEpNum;
    logEpNum = physEpNum & 0x0F;
 8001e4c:	f000 030f 	and.w	r3, r0, #15
        Maske = EP_NoToggleBits | STAT_RX; // without STAT_TX and no DTOG_x
        S = 1 << 12;
    }
    else
    {
        Maske = EP_NoToggleBits | STAT_TX; // without STAT_RX and no DTOG_x
 8001e50:	f64b 728f 	movw	r2, #49039	; 0xbf8f
 8001e54:	f648 71bf 	movw	r1, #36799	; 0x8fbf
 8001e58:	4298      	cmp	r0, r3
 8001e5a:	bf18      	it	ne
 8001e5c:	460a      	movne	r2, r1
 8001e5e:	4298      	cmp	r0, r3
 8001e60:	bf0c      	ite	eq
 8001e62:	f44f 5080 	moveq.w	r0, #4096	; 0x1000
 8001e66:	2010      	movne	r0, #16
        S = 1 << 4;
    }
    D = USB_EpRegs(logEpNum);
 8001e68:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8001e6c:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	6819      	ldr	r1, [r3, #0]
    USB_EpRegs(logEpNum) = (D ^ S) & Maske;
 8001e74:	4048      	eors	r0, r1
 8001e76:	4010      	ands	r0, r2
 8001e78:	6018      	str	r0, [r3, #0]
}
 8001e7a:	4770      	bx	lr

08001e7c <UnStall>:
void UnStall(int physEpNum)
{
    trace("unstall\n");
    uint32_t D,Maske;
    uint32_t status;
    if ((physEpNum & 0x80)==0)
 8001e7c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001e80:	d117      	bne.n	8001eb2 <UnStall+0x36>
    {
        // it is an Out Endpoint
        status = (USB_EpRegs(physEpNum & 0x07) >> 12) & 0x03;
 8001e82:	f000 0007 	and.w	r0, r0, #7
 8001e86:	f100 5080 	add.w	r0, r0, #268435456	; 0x10000000
 8001e8a:	f500 50b8 	add.w	r0, r0, #5888	; 0x1700
 8001e8e:	0080      	lsls	r0, r0, #2
 8001e90:	6803      	ldr	r3, [r0, #0]
 8001e92:	f3c3 3301 	ubfx	r3, r3, #12, #2
        Maske  = EP_NoToggleBits;
        if (status==1) // Out stalled?
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d000      	beq.n	8001e9c <UnStall+0x20>
            // toggle bit 5:4  01 -> 10
            D = USB_EpRegs(physEpNum & 0x07) & Maske;
            USB_EpRegs(physEpNum & 0x07) = (D | (3 << 4));
        }
    }
}
 8001e9a:	4770      	bx	lr
            D = USB_EpRegs(physEpNum & 0x07) & Maske;
 8001e9c:	6803      	ldr	r3, [r0, #0]
 8001e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ea6:	041b      	lsls	r3, r3, #16
 8001ea8:	0c1b      	lsrs	r3, r3, #16
            USB_EpRegs(physEpNum & 0x07) = (D | (2 << 12));
 8001eaa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001eae:	6003      	str	r3, [r0, #0]
 8001eb0:	4770      	bx	lr
        status = (USB_EpRegs(physEpNum & 0x07) >> 4) & 0x03;
 8001eb2:	f000 0007 	and.w	r0, r0, #7
 8001eb6:	f100 5080 	add.w	r0, r0, #268435456	; 0x10000000
 8001eba:	f500 50b8 	add.w	r0, r0, #5888	; 0x1700
 8001ebe:	0080      	lsls	r0, r0, #2
 8001ec0:	6803      	ldr	r3, [r0, #0]
 8001ec2:	f3c3 1301 	ubfx	r3, r3, #4, #2
        if (status==1) //In stalled?
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d1e7      	bne.n	8001e9a <UnStall+0x1e>
            D = USB_EpRegs(physEpNum & 0x07) & Maske;
 8001eca:	6803      	ldr	r3, [r0, #0]
 8001ecc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ed4:	041b      	lsls	r3, r3, #16
 8001ed6:	0c1b      	lsrs	r3, r3, #16
            USB_EpRegs(physEpNum & 0x07) = (D | (3 << 4));
 8001ed8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001edc:	6003      	str	r3, [r0, #0]
}
 8001ede:	e7dc      	b.n	8001e9a <UnStall+0x1e>

08001ee0 <StallLogEP>:

void StallLogEP(int logEpNum)
{
 8001ee0:	b510      	push	{r4, lr}
 8001ee2:	4604      	mov	r4, r0
    Stall(logEpNum);
 8001ee4:	f7ff ffb2 	bl	8001e4c <Stall>
    Stall(logEpNum | phys_In);
 8001ee8:	f044 0080 	orr.w	r0, r4, #128	; 0x80
 8001eec:	f7ff ffae 	bl	8001e4c <Stall>
}
 8001ef0:	bd10      	pop	{r4, pc}

08001ef2 <ClearBuffer>:
        sprintf(buf,"clrBuf logEpNum=%i\n",logEpNum);
        trace(buf);
    #endif
    uint32_t D, Maske;
    Maske = EP_NoToggleBits | STAT_RX; // without STAT_TX and no DTOG_x
    D = USB_EpRegs(logEpNum);
 8001ef2:	f100 5080 	add.w	r0, r0, #268435456	; 0x10000000
 8001ef6:	f500 50b8 	add.w	r0, r0, #5888	; 0x1700
 8001efa:	0080      	lsls	r0, r0, #2
 8001efc:	6803      	ldr	r3, [r0, #0]
    USB_EpRegs(logEpNum) = (D ^ STAT_RX) & Maske;
 8001efe:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001f02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f0a:	041b      	lsls	r3, r3, #16
 8001f0c:	0c1b      	lsrs	r3, r3, #16
 8001f0e:	6003      	str	r3, [r0, #0]
}
 8001f10:	4770      	bx	lr

08001f12 <ValidateBuffer>:
        sprintf(buf,"validateBuf logEpNum=%i\n",logEpNum);
        trace(buf);
    #endif
    uint32_t D, Maske;
    Maske = EP_NoToggleBits | STAT_TX; // without STAT_RX and no DTOG_x
    D = USB_EpRegs(logEpNum);
 8001f12:	f100 5080 	add.w	r0, r0, #268435456	; 0x10000000
 8001f16:	f500 50b8 	add.w	r0, r0, #5888	; 0x1700
 8001f1a:	0080      	lsls	r0, r0, #2
 8001f1c:	6803      	ldr	r3, [r0, #0]
    USB_EpRegs(logEpNum) = (D ^ STAT_TX) & Maske;
 8001f1e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8001f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f2a:	041b      	lsls	r3, r3, #16
 8001f2c:	0c1b      	lsrs	r3, r3, #16
 8001f2e:	6003      	str	r3, [r0, #0]
}
 8001f30:	4770      	bx	lr
	...

08001f34 <InitEndpoints>:
}

// setup physical endpoints, e.g. after a reset command

void InitEndpoints(void)
{
 8001f34:	b430      	push	{r4, r5}
    trace("InitEndpoints\n");
    USB_CNTR = 1;          // disable reset and int
 8001f36:	4827      	ldr	r0, [pc, #156]	; (8001fd4 <InitEndpoints+0xa0>)
 8001f38:	2301      	movs	r3, #1
 8001f3a:	6003      	str	r3, [r0, #0]
    CMD.Configuration = 0; // nothing before CONFIGURED
 8001f3c:	4a26      	ldr	r2, [pc, #152]	; (8001fd8 <InitEndpoints+0xa4>)
 8001f3e:	2300      	movs	r3, #0
 8001f40:	7593      	strb	r3, [r2, #22]
    CMD.TransferLen = 0;   // nothing to transfer
 8001f42:	6093      	str	r3, [r2, #8]
    CMD.PacketLen = 0;     // nothing to transfer
 8001f44:	60d3      	str	r3, [r2, #12]
    CMD.TransferPtr = 0;
 8001f46:	6113      	str	r3, [r2, #16]
    USB_CNTR = 0;          // all int off
 8001f48:	6003      	str	r3, [r0, #0]

    suspended = false;
 8001f4a:	4a24      	ldr	r2, [pc, #144]	; (8001fdc <InitEndpoints+0xa8>)
 8001f4c:	7093      	strb	r3, [r2, #2]
    configurationSet = false;
 8001f4e:	70d3      	strb	r3, [r2, #3]
    transmitting = false;
 8001f50:	7053      	strb	r3, [r2, #1]
    receiving = false;
 8001f52:	7013      	strb	r3, [r2, #0]

    // EP0 = Control, IN and OUT
    EpTable[0].TxOffset = Ep0TxOffset;
 8001f54:	4a22      	ldr	r2, [pc, #136]	; (8001fe0 <InitEndpoints+0xac>)
 8001f56:	6013      	str	r3, [r2, #0]
    EpTable[0].TxCount = 0;
 8001f58:	6053      	str	r3, [r2, #4]
    EpTable[0].RxOffset = Ep0RxOffset;
 8001f5a:	2140      	movs	r1, #64	; 0x40
 8001f5c:	6091      	str	r1, [r2, #8]
    EpTable[0].RxCount = EpCtrlLenId;
 8001f5e:	f44f 4104 	mov.w	r1, #33792	; 0x8400
 8001f62:	60d1      	str	r1, [r2, #12]

    // EP1 = Bulk IN (only IN)
    EpTable[1].TxOffset = Ep1TxAOffset;
 8001f64:	3210      	adds	r2, #16
 8001f66:	2480      	movs	r4, #128	; 0x80
 8001f68:	6014      	str	r4, [r2, #0]
    EpTable[1].TxCount = 0;
 8001f6a:	6053      	str	r3, [r2, #4]
    EpTable[1].RxOffset = Ep1TxBOffset; // here 2nd tx buffer
 8001f6c:	25c0      	movs	r5, #192	; 0xc0
 8001f6e:	6095      	str	r5, [r2, #8]
    EpTable[1].RxCount = EpBulkLenId;
 8001f70:	60d1      	str	r1, [r2, #12]

    // EP2 = Bulk OUT (only OUT)
    EpTable[2].TxOffset = Ep2RxAOffset;
 8001f72:	3210      	adds	r2, #16
 8001f74:	f44f 7580 	mov.w	r5, #256	; 0x100
 8001f78:	6015      	str	r5, [r2, #0]
    EpTable[2].TxCount = EpBulkLenId;
 8001f7a:	6051      	str	r1, [r2, #4]
    EpTable[2].RxOffset = Ep2RxBOffset;
 8001f7c:	f44f 75a0 	mov.w	r5, #320	; 0x140
 8001f80:	6095      	str	r5, [r2, #8]
    EpTable[2].RxCount = EpBulkLenId;
 8001f82:	60d1      	str	r1, [r2, #12]

    // EP3 = Int, IN and OUT
    EpTable[3].TxOffset = Ep3TxOffset;
 8001f84:	3210      	adds	r2, #16
 8001f86:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001f8a:	6011      	str	r1, [r2, #0]
    EpTable[3].TxCount = EpIntLenId;
 8001f8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f90:	6051      	str	r1, [r2, #4]
    EpTable[3].RxOffset = Ep3RxOffset;
 8001f92:	f44f 7592 	mov.w	r5, #292	; 0x124
 8001f96:	6095      	str	r5, [r2, #8]
    EpTable[3].RxCount = EpIntLenId;
 8001f98:	60d1      	str	r1, [r2, #12]

    USB_BTABLE = EpTableOffset;
 8001f9a:	f5a2 62e0 	sub.w	r2, r2, #1792	; 0x700
 8001f9e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001fa2:	6011      	str	r1, [r2, #0]

    USB_EP0R =
 8001fa4:	3a50      	subs	r2, #80	; 0x50
 8001fa6:	f243 2120 	movw	r1, #12832	; 0x3220
 8001faa:	6011      	str	r1, [r2, #0]
        (3 << 12) |              // STAT_RX = 3, rx enabled
        (2 << 4) |               // STAT_TX = 2, send nak
        (1 << 9) |               // EP_TYPE = 1, control
        logEpCtrl;

    USB_EP1R =
 8001fac:	3204      	adds	r2, #4
 8001fae:	2121      	movs	r1, #33	; 0x21
 8001fb0:	6011      	str	r1, [r2, #0]
        (0 << 12) |              // STAT_RX = 0, rx disabled
        (2 << 4) |               // STAT_TX = 2, send nak
        (0 << 9) |               // EP_TYPE = 0, bulk
        logEpBulkIn;

    USB_EP2R =
 8001fb2:	3204      	adds	r2, #4
 8001fb4:	f243 0102 	movw	r1, #12290	; 0x3002
 8001fb8:	6011      	str	r1, [r2, #0]
        (3 << 12) |              // STAT_RX = 3, rx enabled
        (0 << 4) |               // STAT_TX = 0, tx disabled
        (0 << 9) |               // EP_TYPE = 0, bulk
        logEpBulkOut;

    USB_EP3R =
 8001fba:	3204      	adds	r2, #4
 8001fbc:	f243 6123 	movw	r1, #13859	; 0x3623
 8001fc0:	6011      	str	r1, [r2, #0]
        (3 << 12) |              // STAT_RX = 3, rx enabled
        (2 << 4) |               // STAT_TX = 2, send nak
        (3 << 9) |               // EP_TYPE = 0, bulk
        logEpInt;

    USB_ISTR = 0;                // remove pending interrupts
 8001fc2:	3238      	adds	r2, #56	; 0x38
 8001fc4:	6013      	str	r3, [r2, #0]
    USB_CNTR =
 8001fc6:	f44f 431f 	mov.w	r3, #40704	; 0x9f00
 8001fca:	6003      	str	r3, [r0, #0]
    USB_DADDR = 0x80 | adr;
 8001fcc:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <InitEndpoints+0xb0>)
 8001fce:	601c      	str	r4, [r3, #0]
        CTRM |                   // Int after ACK packages in or out
        RESETM |                 // Int after reset
        SUSPM | WKUPM | ESOFM |
        SOFM;                    // Int every 1ms frame
    USB_SetAddress(0);
}
 8001fd0:	bc30      	pop	{r4, r5}
 8001fd2:	4770      	bx	lr
 8001fd4:	40005c40 	.word	0x40005c40
 8001fd8:	2000052c 	.word	0x2000052c
 8001fdc:	200002f4 	.word	0x200002f4
 8001fe0:	40006320 	.word	0x40006320
 8001fe4:	40005c4c 	.word	0x40005c4c

08001fe8 <Nop>:

// for small delays
void Nop(volatile uint32_t count)
{
 8001fe8:	b082      	sub	sp, #8
 8001fea:	9001      	str	r0, [sp, #4]
    while (count)
 8001fec:	9b01      	ldr	r3, [sp, #4]
 8001fee:	b133      	cbz	r3, 8001ffe <Nop+0x16>
    {
        __asm__ volatile ("NOP");
 8001ff0:	bf00      	nop
        count--;
 8001ff2:	9b01      	ldr	r3, [sp, #4]
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	9301      	str	r3, [sp, #4]
    while (count)
 8001ff8:	9b01      	ldr	r3, [sp, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f8      	bne.n	8001ff0 <Nop+0x8>
    }
}
 8001ffe:	b002      	add	sp, #8
 8002000:	4770      	bx	lr
	...

08002004 <ReadControlBlock>:


int ReadControlBlock(uint8_t* PBuffer, int maxlen)
{
 8002004:	b538      	push	{r3, r4, r5, lr}
    int count, i, n;
    UMEM_FAKEWIDTH D;
    UMEM_FAKEWIDTH* P;

    count = EpTable[0].RxCount & 0x3FF;
 8002006:	4b12      	ldr	r3, [pc, #72]	; (8002050 <ReadControlBlock+0x4c>)
 8002008:	68dc      	ldr	r4, [r3, #12]
 800200a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800200e:	428c      	cmp	r4, r1
 8002010:	bfa8      	it	ge
 8002012:	460c      	movge	r4, r1
    if (count > maxlen)
    {
        count = maxlen;
    }

    if (count)
 8002014:	b1b4      	cbz	r4, 8002044 <ReadControlBlock+0x40>
    {
        P = (UMEM_FAKEWIDTH*) EPControlRxBuffer;
        n = 2;
        i = count;
        D = *P++;
 8002016:	f5a3 7328 	sub.w	r3, r3, #672	; 0x2a0
 800201a:	6819      	ldr	r1, [r3, #0]
        while (i > 0)
 800201c:	2c00      	cmp	r4, #0
 800201e:	dd11      	ble.n	8002044 <ReadControlBlock+0x40>
        {
            *PBuffer = D & 0xFF;
 8002020:	7001      	strb	r1, [r0, #0]
            D = D >> 8;
 8002022:	0a09      	lsrs	r1, r1, #8
 8002024:	4602      	mov	r2, r0
 8002026:	3801      	subs	r0, #1
 8002028:	4420      	add	r0, r4
        D = *P++;
 800202a:	4d0a      	ldr	r5, [pc, #40]	; (8002054 <ReadControlBlock+0x50>)
            --n;
 800202c:	2301      	movs	r3, #1
 800202e:	e007      	b.n	8002040 <ReadControlBlock+0x3c>
            *PBuffer = D & 0xFF;
 8002030:	f802 1f01 	strb.w	r1, [r2, #1]!
            if (!n)
 8002034:	3b01      	subs	r3, #1
            D = D >> 8;
 8002036:	bf11      	iteee	ne
 8002038:	0a09      	lsrne	r1, r1, #8
            {
                D = *P++;
 800203a:	6829      	ldreq	r1, [r5, #0]
 800203c:	3504      	addeq	r5, #4
                n = 2;
 800203e:	2302      	moveq	r3, #2
        while (i > 0)
 8002040:	4282      	cmp	r2, r0
 8002042:	d1f5      	bne.n	8002030 <ReadControlBlock+0x2c>
            }
            --i;
            ++PBuffer;
        }
    }
    ClearBuffer(logEpCtrl);
 8002044:	2000      	movs	r0, #0
 8002046:	f7ff ff54 	bl	8001ef2 <ClearBuffer>
    return count;
}
 800204a:	4620      	mov	r0, r4
 800204c:	bd38      	pop	{r3, r4, r5, pc}
 800204e:	bf00      	nop
 8002050:	40006320 	.word	0x40006320
 8002054:	40006084 	.word	0x40006084

08002058 <WriteControlBlock>:

int WriteControlBlock(uint8_t* PBuffer, int count)
{
 8002058:	b570      	push	{r4, r5, r6, lr}
    #endif
    UMEM_FAKEWIDTH A, L;
    UMEM_FAKEWIDTH* P;
    int i, n;

    if (count > EpCtrlMaxLen)
 800205a:	2940      	cmp	r1, #64	; 0x40
 800205c:	dd07      	ble.n	800206e <WriteControlBlock+0x16>
    {
        count = EpCtrlMaxLen;
    }
    EpTable[0].TxCount = count;
 800205e:	2640      	movs	r6, #64	; 0x40
 8002060:	4b13      	ldr	r3, [pc, #76]	; (80020b0 <WriteControlBlock+0x58>)
 8002062:	605e      	str	r6, [r3, #4]
    {
        A = 0;
        i = 0;
        n = 0;
        P = (UMEM_FAKEWIDTH*) EPControlTxBuffer;
        while (i < count)
 8002064:	4605      	mov	r5, r0
 8002066:	2300      	movs	r3, #0
 8002068:	4912      	ldr	r1, [pc, #72]	; (80020b4 <WriteControlBlock+0x5c>)
 800206a:	461c      	mov	r4, r3
 800206c:	e00b      	b.n	8002086 <WriteControlBlock+0x2e>
    EpTable[0].TxCount = count;
 800206e:	4b10      	ldr	r3, [pc, #64]	; (80020b0 <WriteControlBlock+0x58>)
 8002070:	6059      	str	r1, [r3, #4]
    if (count)
 8002072:	b119      	cbz	r1, 800207c <WriteControlBlock+0x24>
        while (i < count)
 8002074:	2900      	cmp	r1, #0
 8002076:	dd12      	ble.n	800209e <WriteControlBlock+0x46>
 8002078:	460e      	mov	r6, r1
 800207a:	e7f3      	b.n	8002064 <WriteControlBlock+0xc>
 800207c:	460e      	mov	r6, r1
 800207e:	e012      	b.n	80020a6 <WriteControlBlock+0x4e>
 8002080:	1a2a      	subs	r2, r5, r0
 8002082:	42b2      	cmp	r2, r6
 8002084:	da0d      	bge.n	80020a2 <WriteControlBlock+0x4a>
        {
            L = *PBuffer++;
 8002086:	f815 2b01 	ldrb.w	r2, [r5], #1
            A = A | (L << n);
 800208a:	409a      	lsls	r2, r3
 800208c:	4314      	orrs	r4, r2
            n += 8;
 800208e:	3308      	adds	r3, #8
            if (n > 8)
 8002090:	2b08      	cmp	r3, #8
 8002092:	ddf5      	ble.n	8002080 <WriteControlBlock+0x28>
            {
                n = 0;
                *P++ = A;
 8002094:	600c      	str	r4, [r1, #0]
 8002096:	3104      	adds	r1, #4
                n = 0;
 8002098:	2400      	movs	r4, #0
                A = 0;
 800209a:	4623      	mov	r3, r4
 800209c:	e7f0      	b.n	8002080 <WriteControlBlock+0x28>
        while (i < count)
 800209e:	460e      	mov	r6, r1
 80020a0:	e001      	b.n	80020a6 <WriteControlBlock+0x4e>
            }
            ++i;
        }
        if (n)
 80020a2:	b103      	cbz	r3, 80020a6 <WriteControlBlock+0x4e>
        {
            *P = A;
 80020a4:	600c      	str	r4, [r1, #0]
        }
    }
    ValidateBuffer(logEpCtrl);
 80020a6:	2000      	movs	r0, #0
 80020a8:	f7ff ff33 	bl	8001f12 <ValidateBuffer>
    // Nop(100); // Add extra delay if enumerations fails
    return count;
}
 80020ac:	4630      	mov	r0, r6
 80020ae:	bd70      	pop	{r4, r5, r6, pc}
 80020b0:	40006320 	.word	0x40006320
 80020b4:	40006000 	.word	0x40006000

080020b8 <ACK>:

void ACK(void)
{
 80020b8:	b508      	push	{r3, lr}
    WriteControlBlock((uint8_t*) &always0, 0);
 80020ba:	2100      	movs	r1, #0
 80020bc:	4801      	ldr	r0, [pc, #4]	; (80020c4 <ACK+0xc>)
 80020be:	f7ff ffcb 	bl	8002058 <WriteControlBlock>
}
 80020c2:	bd08      	pop	{r3, pc}
 80020c4:	0800996c 	.word	0x0800996c

080020c8 <IsStandardRequest>:

// identify request type in setup package (Standard, Class, Vendor)
bool IsStandardRequest(void)
{
    return (CMD.SetupPacket.bmRequestType & 0x60) == 0;
 80020c8:	4b03      	ldr	r3, [pc, #12]	; (80020d8 <IsStandardRequest+0x10>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	f013 0f60 	tst.w	r3, #96	; 0x60
}
 80020d0:	bf0c      	ite	eq
 80020d2:	2001      	moveq	r0, #1
 80020d4:	2000      	movne	r0, #0
 80020d6:	4770      	bx	lr
 80020d8:	2000052c 	.word	0x2000052c

080020dc <IsClassRequest>:

bool IsClassRequest(void)
{
    return (CMD.SetupPacket.bmRequestType & 0x60) == 0x20;
 80020dc:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <IsClassRequest+0x14>)
 80020de:	7818      	ldrb	r0, [r3, #0]
 80020e0:	f000 0060 	and.w	r0, r0, #96	; 0x60
}
 80020e4:	2820      	cmp	r0, #32
 80020e6:	bf14      	ite	ne
 80020e8:	2000      	movne	r0, #0
 80020ea:	2001      	moveq	r0, #1
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	2000052c 	.word	0x2000052c

080020f4 <DescriptorBlockwiseIn>:
    return (CMD.SetupPacket.bmRequestType & 0x60) == 0x40;
}

// start control block control transfer to the host
void DescriptorBlockwiseIn(void)
{
 80020f4:	b538      	push	{r3, r4, r5, lr}
    int i, j;
    uint8_t* Q;

    if ((CMD.SetupPacket.bmRequestType & 0x80) == 0)
 80020f6:	4b0d      	ldr	r3, [pc, #52]	; (800212c <DescriptorBlockwiseIn+0x38>)
 80020f8:	f993 3000 	ldrsb.w	r3, [r3]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	db00      	blt.n	8002102 <DescriptorBlockwiseIn+0xe>
    CMD.TransferLen = CMD.TransferLen - j; // rest number of bytes
    if (CMD.TransferLen < 0)
    {
        CMD.TransferLen = 0;
    }
}
 8002100:	bd38      	pop	{r3, r4, r5, pc}
    i = CMD.TransferLen;
 8002102:	4c0a      	ldr	r4, [pc, #40]	; (800212c <DescriptorBlockwiseIn+0x38>)
 8002104:	68a1      	ldr	r1, [r4, #8]
    Q = CMD.TransferPtr; // source
 8002106:	6925      	ldr	r5, [r4, #16]
    j = WriteControlBlock(Q, i);
 8002108:	68e3      	ldr	r3, [r4, #12]
 800210a:	4299      	cmp	r1, r3
 800210c:	bfa8      	it	ge
 800210e:	4619      	movge	r1, r3
 8002110:	4628      	mov	r0, r5
 8002112:	f7ff ffa1 	bl	8002058 <WriteControlBlock>
    CMD.TransferPtr = Q + j;               // pointer to the rest
 8002116:	4405      	add	r5, r0
 8002118:	6125      	str	r5, [r4, #16]
    CMD.TransferLen = CMD.TransferLen - j; // rest number of bytes
 800211a:	68a3      	ldr	r3, [r4, #8]
    if (CMD.TransferLen < 0)
 800211c:	1a1b      	subs	r3, r3, r0
 800211e:	d401      	bmi.n	8002124 <DescriptorBlockwiseIn+0x30>
    CMD.TransferLen = CMD.TransferLen - j; // rest number of bytes
 8002120:	60a3      	str	r3, [r4, #8]
 8002122:	e7ed      	b.n	8002100 <DescriptorBlockwiseIn+0xc>
        CMD.TransferLen = 0;
 8002124:	4b01      	ldr	r3, [pc, #4]	; (800212c <DescriptorBlockwiseIn+0x38>)
 8002126:	2200      	movs	r2, #0
 8002128:	609a      	str	r2, [r3, #8]
 800212a:	e7e9      	b.n	8002100 <DescriptorBlockwiseIn+0xc>
 800212c:	2000052c 	.word	0x2000052c

08002130 <DoSetClearFeature>:

// Functions for processing incoming requests:

// USB-Request "SET FEATURE" and "CLEAR FEATURE"
void DoSetClearFeature(bool value)
{
 8002130:	b508      	push	{r3, lr}
    int Feature;
    int FuerWen;
    int EP;

    Feature = CMD.SetupPacket.wValue;
 8002132:	4b16      	ldr	r3, [pc, #88]	; (800218c <DoSetClearFeature+0x5c>)
 8002134:	885a      	ldrh	r2, [r3, #2]
        char buf[30];
        sprintf(buf,"doSetClearFeature for %02x\n",FuerWen);
        trace(buf);
    #endif

    switch (FuerWen)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d005      	beq.n	8002148 <DoSetClearFeature+0x18>
 800213c:	b12b      	cbz	r3, 800214a <DoSetClearFeature+0x1a>
 800213e:	2b02      	cmp	r3, #2
 8002140:	d008      	beq.n	8002154 <DoSetClearFeature+0x24>
            else StallLogEP(logEpCtrl);
            break;

        default:
            trace("forElse\n");
            StallLogEP(logEpCtrl); // send nak
 8002142:	2000      	movs	r0, #0
 8002144:	f7ff fecc 	bl	8001ee0 <StallLogEP>
    }
}
 8002148:	bd08      	pop	{r3, pc}
            if (Feature == 1)
 800214a:	2a01      	cmp	r2, #1
 800214c:	d1fc      	bne.n	8002148 <DoSetClearFeature+0x18>
                CMD.RemoteWakeup = value;
 800214e:	4b0f      	ldr	r3, [pc, #60]	; (800218c <DoSetClearFeature+0x5c>)
 8002150:	7518      	strb	r0, [r3, #20]
 8002152:	e7f9      	b.n	8002148 <DoSetClearFeature+0x18>
            if (Feature == 0) //Feature Stall
 8002154:	b9b2      	cbnz	r2, 8002184 <DoSetClearFeature+0x54>
    EP = CMD.SetupPacket.wIndex;
 8002156:	4b0d      	ldr	r3, [pc, #52]	; (800218c <DoSetClearFeature+0x5c>)
 8002158:	889b      	ldrh	r3, [r3, #4]
                switch(EP)
 800215a:	2b81      	cmp	r3, #129	; 0x81
 800215c:	d007      	beq.n	800216e <DoSetClearFeature+0x3e>
 800215e:	2b83      	cmp	r3, #131	; 0x83
 8002160:	d005      	beq.n	800216e <DoSetClearFeature+0x3e>
 8002162:	2b02      	cmp	r3, #2
 8002164:	d003      	beq.n	800216e <DoSetClearFeature+0x3e>
                        StallLogEP(logEpCtrl);
 8002166:	2000      	movs	r0, #0
 8002168:	f7ff feba 	bl	8001ee0 <StallLogEP>
 800216c:	e7ec      	b.n	8002148 <DoSetClearFeature+0x18>
                        if (value)
 800216e:	b128      	cbz	r0, 800217c <DoSetClearFeature+0x4c>
                            Stall(EP);
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff fe6b 	bl	8001e4c <Stall>
                        ACK();
 8002176:	f7ff ff9f 	bl	80020b8 <ACK>
                        break;
 800217a:	e7e5      	b.n	8002148 <DoSetClearFeature+0x18>
                            UnStall(EP);
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff fe7d 	bl	8001e7c <UnStall>
 8002182:	e7f8      	b.n	8002176 <DoSetClearFeature+0x46>
            else StallLogEP(logEpCtrl);
 8002184:	2000      	movs	r0, #0
 8002186:	f7ff feab 	bl	8001ee0 <StallLogEP>
 800218a:	e7dd      	b.n	8002148 <DoSetClearFeature+0x18>
 800218c:	2000052c 	.word	0x2000052c

08002190 <DoGetStatus>:

// USB-Request "GET STATUS"
void DoGetStatus(void)
{
 8002190:	b500      	push	{lr}
 8002192:	b083      	sub	sp, #12
    uint8_t Buf[4];
    int FuerWen;
    int EP;
    FuerWen = CMD.SetupPacket.bmRequestType;
 8002194:	4a28      	ldr	r2, [pc, #160]	; (8002238 <DoGetStatus+0xa8>)
 8002196:	7813      	ldrb	r3, [r2, #0]
    EP = CMD.SetupPacket.wIndex;
 8002198:	8891      	ldrh	r1, [r2, #4]

    Buf[0] = 0;
 800219a:	2200      	movs	r2, #0
 800219c:	f88d 2004 	strb.w	r2, [sp, #4]
    Buf[1] = 0;
 80021a0:	f88d 2005 	strb.w	r2, [sp, #5]
        char buf[30];
        sprintf(buf,"doGetStatus for %02x\n",FuerWen);
        trace(buf);
    #endif

    switch (FuerWen)
 80021a4:	2b81      	cmp	r3, #129	; 0x81
 80021a6:	d016      	beq.n	80021d6 <DoGetStatus+0x46>
 80021a8:	2b82      	cmp	r3, #130	; 0x82
 80021aa:	d020      	beq.n	80021ee <DoGetStatus+0x5e>
 80021ac:	2b80      	cmp	r3, #128	; 0x80
 80021ae:	d003      	beq.n	80021b8 <DoGetStatus+0x28>
            }
            break;

        default:
            trace("forElse\n");
            StallLogEP(logEpCtrl); // send nak
 80021b0:	2000      	movs	r0, #0
 80021b2:	f7ff fe95 	bl	8001ee0 <StallLogEP>
            return;
 80021b6:	e017      	b.n	80021e8 <DoGetStatus+0x58>
            if (CMD.RemoteWakeup)
 80021b8:	4b1f      	ldr	r3, [pc, #124]	; (8002238 <DoGetStatus+0xa8>)
 80021ba:	7d1b      	ldrb	r3, [r3, #20]
 80021bc:	b113      	cbz	r3, 80021c4 <DoGetStatus+0x34>
                Buf[0] |= 2;
 80021be:	2302      	movs	r3, #2
 80021c0:	f88d 3004 	strb.w	r3, [sp, #4]
            if (CMD.SelfPowered)
 80021c4:	4b1c      	ldr	r3, [pc, #112]	; (8002238 <DoGetStatus+0xa8>)
 80021c6:	7d5b      	ldrb	r3, [r3, #21]
 80021c8:	b12b      	cbz	r3, 80021d6 <DoGetStatus+0x46>
                Buf[0] |= 1;
 80021ca:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80021ce:	f043 0301 	orr.w	r3, r3, #1
 80021d2:	f88d 3004 	strb.w	r3, [sp, #4]
    }

    //Buf[1] = 0;
    CMD.PacketLen = EpCtrlMaxLen;
 80021d6:	4b18      	ldr	r3, [pc, #96]	; (8002238 <DoGetStatus+0xa8>)
 80021d8:	2240      	movs	r2, #64	; 0x40
 80021da:	60da      	str	r2, [r3, #12]
    CMD.TransferLen = 2;
 80021dc:	2202      	movs	r2, #2
 80021de:	609a      	str	r2, [r3, #8]
    CMD.TransferPtr = Buf;
 80021e0:	aa01      	add	r2, sp, #4
 80021e2:	611a      	str	r2, [r3, #16]
    DescriptorBlockwiseIn();
 80021e4:	f7ff ff86 	bl	80020f4 <DescriptorBlockwiseIn>
}
 80021e8:	b003      	add	sp, #12
 80021ea:	f85d fb04 	ldr.w	pc, [sp], #4
            switch (EP)
 80021ee:	2981      	cmp	r1, #129	; 0x81
 80021f0:	d010      	beq.n	8002214 <DoGetStatus+0x84>
 80021f2:	2983      	cmp	r1, #131	; 0x83
 80021f4:	d017      	beq.n	8002226 <DoGetStatus+0x96>
 80021f6:	2902      	cmp	r1, #2
 80021f8:	d003      	beq.n	8002202 <DoGetStatus+0x72>
                    StallLogEP(logEpCtrl); // unknown, stall
 80021fa:	2000      	movs	r0, #0
 80021fc:	f7ff fe70 	bl	8001ee0 <StallLogEP>
                    return;
 8002200:	e7f2      	b.n	80021e8 <DoGetStatus+0x58>
                    if (((USB_EpRegs(2) >> 12) & 0x03) ==1)
 8002202:	4b0e      	ldr	r3, [pc, #56]	; (800223c <DoGetStatus+0xac>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f3c3 3301 	ubfx	r3, r3, #12, #2
 800220a:	2b01      	cmp	r3, #1
 800220c:	d1e3      	bne.n	80021d6 <DoGetStatus+0x46>
                        Buf[0] = 1;
 800220e:	f88d 3004 	strb.w	r3, [sp, #4]
 8002212:	e7e0      	b.n	80021d6 <DoGetStatus+0x46>
                    if (((USB_EpRegs(1) >>  4) & 0x03) ==1)
 8002214:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <DoGetStatus+0xb0>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800221c:	2b01      	cmp	r3, #1
 800221e:	d1da      	bne.n	80021d6 <DoGetStatus+0x46>
                        Buf[0] = 1;
 8002220:	f88d 3004 	strb.w	r3, [sp, #4]
 8002224:	e7d7      	b.n	80021d6 <DoGetStatus+0x46>
                    if (((USB_EpRegs(3) >>  4) & 0x03) ==1)
 8002226:	4b07      	ldr	r3, [pc, #28]	; (8002244 <DoGetStatus+0xb4>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800222e:	2b01      	cmp	r3, #1
 8002230:	d1d1      	bne.n	80021d6 <DoGetStatus+0x46>
                        Buf[0] = 1;
 8002232:	f88d 3004 	strb.w	r3, [sp, #4]
 8002236:	e7ce      	b.n	80021d6 <DoGetStatus+0x46>
 8002238:	2000052c 	.word	0x2000052c
 800223c:	40005c08 	.word	0x40005c08
 8002240:	40005c04 	.word	0x40005c04
 8002244:	40005c0c 	.word	0x40005c0c

08002248 <DoGetDescriptor>:

// Send descriptors to the host
void DoGetDescriptor(void)
{
 8002248:	b508      	push	{r3, lr}
    uint16_t Type, Index;
    int aLen;
    const uint8_t* P;

    Type = CMD.SetupPacket.wValue >> 8;
 800224a:	4b1a      	ldr	r3, [pc, #104]	; (80022b4 <DoGetDescriptor+0x6c>)
 800224c:	885a      	ldrh	r2, [r3, #2]
        char buf[30];
        sprintf(buf,"doGetDescr type %04x\n",Type);
        trace(buf);
    #endif

    switch (Type)
 800224e:	0a13      	lsrs	r3, r2, #8
 8002250:	2b02      	cmp	r3, #2
 8002252:	d029      	beq.n	80022a8 <DoGetDescriptor+0x60>
 8002254:	2b03      	cmp	r3, #3
 8002256:	d013      	beq.n	8002280 <DoGetDescriptor+0x38>
 8002258:	2b01      	cmp	r3, #1
 800225a:	d003      	beq.n	8002264 <DoGetDescriptor+0x1c>
            break;
        }
        default:
            trace("descElse\n");
            {
                StallLogEP(logEpCtrl); // unknown, stall
 800225c:	2000      	movs	r0, #0
 800225e:	f7ff fe3f 	bl	8001ee0 <StallLogEP>
 8002262:	e00c      	b.n	800227e <DoGetDescriptor+0x36>
                P = DeviceDescriptor;
 8002264:	4914      	ldr	r1, [pc, #80]	; (80022b8 <DoGetDescriptor+0x70>)
                aLen = LEN_DEVICE;
 8002266:	2012      	movs	r0, #18

    if (aLen < 0)
        return;

    // do not send more that the host wants
    if (aLen > CMD.SetupPacket.wLength)
 8002268:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <DoGetDescriptor+0x6c>)
 800226a:	88da      	ldrh	r2, [r3, #6]
 800226c:	4282      	cmp	r2, r0
 800226e:	bfa8      	it	ge
 8002270:	4602      	movge	r2, r0
    {
        aLen = CMD.SetupPacket.wLength;
    }
    CMD.PacketLen = EpCtrlMaxLen;
 8002272:	2040      	movs	r0, #64	; 0x40
 8002274:	60d8      	str	r0, [r3, #12]
    CMD.TransferLen = aLen;
 8002276:	609a      	str	r2, [r3, #8]
    CMD.TransferPtr = (uint8_t*) P;
 8002278:	6119      	str	r1, [r3, #16]
    DescriptorBlockwiseIn();
 800227a:	f7ff ff3b 	bl	80020f4 <DescriptorBlockwiseIn>
}
 800227e:	bd08      	pop	{r3, pc}
            switch (Index)
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	2a03      	cmp	r2, #3
 8002284:	d80c      	bhi.n	80022a0 <DoGetDescriptor+0x58>
 8002286:	e8df f002 	tbb	[pc, r2]
 800228a:	1202      	.short	0x1202
 800228c:	0805      	.short	0x0805
                    P = StringLang;
 800228e:	490b      	ldr	r1, [pc, #44]	; (80022bc <DoGetDescriptor+0x74>)
                    aLen = 4;
 8002290:	2004      	movs	r0, #4
 8002292:	e7e9      	b.n	8002268 <DoGetDescriptor+0x20>
                    P = ProductStringDescriptor;
 8002294:	490a      	ldr	r1, [pc, #40]	; (80022c0 <DoGetDescriptor+0x78>)
                    aLen = ProductStringDescriptor[0];
 8002296:	2020      	movs	r0, #32
 8002298:	e7e6      	b.n	8002268 <DoGetDescriptor+0x20>
                    P = StringSerial;
 800229a:	490a      	ldr	r1, [pc, #40]	; (80022c4 <DoGetDescriptor+0x7c>)
                    aLen = StringSerial[0];
 800229c:	201a      	movs	r0, #26
 800229e:	e7e3      	b.n	8002268 <DoGetDescriptor+0x20>
                    StallLogEP(logEpCtrl); // unknown, stall
 80022a0:	2000      	movs	r0, #0
 80022a2:	f7ff fe1d 	bl	8001ee0 <StallLogEP>
 80022a6:	e7ea      	b.n	800227e <DoGetDescriptor+0x36>
                P = ConfigDescriptor;
 80022a8:	4907      	ldr	r1, [pc, #28]	; (80022c8 <DoGetDescriptor+0x80>)
                aLen = (aLen << 8) | ConfigDescriptor[2];
 80022aa:	2043      	movs	r0, #67	; 0x43
 80022ac:	e7dc      	b.n	8002268 <DoGetDescriptor+0x20>
                    P = VendorStringDescriptor;
 80022ae:	4907      	ldr	r1, [pc, #28]	; (80022cc <DoGetDescriptor+0x84>)
                    aLen = VendorStringDescriptor[0];
 80022b0:	2010      	movs	r0, #16
 80022b2:	e7d9      	b.n	8002268 <DoGetDescriptor+0x20>
 80022b4:	2000052c 	.word	0x2000052c
 80022b8:	080099b4 	.word	0x080099b4
 80022bc:	08009a04 	.word	0x08009a04
 80022c0:	080099c8 	.word	0x080099c8
 80022c4:	080099e8 	.word	0x080099e8
 80022c8:	08009970 	.word	0x08009970
 80022cc:	08009a08 	.word	0x08009a08

080022d0 <DoSetAddress>:

// received an adderss
void DoSetAddress(void)
{
 80022d0:	b508      	push	{r3, lr}
    ACK();
 80022d2:	f7ff fef1 	bl	80020b8 <ACK>
    DeviceAddress=CMD.SetupPacket.wValue;
 80022d6:	4b02      	ldr	r3, [pc, #8]	; (80022e0 <DoSetAddress+0x10>)
 80022d8:	789a      	ldrb	r2, [r3, #2]
 80022da:	4b02      	ldr	r3, [pc, #8]	; (80022e4 <DoSetAddress+0x14>)
 80022dc:	711a      	strb	r2, [r3, #4]
}
 80022de:	bd08      	pop	{r3, pc}
 80022e0:	2000052c 	.word	0x2000052c
 80022e4:	200002f4 	.word	0x200002f4

080022e8 <DoSetConfiguration>:

// USB-Request "SET CONFIGURATION"
void DoSetConfiguration(void)
{
 80022e8:	b508      	push	{r3, lr}
    bool haveConfig;

    haveConfig = Class_Compare(CMD.SetupPacket.wValue);
 80022ea:	4b09      	ldr	r3, [pc, #36]	; (8002310 <DoSetConfiguration+0x28>)
    if (CMD.SetupPacket.wValue == 0)
 80022ec:	885b      	ldrh	r3, [r3, #2]
 80022ee:	b153      	cbz	r3, 8002306 <DoSetConfiguration+0x1e>
        configurationSet = false;
    }
    else if (haveConfig)
    {
        USB_ConfigDevice(true);
        Class_Start();
 80022f0:	f7ff fd96 	bl	8001e20 <Class_Start>
        CMD.Configuration = CMD.SetupPacket.wValue & 0xFF;
 80022f4:	4b06      	ldr	r3, [pc, #24]	; (8002310 <DoSetConfiguration+0x28>)
 80022f6:	885a      	ldrh	r2, [r3, #2]
 80022f8:	759a      	strb	r2, [r3, #22]
        configurationSet = true;
 80022fa:	4b06      	ldr	r3, [pc, #24]	; (8002314 <DoSetConfiguration+0x2c>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	70da      	strb	r2, [r3, #3]
        ACK();
 8002300:	f7ff feda 	bl	80020b8 <ACK>
    {
        CMD.Configuration = 0;
        configurationSet = false;
        Stall(0);
    }
}
 8002304:	e003      	b.n	800230e <DoSetConfiguration+0x26>
        CMD.Configuration = CMD.SetupPacket.wValue & 0xFF;
 8002306:	4a02      	ldr	r2, [pc, #8]	; (8002310 <DoSetConfiguration+0x28>)
 8002308:	7593      	strb	r3, [r2, #22]
        configurationSet = false;
 800230a:	4a02      	ldr	r2, [pc, #8]	; (8002314 <DoSetConfiguration+0x2c>)
 800230c:	70d3      	strb	r3, [r2, #3]
}
 800230e:	bd08      	pop	{r3, pc}
 8002310:	2000052c 	.word	0x2000052c
 8002314:	200002f4 	.word	0x200002f4

08002318 <SetLineCodingDataOut>:
    // prepare to receive 7 bytes from host ???
}

// data output for CDC specific USB-Request "SET LINE CODING"
void SetLineCodingDataOut(void)
{
 8002318:	b508      	push	{r3, lr}
    // read 7 bytes from USB buffer
    ReadControlBlock((uint8_t*) &LineCoding, 7);
 800231a:	2107      	movs	r1, #7
 800231c:	4802      	ldr	r0, [pc, #8]	; (8002328 <SetLineCodingDataOut+0x10>)
 800231e:	f7ff fe71 	bl	8002004 <ReadControlBlock>
    ACK();
 8002322:	f7ff fec9 	bl	80020b8 <ACK>
}
 8002326:	bd08      	pop	{r3, pc}
 8002328:	20000524 	.word	0x20000524

0800232c <VCOM_Read_DTR_RTS>:

// remember DTR and RTS from host
void VCOM_Read_DTR_RTS(void)
{
 800232c:	b508      	push	{r3, lr}
    Dtr_Rts = CMD.SetupPacket.wValue >> 8;
 800232e:	4b04      	ldr	r3, [pc, #16]	; (8002340 <VCOM_Read_DTR_RTS+0x14>)
 8002330:	885b      	ldrh	r3, [r3, #2]
 8002332:	0a1b      	lsrs	r3, r3, #8
 8002334:	4a03      	ldr	r2, [pc, #12]	; (8002344 <VCOM_Read_DTR_RTS+0x18>)
 8002336:	8013      	strh	r3, [r2, #0]
    ACK();
 8002338:	f7ff febe 	bl	80020b8 <ACK>
}
 800233c:	bd08      	pop	{r3, pc}
 800233e:	bf00      	nop
 8002340:	2000052c 	.word	0x2000052c
 8002344:	20000320 	.word	0x20000320

08002348 <VCOM_GetLineCoding>:

// CDC specific USB-Request "GET LINE CODING"
void VCOM_GetLineCoding(void)
{
 8002348:	b508      	push	{r3, lr}
    CMD.PacketLen = EpCtrlMaxLen;
 800234a:	4b05      	ldr	r3, [pc, #20]	; (8002360 <VCOM_GetLineCoding+0x18>)
 800234c:	2240      	movs	r2, #64	; 0x40
 800234e:	60da      	str	r2, [r3, #12]
    CMD.TransferLen = 7;
 8002350:	2207      	movs	r2, #7
 8002352:	609a      	str	r2, [r3, #8]
    CMD.TransferPtr = (uint8_t*) &LineCoding;
 8002354:	4a03      	ldr	r2, [pc, #12]	; (8002364 <VCOM_GetLineCoding+0x1c>)
 8002356:	611a      	str	r2, [r3, #16]
    DescriptorBlockwiseIn(); // send 7 bytes to the host
 8002358:	f7ff fecc 	bl	80020f4 <DescriptorBlockwiseIn>
}
 800235c:	bd08      	pop	{r3, pc}
 800235e:	bf00      	nop
 8002360:	2000052c 	.word	0x2000052c
 8002364:	20000524 	.word	0x20000524

08002368 <OnSetup>:

// Setup event

void OnSetup(uint16_t EpCtrlStatus)
{
 8002368:	b508      	push	{r3, lr}
    ReadControlBlock(&CMD.SetupPacket.bmRequestType, 8);
 800236a:	2108      	movs	r1, #8
 800236c:	482b      	ldr	r0, [pc, #172]	; (800241c <OnSetup+0xb4>)
 800236e:	f7ff fe49 	bl	8002004 <ReadControlBlock>

    if (IsStandardRequest()) // if type=standard
 8002372:	f7ff fea9 	bl	80020c8 <IsStandardRequest>
 8002376:	2800      	cmp	r0, #0
 8002378:	d037      	beq.n	80023ea <OnSetup+0x82>
    {
        trace("IsStandardRequest\n");
        switch (CMD.SetupPacket.bRequest)
 800237a:	4b28      	ldr	r3, [pc, #160]	; (800241c <OnSetup+0xb4>)
 800237c:	785b      	ldrb	r3, [r3, #1]
 800237e:	2b0b      	cmp	r3, #11
 8002380:	d833      	bhi.n	80023ea <OnSetup+0x82>
 8002382:	e8df f003 	tbb	[pc, r3]
 8002386:	091c      	.short	0x091c
 8002388:	06320d32 	.word	0x06320d32
 800238c:	2f11322c 	.word	0x2f11322c
 8002390:	271f      	.short	0x271f
        {
            case SET_ADDRESS:
                trace("SET_ADDRESS\n");
                DoSetAddress();
 8002392:	f7ff ff9d 	bl	80022d0 <DoSetAddress>
                return;
 8002396:	e036      	b.n	8002406 <OnSetup+0x9e>

            case CLEAR_FEATURE:
                trace("CLEAR_FEATURE\n");
                DoSetClearFeature(false);
 8002398:	2000      	movs	r0, #0
 800239a:	f7ff fec9 	bl	8002130 <DoSetClearFeature>
                return;
 800239e:	e032      	b.n	8002406 <OnSetup+0x9e>

            case SET_FEATURE:
                trace("SET_FEATURE\n");
                DoSetClearFeature(true);
 80023a0:	2001      	movs	r0, #1
 80023a2:	f7ff fec5 	bl	8002130 <DoSetClearFeature>
                return;
 80023a6:	e02e      	b.n	8002406 <OnSetup+0x9e>

            case GET_CONFIGURATION:
                trace("GET_CONFIGURATION\n");
                CMD.PacketLen = EpCtrlMaxLen;
 80023a8:	4b1c      	ldr	r3, [pc, #112]	; (800241c <OnSetup+0xb4>)
 80023aa:	2240      	movs	r2, #64	; 0x40
 80023ac:	60da      	str	r2, [r3, #12]
                CMD.TransferLen = 1;
 80023ae:	2201      	movs	r2, #1
 80023b0:	609a      	str	r2, [r3, #8]
                CMD.TransferPtr = (uint8_t*) &CMD.Configuration;
 80023b2:	f103 0216 	add.w	r2, r3, #22
 80023b6:	611a      	str	r2, [r3, #16]
                DescriptorBlockwiseIn();
 80023b8:	f7ff fe9c 	bl	80020f4 <DescriptorBlockwiseIn>
                return;
 80023bc:	e023      	b.n	8002406 <OnSetup+0x9e>

            case GET_STATUS:
                trace("GET_STATUS\n");
                DoGetStatus();
 80023be:	f7ff fee7 	bl	8002190 <DoGetStatus>
                return;
 80023c2:	e020      	b.n	8002406 <OnSetup+0x9e>

            case GET_INTERFACE:
                trace("GET_INTERFACE\n");
                CMD.TransferLen = 1;
 80023c4:	4b15      	ldr	r3, [pc, #84]	; (800241c <OnSetup+0xb4>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	609a      	str	r2, [r3, #8]
                CMD.TransferPtr = (uint8_t*) &always0;
 80023ca:	4a15      	ldr	r2, [pc, #84]	; (8002420 <OnSetup+0xb8>)
 80023cc:	611a      	str	r2, [r3, #16]
                DescriptorBlockwiseIn();
 80023ce:	f7ff fe91 	bl	80020f4 <DescriptorBlockwiseIn>
                return;
 80023d2:	e018      	b.n	8002406 <OnSetup+0x9e>

            case SET_INTERFACE:
                trace("SET_INTERFACE\n");
                Class_Start();
 80023d4:	f7ff fd24 	bl	8001e20 <Class_Start>
                ACK();
 80023d8:	f7ff fe6e 	bl	80020b8 <ACK>
                return;
 80023dc:	e013      	b.n	8002406 <OnSetup+0x9e>

            case GET_DESCRIPTOR:
                trace("GET_DESCRIPTOR\n");
                DoGetDescriptor();
 80023de:	f7ff ff33 	bl	8002248 <DoGetDescriptor>
                return;
 80023e2:	e010      	b.n	8002406 <OnSetup+0x9e>

            case SET_CONFIGURATION:
                trace("SET_CONFIGURATION\n");
                DoSetConfiguration();
 80023e4:	f7ff ff80 	bl	80022e8 <DoSetConfiguration>
                return;
 80023e8:	e00d      	b.n	8002406 <OnSetup+0x9e>
        }
        // everything else gets responded with stall, see below
    }

    if (IsClassRequest()) // if type=class
 80023ea:	f7ff fe77 	bl	80020dc <IsClassRequest>
 80023ee:	b138      	cbz	r0, 8002400 <OnSetup+0x98>
    {
        trace("IsClassRequest\n");
        switch (CMD.SetupPacket.bRequest)
 80023f0:	4b0a      	ldr	r3, [pc, #40]	; (800241c <OnSetup+0xb4>)
 80023f2:	785b      	ldrb	r3, [r3, #1]
 80023f4:	2b21      	cmp	r3, #33	; 0x21
 80023f6:	d00a      	beq.n	800240e <OnSetup+0xa6>
 80023f8:	2b22      	cmp	r3, #34	; 0x22
 80023fa:	d00b      	beq.n	8002414 <OnSetup+0xac>
 80023fc:	2b20      	cmp	r3, #32
 80023fe:	d003      	beq.n	8002408 <OnSetup+0xa0>
        trace("IsVendorRequest\n");
    }

    // for all other cases responded with stall
    trace("Stall\n");
    Stall(0);
 8002400:	2000      	movs	r0, #0
 8002402:	f7ff fd23 	bl	8001e4c <Stall>
}
 8002406:	bd08      	pop	{r3, pc}
    ACK();
 8002408:	f7ff fe56 	bl	80020b8 <ACK>
 800240c:	e7fb      	b.n	8002406 <OnSetup+0x9e>
                VCOM_GetLineCoding();
 800240e:	f7ff ff9b 	bl	8002348 <VCOM_GetLineCoding>
                return;
 8002412:	e7f8      	b.n	8002406 <OnSetup+0x9e>
                VCOM_Read_DTR_RTS();
 8002414:	f7ff ff8a 	bl	800232c <VCOM_Read_DTR_RTS>
                return;
 8002418:	e7f5      	b.n	8002406 <OnSetup+0x9e>
 800241a:	bf00      	nop
 800241c:	2000052c 	.word	0x2000052c
 8002420:	0800996c 	.word	0x0800996c

08002424 <OnEpCtrlOut>:

// endpoint interrupts

void OnEpCtrlOut(uint16_t EpCtrlStatus) // Control-EP OUT
{
 8002424:	b500      	push	{lr}
 8002426:	b091      	sub	sp, #68	; 0x44
    uint8_t tbuf[EpCtrlMaxLen];

    if (IsStandardRequest()) // if type=standard
 8002428:	f7ff fe4e 	bl	80020c8 <IsStandardRequest>
 800242c:	b958      	cbnz	r0, 8002446 <OnEpCtrlOut+0x22>
        trace("IsStandardRequest\n");
        ReadControlBlock(tbuf, EpCtrlMaxLen);
        return;
    }

    if (IsClassRequest()) // if type=class
 800242e:	f7ff fe55 	bl	80020dc <IsClassRequest>
 8002432:	b190      	cbz	r0, 800245a <OnEpCtrlOut+0x36>
    {
        trace("IsClassRequest\n");
        switch (CMD.SetupPacket.bRequest)
 8002434:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <OnEpCtrlOut+0x3c>)
 8002436:	785b      	ldrb	r3, [r3, #1]
 8002438:	2b20      	cmp	r3, #32
 800243a:	d10b      	bne.n	8002454 <OnEpCtrlOut+0x30>
        {
            case SET_LINE_CODE:
                trace("SET_LINE_CODE\n");
                SetLineCodingDataOut();
 800243c:	f7ff ff6c 	bl	8002318 <SetLineCodingDataOut>
                ACK(); // TODO: check if really needed, SetLineCodingDataOut() calls ACK() already
 8002440:	f7ff fe3a 	bl	80020b8 <ACK>
                break;
 8002444:	e003      	b.n	800244e <OnEpCtrlOut+0x2a>
        ReadControlBlock(tbuf, EpCtrlMaxLen);
 8002446:	2140      	movs	r1, #64	; 0x40
 8002448:	4668      	mov	r0, sp
 800244a:	f7ff fddb 	bl	8002004 <ReadControlBlock>
        return;
    }

    // we do not check for vendor request here
    ACK();
}
 800244e:	b011      	add	sp, #68	; 0x44
 8002450:	f85d fb04 	ldr.w	pc, [sp], #4
                ACK();
 8002454:	f7ff fe30 	bl	80020b8 <ACK>
 8002458:	e7f9      	b.n	800244e <OnEpCtrlOut+0x2a>
    ACK();
 800245a:	f7ff fe2d 	bl	80020b8 <ACK>
 800245e:	e7f6      	b.n	800244e <OnEpCtrlOut+0x2a>
 8002460:	2000052c 	.word	0x2000052c

08002464 <OnEpCtrlIn>:

void OnEpCtrlIn(uint16_t EpCtrlStatus) // Control-EP IN
{
 8002464:	b508      	push	{r3, lr}
    if (IsStandardRequest()) // if type=standard
 8002466:	f7ff fe2f 	bl	80020c8 <IsStandardRequest>
 800246a:	b188      	cbz	r0, 8002490 <OnEpCtrlIn+0x2c>
    {
        trace("IsStandardRequest\n");
        switch (CMD.SetupPacket.bRequest)
 800246c:	4b09      	ldr	r3, [pc, #36]	; (8002494 <OnEpCtrlIn+0x30>)
 800246e:	785b      	ldrb	r3, [r3, #1]
 8002470:	2b06      	cmp	r3, #6
 8002472:	d004      	beq.n	800247e <OnEpCtrlIn+0x1a>
 8002474:	2b21      	cmp	r3, #33	; 0x21
 8002476:	d009      	beq.n	800248c <OnEpCtrlIn+0x28>
                trace("GET_LINE_CODE\n");
                ACK();
                break;
            default:
                trace("default\n");
                ACK();
 8002478:	f7ff fe1e 	bl	80020b8 <ACK>
 800247c:	e008      	b.n	8002490 <OnEpCtrlIn+0x2c>
                if (CMD.TransferLen > 0)
 800247e:	4b05      	ldr	r3, [pc, #20]	; (8002494 <OnEpCtrlIn+0x30>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	2b00      	cmp	r3, #0
 8002484:	dd04      	ble.n	8002490 <OnEpCtrlIn+0x2c>
                    DescriptorBlockwiseIn();
 8002486:	f7ff fe35 	bl	80020f4 <DescriptorBlockwiseIn>
 800248a:	e001      	b.n	8002490 <OnEpCtrlIn+0x2c>
                ACK();
 800248c:	f7ff fe14 	bl	80020b8 <ACK>
        }
        return;
    }
}
 8002490:	bd08      	pop	{r3, pc}
 8002492:	bf00      	nop
 8002494:	2000052c 	.word	0x2000052c

08002498 <EpBulkBeginTransmit>:

// BULK IN and OUT Interrupts

void EpBulkBeginTransmit(void)
{
 8002498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int i, n;
    UMEM_FAKEWIDTH L, A;
    UMEM_FAKEWIDTH* P;

    P = (UMEM_FAKEWIDTH*) EP1TxABuffer;
    i = txw - txr;
 800249a:	4b1f      	ldr	r3, [pc, #124]	; (8002518 <EpBulkBeginTransmit+0x80>)
 800249c:	6898      	ldr	r0, [r3, #8]
 800249e:	68db      	ldr	r3, [r3, #12]
    if (i < 0)
 80024a0:	1ac0      	subs	r0, r0, r3
    {
        i += USB_TXLEN; // i = number of bytes to send
 80024a2:	bf48      	it	mi
 80024a4:	f500 7080 	addmi.w	r0, r0, #256	; 0x100
    }
    if (i > EpBulkMaxLen)
 80024a8:	2840      	cmp	r0, #64	; 0x40
 80024aa:	dc24      	bgt.n	80024f6 <EpBulkBeginTransmit+0x5e>
        i = EpBulkMaxLen;
    }

    // the last package shall be less than 64 bytes
    // otherwise it gets lost sometimes.
    else if (i==EpBulkMaxLen)
 80024ac:	d031      	beq.n	8002512 <EpBulkBeginTransmit+0x7a>
      i=EpBulkMaxLen-2;
    }

    A = 0;
    n = 0;
    EpTable[1].TxCount = (i & 0x3FF) | EpBulkLenId;
 80024ae:	f3c0 0309 	ubfx	r3, r0, #0, #10
 80024b2:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 80024b6:	4a19      	ldr	r2, [pc, #100]	; (800251c <EpBulkBeginTransmit+0x84>)
 80024b8:	6053      	str	r3, [r2, #4]
    transmitting = true;
 80024ba:	4b17      	ldr	r3, [pc, #92]	; (8002518 <EpBulkBeginTransmit+0x80>)
 80024bc:	2201      	movs	r2, #1
 80024be:	705a      	strb	r2, [r3, #1]

    while (i)
 80024c0:	bb08      	cbnz	r0, 8002506 <EpBulkBeginTransmit+0x6e>
 80024c2:	e014      	b.n	80024ee <EpBulkBeginTransmit+0x56>
 80024c4:	3801      	subs	r0, #1
 80024c6:	d010      	beq.n	80024ea <EpBulkBeginTransmit+0x52>
    {
        L = UsbTxBuf[txr];
 80024c8:	68eb      	ldr	r3, [r5, #12]
 80024ca:	5cfb      	ldrb	r3, [r7, r3]
 80024cc:	b2db      	uxtb	r3, r3
        txr = (txr + 1) & (USB_TXLEN - 1);
 80024ce:	68ea      	ldr	r2, [r5, #12]
 80024d0:	3201      	adds	r2, #1
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	60ea      	str	r2, [r5, #12]
        A = A | (L << n);
 80024d6:	408b      	lsls	r3, r1
 80024d8:	431c      	orrs	r4, r3
        n += 8;
 80024da:	3108      	adds	r1, #8
        if (n > 8)
 80024dc:	2908      	cmp	r1, #8
 80024de:	ddf1      	ble.n	80024c4 <EpBulkBeginTransmit+0x2c>
        {
            *P++ = A;
 80024e0:	6034      	str	r4, [r6, #0]
 80024e2:	3604      	adds	r6, #4
            n = 0;
            A = 0;
 80024e4:	2400      	movs	r4, #0
            n = 0;
 80024e6:	4621      	mov	r1, r4
 80024e8:	e7ec      	b.n	80024c4 <EpBulkBeginTransmit+0x2c>
        }
        --i;
    }
    if (n)
 80024ea:	b101      	cbz	r1, 80024ee <EpBulkBeginTransmit+0x56>
    {
        *P = A; // output remaining bytes, if any
 80024ec:	6034      	str	r4, [r6, #0]
    }
    ValidateBuffer(logEpBulkIn);
 80024ee:	2001      	movs	r0, #1
 80024f0:	f7ff fd0f 	bl	8001f12 <ValidateBuffer>
}
 80024f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        i = EpBulkMaxLen;
 80024f6:	2040      	movs	r0, #64	; 0x40
    EpTable[1].TxCount = (i & 0x3FF) | EpBulkLenId;
 80024f8:	f440 4304 	orr.w	r3, r0, #33792	; 0x8400
 80024fc:	4a07      	ldr	r2, [pc, #28]	; (800251c <EpBulkBeginTransmit+0x84>)
 80024fe:	6053      	str	r3, [r2, #4]
    transmitting = true;
 8002500:	4b05      	ldr	r3, [pc, #20]	; (8002518 <EpBulkBeginTransmit+0x80>)
 8002502:	2201      	movs	r2, #1
 8002504:	705a      	strb	r2, [r3, #1]
{
 8002506:	4e06      	ldr	r6, [pc, #24]	; (8002520 <EpBulkBeginTransmit+0x88>)
 8002508:	2400      	movs	r4, #0
 800250a:	4621      	mov	r1, r4
        L = UsbTxBuf[txr];
 800250c:	4d02      	ldr	r5, [pc, #8]	; (8002518 <EpBulkBeginTransmit+0x80>)
 800250e:	4f05      	ldr	r7, [pc, #20]	; (8002524 <EpBulkBeginTransmit+0x8c>)
 8002510:	e7da      	b.n	80024c8 <EpBulkBeginTransmit+0x30>
      i=EpBulkMaxLen-2;
 8002512:	203e      	movs	r0, #62	; 0x3e
 8002514:	e7f0      	b.n	80024f8 <EpBulkBeginTransmit+0x60>
 8002516:	bf00      	nop
 8002518:	200002f4 	.word	0x200002f4
 800251c:	40006330 	.word	0x40006330
 8002520:	40006100 	.word	0x40006100
 8002524:	20000324 	.word	0x20000324

08002528 <OnEpBulkIn>:

// EP1 = Bulk-EP IN
void OnEpBulkIn(void)
{
 8002528:	b508      	push	{r3, lr}
    if (txr == txw)
 800252a:	4b06      	ldr	r3, [pc, #24]	; (8002544 <OnEpBulkIn+0x1c>)
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	429a      	cmp	r2, r3
 8002532:	d002      	beq.n	800253a <OnEpBulkIn+0x12>
    {
        transmitting = false;
    }
    else
    {
        EpBulkBeginTransmit();
 8002534:	f7ff ffb0 	bl	8002498 <EpBulkBeginTransmit>
    }
}
 8002538:	bd08      	pop	{r3, pc}
        transmitting = false;
 800253a:	4b02      	ldr	r3, [pc, #8]	; (8002544 <OnEpBulkIn+0x1c>)
 800253c:	2200      	movs	r2, #0
 800253e:	705a      	strb	r2, [r3, #1]
 8002540:	e7fa      	b.n	8002538 <OnEpBulkIn+0x10>
 8002542:	bf00      	nop
 8002544:	200002f4 	.word	0x200002f4

08002548 <OnEpBulkOut>:

// EP2 = Bulk-EP OUT
void OnEpBulkOut(void)
{
 8002548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    UMEM_FAKEWIDTH D;
    char c;
    UMEM_FAKEWIDTH* P;

    // select bulk EP and calculate number of bytes to read
    avail = EpTable[2].RxCount & 0x3FF;
 800254a:	4b22      	ldr	r3, [pc, #136]	; (80025d4 <OnEpBulkOut+0x8c>)
 800254c:	68de      	ldr	r6, [r3, #12]
 800254e:	f3c6 0609 	ubfx	r6, r6, #0, #10

    i = rxw - rxr;
 8002552:	4a21      	ldr	r2, [pc, #132]	; (80025d8 <OnEpBulkOut+0x90>)
 8002554:	6913      	ldr	r3, [r2, #16]
 8002556:	6952      	ldr	r2, [r2, #20]
    if (i < 0)
 8002558:	1a9b      	subs	r3, r3, r2
    {
        i += USB_RXLEN;
 800255a:	bf48      	it	mi
 800255c:	f503 7380 	addmi.w	r3, r3, #256	; 0x100
    }
    hdroom = USB_RXLEN - i;
 8002560:	f5c3 7580 	rsb	r5, r3, #256	; 0x100
    if (hdroom <= avail)
 8002564:	42ae      	cmp	r6, r5
 8002566:	da14      	bge.n	8002592 <OnEpBulkOut+0x4a>
    }

    P = (UMEM_FAKEWIDTH*) EP2RxBBuffer;
    n = 2;
    i = avail;
    D = *P++; // load 2 bytes
 8002568:	4b1c      	ldr	r3, [pc, #112]	; (80025dc <OnEpBulkOut+0x94>)
 800256a:	681c      	ldr	r4, [r3, #0]
    while (i > 0)
 800256c:	b33e      	cbz	r6, 80025be <OnEpBulkOut+0x76>
    {
        c = D & 0xFF; // LSB first
 800256e:	b2e0      	uxtb	r0, r4
        UsbRxBuf[rxw] = c;
 8002570:	4a19      	ldr	r2, [pc, #100]	; (80025d8 <OnEpBulkOut+0x90>)
 8002572:	6913      	ldr	r3, [r2, #16]
 8002574:	491a      	ldr	r1, [pc, #104]	; (80025e0 <OnEpBulkOut+0x98>)
 8002576:	54c8      	strb	r0, [r1, r3]
        rxw = (rxw + 1) & (USB_RXLEN - 1);
 8002578:	6913      	ldr	r3, [r2, #16]
 800257a:	3301      	adds	r3, #1
 800257c:	b2db      	uxtb	r3, r3
 800257e:	6113      	str	r3, [r2, #16]
        D = D >> 8;
 8002580:	0a24      	lsrs	r4, r4, #8
    i = avail;
 8002582:	4631      	mov	r1, r6
    D = *P++; // load 2 bytes
 8002584:	f8df c05c 	ldr.w	ip, [pc, #92]	; 80025e4 <OnEpBulkOut+0x9c>
        --n;
 8002588:	2201      	movs	r2, #1
        UsbRxBuf[rxw] = c;
 800258a:	4813      	ldr	r0, [pc, #76]	; (80025d8 <OnEpBulkOut+0x90>)
 800258c:	f8df e050 	ldr.w	lr, [pc, #80]	; 80025e0 <OnEpBulkOut+0x98>
 8002590:	e013      	b.n	80025ba <OnEpBulkOut+0x72>
        receiving = false;
 8002592:	4b11      	ldr	r3, [pc, #68]	; (80025d8 <OnEpBulkOut+0x90>)
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        receiving = false;
    }
}
 8002598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        c = D & 0xFF; // LSB first
 800259a:	b2e3      	uxtb	r3, r4
        UsbRxBuf[rxw] = c;
 800259c:	6907      	ldr	r7, [r0, #16]
 800259e:	f80e 3007 	strb.w	r3, [lr, r7]
        rxw = (rxw + 1) & (USB_RXLEN - 1);
 80025a2:	6903      	ldr	r3, [r0, #16]
 80025a4:	3301      	adds	r3, #1
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	6103      	str	r3, [r0, #16]
        if (!n)
 80025aa:	3a01      	subs	r2, #1
        D = D >> 8;
 80025ac:	bf11      	iteee	ne
 80025ae:	0a24      	lsrne	r4, r4, #8
            D = *P++;
 80025b0:	f8dc 4000 	ldreq.w	r4, [ip]
 80025b4:	f10c 0c04 	addeq.w	ip, ip, #4
            n = 2;
 80025b8:	2202      	moveq	r2, #2
    while (i > 0)
 80025ba:	3901      	subs	r1, #1
 80025bc:	d1ed      	bne.n	800259a <OnEpBulkOut+0x52>
    if (hdroom - avail >= EpBulkMaxLen)
 80025be:	1bab      	subs	r3, r5, r6
 80025c0:	2b3f      	cmp	r3, #63	; 0x3f
 80025c2:	dc03      	bgt.n	80025cc <OnEpBulkOut+0x84>
        receiving = false;
 80025c4:	4b04      	ldr	r3, [pc, #16]	; (80025d8 <OnEpBulkOut+0x90>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	701a      	strb	r2, [r3, #0]
 80025ca:	e7e5      	b.n	8002598 <OnEpBulkOut+0x50>
        ClearBuffer(logEpBulkOut); // we read it
 80025cc:	2002      	movs	r0, #2
 80025ce:	f7ff fc90 	bl	8001ef2 <ClearBuffer>
 80025d2:	e7e1      	b.n	8002598 <OnEpBulkOut+0x50>
 80025d4:	40006340 	.word	0x40006340
 80025d8:	200002f4 	.word	0x200002f4
 80025dc:	40006280 	.word	0x40006280
 80025e0:	20000424 	.word	0x20000424
 80025e4:	40006284 	.word	0x40006284

080025e8 <USB_LP_CAN_RX0_IRQHandler>:
}

// USB-Interrupt-Handlers

void NAME_OF_USB_IRQ_HANDLER(void)
{
 80025e8:	b570      	push	{r4, r5, r6, lr}
    //trace("irq\n");
    uint32_t I;
    int EpNum;
    uint16_t EpStatus;

    I = USB_ISTR; // Interrupt-Status
 80025ea:	4b4b      	ldr	r3, [pc, #300]	; (8002718 <USB_LP_CAN_RX0_IRQHandler+0x130>)
 80025ec:	681b      	ldr	r3, [r3, #0]

    if (I & PMAOVR) // internal Timeout...
 80025ee:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80025f2:	d003      	beq.n	80025fc <USB_LP_CAN_RX0_IRQHandler+0x14>
    {
        trace("PMAOVR\n");
        USB_ISTR = ~PMAOVR; // clear int
 80025f4:	4a48      	ldr	r2, [pc, #288]	; (8002718 <USB_LP_CAN_RX0_IRQHandler+0x130>)
 80025f6:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
 80025fa:	6011      	str	r1, [r2, #0]
    }

    if (I & ERR) // data transfer error
 80025fc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002600:	d003      	beq.n	800260a <USB_LP_CAN_RX0_IRQHandler+0x22>
    {
        trace("ERR\n");
        USB_ISTR = ~ERR; // clear int
 8002602:	4a45      	ldr	r2, [pc, #276]	; (8002718 <USB_LP_CAN_RX0_IRQHandler+0x130>)
 8002604:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
 8002608:	6011      	str	r1, [r2, #0]
    }

    if (I & WKUP) // Suspend-->Resume
 800260a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800260e:	d00b      	beq.n	8002628 <USB_LP_CAN_RX0_IRQHandler+0x40>
    {
        trace("WKUP\n");
        USB_CNTR &= ~(FSUSP | LP_MODE);
 8002610:	4942      	ldr	r1, [pc, #264]	; (800271c <USB_LP_CAN_RX0_IRQHandler+0x134>)
 8002612:	680a      	ldr	r2, [r1, #0]
 8002614:	f022 020c 	bic.w	r2, r2, #12
 8002618:	600a      	str	r2, [r1, #0]
        USB_ISTR = ~WKUP; // clear int
 800261a:	4a3f      	ldr	r2, [pc, #252]	; (8002718 <USB_LP_CAN_RX0_IRQHandler+0x130>)
 800261c:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
 8002620:	6011      	str	r1, [r2, #0]
        suspended = false;
 8002622:	4a3f      	ldr	r2, [pc, #252]	; (8002720 <USB_LP_CAN_RX0_IRQHandler+0x138>)
 8002624:	2100      	movs	r1, #0
 8002626:	7091      	strb	r1, [r2, #2]
    }

    if (I & SUSP) // after 3 ms Pause --> Suspend
 8002628:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800262c:	d00b      	beq.n	8002646 <USB_LP_CAN_RX0_IRQHandler+0x5e>
    {
        trace("SUSP\n");
        USB_ISTR = ~SUSP; // clear int
 800262e:	4a3a      	ldr	r2, [pc, #232]	; (8002718 <USB_LP_CAN_RX0_IRQHandler+0x130>)
 8002630:	f46f 6100 	mvn.w	r1, #2048	; 0x800
 8002634:	6011      	str	r1, [r2, #0]
        USB_CNTR |= (FSUSP | LP_MODE);
 8002636:	4939      	ldr	r1, [pc, #228]	; (800271c <USB_LP_CAN_RX0_IRQHandler+0x134>)
 8002638:	680a      	ldr	r2, [r1, #0]
 800263a:	f042 020c 	orr.w	r2, r2, #12
 800263e:	600a      	str	r2, [r1, #0]
        suspended = true;
 8002640:	4a37      	ldr	r2, [pc, #220]	; (8002720 <USB_LP_CAN_RX0_IRQHandler+0x138>)
 8002642:	2101      	movs	r1, #1
 8002644:	7091      	strb	r1, [r2, #2]
    }

    if (I & RESET) // Bus Reset
 8002646:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800264a:	d13a      	bne.n	80026c2 <USB_LP_CAN_RX0_IRQHandler+0xda>
        USB_ISTR = ~RESET; // clear int
        InitEndpoints();
        return;
    }

    if (I & SOF) // Start of Frame, comes every 1 ms
 800264c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002650:	d00c      	beq.n	800266c <USB_LP_CAN_RX0_IRQHandler+0x84>
    {
        //trace("SOF\n");
        USB_ISTR = ~SOF; // clear int
 8002652:	4a31      	ldr	r2, [pc, #196]	; (8002718 <USB_LP_CAN_RX0_IRQHandler+0x130>)
 8002654:	f46f 7100 	mvn.w	r1, #512	; 0x200
 8002658:	6011      	str	r1, [r2, #0]
        heartbeat++;
 800265a:	4a31      	ldr	r2, [pc, #196]	; (8002720 <USB_LP_CAN_RX0_IRQHandler+0x138>)
 800265c:	6991      	ldr	r1, [r2, #24]
 800265e:	3101      	adds	r1, #1
 8002660:	6191      	str	r1, [r2, #24]
        if (suspended)
 8002662:	7892      	ldrb	r2, [r2, #2]
 8002664:	b112      	cbz	r2, 800266c <USB_LP_CAN_RX0_IRQHandler+0x84>
        {
            trace("SOF -> unsuspend\n");
            suspended = false;
 8002666:	4a2e      	ldr	r2, [pc, #184]	; (8002720 <USB_LP_CAN_RX0_IRQHandler+0x138>)
 8002668:	2100      	movs	r1, #0
 800266a:	7091      	strb	r1, [r2, #2]
        }
    }

    if (I & ESOF) // if a SOF package is missing
 800266c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002670:	d009      	beq.n	8002686 <USB_LP_CAN_RX0_IRQHandler+0x9e>
    {
        //trace("ESOF\n");
        USB_ISTR = ~ESOF; // clear int
 8002672:	4a29      	ldr	r2, [pc, #164]	; (8002718 <USB_LP_CAN_RX0_IRQHandler+0x130>)
 8002674:	f46f 7180 	mvn.w	r1, #256	; 0x100
 8002678:	6011      	str	r1, [r2, #0]
        if (!suspended)
 800267a:	4a29      	ldr	r2, [pc, #164]	; (8002720 <USB_LP_CAN_RX0_IRQHandler+0x138>)
 800267c:	7892      	ldrb	r2, [r2, #2]
 800267e:	b912      	cbnz	r2, 8002686 <USB_LP_CAN_RX0_IRQHandler+0x9e>
        {
            trace("ESOF -> suspend\n");
            suspended = true;
 8002680:	4a27      	ldr	r2, [pc, #156]	; (8002720 <USB_LP_CAN_RX0_IRQHandler+0x138>)
 8002682:	2101      	movs	r1, #1
 8002684:	7091      	strb	r1, [r2, #2]
        }
    }

    // Endpoint Interrupts
    if (I & CTR)
 8002686:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800268a:	d020      	beq.n	80026ce <USB_LP_CAN_RX0_IRQHandler+0xe6>
    {
        trace("CTR ");
        USB_ISTR = ~CTR; // clear int
 800268c:	4a22      	ldr	r2, [pc, #136]	; (8002718 <USB_LP_CAN_RX0_IRQHandler+0x130>)
 800268e:	f46f 4100 	mvn.w	r1, #32768	; 0x8000
 8002692:	6011      	str	r1, [r2, #0]
        EpNum = I & MASK_EA; // which EP?
 8002694:	f003 040f 	and.w	r4, r3, #15
        EpStatus = USB_EpRegs(EpNum); // read EP status
 8002698:	f104 5280 	add.w	r2, r4, #268435456	; 0x10000000
 800269c:	f502 52b8 	add.w	r2, r2, #5888	; 0x1700
 80026a0:	0092      	lsls	r2, r2, #2
 80026a2:	6811      	ldr	r1, [r2, #0]
 80026a4:	b288      	uxth	r0, r1

        if (I & DIR) // OUT, also package received
 80026a6:	f013 0f10 	tst.w	r3, #16
 80026aa:	d019      	beq.n	80026e0 <USB_LP_CAN_RX0_IRQHandler+0xf8>
        {
            trace("out\n");
            USB_EpRegs(EpNum) = EpStatus & ~CTR_RX & EP_NoToggleBits;
 80026ac:	f640 738f 	movw	r3, #3983	; 0xf8f
 80026b0:	400b      	ands	r3, r1
 80026b2:	6013      	str	r3, [r2, #0]
            if (EpNum == logEpCtrl)
 80026b4:	b97c      	cbnz	r4, 80026d6 <USB_LP_CAN_RX0_IRQHandler+0xee>
            {
                trace("logEpCtrl\n");
                if (EpStatus & SETUP)
 80026b6:	f411 6f00 	tst.w	r1, #2048	; 0x800
 80026ba:	d009      	beq.n	80026d0 <USB_LP_CAN_RX0_IRQHandler+0xe8>
                {
                    trace("SETUP\n");
                    OnSetup(EpStatus); // Handle the Setup-package
 80026bc:	f7ff fe54 	bl	8002368 <OnSetup>
 80026c0:	e005      	b.n	80026ce <USB_LP_CAN_RX0_IRQHandler+0xe6>
        USB_ISTR = ~RESET; // clear int
 80026c2:	4b15      	ldr	r3, [pc, #84]	; (8002718 <USB_LP_CAN_RX0_IRQHandler+0x130>)
 80026c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026c8:	601a      	str	r2, [r3, #0]
        InitEndpoints();
 80026ca:	f7ff fc33 	bl	8001f34 <InitEndpoints>
                trace("logEpInt\n");
                OnEpIntIn();
            }
        }
    }
}
 80026ce:	bd70      	pop	{r4, r5, r6, pc}
                    OnEpCtrlOut(EpStatus); // class specific
 80026d0:	f7ff fea8 	bl	8002424 <OnEpCtrlOut>
 80026d4:	e7fb      	b.n	80026ce <USB_LP_CAN_RX0_IRQHandler+0xe6>
            else if (EpNum == logEpBulkOut)
 80026d6:	2c02      	cmp	r4, #2
 80026d8:	d1f9      	bne.n	80026ce <USB_LP_CAN_RX0_IRQHandler+0xe6>
                OnEpBulkOut();
 80026da:	f7ff ff35 	bl	8002548 <OnEpBulkOut>
 80026de:	e7f6      	b.n	80026ce <USB_LP_CAN_RX0_IRQHandler+0xe6>
            if (DeviceAddress)
 80026e0:	4b0f      	ldr	r3, [pc, #60]	; (8002720 <USB_LP_CAN_RX0_IRQHandler+0x138>)
 80026e2:	791b      	ldrb	r3, [r3, #4]
 80026e4:	b963      	cbnz	r3, 8002700 <USB_LP_CAN_RX0_IRQHandler+0x118>
            USB_EpRegs(EpNum) = EpStatus & ~CTR_TX & EP_NoToggleBits;
 80026e6:	f421 41e1 	bic.w	r1, r1, #28800	; 0x7080
 80026ea:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80026ee:	0409      	lsls	r1, r1, #16
 80026f0:	0c09      	lsrs	r1, r1, #16
 80026f2:	6011      	str	r1, [r2, #0]
            if (EpNum == logEpCtrl)
 80026f4:	b16c      	cbz	r4, 8002712 <USB_LP_CAN_RX0_IRQHandler+0x12a>
            else if (EpNum == logEpBulkIn)
 80026f6:	2c01      	cmp	r4, #1
 80026f8:	d1e9      	bne.n	80026ce <USB_LP_CAN_RX0_IRQHandler+0xe6>
                OnEpBulkIn();
 80026fa:	f7ff ff15 	bl	8002528 <OnEpBulkIn>
 80026fe:	e7e6      	b.n	80026ce <USB_LP_CAN_RX0_IRQHandler+0xe6>
                USB_SetAddress(DeviceAddress);
 8002700:	4d07      	ldr	r5, [pc, #28]	; (8002720 <USB_LP_CAN_RX0_IRQHandler+0x138>)
 8002702:	792b      	ldrb	r3, [r5, #4]
    USB_DADDR = 0x80 | adr;
 8002704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002708:	4e06      	ldr	r6, [pc, #24]	; (8002724 <USB_LP_CAN_RX0_IRQHandler+0x13c>)
 800270a:	6033      	str	r3, [r6, #0]
                DeviceAddress=0;
 800270c:	2300      	movs	r3, #0
 800270e:	712b      	strb	r3, [r5, #4]
 8002710:	e7e9      	b.n	80026e6 <USB_LP_CAN_RX0_IRQHandler+0xfe>
                OnEpCtrlIn(EpStatus);
 8002712:	f7ff fea7 	bl	8002464 <OnEpCtrlIn>
 8002716:	e7da      	b.n	80026ce <USB_LP_CAN_RX0_IRQHandler+0xe6>
 8002718:	40005c44 	.word	0x40005c44
 800271c:	40005c40 	.word	0x40005c40
 8002720:	200002f4 	.word	0x200002f4
 8002724:	40005c4c 	.word	0x40005c4c

08002728 <UsbSetup>:


// USB-Setup
// Clock must be set up already before
void UsbSetup(void)
{
 8002728:	b538      	push	{r3, r4, r5, lr}
    trace("setup\n");
    uint32_t* P;

    P = (uint32_t*) USB_RAM; // clear RAM
 800272a:	4b12      	ldr	r3, [pc, #72]	; (8002774 <UsbSetup+0x4c>)
    while ((uint32_t) P < (USB_RAM + 1024))
    {
        *P++ = 0;
 800272c:	2000      	movs	r0, #0
    while ((uint32_t) P < (USB_RAM + 1024))
 800272e:	4912      	ldr	r1, [pc, #72]	; (8002778 <UsbSetup+0x50>)
        *P++ = 0;
 8002730:	1d1a      	adds	r2, r3, #4
 8002732:	6018      	str	r0, [r3, #0]
 8002734:	4613      	mov	r3, r2
    while ((uint32_t) P < (USB_RAM + 1024))
 8002736:	428a      	cmp	r2, r1
 8002738:	d1fa      	bne.n	8002730 <UsbSetup+0x8>
    }

    CMD.Configuration = 0;
 800273a:	2400      	movs	r4, #0
 800273c:	4b0f      	ldr	r3, [pc, #60]	; (800277c <UsbSetup+0x54>)
 800273e:	759c      	strb	r4, [r3, #22]
    configurationSet = false;
 8002740:	4b0f      	ldr	r3, [pc, #60]	; (8002780 <UsbSetup+0x58>)
 8002742:	70dc      	strb	r4, [r3, #3]
    suspended = false;
 8002744:	709c      	strb	r4, [r3, #2]

    Class_Start();            // setup LineCoding-Block with defaults
 8002746:	f7ff fb6b 	bl	8001e20 <Class_Start>
    USB_CNTR = 3;             // Powerdown+Reset
 800274a:	4d0e      	ldr	r5, [pc, #56]	; (8002784 <UsbSetup+0x5c>)
 800274c:	2303      	movs	r3, #3
 800274e:	602b      	str	r3, [r5, #0]
    Nop(100);                 // wait
 8002750:	2064      	movs	r0, #100	; 0x64
 8002752:	f7ff fc49 	bl	8001fe8 <Nop>
    USB_CNTR = 1;             // Reset
 8002756:	2301      	movs	r3, #1
 8002758:	602b      	str	r3, [r5, #0]
    USB_ISTR = 0;             // clear spurious Ints
 800275a:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <UsbSetup+0x60>)
 800275c:	601c      	str	r4, [r3, #0]
    Nop(1000);                // wait
 800275e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002762:	f7ff fc41 	bl	8001fe8 <Nop>
    NVIC_ISER[USB_IRQ_NUMBER/32] = ((uint32_t) 1) << (USB_IRQ_NUMBER % 32);
 8002766:	4b09      	ldr	r3, [pc, #36]	; (800278c <UsbSetup+0x64>)
 8002768:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800276c:	601a      	str	r2, [r3, #0]
    EnableUsbIRQ();
    InitEndpoints();
 800276e:	f7ff fbe1 	bl	8001f34 <InitEndpoints>
}
 8002772:	bd38      	pop	{r3, r4, r5, pc}
 8002774:	40006000 	.word	0x40006000
 8002778:	40006400 	.word	0x40006400
 800277c:	2000052c 	.word	0x2000052c
 8002780:	200002f4 	.word	0x200002f4
 8002784:	40005c40 	.word	0x40005c40
 8002788:	40005c44 	.word	0x40005c44
 800278c:	e000e100 	.word	0xe000e100

08002790 <UsbRxBufferContains>:
}

// Check if the receive buffer contains the given character.
bool UsbRxBufferContains(char c)
{
    int i = rxr;
 8002790:	4a0f      	ldr	r2, [pc, #60]	; (80027d0 <UsbRxBufferContains+0x40>)
 8002792:	6953      	ldr	r3, [r2, #20]
    while (i != rxw)
 8002794:	6912      	ldr	r2, [r2, #16]
 8002796:	4293      	cmp	r3, r2
 8002798:	d015      	beq.n	80027c6 <UsbRxBufferContains+0x36>
    {
        if (UsbRxBuf[i]==c)
 800279a:	4a0e      	ldr	r2, [pc, #56]	; (80027d4 <UsbRxBufferContains+0x44>)
 800279c:	5cd2      	ldrb	r2, [r2, r3]
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	4290      	cmp	r0, r2
 80027a2:	d012      	beq.n	80027ca <UsbRxBufferContains+0x3a>
{
 80027a4:	b410      	push	{r4}
    while (i != rxw)
 80027a6:	490a      	ldr	r1, [pc, #40]	; (80027d0 <UsbRxBufferContains+0x40>)
        if (UsbRxBuf[i]==c)
 80027a8:	4c0a      	ldr	r4, [pc, #40]	; (80027d4 <UsbRxBufferContains+0x44>)
        {
            return true;
        }
        i = (i + 1) & (USB_RXLEN - 1);
 80027aa:	3301      	adds	r3, #1
 80027ac:	b2db      	uxtb	r3, r3
    while (i != rxw)
 80027ae:	690a      	ldr	r2, [r1, #16]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d005      	beq.n	80027c0 <UsbRxBufferContains+0x30>
        if (UsbRxBuf[i]==c)
 80027b4:	5ce2      	ldrb	r2, [r4, r3]
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	4282      	cmp	r2, r0
 80027ba:	d1f6      	bne.n	80027aa <UsbRxBufferContains+0x1a>
            return true;
 80027bc:	2001      	movs	r0, #1
 80027be:	e000      	b.n	80027c2 <UsbRxBufferContains+0x32>
    }
    return false;
 80027c0:	2000      	movs	r0, #0
}
 80027c2:	bc10      	pop	{r4}
 80027c4:	4770      	bx	lr
    return false;
 80027c6:	2000      	movs	r0, #0
 80027c8:	4770      	bx	lr
            return true;
 80027ca:	2001      	movs	r0, #1
}
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	200002f4 	.word	0x200002f4
 80027d4:	20000424 	.word	0x20000424

080027d8 <UsbGetChar_noWait>:


// Receive a character, wait if necessary.
// Returns false if nothing received, aborts on timeout and USB suspend.
bool UsbGetChar_noWait(char* c)
{
 80027d8:	b510      	push	{r4, lr}
    if (rxr != rxw)
 80027da:	4b1d      	ldr	r3, [pc, #116]	; (8002850 <UsbGetChar_noWait+0x78>)
 80027dc:	695a      	ldr	r2, [r3, #20]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d031      	beq.n	8002848 <UsbGetChar_noWait+0x70>
    {
        // read from buffer
        *c = UsbRxBuf[rxr];
 80027e4:	4a1a      	ldr	r2, [pc, #104]	; (8002850 <UsbGetChar_noWait+0x78>)
 80027e6:	6953      	ldr	r3, [r2, #20]
 80027e8:	491a      	ldr	r1, [pc, #104]	; (8002854 <UsbGetChar_noWait+0x7c>)
 80027ea:	5ccb      	ldrb	r3, [r1, r3]
 80027ec:	7003      	strb	r3, [r0, #0]
        rxr = (rxr + 1) & (USB_RXLEN - 1);
 80027ee:	6953      	ldr	r3, [r2, #20]
 80027f0:	3301      	adds	r3, #1
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	6153      	str	r3, [r2, #20]

        // trigger receiving
        if (!receiving && !suspended && configurationSet)
 80027f6:	7813      	ldrb	r3, [r2, #0]
 80027f8:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 80027fc:	bb2b      	cbnz	r3, 800284a <UsbGetChar_noWait+0x72>
 80027fe:	7893      	ldrb	r3, [r2, #2]
 8002800:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8002804:	bb0b      	cbnz	r3, 800284a <UsbGetChar_noWait+0x72>
 8002806:	78d3      	ldrb	r3, [r2, #3]
 8002808:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 800280c:	b90b      	cbnz	r3, 8002812 <UsbGetChar_noWait+0x3a>
                receiving = true;
                ClearBuffer(logEpBulkOut);
            }
            EnableUsbIRQ();
        }
        return true;
 800280e:	2401      	movs	r4, #1
 8002810:	e01b      	b.n	800284a <UsbGetChar_noWait+0x72>
    NVIC_ICER[USB_IRQ_NUMBER/32] = ((uint32_t) 1) << (USB_IRQ_NUMBER % 32);
 8002812:	4b11      	ldr	r3, [pc, #68]	; (8002858 <UsbGetChar_noWait+0x80>)
 8002814:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002818:	601a      	str	r2, [r3, #0]
            i = rxw - rxr;
 800281a:	4a0d      	ldr	r2, [pc, #52]	; (8002850 <UsbGetChar_noWait+0x78>)
 800281c:	6913      	ldr	r3, [r2, #16]
 800281e:	6952      	ldr	r2, [r2, #20]
            if (i < 0)
 8002820:	1a9b      	subs	r3, r3, r2
                i += USB_RXLEN;
 8002822:	bf48      	it	mi
 8002824:	f503 7380 	addmi.w	r3, r3, #256	; 0x100
            hdroom = USB_RXLEN - i;
 8002828:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
            if (hdroom > EpBulkMaxLen)
 800282c:	2b40      	cmp	r3, #64	; 0x40
 800282e:	dc04      	bgt.n	800283a <UsbGetChar_noWait+0x62>
    NVIC_ISER[USB_IRQ_NUMBER/32] = ((uint32_t) 1) << (USB_IRQ_NUMBER % 32);
 8002830:	4b0a      	ldr	r3, [pc, #40]	; (800285c <UsbGetChar_noWait+0x84>)
 8002832:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	e007      	b.n	800284a <UsbGetChar_noWait+0x72>
                receiving = true;
 800283a:	4b05      	ldr	r3, [pc, #20]	; (8002850 <UsbGetChar_noWait+0x78>)
 800283c:	2201      	movs	r2, #1
 800283e:	701a      	strb	r2, [r3, #0]
                ClearBuffer(logEpBulkOut);
 8002840:	2002      	movs	r0, #2
 8002842:	f7ff fb56 	bl	8001ef2 <ClearBuffer>
 8002846:	e7f3      	b.n	8002830 <UsbGetChar_noWait+0x58>
    }
    else
    {
        return false;
 8002848:	2400      	movs	r4, #0
    }
}
 800284a:	4620      	mov	r0, r4
 800284c:	bd10      	pop	{r4, pc}
 800284e:	bf00      	nop
 8002850:	200002f4 	.word	0x200002f4
 8002854:	20000424 	.word	0x20000424
 8002858:	e000e180 	.word	0xe000e180
 800285c:	e000e100 	.word	0xe000e100

08002860 <UsbGetStr>:
// Receive a string until the given size limit, terminator or timeout is reached.
// The received terminator is included in the returned string and also counted.
// Returns number of received characters, aborts on USB suspend.
// If the requested terminator is not '\0', then this gets appended to the string automatically but not counted.
int UsbGetStr(char* buffer, int bufSize, char terminator, uint32_t timeout_ms)
{
 8002860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002864:	b082      	sub	sp, #8
 8002866:	4682      	mov	sl, r0
 8002868:	4688      	mov	r8, r1
 800286a:	461d      	mov	r5, r3
    // If the termination character is not '\0' then reserve space for the additional string terminator.
    if(terminator!='\0')
 800286c:	4691      	mov	r9, r2
 800286e:	2a00      	cmp	r2, #0
 8002870:	d03c      	beq.n	80028ec <UsbGetStr+0x8c>
    {
        bufSize--;
 8002872:	f101 38ff 	add.w	r8, r1, #4294967295
    }

    uint32_t start=heartbeat;
 8002876:	4b20      	ldr	r3, [pc, #128]	; (80028f8 <UsbGetStr+0x98>)
 8002878:	699e      	ldr	r6, [r3, #24]
    int count=0;
    while(count<bufSize)
 800287a:	f1b8 0f00 	cmp.w	r8, #0
 800287e:	dd24      	ble.n	80028ca <UsbGetStr+0x6a>
{
 8002880:	2700      	movs	r7, #0
    {
        // wait for received character
        while(1)
        {
            if (rxr != rxw)
 8002882:	4c1d      	ldr	r4, [pc, #116]	; (80028f8 <UsbGetStr+0x98>)
 8002884:	6962      	ldr	r2, [r4, #20]
 8002886:	6923      	ldr	r3, [r4, #16]
 8002888:	429a      	cmp	r2, r3
 800288a:	d120      	bne.n	80028ce <UsbGetStr+0x6e>
            {
                // ready read received byte, stop waiting
                break;
            }

            if (!configurationSet || suspended)
 800288c:	78e3      	ldrb	r3, [r4, #3]
 800288e:	b193      	cbz	r3, 80028b6 <UsbGetStr+0x56>
 8002890:	78a3      	ldrb	r3, [r4, #2]
 8002892:	b983      	cbnz	r3, 80028b6 <UsbGetStr+0x56>
            {
                // USB is inactive, abort
                goto done;
            }

            if (heartbeat-start <= timeout_ms)
 8002894:	69a3      	ldr	r3, [r4, #24]
 8002896:	1b9b      	subs	r3, r3, r6
 8002898:	429d      	cmp	r5, r3
 800289a:	d20c      	bcs.n	80028b6 <UsbGetStr+0x56>
            {
                // timeout, abort
                goto done;
            }

            __asm__ volatile ("wfi"); // wait
 800289c:	bf30      	wfi
            if (rxr != rxw)
 800289e:	6962      	ldr	r2, [r4, #20]
 80028a0:	6923      	ldr	r3, [r4, #16]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d113      	bne.n	80028ce <UsbGetStr+0x6e>
            if (!configurationSet || suspended)
 80028a6:	78e3      	ldrb	r3, [r4, #3]
 80028a8:	b12b      	cbz	r3, 80028b6 <UsbGetStr+0x56>
 80028aa:	78a3      	ldrb	r3, [r4, #2]
 80028ac:	b91b      	cbnz	r3, 80028b6 <UsbGetStr+0x56>
            if (heartbeat-start <= timeout_ms)
 80028ae:	69a3      	ldr	r3, [r4, #24]
 80028b0:	1b9b      	subs	r3, r3, r6
 80028b2:	42ab      	cmp	r3, r5
 80028b4:	d8f2      	bhi.n	800289c <UsbGetStr+0x3c>
            }
        }
    }

    done:
    if(terminator!='\0')
 80028b6:	f1b9 0f00 	cmp.w	r9, #0
 80028ba:	d002      	beq.n	80028c2 <UsbGetStr+0x62>
    {
        buffer[count]='\0';
 80028bc:	2300      	movs	r3, #0
 80028be:	f80a 3007 	strb.w	r3, [sl, r7]
    }
    return count;
}
 80028c2:	4638      	mov	r0, r7
 80028c4:	b002      	add	sp, #8
 80028c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int count=0;
 80028ca:	2700      	movs	r7, #0
 80028cc:	e7f6      	b.n	80028bc <UsbGetStr+0x5c>
        if (UsbGetChar_noWait(&c))
 80028ce:	f10d 0007 	add.w	r0, sp, #7
 80028d2:	f7ff ff81 	bl	80027d8 <UsbGetChar_noWait>
 80028d6:	b130      	cbz	r0, 80028e6 <UsbGetStr+0x86>
            buffer[count]=c;
 80028d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80028dc:	f80a 3007 	strb.w	r3, [sl, r7]
            count++;
 80028e0:	3701      	adds	r7, #1
            if (c==terminator)
 80028e2:	454b      	cmp	r3, r9
 80028e4:	d0e7      	beq.n	80028b6 <UsbGetStr+0x56>
    while(count<bufSize)
 80028e6:	4547      	cmp	r7, r8
 80028e8:	dbcc      	blt.n	8002884 <UsbGetStr+0x24>
 80028ea:	e7e4      	b.n	80028b6 <UsbGetStr+0x56>
    uint32_t start=heartbeat;
 80028ec:	4b02      	ldr	r3, [pc, #8]	; (80028f8 <UsbGetStr+0x98>)
 80028ee:	699e      	ldr	r6, [r3, #24]
    while(count<bufSize)
 80028f0:	2900      	cmp	r1, #0
 80028f2:	dcc5      	bgt.n	8002880 <UsbGetStr+0x20>
    int count=0;
 80028f4:	2700      	movs	r7, #0
 80028f6:	e7e4      	b.n	80028c2 <UsbGetStr+0x62>
 80028f8:	200002f4 	.word	0x200002f4

080028fc <UsbActive>:


// true if the USB connection is established and not suspended
bool UsbActive (void)
{
    bool res = configurationSet && !suspended;
 80028fc:	4b05      	ldr	r3, [pc, #20]	; (8002914 <UsbActive+0x18>)
 80028fe:	78db      	ldrb	r3, [r3, #3]
 8002900:	b133      	cbz	r3, 8002910 <UsbActive+0x14>
 8002902:	4b04      	ldr	r3, [pc, #16]	; (8002914 <UsbActive+0x18>)
 8002904:	7898      	ldrb	r0, [r3, #2]
 8002906:	f080 0001 	eor.w	r0, r0, #1
    return res;
}
 800290a:	f000 0001 	and.w	r0, r0, #1
 800290e:	4770      	bx	lr
    bool res = configurationSet && !suspended;
 8002910:	2000      	movs	r0, #0
 8002912:	e7fa      	b.n	800290a <UsbActive+0xe>
 8002914:	200002f4 	.word	0x200002f4

08002918 <UsbSendChar_noWait>:
// Send a character to the host (via send buffer).
// Returns false if the buffer is full.
bool UsbSendChar_noWait(char c)
{
    // check space
    int i = (txw + 1) & (USB_TXLEN - 1);
 8002918:	4a0e      	ldr	r2, [pc, #56]	; (8002954 <UsbSendChar_noWait+0x3c>)
 800291a:	6893      	ldr	r3, [r2, #8]
 800291c:	3301      	adds	r3, #1
 800291e:	b2db      	uxtb	r3, r3
    if (i == txr)
 8002920:	68d2      	ldr	r2, [r2, #12]
 8002922:	429a      	cmp	r2, r3
 8002924:	d014      	beq.n	8002950 <UsbSendChar_noWait+0x38>
{
 8002926:	b510      	push	{r4, lr}
    {
        return false;
    }

    // write into the buffer
    UsbTxBuf[txw] = c;
 8002928:	4a0a      	ldr	r2, [pc, #40]	; (8002954 <UsbSendChar_noWait+0x3c>)
 800292a:	6891      	ldr	r1, [r2, #8]
 800292c:	4c0a      	ldr	r4, [pc, #40]	; (8002958 <UsbSendChar_noWait+0x40>)
 800292e:	5460      	strb	r0, [r4, r1]
    txw = i;
 8002930:	6093      	str	r3, [r2, #8]
    // Then you may call UsbTxFlush() to trigger sending

    // if (((txw + 1) & (txLen - 1)) == txr)
    {
        // trigger sending
        if (!transmitting)
 8002932:	7853      	ldrb	r3, [r2, #1]
 8002934:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8002938:	b103      	cbz	r3, 800293c <UsbSendChar_noWait+0x24>
            EpBulkBeginTransmit();
            EnableUsbIRQ();
        }
    }
    return true;
}
 800293a:	bd10      	pop	{r4, pc}
    NVIC_ICER[USB_IRQ_NUMBER/32] = ((uint32_t) 1) << (USB_IRQ_NUMBER % 32);
 800293c:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
 8002940:	4b06      	ldr	r3, [pc, #24]	; (800295c <UsbSendChar_noWait+0x44>)
 8002942:	601c      	str	r4, [r3, #0]
            EpBulkBeginTransmit();
 8002944:	f7ff fda8 	bl	8002498 <EpBulkBeginTransmit>
    NVIC_ISER[USB_IRQ_NUMBER/32] = ((uint32_t) 1) << (USB_IRQ_NUMBER % 32);
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <UsbSendChar_noWait+0x48>)
 800294a:	601c      	str	r4, [r3, #0]
    return true;
 800294c:	2001      	movs	r0, #1
 800294e:	e7f4      	b.n	800293a <UsbSendChar_noWait+0x22>
        return false;
 8002950:	2000      	movs	r0, #0
}
 8002952:	4770      	bx	lr
 8002954:	200002f4 	.word	0x200002f4
 8002958:	20000324 	.word	0x20000324
 800295c:	e000e180 	.word	0xe000e180
 8002960:	e000e100 	.word	0xe000e100

08002964 <UsbSendStr>:

// Send a string to the host.
// Waits if buffer is full, aborts on timeout or USB suspend.
// Returns the number of characters that have been sent.
int UsbSendStr(char* str, uint32_t timeout_ms)
{
 8002964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002968:	4607      	mov	r7, r0
 800296a:	460e      	mov	r6, r1
    uint32_t start=heartbeat;
 800296c:	4b17      	ldr	r3, [pc, #92]	; (80029cc <UsbSendStr+0x68>)
 800296e:	699d      	ldr	r5, [r3, #24]
    int count=0;
 8002970:	f04f 0800 	mov.w	r8, #0
    while (*str)
    {
        // Wait until there is space in the send buffer
        while(1)
        {
            if (!configurationSet || suspended)
 8002974:	461c      	mov	r4, r3
    while (*str)
 8002976:	783b      	ldrb	r3, [r7, #0]
 8002978:	b1e3      	cbz	r3, 80029b4 <UsbSendStr+0x50>
            if (!configurationSet || suspended)
 800297a:	78e3      	ldrb	r3, [r4, #3]
 800297c:	b1d3      	cbz	r3, 80029b4 <UsbSendStr+0x50>
 800297e:	78a3      	ldrb	r3, [r4, #2]
 8002980:	b9c3      	cbnz	r3, 80029b4 <UsbSendStr+0x50>
            {
                // USB is inactive, abort
                return count;
            }

            if (((txw + 1) & (USB_TXLEN - 1)) != txr)
 8002982:	68a3      	ldr	r3, [r4, #8]
 8002984:	68e2      	ldr	r2, [r4, #12]
 8002986:	3301      	adds	r3, #1
 8002988:	b2db      	uxtb	r3, r3
 800298a:	4293      	cmp	r3, r2
 800298c:	d115      	bne.n	80029ba <UsbSendStr+0x56>
            {
                // ready to send, stop waiting
                break;
            }

            if (heartbeat-start > timeout_ms)
 800298e:	69a3      	ldr	r3, [r4, #24]
 8002990:	1b5b      	subs	r3, r3, r5
 8002992:	429e      	cmp	r6, r3
 8002994:	d30e      	bcc.n	80029b4 <UsbSendStr+0x50>
            {
                // timeout, abort
                return count;
            }

            __asm__ volatile ("wfi"); // wait
 8002996:	bf30      	wfi
            if (!configurationSet || suspended)
 8002998:	78e3      	ldrb	r3, [r4, #3]
 800299a:	b15b      	cbz	r3, 80029b4 <UsbSendStr+0x50>
 800299c:	78a3      	ldrb	r3, [r4, #2]
 800299e:	b94b      	cbnz	r3, 80029b4 <UsbSendStr+0x50>
            if (((txw + 1) & (USB_TXLEN - 1)) != txr)
 80029a0:	68a3      	ldr	r3, [r4, #8]
 80029a2:	68e2      	ldr	r2, [r4, #12]
 80029a4:	3301      	adds	r3, #1
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d106      	bne.n	80029ba <UsbSendStr+0x56>
            if (heartbeat-start > timeout_ms)
 80029ac:	69a3      	ldr	r3, [r4, #24]
 80029ae:	1b5b      	subs	r3, r3, r5
 80029b0:	42b3      	cmp	r3, r6
 80029b2:	d9f0      	bls.n	8002996 <UsbSendStr+0x32>
            str++;
            count++;
        }
    }
    return count;
}
 80029b4:	4640      	mov	r0, r8
 80029b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (UsbSendChar_noWait(c))
 80029ba:	7838      	ldrb	r0, [r7, #0]
 80029bc:	f7ff ffac 	bl	8002918 <UsbSendChar_noWait>
 80029c0:	2800      	cmp	r0, #0
 80029c2:	d0d8      	beq.n	8002976 <UsbSendStr+0x12>
            str++;
 80029c4:	3701      	adds	r7, #1
            count++;
 80029c6:	f108 0801 	add.w	r8, r8, #1
 80029ca:	e7d4      	b.n	8002976 <UsbSendStr+0x12>
 80029cc:	200002f4 	.word	0x200002f4

080029d0 <Reset_Handler>:
 80029d0:	480d      	ldr	r0, [pc, #52]	; (8002a08 <LoopForever+0x2>)
 80029d2:	4685      	mov	sp, r0
 80029d4:	480d      	ldr	r0, [pc, #52]	; (8002a0c <LoopForever+0x6>)
 80029d6:	490e      	ldr	r1, [pc, #56]	; (8002a10 <LoopForever+0xa>)
 80029d8:	4a0e      	ldr	r2, [pc, #56]	; (8002a14 <LoopForever+0xe>)
 80029da:	2300      	movs	r3, #0
 80029dc:	e002      	b.n	80029e4 <LoopCopyDataInit>

080029de <CopyDataInit>:
 80029de:	58d4      	ldr	r4, [r2, r3]
 80029e0:	50c4      	str	r4, [r0, r3]
 80029e2:	3304      	adds	r3, #4

080029e4 <LoopCopyDataInit>:
 80029e4:	18c4      	adds	r4, r0, r3
 80029e6:	428c      	cmp	r4, r1
 80029e8:	d3f9      	bcc.n	80029de <CopyDataInit>
 80029ea:	4a0b      	ldr	r2, [pc, #44]	; (8002a18 <LoopForever+0x12>)
 80029ec:	4c0b      	ldr	r4, [pc, #44]	; (8002a1c <LoopForever+0x16>)
 80029ee:	2300      	movs	r3, #0
 80029f0:	e001      	b.n	80029f6 <LoopFillZerobss>

080029f2 <FillZerobss>:
 80029f2:	6013      	str	r3, [r2, #0]
 80029f4:	3204      	adds	r2, #4

080029f6 <LoopFillZerobss>:
 80029f6:	42a2      	cmp	r2, r4
 80029f8:	d3fb      	bcc.n	80029f2 <FillZerobss>
 80029fa:	f3af 8000 	nop.w
 80029fe:	f000 f831 	bl	8002a64 <__libc_init_array>
 8002a02:	f7fe fecb 	bl	800179c <main>

08002a06 <LoopForever>:
 8002a06:	e7fe      	b.n	8002a06 <LoopForever>
 8002a08:	20010000 	.word	0x20010000
 8002a0c:	20000000 	.word	0x20000000
 8002a10:	200001d4 	.word	0x200001d4
 8002a14:	08009db4 	.word	0x08009db4
 8002a18:	200001d4 	.word	0x200001d4
 8002a1c:	20000554 	.word	0x20000554

08002a20 <ADC1_2_IRQHandler>:
 8002a20:	e7fe      	b.n	8002a20 <ADC1_2_IRQHandler>
	...

08002a24 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
void _sbrk(int incr)
{
 8002a24:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002a26:	4b0a      	ldr	r3, [pc, #40]	; (8002a50 <_sbrk+0x2c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	b143      	cbz	r3, 8002a3e <_sbrk+0x1a>
		heap_end = &end;

	prev_heap_end = heap_end;
 8002a2c:	4b08      	ldr	r3, [pc, #32]	; (8002a50 <_sbrk+0x2c>)
	if (heap_end + incr > stack_ptr)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4418      	add	r0, r3
 8002a32:	466b      	mov	r3, sp
 8002a34:	4298      	cmp	r0, r3
 8002a36:	d806      	bhi.n	8002a46 <_sbrk+0x22>
	{
		errno = ENOMEM;
		return (void) -1;
	}

	heap_end += incr;
 8002a38:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <_sbrk+0x2c>)
 8002a3a:	6018      	str	r0, [r3, #0]

	return (void) prev_heap_end;
}
 8002a3c:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8002a3e:	4b04      	ldr	r3, [pc, #16]	; (8002a50 <_sbrk+0x2c>)
 8002a40:	4a04      	ldr	r2, [pc, #16]	; (8002a54 <_sbrk+0x30>)
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	e7f2      	b.n	8002a2c <_sbrk+0x8>
		errno = ENOMEM;
 8002a46:	f000 f807 	bl	8002a58 <__errno>
 8002a4a:	230c      	movs	r3, #12
 8002a4c:	6003      	str	r3, [r0, #0]
		return (void) -1;
 8002a4e:	e7f5      	b.n	8002a3c <_sbrk+0x18>
 8002a50:	20000310 	.word	0x20000310
 8002a54:	20000558 	.word	0x20000558

08002a58 <__errno>:
 8002a58:	4b01      	ldr	r3, [pc, #4]	; (8002a60 <__errno+0x8>)
 8002a5a:	6818      	ldr	r0, [r3, #0]
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	20000004 	.word	0x20000004

08002a64 <__libc_init_array>:
 8002a64:	b570      	push	{r4, r5, r6, lr}
 8002a66:	2500      	movs	r5, #0
 8002a68:	4e0c      	ldr	r6, [pc, #48]	; (8002a9c <__libc_init_array+0x38>)
 8002a6a:	4c0d      	ldr	r4, [pc, #52]	; (8002aa0 <__libc_init_array+0x3c>)
 8002a6c:	1ba4      	subs	r4, r4, r6
 8002a6e:	10a4      	asrs	r4, r4, #2
 8002a70:	42a5      	cmp	r5, r4
 8002a72:	d109      	bne.n	8002a88 <__libc_init_array+0x24>
 8002a74:	f004 f9d0 	bl	8006e18 <_init>
 8002a78:	2500      	movs	r5, #0
 8002a7a:	4e0a      	ldr	r6, [pc, #40]	; (8002aa4 <__libc_init_array+0x40>)
 8002a7c:	4c0a      	ldr	r4, [pc, #40]	; (8002aa8 <__libc_init_array+0x44>)
 8002a7e:	1ba4      	subs	r4, r4, r6
 8002a80:	10a4      	asrs	r4, r4, #2
 8002a82:	42a5      	cmp	r5, r4
 8002a84:	d105      	bne.n	8002a92 <__libc_init_array+0x2e>
 8002a86:	bd70      	pop	{r4, r5, r6, pc}
 8002a88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a8c:	4798      	blx	r3
 8002a8e:	3501      	adds	r5, #1
 8002a90:	e7ee      	b.n	8002a70 <__libc_init_array+0xc>
 8002a92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a96:	4798      	blx	r3
 8002a98:	3501      	adds	r5, #1
 8002a9a:	e7f2      	b.n	8002a82 <__libc_init_array+0x1e>
 8002a9c:	08009dac 	.word	0x08009dac
 8002aa0:	08009dac 	.word	0x08009dac
 8002aa4:	08009dac 	.word	0x08009dac
 8002aa8:	08009db0 	.word	0x08009db0

08002aac <memset>:
 8002aac:	4603      	mov	r3, r0
 8002aae:	4402      	add	r2, r0
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d100      	bne.n	8002ab6 <memset+0xa>
 8002ab4:	4770      	bx	lr
 8002ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8002aba:	e7f9      	b.n	8002ab0 <memset+0x4>

08002abc <__cvt>:
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ac2:	461e      	mov	r6, r3
 8002ac4:	bfbb      	ittet	lt
 8002ac6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002aca:	461e      	movlt	r6, r3
 8002acc:	2300      	movge	r3, #0
 8002ace:	232d      	movlt	r3, #45	; 0x2d
 8002ad0:	b088      	sub	sp, #32
 8002ad2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8002ad4:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8002ad8:	f027 0720 	bic.w	r7, r7, #32
 8002adc:	2f46      	cmp	r7, #70	; 0x46
 8002ade:	4614      	mov	r4, r2
 8002ae0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002ae2:	700b      	strb	r3, [r1, #0]
 8002ae4:	d004      	beq.n	8002af0 <__cvt+0x34>
 8002ae6:	2f45      	cmp	r7, #69	; 0x45
 8002ae8:	d100      	bne.n	8002aec <__cvt+0x30>
 8002aea:	3501      	adds	r5, #1
 8002aec:	2302      	movs	r3, #2
 8002aee:	e000      	b.n	8002af2 <__cvt+0x36>
 8002af0:	2303      	movs	r3, #3
 8002af2:	aa07      	add	r2, sp, #28
 8002af4:	9204      	str	r2, [sp, #16]
 8002af6:	aa06      	add	r2, sp, #24
 8002af8:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002afc:	e9cd 3500 	strd	r3, r5, [sp]
 8002b00:	4622      	mov	r2, r4
 8002b02:	4633      	mov	r3, r6
 8002b04:	f001 fddc 	bl	80046c0 <_dtoa_r>
 8002b08:	2f47      	cmp	r7, #71	; 0x47
 8002b0a:	4680      	mov	r8, r0
 8002b0c:	d102      	bne.n	8002b14 <__cvt+0x58>
 8002b0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002b10:	07db      	lsls	r3, r3, #31
 8002b12:	d526      	bpl.n	8002b62 <__cvt+0xa6>
 8002b14:	2f46      	cmp	r7, #70	; 0x46
 8002b16:	eb08 0905 	add.w	r9, r8, r5
 8002b1a:	d111      	bne.n	8002b40 <__cvt+0x84>
 8002b1c:	f898 3000 	ldrb.w	r3, [r8]
 8002b20:	2b30      	cmp	r3, #48	; 0x30
 8002b22:	d10a      	bne.n	8002b3a <__cvt+0x7e>
 8002b24:	2200      	movs	r2, #0
 8002b26:	2300      	movs	r3, #0
 8002b28:	4620      	mov	r0, r4
 8002b2a:	4631      	mov	r1, r6
 8002b2c:	f7fd ff4c 	bl	80009c8 <__aeabi_dcmpeq>
 8002b30:	b918      	cbnz	r0, 8002b3a <__cvt+0x7e>
 8002b32:	f1c5 0501 	rsb	r5, r5, #1
 8002b36:	f8ca 5000 	str.w	r5, [sl]
 8002b3a:	f8da 3000 	ldr.w	r3, [sl]
 8002b3e:	4499      	add	r9, r3
 8002b40:	2200      	movs	r2, #0
 8002b42:	2300      	movs	r3, #0
 8002b44:	4620      	mov	r0, r4
 8002b46:	4631      	mov	r1, r6
 8002b48:	f7fd ff3e 	bl	80009c8 <__aeabi_dcmpeq>
 8002b4c:	b938      	cbnz	r0, 8002b5e <__cvt+0xa2>
 8002b4e:	2230      	movs	r2, #48	; 0x30
 8002b50:	9b07      	ldr	r3, [sp, #28]
 8002b52:	454b      	cmp	r3, r9
 8002b54:	d205      	bcs.n	8002b62 <__cvt+0xa6>
 8002b56:	1c59      	adds	r1, r3, #1
 8002b58:	9107      	str	r1, [sp, #28]
 8002b5a:	701a      	strb	r2, [r3, #0]
 8002b5c:	e7f8      	b.n	8002b50 <__cvt+0x94>
 8002b5e:	f8cd 901c 	str.w	r9, [sp, #28]
 8002b62:	4640      	mov	r0, r8
 8002b64:	9b07      	ldr	r3, [sp, #28]
 8002b66:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002b68:	eba3 0308 	sub.w	r3, r3, r8
 8002b6c:	6013      	str	r3, [r2, #0]
 8002b6e:	b008      	add	sp, #32
 8002b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002b74 <__exponent>:
 8002b74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b76:	2900      	cmp	r1, #0
 8002b78:	bfb4      	ite	lt
 8002b7a:	232d      	movlt	r3, #45	; 0x2d
 8002b7c:	232b      	movge	r3, #43	; 0x2b
 8002b7e:	4604      	mov	r4, r0
 8002b80:	bfb8      	it	lt
 8002b82:	4249      	neglt	r1, r1
 8002b84:	2909      	cmp	r1, #9
 8002b86:	f804 2b02 	strb.w	r2, [r4], #2
 8002b8a:	7043      	strb	r3, [r0, #1]
 8002b8c:	dd21      	ble.n	8002bd2 <__exponent+0x5e>
 8002b8e:	f10d 0307 	add.w	r3, sp, #7
 8002b92:	461f      	mov	r7, r3
 8002b94:	260a      	movs	r6, #10
 8002b96:	fb91 f5f6 	sdiv	r5, r1, r6
 8002b9a:	fb06 1115 	mls	r1, r6, r5, r1
 8002b9e:	2d09      	cmp	r5, #9
 8002ba0:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8002ba4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002ba8:	f103 32ff 	add.w	r2, r3, #4294967295
 8002bac:	4629      	mov	r1, r5
 8002bae:	dc09      	bgt.n	8002bc4 <__exponent+0x50>
 8002bb0:	3130      	adds	r1, #48	; 0x30
 8002bb2:	3b02      	subs	r3, #2
 8002bb4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002bb8:	42bb      	cmp	r3, r7
 8002bba:	4622      	mov	r2, r4
 8002bbc:	d304      	bcc.n	8002bc8 <__exponent+0x54>
 8002bbe:	1a10      	subs	r0, r2, r0
 8002bc0:	b003      	add	sp, #12
 8002bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	e7e6      	b.n	8002b96 <__exponent+0x22>
 8002bc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002bcc:	f804 2b01 	strb.w	r2, [r4], #1
 8002bd0:	e7f2      	b.n	8002bb8 <__exponent+0x44>
 8002bd2:	2330      	movs	r3, #48	; 0x30
 8002bd4:	4419      	add	r1, r3
 8002bd6:	7083      	strb	r3, [r0, #2]
 8002bd8:	1d02      	adds	r2, r0, #4
 8002bda:	70c1      	strb	r1, [r0, #3]
 8002bdc:	e7ef      	b.n	8002bbe <__exponent+0x4a>
	...

08002be0 <_printf_float>:
 8002be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002be4:	b091      	sub	sp, #68	; 0x44
 8002be6:	460c      	mov	r4, r1
 8002be8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8002bea:	4693      	mov	fp, r2
 8002bec:	461e      	mov	r6, r3
 8002bee:	4605      	mov	r5, r0
 8002bf0:	f002 fe56 	bl	80058a0 <_localeconv_r>
 8002bf4:	6803      	ldr	r3, [r0, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	9309      	str	r3, [sp, #36]	; 0x24
 8002bfa:	f7fd fab9 	bl	8000170 <strlen>
 8002bfe:	2300      	movs	r3, #0
 8002c00:	930e      	str	r3, [sp, #56]	; 0x38
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	900a      	str	r0, [sp, #40]	; 0x28
 8002c06:	3307      	adds	r3, #7
 8002c08:	f023 0307 	bic.w	r3, r3, #7
 8002c0c:	f103 0208 	add.w	r2, r3, #8
 8002c10:	f894 8018 	ldrb.w	r8, [r4, #24]
 8002c14:	f8d4 a000 	ldr.w	sl, [r4]
 8002c18:	603a      	str	r2, [r7, #0]
 8002c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002c22:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8002c26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002c2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8002c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c30:	4ba6      	ldr	r3, [pc, #664]	; (8002ecc <_printf_float+0x2ec>)
 8002c32:	4638      	mov	r0, r7
 8002c34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002c36:	f7fd fef9 	bl	8000a2c <__aeabi_dcmpun>
 8002c3a:	bb68      	cbnz	r0, 8002c98 <_printf_float+0xb8>
 8002c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c40:	4ba2      	ldr	r3, [pc, #648]	; (8002ecc <_printf_float+0x2ec>)
 8002c42:	4638      	mov	r0, r7
 8002c44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002c46:	f7fd fed3 	bl	80009f0 <__aeabi_dcmple>
 8002c4a:	bb28      	cbnz	r0, 8002c98 <_printf_float+0xb8>
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	2300      	movs	r3, #0
 8002c50:	4638      	mov	r0, r7
 8002c52:	4649      	mov	r1, r9
 8002c54:	f7fd fec2 	bl	80009dc <__aeabi_dcmplt>
 8002c58:	b110      	cbz	r0, 8002c60 <_printf_float+0x80>
 8002c5a:	232d      	movs	r3, #45	; 0x2d
 8002c5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c60:	4f9b      	ldr	r7, [pc, #620]	; (8002ed0 <_printf_float+0x2f0>)
 8002c62:	4b9c      	ldr	r3, [pc, #624]	; (8002ed4 <_printf_float+0x2f4>)
 8002c64:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002c68:	bf98      	it	ls
 8002c6a:	461f      	movls	r7, r3
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	f04f 0900 	mov.w	r9, #0
 8002c72:	6123      	str	r3, [r4, #16]
 8002c74:	f02a 0304 	bic.w	r3, sl, #4
 8002c78:	6023      	str	r3, [r4, #0]
 8002c7a:	9600      	str	r6, [sp, #0]
 8002c7c:	465b      	mov	r3, fp
 8002c7e:	aa0f      	add	r2, sp, #60	; 0x3c
 8002c80:	4621      	mov	r1, r4
 8002c82:	4628      	mov	r0, r5
 8002c84:	f000 f9e2 	bl	800304c <_printf_common>
 8002c88:	3001      	adds	r0, #1
 8002c8a:	f040 8090 	bne.w	8002dae <_printf_float+0x1ce>
 8002c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c92:	b011      	add	sp, #68	; 0x44
 8002c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c98:	463a      	mov	r2, r7
 8002c9a:	464b      	mov	r3, r9
 8002c9c:	4638      	mov	r0, r7
 8002c9e:	4649      	mov	r1, r9
 8002ca0:	f7fd fec4 	bl	8000a2c <__aeabi_dcmpun>
 8002ca4:	b110      	cbz	r0, 8002cac <_printf_float+0xcc>
 8002ca6:	4f8c      	ldr	r7, [pc, #560]	; (8002ed8 <_printf_float+0x2f8>)
 8002ca8:	4b8c      	ldr	r3, [pc, #560]	; (8002edc <_printf_float+0x2fc>)
 8002caa:	e7db      	b.n	8002c64 <_printf_float+0x84>
 8002cac:	6863      	ldr	r3, [r4, #4]
 8002cae:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8002cb2:	1c59      	adds	r1, r3, #1
 8002cb4:	a80d      	add	r0, sp, #52	; 0x34
 8002cb6:	a90e      	add	r1, sp, #56	; 0x38
 8002cb8:	d140      	bne.n	8002d3c <_printf_float+0x15c>
 8002cba:	2306      	movs	r3, #6
 8002cbc:	6063      	str	r3, [r4, #4]
 8002cbe:	f04f 0c00 	mov.w	ip, #0
 8002cc2:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8002cc6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8002cca:	6863      	ldr	r3, [r4, #4]
 8002ccc:	6022      	str	r2, [r4, #0]
 8002cce:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	463a      	mov	r2, r7
 8002cd6:	464b      	mov	r3, r9
 8002cd8:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8002cdc:	4628      	mov	r0, r5
 8002cde:	f7ff feed 	bl	8002abc <__cvt>
 8002ce2:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8002ce6:	2b47      	cmp	r3, #71	; 0x47
 8002ce8:	4607      	mov	r7, r0
 8002cea:	d109      	bne.n	8002d00 <_printf_float+0x120>
 8002cec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002cee:	1cd8      	adds	r0, r3, #3
 8002cf0:	db02      	blt.n	8002cf8 <_printf_float+0x118>
 8002cf2:	6862      	ldr	r2, [r4, #4]
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	dd47      	ble.n	8002d88 <_printf_float+0x1a8>
 8002cf8:	f1a8 0802 	sub.w	r8, r8, #2
 8002cfc:	fa5f f888 	uxtb.w	r8, r8
 8002d00:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002d04:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002d06:	d824      	bhi.n	8002d52 <_printf_float+0x172>
 8002d08:	3901      	subs	r1, #1
 8002d0a:	4642      	mov	r2, r8
 8002d0c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002d10:	910d      	str	r1, [sp, #52]	; 0x34
 8002d12:	f7ff ff2f 	bl	8002b74 <__exponent>
 8002d16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002d18:	4681      	mov	r9, r0
 8002d1a:	1813      	adds	r3, r2, r0
 8002d1c:	2a01      	cmp	r2, #1
 8002d1e:	6123      	str	r3, [r4, #16]
 8002d20:	dc02      	bgt.n	8002d28 <_printf_float+0x148>
 8002d22:	6822      	ldr	r2, [r4, #0]
 8002d24:	07d1      	lsls	r1, r2, #31
 8002d26:	d501      	bpl.n	8002d2c <_printf_float+0x14c>
 8002d28:	3301      	adds	r3, #1
 8002d2a:	6123      	str	r3, [r4, #16]
 8002d2c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0a2      	beq.n	8002c7a <_printf_float+0x9a>
 8002d34:	232d      	movs	r3, #45	; 0x2d
 8002d36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d3a:	e79e      	b.n	8002c7a <_printf_float+0x9a>
 8002d3c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8002d40:	f000 816e 	beq.w	8003020 <_printf_float+0x440>
 8002d44:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002d48:	d1b9      	bne.n	8002cbe <_printf_float+0xde>
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1b7      	bne.n	8002cbe <_printf_float+0xde>
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e7b4      	b.n	8002cbc <_printf_float+0xdc>
 8002d52:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8002d56:	d119      	bne.n	8002d8c <_printf_float+0x1ac>
 8002d58:	2900      	cmp	r1, #0
 8002d5a:	6863      	ldr	r3, [r4, #4]
 8002d5c:	dd0c      	ble.n	8002d78 <_printf_float+0x198>
 8002d5e:	6121      	str	r1, [r4, #16]
 8002d60:	b913      	cbnz	r3, 8002d68 <_printf_float+0x188>
 8002d62:	6822      	ldr	r2, [r4, #0]
 8002d64:	07d2      	lsls	r2, r2, #31
 8002d66:	d502      	bpl.n	8002d6e <_printf_float+0x18e>
 8002d68:	3301      	adds	r3, #1
 8002d6a:	440b      	add	r3, r1
 8002d6c:	6123      	str	r3, [r4, #16]
 8002d6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002d70:	f04f 0900 	mov.w	r9, #0
 8002d74:	65a3      	str	r3, [r4, #88]	; 0x58
 8002d76:	e7d9      	b.n	8002d2c <_printf_float+0x14c>
 8002d78:	b913      	cbnz	r3, 8002d80 <_printf_float+0x1a0>
 8002d7a:	6822      	ldr	r2, [r4, #0]
 8002d7c:	07d0      	lsls	r0, r2, #31
 8002d7e:	d501      	bpl.n	8002d84 <_printf_float+0x1a4>
 8002d80:	3302      	adds	r3, #2
 8002d82:	e7f3      	b.n	8002d6c <_printf_float+0x18c>
 8002d84:	2301      	movs	r3, #1
 8002d86:	e7f1      	b.n	8002d6c <_printf_float+0x18c>
 8002d88:	f04f 0867 	mov.w	r8, #103	; 0x67
 8002d8c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8002d90:	4293      	cmp	r3, r2
 8002d92:	db05      	blt.n	8002da0 <_printf_float+0x1c0>
 8002d94:	6822      	ldr	r2, [r4, #0]
 8002d96:	6123      	str	r3, [r4, #16]
 8002d98:	07d1      	lsls	r1, r2, #31
 8002d9a:	d5e8      	bpl.n	8002d6e <_printf_float+0x18e>
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	e7e5      	b.n	8002d6c <_printf_float+0x18c>
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	bfcc      	ite	gt
 8002da4:	2301      	movgt	r3, #1
 8002da6:	f1c3 0302 	rsble	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	e7de      	b.n	8002d6c <_printf_float+0x18c>
 8002dae:	6823      	ldr	r3, [r4, #0]
 8002db0:	055a      	lsls	r2, r3, #21
 8002db2:	d407      	bmi.n	8002dc4 <_printf_float+0x1e4>
 8002db4:	6923      	ldr	r3, [r4, #16]
 8002db6:	463a      	mov	r2, r7
 8002db8:	4659      	mov	r1, fp
 8002dba:	4628      	mov	r0, r5
 8002dbc:	47b0      	blx	r6
 8002dbe:	3001      	adds	r0, #1
 8002dc0:	d129      	bne.n	8002e16 <_printf_float+0x236>
 8002dc2:	e764      	b.n	8002c8e <_printf_float+0xae>
 8002dc4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002dc8:	f240 80d7 	bls.w	8002f7a <_printf_float+0x39a>
 8002dcc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	f7fd fdf8 	bl	80009c8 <__aeabi_dcmpeq>
 8002dd8:	b388      	cbz	r0, 8002e3e <_printf_float+0x25e>
 8002dda:	2301      	movs	r3, #1
 8002ddc:	4a40      	ldr	r2, [pc, #256]	; (8002ee0 <_printf_float+0x300>)
 8002dde:	4659      	mov	r1, fp
 8002de0:	4628      	mov	r0, r5
 8002de2:	47b0      	blx	r6
 8002de4:	3001      	adds	r0, #1
 8002de6:	f43f af52 	beq.w	8002c8e <_printf_float+0xae>
 8002dea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002dee:	429a      	cmp	r2, r3
 8002df0:	db02      	blt.n	8002df8 <_printf_float+0x218>
 8002df2:	6823      	ldr	r3, [r4, #0]
 8002df4:	07d8      	lsls	r0, r3, #31
 8002df6:	d50e      	bpl.n	8002e16 <_printf_float+0x236>
 8002df8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002dfc:	4659      	mov	r1, fp
 8002dfe:	4628      	mov	r0, r5
 8002e00:	47b0      	blx	r6
 8002e02:	3001      	adds	r0, #1
 8002e04:	f43f af43 	beq.w	8002c8e <_printf_float+0xae>
 8002e08:	2700      	movs	r7, #0
 8002e0a:	f104 081a 	add.w	r8, r4, #26
 8002e0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e10:	3b01      	subs	r3, #1
 8002e12:	42bb      	cmp	r3, r7
 8002e14:	dc09      	bgt.n	8002e2a <_printf_float+0x24a>
 8002e16:	6823      	ldr	r3, [r4, #0]
 8002e18:	079f      	lsls	r7, r3, #30
 8002e1a:	f100 80fd 	bmi.w	8003018 <_printf_float+0x438>
 8002e1e:	68e0      	ldr	r0, [r4, #12]
 8002e20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002e22:	4298      	cmp	r0, r3
 8002e24:	bfb8      	it	lt
 8002e26:	4618      	movlt	r0, r3
 8002e28:	e733      	b.n	8002c92 <_printf_float+0xb2>
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	4642      	mov	r2, r8
 8002e2e:	4659      	mov	r1, fp
 8002e30:	4628      	mov	r0, r5
 8002e32:	47b0      	blx	r6
 8002e34:	3001      	adds	r0, #1
 8002e36:	f43f af2a 	beq.w	8002c8e <_printf_float+0xae>
 8002e3a:	3701      	adds	r7, #1
 8002e3c:	e7e7      	b.n	8002e0e <_printf_float+0x22e>
 8002e3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	dc2b      	bgt.n	8002e9c <_printf_float+0x2bc>
 8002e44:	2301      	movs	r3, #1
 8002e46:	4a26      	ldr	r2, [pc, #152]	; (8002ee0 <_printf_float+0x300>)
 8002e48:	4659      	mov	r1, fp
 8002e4a:	4628      	mov	r0, r5
 8002e4c:	47b0      	blx	r6
 8002e4e:	3001      	adds	r0, #1
 8002e50:	f43f af1d 	beq.w	8002c8e <_printf_float+0xae>
 8002e54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002e56:	b923      	cbnz	r3, 8002e62 <_printf_float+0x282>
 8002e58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e5a:	b913      	cbnz	r3, 8002e62 <_printf_float+0x282>
 8002e5c:	6823      	ldr	r3, [r4, #0]
 8002e5e:	07d9      	lsls	r1, r3, #31
 8002e60:	d5d9      	bpl.n	8002e16 <_printf_float+0x236>
 8002e62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002e66:	4659      	mov	r1, fp
 8002e68:	4628      	mov	r0, r5
 8002e6a:	47b0      	blx	r6
 8002e6c:	3001      	adds	r0, #1
 8002e6e:	f43f af0e 	beq.w	8002c8e <_printf_float+0xae>
 8002e72:	f04f 0800 	mov.w	r8, #0
 8002e76:	f104 091a 	add.w	r9, r4, #26
 8002e7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002e7c:	425b      	negs	r3, r3
 8002e7e:	4543      	cmp	r3, r8
 8002e80:	dc01      	bgt.n	8002e86 <_printf_float+0x2a6>
 8002e82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e84:	e797      	b.n	8002db6 <_printf_float+0x1d6>
 8002e86:	2301      	movs	r3, #1
 8002e88:	464a      	mov	r2, r9
 8002e8a:	4659      	mov	r1, fp
 8002e8c:	4628      	mov	r0, r5
 8002e8e:	47b0      	blx	r6
 8002e90:	3001      	adds	r0, #1
 8002e92:	f43f aefc 	beq.w	8002c8e <_printf_float+0xae>
 8002e96:	f108 0801 	add.w	r8, r8, #1
 8002e9a:	e7ee      	b.n	8002e7a <_printf_float+0x29a>
 8002e9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002e9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	bfa8      	it	ge
 8002ea4:	461a      	movge	r2, r3
 8002ea6:	2a00      	cmp	r2, #0
 8002ea8:	4690      	mov	r8, r2
 8002eaa:	dd07      	ble.n	8002ebc <_printf_float+0x2dc>
 8002eac:	4613      	mov	r3, r2
 8002eae:	4659      	mov	r1, fp
 8002eb0:	463a      	mov	r2, r7
 8002eb2:	4628      	mov	r0, r5
 8002eb4:	47b0      	blx	r6
 8002eb6:	3001      	adds	r0, #1
 8002eb8:	f43f aee9 	beq.w	8002c8e <_printf_float+0xae>
 8002ebc:	f104 031a 	add.w	r3, r4, #26
 8002ec0:	f04f 0a00 	mov.w	sl, #0
 8002ec4:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8002ec8:	930b      	str	r3, [sp, #44]	; 0x2c
 8002eca:	e015      	b.n	8002ef8 <_printf_float+0x318>
 8002ecc:	7fefffff 	.word	0x7fefffff
 8002ed0:	08009a84 	.word	0x08009a84
 8002ed4:	08009a80 	.word	0x08009a80
 8002ed8:	08009a8c 	.word	0x08009a8c
 8002edc:	08009a88 	.word	0x08009a88
 8002ee0:	08009c43 	.word	0x08009c43
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002ee8:	4659      	mov	r1, fp
 8002eea:	4628      	mov	r0, r5
 8002eec:	47b0      	blx	r6
 8002eee:	3001      	adds	r0, #1
 8002ef0:	f43f aecd 	beq.w	8002c8e <_printf_float+0xae>
 8002ef4:	f10a 0a01 	add.w	sl, sl, #1
 8002ef8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8002efc:	eba9 0308 	sub.w	r3, r9, r8
 8002f00:	4553      	cmp	r3, sl
 8002f02:	dcef      	bgt.n	8002ee4 <_printf_float+0x304>
 8002f04:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	444f      	add	r7, r9
 8002f0c:	db14      	blt.n	8002f38 <_printf_float+0x358>
 8002f0e:	6823      	ldr	r3, [r4, #0]
 8002f10:	07da      	lsls	r2, r3, #31
 8002f12:	d411      	bmi.n	8002f38 <_printf_float+0x358>
 8002f14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002f16:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002f18:	eba3 0209 	sub.w	r2, r3, r9
 8002f1c:	eba3 0901 	sub.w	r9, r3, r1
 8002f20:	4591      	cmp	r9, r2
 8002f22:	bfa8      	it	ge
 8002f24:	4691      	movge	r9, r2
 8002f26:	f1b9 0f00 	cmp.w	r9, #0
 8002f2a:	dc0d      	bgt.n	8002f48 <_printf_float+0x368>
 8002f2c:	2700      	movs	r7, #0
 8002f2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002f32:	f104 081a 	add.w	r8, r4, #26
 8002f36:	e018      	b.n	8002f6a <_printf_float+0x38a>
 8002f38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002f3c:	4659      	mov	r1, fp
 8002f3e:	4628      	mov	r0, r5
 8002f40:	47b0      	blx	r6
 8002f42:	3001      	adds	r0, #1
 8002f44:	d1e6      	bne.n	8002f14 <_printf_float+0x334>
 8002f46:	e6a2      	b.n	8002c8e <_printf_float+0xae>
 8002f48:	464b      	mov	r3, r9
 8002f4a:	463a      	mov	r2, r7
 8002f4c:	4659      	mov	r1, fp
 8002f4e:	4628      	mov	r0, r5
 8002f50:	47b0      	blx	r6
 8002f52:	3001      	adds	r0, #1
 8002f54:	d1ea      	bne.n	8002f2c <_printf_float+0x34c>
 8002f56:	e69a      	b.n	8002c8e <_printf_float+0xae>
 8002f58:	2301      	movs	r3, #1
 8002f5a:	4642      	mov	r2, r8
 8002f5c:	4659      	mov	r1, fp
 8002f5e:	4628      	mov	r0, r5
 8002f60:	47b0      	blx	r6
 8002f62:	3001      	adds	r0, #1
 8002f64:	f43f ae93 	beq.w	8002c8e <_printf_float+0xae>
 8002f68:	3701      	adds	r7, #1
 8002f6a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002f6e:	1a9b      	subs	r3, r3, r2
 8002f70:	eba3 0309 	sub.w	r3, r3, r9
 8002f74:	42bb      	cmp	r3, r7
 8002f76:	dcef      	bgt.n	8002f58 <_printf_float+0x378>
 8002f78:	e74d      	b.n	8002e16 <_printf_float+0x236>
 8002f7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002f7c:	2a01      	cmp	r2, #1
 8002f7e:	dc01      	bgt.n	8002f84 <_printf_float+0x3a4>
 8002f80:	07db      	lsls	r3, r3, #31
 8002f82:	d538      	bpl.n	8002ff6 <_printf_float+0x416>
 8002f84:	2301      	movs	r3, #1
 8002f86:	463a      	mov	r2, r7
 8002f88:	4659      	mov	r1, fp
 8002f8a:	4628      	mov	r0, r5
 8002f8c:	47b0      	blx	r6
 8002f8e:	3001      	adds	r0, #1
 8002f90:	f43f ae7d 	beq.w	8002c8e <_printf_float+0xae>
 8002f94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002f98:	4659      	mov	r1, fp
 8002f9a:	4628      	mov	r0, r5
 8002f9c:	47b0      	blx	r6
 8002f9e:	3001      	adds	r0, #1
 8002fa0:	f107 0701 	add.w	r7, r7, #1
 8002fa4:	f43f ae73 	beq.w	8002c8e <_printf_float+0xae>
 8002fa8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002fac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f103 38ff 	add.w	r8, r3, #4294967295
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f7fd fd07 	bl	80009c8 <__aeabi_dcmpeq>
 8002fba:	b9c0      	cbnz	r0, 8002fee <_printf_float+0x40e>
 8002fbc:	4643      	mov	r3, r8
 8002fbe:	463a      	mov	r2, r7
 8002fc0:	4659      	mov	r1, fp
 8002fc2:	4628      	mov	r0, r5
 8002fc4:	47b0      	blx	r6
 8002fc6:	3001      	adds	r0, #1
 8002fc8:	d10d      	bne.n	8002fe6 <_printf_float+0x406>
 8002fca:	e660      	b.n	8002c8e <_printf_float+0xae>
 8002fcc:	2301      	movs	r3, #1
 8002fce:	4642      	mov	r2, r8
 8002fd0:	4659      	mov	r1, fp
 8002fd2:	4628      	mov	r0, r5
 8002fd4:	47b0      	blx	r6
 8002fd6:	3001      	adds	r0, #1
 8002fd8:	f43f ae59 	beq.w	8002c8e <_printf_float+0xae>
 8002fdc:	3701      	adds	r7, #1
 8002fde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	42bb      	cmp	r3, r7
 8002fe4:	dcf2      	bgt.n	8002fcc <_printf_float+0x3ec>
 8002fe6:	464b      	mov	r3, r9
 8002fe8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002fec:	e6e4      	b.n	8002db8 <_printf_float+0x1d8>
 8002fee:	2700      	movs	r7, #0
 8002ff0:	f104 081a 	add.w	r8, r4, #26
 8002ff4:	e7f3      	b.n	8002fde <_printf_float+0x3fe>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e7e1      	b.n	8002fbe <_printf_float+0x3de>
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	4642      	mov	r2, r8
 8002ffe:	4659      	mov	r1, fp
 8003000:	4628      	mov	r0, r5
 8003002:	47b0      	blx	r6
 8003004:	3001      	adds	r0, #1
 8003006:	f43f ae42 	beq.w	8002c8e <_printf_float+0xae>
 800300a:	3701      	adds	r7, #1
 800300c:	68e3      	ldr	r3, [r4, #12]
 800300e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003010:	1a9b      	subs	r3, r3, r2
 8003012:	42bb      	cmp	r3, r7
 8003014:	dcf1      	bgt.n	8002ffa <_printf_float+0x41a>
 8003016:	e702      	b.n	8002e1e <_printf_float+0x23e>
 8003018:	2700      	movs	r7, #0
 800301a:	f104 0819 	add.w	r8, r4, #25
 800301e:	e7f5      	b.n	800300c <_printf_float+0x42c>
 8003020:	2b00      	cmp	r3, #0
 8003022:	f43f ae94 	beq.w	8002d4e <_printf_float+0x16e>
 8003026:	f04f 0c00 	mov.w	ip, #0
 800302a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800302e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8003032:	6022      	str	r2, [r4, #0]
 8003034:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003038:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	463a      	mov	r2, r7
 8003040:	464b      	mov	r3, r9
 8003042:	4628      	mov	r0, r5
 8003044:	f7ff fd3a 	bl	8002abc <__cvt>
 8003048:	4607      	mov	r7, r0
 800304a:	e64f      	b.n	8002cec <_printf_float+0x10c>

0800304c <_printf_common>:
 800304c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003050:	4691      	mov	r9, r2
 8003052:	461f      	mov	r7, r3
 8003054:	688a      	ldr	r2, [r1, #8]
 8003056:	690b      	ldr	r3, [r1, #16]
 8003058:	4606      	mov	r6, r0
 800305a:	4293      	cmp	r3, r2
 800305c:	bfb8      	it	lt
 800305e:	4613      	movlt	r3, r2
 8003060:	f8c9 3000 	str.w	r3, [r9]
 8003064:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003068:	460c      	mov	r4, r1
 800306a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800306e:	b112      	cbz	r2, 8003076 <_printf_common+0x2a>
 8003070:	3301      	adds	r3, #1
 8003072:	f8c9 3000 	str.w	r3, [r9]
 8003076:	6823      	ldr	r3, [r4, #0]
 8003078:	0699      	lsls	r1, r3, #26
 800307a:	bf42      	ittt	mi
 800307c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003080:	3302      	addmi	r3, #2
 8003082:	f8c9 3000 	strmi.w	r3, [r9]
 8003086:	6825      	ldr	r5, [r4, #0]
 8003088:	f015 0506 	ands.w	r5, r5, #6
 800308c:	d107      	bne.n	800309e <_printf_common+0x52>
 800308e:	f104 0a19 	add.w	sl, r4, #25
 8003092:	68e3      	ldr	r3, [r4, #12]
 8003094:	f8d9 2000 	ldr.w	r2, [r9]
 8003098:	1a9b      	subs	r3, r3, r2
 800309a:	42ab      	cmp	r3, r5
 800309c:	dc29      	bgt.n	80030f2 <_printf_common+0xa6>
 800309e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80030a2:	6822      	ldr	r2, [r4, #0]
 80030a4:	3300      	adds	r3, #0
 80030a6:	bf18      	it	ne
 80030a8:	2301      	movne	r3, #1
 80030aa:	0692      	lsls	r2, r2, #26
 80030ac:	d42e      	bmi.n	800310c <_printf_common+0xc0>
 80030ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80030b2:	4639      	mov	r1, r7
 80030b4:	4630      	mov	r0, r6
 80030b6:	47c0      	blx	r8
 80030b8:	3001      	adds	r0, #1
 80030ba:	d021      	beq.n	8003100 <_printf_common+0xb4>
 80030bc:	6823      	ldr	r3, [r4, #0]
 80030be:	68e5      	ldr	r5, [r4, #12]
 80030c0:	f003 0306 	and.w	r3, r3, #6
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	bf18      	it	ne
 80030c8:	2500      	movne	r5, #0
 80030ca:	f8d9 2000 	ldr.w	r2, [r9]
 80030ce:	f04f 0900 	mov.w	r9, #0
 80030d2:	bf08      	it	eq
 80030d4:	1aad      	subeq	r5, r5, r2
 80030d6:	68a3      	ldr	r3, [r4, #8]
 80030d8:	6922      	ldr	r2, [r4, #16]
 80030da:	bf08      	it	eq
 80030dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030e0:	4293      	cmp	r3, r2
 80030e2:	bfc4      	itt	gt
 80030e4:	1a9b      	subgt	r3, r3, r2
 80030e6:	18ed      	addgt	r5, r5, r3
 80030e8:	341a      	adds	r4, #26
 80030ea:	454d      	cmp	r5, r9
 80030ec:	d11a      	bne.n	8003124 <_printf_common+0xd8>
 80030ee:	2000      	movs	r0, #0
 80030f0:	e008      	b.n	8003104 <_printf_common+0xb8>
 80030f2:	2301      	movs	r3, #1
 80030f4:	4652      	mov	r2, sl
 80030f6:	4639      	mov	r1, r7
 80030f8:	4630      	mov	r0, r6
 80030fa:	47c0      	blx	r8
 80030fc:	3001      	adds	r0, #1
 80030fe:	d103      	bne.n	8003108 <_printf_common+0xbc>
 8003100:	f04f 30ff 	mov.w	r0, #4294967295
 8003104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003108:	3501      	adds	r5, #1
 800310a:	e7c2      	b.n	8003092 <_printf_common+0x46>
 800310c:	2030      	movs	r0, #48	; 0x30
 800310e:	18e1      	adds	r1, r4, r3
 8003110:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003114:	1c5a      	adds	r2, r3, #1
 8003116:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800311a:	4422      	add	r2, r4
 800311c:	3302      	adds	r3, #2
 800311e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003122:	e7c4      	b.n	80030ae <_printf_common+0x62>
 8003124:	2301      	movs	r3, #1
 8003126:	4622      	mov	r2, r4
 8003128:	4639      	mov	r1, r7
 800312a:	4630      	mov	r0, r6
 800312c:	47c0      	blx	r8
 800312e:	3001      	adds	r0, #1
 8003130:	d0e6      	beq.n	8003100 <_printf_common+0xb4>
 8003132:	f109 0901 	add.w	r9, r9, #1
 8003136:	e7d8      	b.n	80030ea <_printf_common+0x9e>

08003138 <_printf_i>:
 8003138:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800313c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003140:	460c      	mov	r4, r1
 8003142:	7e09      	ldrb	r1, [r1, #24]
 8003144:	b085      	sub	sp, #20
 8003146:	296e      	cmp	r1, #110	; 0x6e
 8003148:	4617      	mov	r7, r2
 800314a:	4606      	mov	r6, r0
 800314c:	4698      	mov	r8, r3
 800314e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003150:	f000 80b3 	beq.w	80032ba <_printf_i+0x182>
 8003154:	d822      	bhi.n	800319c <_printf_i+0x64>
 8003156:	2963      	cmp	r1, #99	; 0x63
 8003158:	d036      	beq.n	80031c8 <_printf_i+0x90>
 800315a:	d80a      	bhi.n	8003172 <_printf_i+0x3a>
 800315c:	2900      	cmp	r1, #0
 800315e:	f000 80b9 	beq.w	80032d4 <_printf_i+0x19c>
 8003162:	2958      	cmp	r1, #88	; 0x58
 8003164:	f000 8083 	beq.w	800326e <_printf_i+0x136>
 8003168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800316c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003170:	e032      	b.n	80031d8 <_printf_i+0xa0>
 8003172:	2964      	cmp	r1, #100	; 0x64
 8003174:	d001      	beq.n	800317a <_printf_i+0x42>
 8003176:	2969      	cmp	r1, #105	; 0x69
 8003178:	d1f6      	bne.n	8003168 <_printf_i+0x30>
 800317a:	6820      	ldr	r0, [r4, #0]
 800317c:	6813      	ldr	r3, [r2, #0]
 800317e:	0605      	lsls	r5, r0, #24
 8003180:	f103 0104 	add.w	r1, r3, #4
 8003184:	d52a      	bpl.n	80031dc <_printf_i+0xa4>
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6011      	str	r1, [r2, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	da03      	bge.n	8003196 <_printf_i+0x5e>
 800318e:	222d      	movs	r2, #45	; 0x2d
 8003190:	425b      	negs	r3, r3
 8003192:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003196:	486f      	ldr	r0, [pc, #444]	; (8003354 <_printf_i+0x21c>)
 8003198:	220a      	movs	r2, #10
 800319a:	e039      	b.n	8003210 <_printf_i+0xd8>
 800319c:	2973      	cmp	r1, #115	; 0x73
 800319e:	f000 809d 	beq.w	80032dc <_printf_i+0x1a4>
 80031a2:	d808      	bhi.n	80031b6 <_printf_i+0x7e>
 80031a4:	296f      	cmp	r1, #111	; 0x6f
 80031a6:	d020      	beq.n	80031ea <_printf_i+0xb2>
 80031a8:	2970      	cmp	r1, #112	; 0x70
 80031aa:	d1dd      	bne.n	8003168 <_printf_i+0x30>
 80031ac:	6823      	ldr	r3, [r4, #0]
 80031ae:	f043 0320 	orr.w	r3, r3, #32
 80031b2:	6023      	str	r3, [r4, #0]
 80031b4:	e003      	b.n	80031be <_printf_i+0x86>
 80031b6:	2975      	cmp	r1, #117	; 0x75
 80031b8:	d017      	beq.n	80031ea <_printf_i+0xb2>
 80031ba:	2978      	cmp	r1, #120	; 0x78
 80031bc:	d1d4      	bne.n	8003168 <_printf_i+0x30>
 80031be:	2378      	movs	r3, #120	; 0x78
 80031c0:	4865      	ldr	r0, [pc, #404]	; (8003358 <_printf_i+0x220>)
 80031c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80031c6:	e055      	b.n	8003274 <_printf_i+0x13c>
 80031c8:	6813      	ldr	r3, [r2, #0]
 80031ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031ce:	1d19      	adds	r1, r3, #4
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6011      	str	r1, [r2, #0]
 80031d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80031d8:	2301      	movs	r3, #1
 80031da:	e08c      	b.n	80032f6 <_printf_i+0x1be>
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80031e2:	6011      	str	r1, [r2, #0]
 80031e4:	bf18      	it	ne
 80031e6:	b21b      	sxthne	r3, r3
 80031e8:	e7cf      	b.n	800318a <_printf_i+0x52>
 80031ea:	6813      	ldr	r3, [r2, #0]
 80031ec:	6825      	ldr	r5, [r4, #0]
 80031ee:	1d18      	adds	r0, r3, #4
 80031f0:	6010      	str	r0, [r2, #0]
 80031f2:	0628      	lsls	r0, r5, #24
 80031f4:	d501      	bpl.n	80031fa <_printf_i+0xc2>
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	e002      	b.n	8003200 <_printf_i+0xc8>
 80031fa:	0668      	lsls	r0, r5, #25
 80031fc:	d5fb      	bpl.n	80031f6 <_printf_i+0xbe>
 80031fe:	881b      	ldrh	r3, [r3, #0]
 8003200:	296f      	cmp	r1, #111	; 0x6f
 8003202:	bf14      	ite	ne
 8003204:	220a      	movne	r2, #10
 8003206:	2208      	moveq	r2, #8
 8003208:	4852      	ldr	r0, [pc, #328]	; (8003354 <_printf_i+0x21c>)
 800320a:	2100      	movs	r1, #0
 800320c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003210:	6865      	ldr	r5, [r4, #4]
 8003212:	2d00      	cmp	r5, #0
 8003214:	60a5      	str	r5, [r4, #8]
 8003216:	f2c0 8095 	blt.w	8003344 <_printf_i+0x20c>
 800321a:	6821      	ldr	r1, [r4, #0]
 800321c:	f021 0104 	bic.w	r1, r1, #4
 8003220:	6021      	str	r1, [r4, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d13d      	bne.n	80032a2 <_printf_i+0x16a>
 8003226:	2d00      	cmp	r5, #0
 8003228:	f040 808e 	bne.w	8003348 <_printf_i+0x210>
 800322c:	4665      	mov	r5, ip
 800322e:	2a08      	cmp	r2, #8
 8003230:	d10b      	bne.n	800324a <_printf_i+0x112>
 8003232:	6823      	ldr	r3, [r4, #0]
 8003234:	07db      	lsls	r3, r3, #31
 8003236:	d508      	bpl.n	800324a <_printf_i+0x112>
 8003238:	6923      	ldr	r3, [r4, #16]
 800323a:	6862      	ldr	r2, [r4, #4]
 800323c:	429a      	cmp	r2, r3
 800323e:	bfde      	ittt	le
 8003240:	2330      	movle	r3, #48	; 0x30
 8003242:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003246:	f105 35ff 	addle.w	r5, r5, #4294967295
 800324a:	ebac 0305 	sub.w	r3, ip, r5
 800324e:	6123      	str	r3, [r4, #16]
 8003250:	f8cd 8000 	str.w	r8, [sp]
 8003254:	463b      	mov	r3, r7
 8003256:	aa03      	add	r2, sp, #12
 8003258:	4621      	mov	r1, r4
 800325a:	4630      	mov	r0, r6
 800325c:	f7ff fef6 	bl	800304c <_printf_common>
 8003260:	3001      	adds	r0, #1
 8003262:	d14d      	bne.n	8003300 <_printf_i+0x1c8>
 8003264:	f04f 30ff 	mov.w	r0, #4294967295
 8003268:	b005      	add	sp, #20
 800326a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800326e:	4839      	ldr	r0, [pc, #228]	; (8003354 <_printf_i+0x21c>)
 8003270:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003274:	6813      	ldr	r3, [r2, #0]
 8003276:	6821      	ldr	r1, [r4, #0]
 8003278:	1d1d      	adds	r5, r3, #4
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6015      	str	r5, [r2, #0]
 800327e:	060a      	lsls	r2, r1, #24
 8003280:	d50b      	bpl.n	800329a <_printf_i+0x162>
 8003282:	07ca      	lsls	r2, r1, #31
 8003284:	bf44      	itt	mi
 8003286:	f041 0120 	orrmi.w	r1, r1, #32
 800328a:	6021      	strmi	r1, [r4, #0]
 800328c:	b91b      	cbnz	r3, 8003296 <_printf_i+0x15e>
 800328e:	6822      	ldr	r2, [r4, #0]
 8003290:	f022 0220 	bic.w	r2, r2, #32
 8003294:	6022      	str	r2, [r4, #0]
 8003296:	2210      	movs	r2, #16
 8003298:	e7b7      	b.n	800320a <_printf_i+0xd2>
 800329a:	064d      	lsls	r5, r1, #25
 800329c:	bf48      	it	mi
 800329e:	b29b      	uxthmi	r3, r3
 80032a0:	e7ef      	b.n	8003282 <_printf_i+0x14a>
 80032a2:	4665      	mov	r5, ip
 80032a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80032a8:	fb02 3311 	mls	r3, r2, r1, r3
 80032ac:	5cc3      	ldrb	r3, [r0, r3]
 80032ae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80032b2:	460b      	mov	r3, r1
 80032b4:	2900      	cmp	r1, #0
 80032b6:	d1f5      	bne.n	80032a4 <_printf_i+0x16c>
 80032b8:	e7b9      	b.n	800322e <_printf_i+0xf6>
 80032ba:	6813      	ldr	r3, [r2, #0]
 80032bc:	6825      	ldr	r5, [r4, #0]
 80032be:	1d18      	adds	r0, r3, #4
 80032c0:	6961      	ldr	r1, [r4, #20]
 80032c2:	6010      	str	r0, [r2, #0]
 80032c4:	0628      	lsls	r0, r5, #24
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	d501      	bpl.n	80032ce <_printf_i+0x196>
 80032ca:	6019      	str	r1, [r3, #0]
 80032cc:	e002      	b.n	80032d4 <_printf_i+0x19c>
 80032ce:	066a      	lsls	r2, r5, #25
 80032d0:	d5fb      	bpl.n	80032ca <_printf_i+0x192>
 80032d2:	8019      	strh	r1, [r3, #0]
 80032d4:	2300      	movs	r3, #0
 80032d6:	4665      	mov	r5, ip
 80032d8:	6123      	str	r3, [r4, #16]
 80032da:	e7b9      	b.n	8003250 <_printf_i+0x118>
 80032dc:	6813      	ldr	r3, [r2, #0]
 80032de:	1d19      	adds	r1, r3, #4
 80032e0:	6011      	str	r1, [r2, #0]
 80032e2:	681d      	ldr	r5, [r3, #0]
 80032e4:	6862      	ldr	r2, [r4, #4]
 80032e6:	2100      	movs	r1, #0
 80032e8:	4628      	mov	r0, r5
 80032ea:	f002 fb01 	bl	80058f0 <memchr>
 80032ee:	b108      	cbz	r0, 80032f4 <_printf_i+0x1bc>
 80032f0:	1b40      	subs	r0, r0, r5
 80032f2:	6060      	str	r0, [r4, #4]
 80032f4:	6863      	ldr	r3, [r4, #4]
 80032f6:	6123      	str	r3, [r4, #16]
 80032f8:	2300      	movs	r3, #0
 80032fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032fe:	e7a7      	b.n	8003250 <_printf_i+0x118>
 8003300:	6923      	ldr	r3, [r4, #16]
 8003302:	462a      	mov	r2, r5
 8003304:	4639      	mov	r1, r7
 8003306:	4630      	mov	r0, r6
 8003308:	47c0      	blx	r8
 800330a:	3001      	adds	r0, #1
 800330c:	d0aa      	beq.n	8003264 <_printf_i+0x12c>
 800330e:	6823      	ldr	r3, [r4, #0]
 8003310:	079b      	lsls	r3, r3, #30
 8003312:	d413      	bmi.n	800333c <_printf_i+0x204>
 8003314:	68e0      	ldr	r0, [r4, #12]
 8003316:	9b03      	ldr	r3, [sp, #12]
 8003318:	4298      	cmp	r0, r3
 800331a:	bfb8      	it	lt
 800331c:	4618      	movlt	r0, r3
 800331e:	e7a3      	b.n	8003268 <_printf_i+0x130>
 8003320:	2301      	movs	r3, #1
 8003322:	464a      	mov	r2, r9
 8003324:	4639      	mov	r1, r7
 8003326:	4630      	mov	r0, r6
 8003328:	47c0      	blx	r8
 800332a:	3001      	adds	r0, #1
 800332c:	d09a      	beq.n	8003264 <_printf_i+0x12c>
 800332e:	3501      	adds	r5, #1
 8003330:	68e3      	ldr	r3, [r4, #12]
 8003332:	9a03      	ldr	r2, [sp, #12]
 8003334:	1a9b      	subs	r3, r3, r2
 8003336:	42ab      	cmp	r3, r5
 8003338:	dcf2      	bgt.n	8003320 <_printf_i+0x1e8>
 800333a:	e7eb      	b.n	8003314 <_printf_i+0x1dc>
 800333c:	2500      	movs	r5, #0
 800333e:	f104 0919 	add.w	r9, r4, #25
 8003342:	e7f5      	b.n	8003330 <_printf_i+0x1f8>
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1ac      	bne.n	80032a2 <_printf_i+0x16a>
 8003348:	7803      	ldrb	r3, [r0, #0]
 800334a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800334e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003352:	e76c      	b.n	800322e <_printf_i+0xf6>
 8003354:	08009a90 	.word	0x08009a90
 8003358:	08009aa1 	.word	0x08009aa1

0800335c <_scanf_float>:
 800335c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003360:	469a      	mov	sl, r3
 8003362:	688b      	ldr	r3, [r1, #8]
 8003364:	4616      	mov	r6, r2
 8003366:	1e5a      	subs	r2, r3, #1
 8003368:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800336c:	bf88      	it	hi
 800336e:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8003372:	b087      	sub	sp, #28
 8003374:	bf85      	ittet	hi
 8003376:	189b      	addhi	r3, r3, r2
 8003378:	9301      	strhi	r3, [sp, #4]
 800337a:	2300      	movls	r3, #0
 800337c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003380:	4688      	mov	r8, r1
 8003382:	f04f 0b00 	mov.w	fp, #0
 8003386:	bf8c      	ite	hi
 8003388:	608b      	strhi	r3, [r1, #8]
 800338a:	9301      	strls	r3, [sp, #4]
 800338c:	680b      	ldr	r3, [r1, #0]
 800338e:	4607      	mov	r7, r0
 8003390:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003394:	f848 3b1c 	str.w	r3, [r8], #28
 8003398:	460c      	mov	r4, r1
 800339a:	4645      	mov	r5, r8
 800339c:	465a      	mov	r2, fp
 800339e:	46d9      	mov	r9, fp
 80033a0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80033a4:	f8cd b008 	str.w	fp, [sp, #8]
 80033a8:	68a1      	ldr	r1, [r4, #8]
 80033aa:	b181      	cbz	r1, 80033ce <_scanf_float+0x72>
 80033ac:	6833      	ldr	r3, [r6, #0]
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b49      	cmp	r3, #73	; 0x49
 80033b2:	d071      	beq.n	8003498 <_scanf_float+0x13c>
 80033b4:	d84d      	bhi.n	8003452 <_scanf_float+0xf6>
 80033b6:	2b39      	cmp	r3, #57	; 0x39
 80033b8:	d840      	bhi.n	800343c <_scanf_float+0xe0>
 80033ba:	2b31      	cmp	r3, #49	; 0x31
 80033bc:	f080 8088 	bcs.w	80034d0 <_scanf_float+0x174>
 80033c0:	2b2d      	cmp	r3, #45	; 0x2d
 80033c2:	f000 8090 	beq.w	80034e6 <_scanf_float+0x18a>
 80033c6:	d815      	bhi.n	80033f4 <_scanf_float+0x98>
 80033c8:	2b2b      	cmp	r3, #43	; 0x2b
 80033ca:	f000 808c 	beq.w	80034e6 <_scanf_float+0x18a>
 80033ce:	f1b9 0f00 	cmp.w	r9, #0
 80033d2:	d003      	beq.n	80033dc <_scanf_float+0x80>
 80033d4:	6823      	ldr	r3, [r4, #0]
 80033d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033da:	6023      	str	r3, [r4, #0]
 80033dc:	3a01      	subs	r2, #1
 80033de:	2a01      	cmp	r2, #1
 80033e0:	f200 80ea 	bhi.w	80035b8 <_scanf_float+0x25c>
 80033e4:	4545      	cmp	r5, r8
 80033e6:	f200 80dc 	bhi.w	80035a2 <_scanf_float+0x246>
 80033ea:	2601      	movs	r6, #1
 80033ec:	4630      	mov	r0, r6
 80033ee:	b007      	add	sp, #28
 80033f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033f4:	2b2e      	cmp	r3, #46	; 0x2e
 80033f6:	f000 809f 	beq.w	8003538 <_scanf_float+0x1dc>
 80033fa:	2b30      	cmp	r3, #48	; 0x30
 80033fc:	d1e7      	bne.n	80033ce <_scanf_float+0x72>
 80033fe:	6820      	ldr	r0, [r4, #0]
 8003400:	f410 7f80 	tst.w	r0, #256	; 0x100
 8003404:	d064      	beq.n	80034d0 <_scanf_float+0x174>
 8003406:	9b01      	ldr	r3, [sp, #4]
 8003408:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800340c:	6020      	str	r0, [r4, #0]
 800340e:	f109 0901 	add.w	r9, r9, #1
 8003412:	b11b      	cbz	r3, 800341c <_scanf_float+0xc0>
 8003414:	3b01      	subs	r3, #1
 8003416:	3101      	adds	r1, #1
 8003418:	9301      	str	r3, [sp, #4]
 800341a:	60a1      	str	r1, [r4, #8]
 800341c:	68a3      	ldr	r3, [r4, #8]
 800341e:	3b01      	subs	r3, #1
 8003420:	60a3      	str	r3, [r4, #8]
 8003422:	6923      	ldr	r3, [r4, #16]
 8003424:	3301      	adds	r3, #1
 8003426:	6123      	str	r3, [r4, #16]
 8003428:	6873      	ldr	r3, [r6, #4]
 800342a:	3b01      	subs	r3, #1
 800342c:	2b00      	cmp	r3, #0
 800342e:	6073      	str	r3, [r6, #4]
 8003430:	f340 80ac 	ble.w	800358c <_scanf_float+0x230>
 8003434:	6833      	ldr	r3, [r6, #0]
 8003436:	3301      	adds	r3, #1
 8003438:	6033      	str	r3, [r6, #0]
 800343a:	e7b5      	b.n	80033a8 <_scanf_float+0x4c>
 800343c:	2b45      	cmp	r3, #69	; 0x45
 800343e:	f000 8085 	beq.w	800354c <_scanf_float+0x1f0>
 8003442:	2b46      	cmp	r3, #70	; 0x46
 8003444:	d06a      	beq.n	800351c <_scanf_float+0x1c0>
 8003446:	2b41      	cmp	r3, #65	; 0x41
 8003448:	d1c1      	bne.n	80033ce <_scanf_float+0x72>
 800344a:	2a01      	cmp	r2, #1
 800344c:	d1bf      	bne.n	80033ce <_scanf_float+0x72>
 800344e:	2202      	movs	r2, #2
 8003450:	e046      	b.n	80034e0 <_scanf_float+0x184>
 8003452:	2b65      	cmp	r3, #101	; 0x65
 8003454:	d07a      	beq.n	800354c <_scanf_float+0x1f0>
 8003456:	d818      	bhi.n	800348a <_scanf_float+0x12e>
 8003458:	2b54      	cmp	r3, #84	; 0x54
 800345a:	d066      	beq.n	800352a <_scanf_float+0x1ce>
 800345c:	d811      	bhi.n	8003482 <_scanf_float+0x126>
 800345e:	2b4e      	cmp	r3, #78	; 0x4e
 8003460:	d1b5      	bne.n	80033ce <_scanf_float+0x72>
 8003462:	2a00      	cmp	r2, #0
 8003464:	d146      	bne.n	80034f4 <_scanf_float+0x198>
 8003466:	f1b9 0f00 	cmp.w	r9, #0
 800346a:	d145      	bne.n	80034f8 <_scanf_float+0x19c>
 800346c:	6821      	ldr	r1, [r4, #0]
 800346e:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8003472:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8003476:	d13f      	bne.n	80034f8 <_scanf_float+0x19c>
 8003478:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800347c:	6021      	str	r1, [r4, #0]
 800347e:	2201      	movs	r2, #1
 8003480:	e02e      	b.n	80034e0 <_scanf_float+0x184>
 8003482:	2b59      	cmp	r3, #89	; 0x59
 8003484:	d01e      	beq.n	80034c4 <_scanf_float+0x168>
 8003486:	2b61      	cmp	r3, #97	; 0x61
 8003488:	e7de      	b.n	8003448 <_scanf_float+0xec>
 800348a:	2b6e      	cmp	r3, #110	; 0x6e
 800348c:	d0e9      	beq.n	8003462 <_scanf_float+0x106>
 800348e:	d815      	bhi.n	80034bc <_scanf_float+0x160>
 8003490:	2b66      	cmp	r3, #102	; 0x66
 8003492:	d043      	beq.n	800351c <_scanf_float+0x1c0>
 8003494:	2b69      	cmp	r3, #105	; 0x69
 8003496:	d19a      	bne.n	80033ce <_scanf_float+0x72>
 8003498:	f1bb 0f00 	cmp.w	fp, #0
 800349c:	d138      	bne.n	8003510 <_scanf_float+0x1b4>
 800349e:	f1b9 0f00 	cmp.w	r9, #0
 80034a2:	d197      	bne.n	80033d4 <_scanf_float+0x78>
 80034a4:	6821      	ldr	r1, [r4, #0]
 80034a6:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80034aa:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80034ae:	d195      	bne.n	80033dc <_scanf_float+0x80>
 80034b0:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80034b4:	6021      	str	r1, [r4, #0]
 80034b6:	f04f 0b01 	mov.w	fp, #1
 80034ba:	e011      	b.n	80034e0 <_scanf_float+0x184>
 80034bc:	2b74      	cmp	r3, #116	; 0x74
 80034be:	d034      	beq.n	800352a <_scanf_float+0x1ce>
 80034c0:	2b79      	cmp	r3, #121	; 0x79
 80034c2:	d184      	bne.n	80033ce <_scanf_float+0x72>
 80034c4:	f1bb 0f07 	cmp.w	fp, #7
 80034c8:	d181      	bne.n	80033ce <_scanf_float+0x72>
 80034ca:	f04f 0b08 	mov.w	fp, #8
 80034ce:	e007      	b.n	80034e0 <_scanf_float+0x184>
 80034d0:	eb12 0f0b 	cmn.w	r2, fp
 80034d4:	f47f af7b 	bne.w	80033ce <_scanf_float+0x72>
 80034d8:	6821      	ldr	r1, [r4, #0]
 80034da:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80034de:	6021      	str	r1, [r4, #0]
 80034e0:	702b      	strb	r3, [r5, #0]
 80034e2:	3501      	adds	r5, #1
 80034e4:	e79a      	b.n	800341c <_scanf_float+0xc0>
 80034e6:	6821      	ldr	r1, [r4, #0]
 80034e8:	0608      	lsls	r0, r1, #24
 80034ea:	f57f af70 	bpl.w	80033ce <_scanf_float+0x72>
 80034ee:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80034f2:	e7f4      	b.n	80034de <_scanf_float+0x182>
 80034f4:	2a02      	cmp	r2, #2
 80034f6:	d047      	beq.n	8003588 <_scanf_float+0x22c>
 80034f8:	f1bb 0f01 	cmp.w	fp, #1
 80034fc:	d003      	beq.n	8003506 <_scanf_float+0x1aa>
 80034fe:	f1bb 0f04 	cmp.w	fp, #4
 8003502:	f47f af64 	bne.w	80033ce <_scanf_float+0x72>
 8003506:	f10b 0b01 	add.w	fp, fp, #1
 800350a:	fa5f fb8b 	uxtb.w	fp, fp
 800350e:	e7e7      	b.n	80034e0 <_scanf_float+0x184>
 8003510:	f1bb 0f03 	cmp.w	fp, #3
 8003514:	d0f7      	beq.n	8003506 <_scanf_float+0x1aa>
 8003516:	f1bb 0f05 	cmp.w	fp, #5
 800351a:	e7f2      	b.n	8003502 <_scanf_float+0x1a6>
 800351c:	f1bb 0f02 	cmp.w	fp, #2
 8003520:	f47f af55 	bne.w	80033ce <_scanf_float+0x72>
 8003524:	f04f 0b03 	mov.w	fp, #3
 8003528:	e7da      	b.n	80034e0 <_scanf_float+0x184>
 800352a:	f1bb 0f06 	cmp.w	fp, #6
 800352e:	f47f af4e 	bne.w	80033ce <_scanf_float+0x72>
 8003532:	f04f 0b07 	mov.w	fp, #7
 8003536:	e7d3      	b.n	80034e0 <_scanf_float+0x184>
 8003538:	6821      	ldr	r1, [r4, #0]
 800353a:	0588      	lsls	r0, r1, #22
 800353c:	f57f af47 	bpl.w	80033ce <_scanf_float+0x72>
 8003540:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8003544:	6021      	str	r1, [r4, #0]
 8003546:	f8cd 9008 	str.w	r9, [sp, #8]
 800354a:	e7c9      	b.n	80034e0 <_scanf_float+0x184>
 800354c:	6821      	ldr	r1, [r4, #0]
 800354e:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8003552:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8003556:	d006      	beq.n	8003566 <_scanf_float+0x20a>
 8003558:	0548      	lsls	r0, r1, #21
 800355a:	f57f af38 	bpl.w	80033ce <_scanf_float+0x72>
 800355e:	f1b9 0f00 	cmp.w	r9, #0
 8003562:	f43f af3b 	beq.w	80033dc <_scanf_float+0x80>
 8003566:	0588      	lsls	r0, r1, #22
 8003568:	bf58      	it	pl
 800356a:	9802      	ldrpl	r0, [sp, #8]
 800356c:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8003570:	bf58      	it	pl
 8003572:	eba9 0000 	subpl.w	r0, r9, r0
 8003576:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800357a:	bf58      	it	pl
 800357c:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8003580:	6021      	str	r1, [r4, #0]
 8003582:	f04f 0900 	mov.w	r9, #0
 8003586:	e7ab      	b.n	80034e0 <_scanf_float+0x184>
 8003588:	2203      	movs	r2, #3
 800358a:	e7a9      	b.n	80034e0 <_scanf_float+0x184>
 800358c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003590:	4631      	mov	r1, r6
 8003592:	4638      	mov	r0, r7
 8003594:	9205      	str	r2, [sp, #20]
 8003596:	4798      	blx	r3
 8003598:	9a05      	ldr	r2, [sp, #20]
 800359a:	2800      	cmp	r0, #0
 800359c:	f43f af04 	beq.w	80033a8 <_scanf_float+0x4c>
 80035a0:	e715      	b.n	80033ce <_scanf_float+0x72>
 80035a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80035a6:	4632      	mov	r2, r6
 80035a8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80035ac:	4638      	mov	r0, r7
 80035ae:	4798      	blx	r3
 80035b0:	6923      	ldr	r3, [r4, #16]
 80035b2:	3b01      	subs	r3, #1
 80035b4:	6123      	str	r3, [r4, #16]
 80035b6:	e715      	b.n	80033e4 <_scanf_float+0x88>
 80035b8:	f10b 33ff 	add.w	r3, fp, #4294967295
 80035bc:	2b06      	cmp	r3, #6
 80035be:	d80a      	bhi.n	80035d6 <_scanf_float+0x27a>
 80035c0:	f1bb 0f02 	cmp.w	fp, #2
 80035c4:	d967      	bls.n	8003696 <_scanf_float+0x33a>
 80035c6:	f1ab 0b03 	sub.w	fp, fp, #3
 80035ca:	fa5f fb8b 	uxtb.w	fp, fp
 80035ce:	eba5 0b0b 	sub.w	fp, r5, fp
 80035d2:	455d      	cmp	r5, fp
 80035d4:	d14a      	bne.n	800366c <_scanf_float+0x310>
 80035d6:	6823      	ldr	r3, [r4, #0]
 80035d8:	05da      	lsls	r2, r3, #23
 80035da:	d51f      	bpl.n	800361c <_scanf_float+0x2c0>
 80035dc:	055b      	lsls	r3, r3, #21
 80035de:	d467      	bmi.n	80036b0 <_scanf_float+0x354>
 80035e0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80035e4:	6923      	ldr	r3, [r4, #16]
 80035e6:	2965      	cmp	r1, #101	; 0x65
 80035e8:	f103 33ff 	add.w	r3, r3, #4294967295
 80035ec:	f105 3bff 	add.w	fp, r5, #4294967295
 80035f0:	6123      	str	r3, [r4, #16]
 80035f2:	d00d      	beq.n	8003610 <_scanf_float+0x2b4>
 80035f4:	2945      	cmp	r1, #69	; 0x45
 80035f6:	d00b      	beq.n	8003610 <_scanf_float+0x2b4>
 80035f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80035fc:	4632      	mov	r2, r6
 80035fe:	4638      	mov	r0, r7
 8003600:	4798      	blx	r3
 8003602:	6923      	ldr	r3, [r4, #16]
 8003604:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8003608:	3b01      	subs	r3, #1
 800360a:	f1a5 0b02 	sub.w	fp, r5, #2
 800360e:	6123      	str	r3, [r4, #16]
 8003610:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003614:	4632      	mov	r2, r6
 8003616:	4638      	mov	r0, r7
 8003618:	4798      	blx	r3
 800361a:	465d      	mov	r5, fp
 800361c:	6826      	ldr	r6, [r4, #0]
 800361e:	f016 0610 	ands.w	r6, r6, #16
 8003622:	d176      	bne.n	8003712 <_scanf_float+0x3b6>
 8003624:	702e      	strb	r6, [r5, #0]
 8003626:	6823      	ldr	r3, [r4, #0]
 8003628:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800362c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003630:	d141      	bne.n	80036b6 <_scanf_float+0x35a>
 8003632:	9b02      	ldr	r3, [sp, #8]
 8003634:	eba9 0303 	sub.w	r3, r9, r3
 8003638:	425a      	negs	r2, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d148      	bne.n	80036d0 <_scanf_float+0x374>
 800363e:	4641      	mov	r1, r8
 8003640:	2200      	movs	r2, #0
 8003642:	4638      	mov	r0, r7
 8003644:	f000 ff10 	bl	8004468 <_strtod_r>
 8003648:	6825      	ldr	r5, [r4, #0]
 800364a:	4680      	mov	r8, r0
 800364c:	f015 0f02 	tst.w	r5, #2
 8003650:	4689      	mov	r9, r1
 8003652:	f8da 3000 	ldr.w	r3, [sl]
 8003656:	d046      	beq.n	80036e6 <_scanf_float+0x38a>
 8003658:	1d1a      	adds	r2, r3, #4
 800365a:	f8ca 2000 	str.w	r2, [sl]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	e9c3 8900 	strd	r8, r9, [r3]
 8003664:	68e3      	ldr	r3, [r4, #12]
 8003666:	3301      	adds	r3, #1
 8003668:	60e3      	str	r3, [r4, #12]
 800366a:	e6bf      	b.n	80033ec <_scanf_float+0x90>
 800366c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003670:	4632      	mov	r2, r6
 8003672:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003676:	4638      	mov	r0, r7
 8003678:	4798      	blx	r3
 800367a:	6923      	ldr	r3, [r4, #16]
 800367c:	3b01      	subs	r3, #1
 800367e:	6123      	str	r3, [r4, #16]
 8003680:	e7a7      	b.n	80035d2 <_scanf_float+0x276>
 8003682:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003686:	4632      	mov	r2, r6
 8003688:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800368c:	4638      	mov	r0, r7
 800368e:	4798      	blx	r3
 8003690:	6923      	ldr	r3, [r4, #16]
 8003692:	3b01      	subs	r3, #1
 8003694:	6123      	str	r3, [r4, #16]
 8003696:	4545      	cmp	r5, r8
 8003698:	d8f3      	bhi.n	8003682 <_scanf_float+0x326>
 800369a:	e6a6      	b.n	80033ea <_scanf_float+0x8e>
 800369c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80036a0:	4632      	mov	r2, r6
 80036a2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80036a6:	4638      	mov	r0, r7
 80036a8:	4798      	blx	r3
 80036aa:	6923      	ldr	r3, [r4, #16]
 80036ac:	3b01      	subs	r3, #1
 80036ae:	6123      	str	r3, [r4, #16]
 80036b0:	4545      	cmp	r5, r8
 80036b2:	d8f3      	bhi.n	800369c <_scanf_float+0x340>
 80036b4:	e699      	b.n	80033ea <_scanf_float+0x8e>
 80036b6:	9b03      	ldr	r3, [sp, #12]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0c0      	beq.n	800363e <_scanf_float+0x2e2>
 80036bc:	9904      	ldr	r1, [sp, #16]
 80036be:	230a      	movs	r3, #10
 80036c0:	4632      	mov	r2, r6
 80036c2:	3101      	adds	r1, #1
 80036c4:	4638      	mov	r0, r7
 80036c6:	f000 ff5b 	bl	8004580 <_strtol_r>
 80036ca:	9b03      	ldr	r3, [sp, #12]
 80036cc:	9d04      	ldr	r5, [sp, #16]
 80036ce:	1ac2      	subs	r2, r0, r3
 80036d0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80036d4:	429d      	cmp	r5, r3
 80036d6:	bf28      	it	cs
 80036d8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80036dc:	490e      	ldr	r1, [pc, #56]	; (8003718 <_scanf_float+0x3bc>)
 80036de:	4628      	mov	r0, r5
 80036e0:	f000 f820 	bl	8003724 <siprintf>
 80036e4:	e7ab      	b.n	800363e <_scanf_float+0x2e2>
 80036e6:	1d1f      	adds	r7, r3, #4
 80036e8:	f015 0504 	ands.w	r5, r5, #4
 80036ec:	f8ca 7000 	str.w	r7, [sl]
 80036f0:	d1b5      	bne.n	800365e <_scanf_float+0x302>
 80036f2:	681f      	ldr	r7, [r3, #0]
 80036f4:	4602      	mov	r2, r0
 80036f6:	460b      	mov	r3, r1
 80036f8:	f7fd f998 	bl	8000a2c <__aeabi_dcmpun>
 80036fc:	b120      	cbz	r0, 8003708 <_scanf_float+0x3ac>
 80036fe:	4628      	mov	r0, r5
 8003700:	f000 f80c 	bl	800371c <nanf>
 8003704:	6038      	str	r0, [r7, #0]
 8003706:	e7ad      	b.n	8003664 <_scanf_float+0x308>
 8003708:	4640      	mov	r0, r8
 800370a:	4649      	mov	r1, r9
 800370c:	f7fd f9ec 	bl	8000ae8 <__aeabi_d2f>
 8003710:	e7f8      	b.n	8003704 <_scanf_float+0x3a8>
 8003712:	2600      	movs	r6, #0
 8003714:	e66a      	b.n	80033ec <_scanf_float+0x90>
 8003716:	bf00      	nop
 8003718:	08009ab2 	.word	0x08009ab2

0800371c <nanf>:
 800371c:	4800      	ldr	r0, [pc, #0]	; (8003720 <nanf+0x4>)
 800371e:	4770      	bx	lr
 8003720:	7fc00000 	.word	0x7fc00000

08003724 <siprintf>:
 8003724:	b40e      	push	{r1, r2, r3}
 8003726:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800372a:	b500      	push	{lr}
 800372c:	b09c      	sub	sp, #112	; 0x70
 800372e:	ab1d      	add	r3, sp, #116	; 0x74
 8003730:	9002      	str	r0, [sp, #8]
 8003732:	9006      	str	r0, [sp, #24]
 8003734:	9107      	str	r1, [sp, #28]
 8003736:	9104      	str	r1, [sp, #16]
 8003738:	4808      	ldr	r0, [pc, #32]	; (800375c <siprintf+0x38>)
 800373a:	4909      	ldr	r1, [pc, #36]	; (8003760 <siprintf+0x3c>)
 800373c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003740:	9105      	str	r1, [sp, #20]
 8003742:	6800      	ldr	r0, [r0, #0]
 8003744:	a902      	add	r1, sp, #8
 8003746:	9301      	str	r3, [sp, #4]
 8003748:	f002 fdf2 	bl	8006330 <_svfiprintf_r>
 800374c:	2200      	movs	r2, #0
 800374e:	9b02      	ldr	r3, [sp, #8]
 8003750:	701a      	strb	r2, [r3, #0]
 8003752:	b01c      	add	sp, #112	; 0x70
 8003754:	f85d eb04 	ldr.w	lr, [sp], #4
 8003758:	b003      	add	sp, #12
 800375a:	4770      	bx	lr
 800375c:	20000004 	.word	0x20000004
 8003760:	ffff0208 	.word	0xffff0208

08003764 <siscanf>:
 8003764:	b40e      	push	{r1, r2, r3}
 8003766:	f44f 7201 	mov.w	r2, #516	; 0x204
 800376a:	b530      	push	{r4, r5, lr}
 800376c:	b09c      	sub	sp, #112	; 0x70
 800376e:	ac1f      	add	r4, sp, #124	; 0x7c
 8003770:	f854 5b04 	ldr.w	r5, [r4], #4
 8003774:	f8ad 2014 	strh.w	r2, [sp, #20]
 8003778:	9002      	str	r0, [sp, #8]
 800377a:	9006      	str	r0, [sp, #24]
 800377c:	f7fc fcf8 	bl	8000170 <strlen>
 8003780:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <siscanf+0x4c>)
 8003782:	9003      	str	r0, [sp, #12]
 8003784:	930b      	str	r3, [sp, #44]	; 0x2c
 8003786:	2300      	movs	r3, #0
 8003788:	930f      	str	r3, [sp, #60]	; 0x3c
 800378a:	9314      	str	r3, [sp, #80]	; 0x50
 800378c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003790:	9007      	str	r0, [sp, #28]
 8003792:	4808      	ldr	r0, [pc, #32]	; (80037b4 <siscanf+0x50>)
 8003794:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003798:	462a      	mov	r2, r5
 800379a:	4623      	mov	r3, r4
 800379c:	a902      	add	r1, sp, #8
 800379e:	6800      	ldr	r0, [r0, #0]
 80037a0:	9401      	str	r4, [sp, #4]
 80037a2:	f002 ff17 	bl	80065d4 <__ssvfiscanf_r>
 80037a6:	b01c      	add	sp, #112	; 0x70
 80037a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80037ac:	b003      	add	sp, #12
 80037ae:	4770      	bx	lr
 80037b0:	080037b9 	.word	0x080037b9
 80037b4:	20000004 	.word	0x20000004

080037b8 <__seofread>:
 80037b8:	2000      	movs	r0, #0
 80037ba:	4770      	bx	lr

080037bc <strcat>:
 80037bc:	4603      	mov	r3, r0
 80037be:	b510      	push	{r4, lr}
 80037c0:	781a      	ldrb	r2, [r3, #0]
 80037c2:	1c5c      	adds	r4, r3, #1
 80037c4:	b93a      	cbnz	r2, 80037d6 <strcat+0x1a>
 80037c6:	3b01      	subs	r3, #1
 80037c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80037cc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80037d0:	2a00      	cmp	r2, #0
 80037d2:	d1f9      	bne.n	80037c8 <strcat+0xc>
 80037d4:	bd10      	pop	{r4, pc}
 80037d6:	4623      	mov	r3, r4
 80037d8:	e7f2      	b.n	80037c0 <strcat+0x4>

080037da <strncasecmp>:
 80037da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037de:	4606      	mov	r6, r0
 80037e0:	460f      	mov	r7, r1
 80037e2:	eb00 0802 	add.w	r8, r0, r2
 80037e6:	45b0      	cmp	r8, r6
 80037e8:	d019      	beq.n	800381e <strncasecmp+0x44>
 80037ea:	f816 4b01 	ldrb.w	r4, [r6], #1
 80037ee:	f002 f847 	bl	8005880 <__locale_ctype_ptr>
 80037f2:	4420      	add	r0, r4
 80037f4:	7843      	ldrb	r3, [r0, #1]
 80037f6:	f817 5b01 	ldrb.w	r5, [r7], #1
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	2b01      	cmp	r3, #1
 8003800:	bf08      	it	eq
 8003802:	3420      	addeq	r4, #32
 8003804:	f002 f83c 	bl	8005880 <__locale_ctype_ptr>
 8003808:	4428      	add	r0, r5
 800380a:	7842      	ldrb	r2, [r0, #1]
 800380c:	f002 0203 	and.w	r2, r2, #3
 8003810:	2a01      	cmp	r2, #1
 8003812:	bf08      	it	eq
 8003814:	3520      	addeq	r5, #32
 8003816:	1b60      	subs	r0, r4, r5
 8003818:	d102      	bne.n	8003820 <strncasecmp+0x46>
 800381a:	2d00      	cmp	r5, #0
 800381c:	d1e3      	bne.n	80037e6 <strncasecmp+0xc>
 800381e:	2000      	movs	r0, #0
 8003820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003824 <sulp>:
 8003824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003828:	460f      	mov	r7, r1
 800382a:	4690      	mov	r8, r2
 800382c:	f002 fb44 	bl	8005eb8 <__ulp>
 8003830:	4604      	mov	r4, r0
 8003832:	460d      	mov	r5, r1
 8003834:	f1b8 0f00 	cmp.w	r8, #0
 8003838:	d011      	beq.n	800385e <sulp+0x3a>
 800383a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800383e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003842:	2b00      	cmp	r3, #0
 8003844:	dd0b      	ble.n	800385e <sulp+0x3a>
 8003846:	2400      	movs	r4, #0
 8003848:	051b      	lsls	r3, r3, #20
 800384a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800384e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003852:	4622      	mov	r2, r4
 8003854:	462b      	mov	r3, r5
 8003856:	f7fc fe4f 	bl	80004f8 <__aeabi_dmul>
 800385a:	4604      	mov	r4, r0
 800385c:	460d      	mov	r5, r1
 800385e:	4620      	mov	r0, r4
 8003860:	4629      	mov	r1, r5
 8003862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003868 <_strtod_l>:
 8003868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800386c:	461f      	mov	r7, r3
 800386e:	2300      	movs	r3, #0
 8003870:	b0a1      	sub	sp, #132	; 0x84
 8003872:	4683      	mov	fp, r0
 8003874:	4638      	mov	r0, r7
 8003876:	460e      	mov	r6, r1
 8003878:	9217      	str	r2, [sp, #92]	; 0x5c
 800387a:	931c      	str	r3, [sp, #112]	; 0x70
 800387c:	f002 f80e 	bl	800589c <__localeconv_l>
 8003880:	4680      	mov	r8, r0
 8003882:	6800      	ldr	r0, [r0, #0]
 8003884:	f7fc fc74 	bl	8000170 <strlen>
 8003888:	f04f 0900 	mov.w	r9, #0
 800388c:	4604      	mov	r4, r0
 800388e:	f04f 0a00 	mov.w	sl, #0
 8003892:	961b      	str	r6, [sp, #108]	; 0x6c
 8003894:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003896:	781a      	ldrb	r2, [r3, #0]
 8003898:	2a0d      	cmp	r2, #13
 800389a:	d832      	bhi.n	8003902 <_strtod_l+0x9a>
 800389c:	2a09      	cmp	r2, #9
 800389e:	d236      	bcs.n	800390e <_strtod_l+0xa6>
 80038a0:	2a00      	cmp	r2, #0
 80038a2:	d03e      	beq.n	8003922 <_strtod_l+0xba>
 80038a4:	2300      	movs	r3, #0
 80038a6:	930d      	str	r3, [sp, #52]	; 0x34
 80038a8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80038aa:	782b      	ldrb	r3, [r5, #0]
 80038ac:	2b30      	cmp	r3, #48	; 0x30
 80038ae:	f040 80ac 	bne.w	8003a0a <_strtod_l+0x1a2>
 80038b2:	786b      	ldrb	r3, [r5, #1]
 80038b4:	2b58      	cmp	r3, #88	; 0x58
 80038b6:	d001      	beq.n	80038bc <_strtod_l+0x54>
 80038b8:	2b78      	cmp	r3, #120	; 0x78
 80038ba:	d167      	bne.n	800398c <_strtod_l+0x124>
 80038bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80038be:	9702      	str	r7, [sp, #8]
 80038c0:	9301      	str	r3, [sp, #4]
 80038c2:	ab1c      	add	r3, sp, #112	; 0x70
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	4a89      	ldr	r2, [pc, #548]	; (8003aec <_strtod_l+0x284>)
 80038c8:	ab1d      	add	r3, sp, #116	; 0x74
 80038ca:	a91b      	add	r1, sp, #108	; 0x6c
 80038cc:	4658      	mov	r0, fp
 80038ce:	f001 fcfb 	bl	80052c8 <__gethex>
 80038d2:	f010 0407 	ands.w	r4, r0, #7
 80038d6:	4606      	mov	r6, r0
 80038d8:	d005      	beq.n	80038e6 <_strtod_l+0x7e>
 80038da:	2c06      	cmp	r4, #6
 80038dc:	d12b      	bne.n	8003936 <_strtod_l+0xce>
 80038de:	2300      	movs	r3, #0
 80038e0:	3501      	adds	r5, #1
 80038e2:	951b      	str	r5, [sp, #108]	; 0x6c
 80038e4:	930d      	str	r3, [sp, #52]	; 0x34
 80038e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f040 85a6 	bne.w	800443a <_strtod_l+0xbd2>
 80038ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80038f0:	b1e3      	cbz	r3, 800392c <_strtod_l+0xc4>
 80038f2:	464a      	mov	r2, r9
 80038f4:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 80038f8:	4610      	mov	r0, r2
 80038fa:	4619      	mov	r1, r3
 80038fc:	b021      	add	sp, #132	; 0x84
 80038fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003902:	2a2b      	cmp	r2, #43	; 0x2b
 8003904:	d015      	beq.n	8003932 <_strtod_l+0xca>
 8003906:	2a2d      	cmp	r2, #45	; 0x2d
 8003908:	d004      	beq.n	8003914 <_strtod_l+0xac>
 800390a:	2a20      	cmp	r2, #32
 800390c:	d1ca      	bne.n	80038a4 <_strtod_l+0x3c>
 800390e:	3301      	adds	r3, #1
 8003910:	931b      	str	r3, [sp, #108]	; 0x6c
 8003912:	e7bf      	b.n	8003894 <_strtod_l+0x2c>
 8003914:	2201      	movs	r2, #1
 8003916:	920d      	str	r2, [sp, #52]	; 0x34
 8003918:	1c5a      	adds	r2, r3, #1
 800391a:	921b      	str	r2, [sp, #108]	; 0x6c
 800391c:	785b      	ldrb	r3, [r3, #1]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1c2      	bne.n	80038a8 <_strtod_l+0x40>
 8003922:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003924:	961b      	str	r6, [sp, #108]	; 0x6c
 8003926:	2b00      	cmp	r3, #0
 8003928:	f040 8585 	bne.w	8004436 <_strtod_l+0xbce>
 800392c:	464a      	mov	r2, r9
 800392e:	4653      	mov	r3, sl
 8003930:	e7e2      	b.n	80038f8 <_strtod_l+0x90>
 8003932:	2200      	movs	r2, #0
 8003934:	e7ef      	b.n	8003916 <_strtod_l+0xae>
 8003936:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003938:	b13a      	cbz	r2, 800394a <_strtod_l+0xe2>
 800393a:	2135      	movs	r1, #53	; 0x35
 800393c:	a81e      	add	r0, sp, #120	; 0x78
 800393e:	f002 fbae 	bl	800609e <__copybits>
 8003942:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003944:	4658      	mov	r0, fp
 8003946:	f002 f820 	bl	800598a <_Bfree>
 800394a:	3c01      	subs	r4, #1
 800394c:	2c04      	cmp	r4, #4
 800394e:	d806      	bhi.n	800395e <_strtod_l+0xf6>
 8003950:	e8df f004 	tbb	[pc, r4]
 8003954:	1714030a 	.word	0x1714030a
 8003958:	0a          	.byte	0x0a
 8003959:	00          	.byte	0x00
 800395a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 800395e:	0731      	lsls	r1, r6, #28
 8003960:	d5c1      	bpl.n	80038e6 <_strtod_l+0x7e>
 8003962:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8003966:	e7be      	b.n	80038e6 <_strtod_l+0x7e>
 8003968:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800396a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 800396e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003972:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003976:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 800397a:	e7f0      	b.n	800395e <_strtod_l+0xf6>
 800397c:	f8df a170 	ldr.w	sl, [pc, #368]	; 8003af0 <_strtod_l+0x288>
 8003980:	e7ed      	b.n	800395e <_strtod_l+0xf6>
 8003982:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8003986:	f04f 39ff 	mov.w	r9, #4294967295
 800398a:	e7e8      	b.n	800395e <_strtod_l+0xf6>
 800398c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800398e:	1c5a      	adds	r2, r3, #1
 8003990:	921b      	str	r2, [sp, #108]	; 0x6c
 8003992:	785b      	ldrb	r3, [r3, #1]
 8003994:	2b30      	cmp	r3, #48	; 0x30
 8003996:	d0f9      	beq.n	800398c <_strtod_l+0x124>
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0a4      	beq.n	80038e6 <_strtod_l+0x7e>
 800399c:	2301      	movs	r3, #1
 800399e:	2500      	movs	r5, #0
 80039a0:	220a      	movs	r2, #10
 80039a2:	9307      	str	r3, [sp, #28]
 80039a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80039a6:	9506      	str	r5, [sp, #24]
 80039a8:	9308      	str	r3, [sp, #32]
 80039aa:	9504      	str	r5, [sp, #16]
 80039ac:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80039ae:	7807      	ldrb	r7, [r0, #0]
 80039b0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80039b4:	b2d9      	uxtb	r1, r3
 80039b6:	2909      	cmp	r1, #9
 80039b8:	d929      	bls.n	8003a0e <_strtod_l+0x1a6>
 80039ba:	4622      	mov	r2, r4
 80039bc:	f8d8 1000 	ldr.w	r1, [r8]
 80039c0:	f003 f8f1 	bl	8006ba6 <strncmp>
 80039c4:	2800      	cmp	r0, #0
 80039c6:	d031      	beq.n	8003a2c <_strtod_l+0x1c4>
 80039c8:	2000      	movs	r0, #0
 80039ca:	463b      	mov	r3, r7
 80039cc:	4602      	mov	r2, r0
 80039ce:	9c04      	ldr	r4, [sp, #16]
 80039d0:	9005      	str	r0, [sp, #20]
 80039d2:	2b65      	cmp	r3, #101	; 0x65
 80039d4:	d001      	beq.n	80039da <_strtod_l+0x172>
 80039d6:	2b45      	cmp	r3, #69	; 0x45
 80039d8:	d114      	bne.n	8003a04 <_strtod_l+0x19c>
 80039da:	b924      	cbnz	r4, 80039e6 <_strtod_l+0x17e>
 80039dc:	b910      	cbnz	r0, 80039e4 <_strtod_l+0x17c>
 80039de:	9b07      	ldr	r3, [sp, #28]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d09e      	beq.n	8003922 <_strtod_l+0xba>
 80039e4:	2400      	movs	r4, #0
 80039e6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80039e8:	1c73      	adds	r3, r6, #1
 80039ea:	931b      	str	r3, [sp, #108]	; 0x6c
 80039ec:	7873      	ldrb	r3, [r6, #1]
 80039ee:	2b2b      	cmp	r3, #43	; 0x2b
 80039f0:	d078      	beq.n	8003ae4 <_strtod_l+0x27c>
 80039f2:	2b2d      	cmp	r3, #45	; 0x2d
 80039f4:	d070      	beq.n	8003ad8 <_strtod_l+0x270>
 80039f6:	f04f 0c00 	mov.w	ip, #0
 80039fa:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80039fe:	2f09      	cmp	r7, #9
 8003a00:	d97c      	bls.n	8003afc <_strtod_l+0x294>
 8003a02:	961b      	str	r6, [sp, #108]	; 0x6c
 8003a04:	f04f 0e00 	mov.w	lr, #0
 8003a08:	e09a      	b.n	8003b40 <_strtod_l+0x2d8>
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	e7c7      	b.n	800399e <_strtod_l+0x136>
 8003a0e:	9904      	ldr	r1, [sp, #16]
 8003a10:	3001      	adds	r0, #1
 8003a12:	2908      	cmp	r1, #8
 8003a14:	bfd7      	itett	le
 8003a16:	9906      	ldrle	r1, [sp, #24]
 8003a18:	fb02 3505 	mlagt	r5, r2, r5, r3
 8003a1c:	fb02 3301 	mlale	r3, r2, r1, r3
 8003a20:	9306      	strle	r3, [sp, #24]
 8003a22:	9b04      	ldr	r3, [sp, #16]
 8003a24:	901b      	str	r0, [sp, #108]	; 0x6c
 8003a26:	3301      	adds	r3, #1
 8003a28:	9304      	str	r3, [sp, #16]
 8003a2a:	e7bf      	b.n	80039ac <_strtod_l+0x144>
 8003a2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003a2e:	191a      	adds	r2, r3, r4
 8003a30:	921b      	str	r2, [sp, #108]	; 0x6c
 8003a32:	9a04      	ldr	r2, [sp, #16]
 8003a34:	5d1b      	ldrb	r3, [r3, r4]
 8003a36:	2a00      	cmp	r2, #0
 8003a38:	d037      	beq.n	8003aaa <_strtod_l+0x242>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	9c04      	ldr	r4, [sp, #16]
 8003a3e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8003a42:	2909      	cmp	r1, #9
 8003a44:	d913      	bls.n	8003a6e <_strtod_l+0x206>
 8003a46:	2101      	movs	r1, #1
 8003a48:	9105      	str	r1, [sp, #20]
 8003a4a:	e7c2      	b.n	80039d2 <_strtod_l+0x16a>
 8003a4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003a4e:	3001      	adds	r0, #1
 8003a50:	1c5a      	adds	r2, r3, #1
 8003a52:	921b      	str	r2, [sp, #108]	; 0x6c
 8003a54:	785b      	ldrb	r3, [r3, #1]
 8003a56:	2b30      	cmp	r3, #48	; 0x30
 8003a58:	d0f8      	beq.n	8003a4c <_strtod_l+0x1e4>
 8003a5a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8003a5e:	2a08      	cmp	r2, #8
 8003a60:	f200 84f0 	bhi.w	8004444 <_strtod_l+0xbdc>
 8003a64:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003a66:	9208      	str	r2, [sp, #32]
 8003a68:	4602      	mov	r2, r0
 8003a6a:	2000      	movs	r0, #0
 8003a6c:	4604      	mov	r4, r0
 8003a6e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8003a72:	f100 0101 	add.w	r1, r0, #1
 8003a76:	d012      	beq.n	8003a9e <_strtod_l+0x236>
 8003a78:	440a      	add	r2, r1
 8003a7a:	270a      	movs	r7, #10
 8003a7c:	4621      	mov	r1, r4
 8003a7e:	eb00 0c04 	add.w	ip, r0, r4
 8003a82:	458c      	cmp	ip, r1
 8003a84:	d113      	bne.n	8003aae <_strtod_l+0x246>
 8003a86:	1821      	adds	r1, r4, r0
 8003a88:	2908      	cmp	r1, #8
 8003a8a:	f104 0401 	add.w	r4, r4, #1
 8003a8e:	4404      	add	r4, r0
 8003a90:	dc19      	bgt.n	8003ac6 <_strtod_l+0x25e>
 8003a92:	210a      	movs	r1, #10
 8003a94:	9b06      	ldr	r3, [sp, #24]
 8003a96:	fb01 e303 	mla	r3, r1, r3, lr
 8003a9a:	9306      	str	r3, [sp, #24]
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003aa0:	1c58      	adds	r0, r3, #1
 8003aa2:	901b      	str	r0, [sp, #108]	; 0x6c
 8003aa4:	785b      	ldrb	r3, [r3, #1]
 8003aa6:	4608      	mov	r0, r1
 8003aa8:	e7c9      	b.n	8003a3e <_strtod_l+0x1d6>
 8003aaa:	9804      	ldr	r0, [sp, #16]
 8003aac:	e7d3      	b.n	8003a56 <_strtod_l+0x1ee>
 8003aae:	2908      	cmp	r1, #8
 8003ab0:	f101 0101 	add.w	r1, r1, #1
 8003ab4:	dc03      	bgt.n	8003abe <_strtod_l+0x256>
 8003ab6:	9b06      	ldr	r3, [sp, #24]
 8003ab8:	437b      	muls	r3, r7
 8003aba:	9306      	str	r3, [sp, #24]
 8003abc:	e7e1      	b.n	8003a82 <_strtod_l+0x21a>
 8003abe:	2910      	cmp	r1, #16
 8003ac0:	bfd8      	it	le
 8003ac2:	437d      	mulle	r5, r7
 8003ac4:	e7dd      	b.n	8003a82 <_strtod_l+0x21a>
 8003ac6:	2c10      	cmp	r4, #16
 8003ac8:	bfdc      	itt	le
 8003aca:	210a      	movle	r1, #10
 8003acc:	fb01 e505 	mlale	r5, r1, r5, lr
 8003ad0:	e7e4      	b.n	8003a9c <_strtod_l+0x234>
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	9305      	str	r3, [sp, #20]
 8003ad6:	e781      	b.n	80039dc <_strtod_l+0x174>
 8003ad8:	f04f 0c01 	mov.w	ip, #1
 8003adc:	1cb3      	adds	r3, r6, #2
 8003ade:	931b      	str	r3, [sp, #108]	; 0x6c
 8003ae0:	78b3      	ldrb	r3, [r6, #2]
 8003ae2:	e78a      	b.n	80039fa <_strtod_l+0x192>
 8003ae4:	f04f 0c00 	mov.w	ip, #0
 8003ae8:	e7f8      	b.n	8003adc <_strtod_l+0x274>
 8003aea:	bf00      	nop
 8003aec:	08009ab8 	.word	0x08009ab8
 8003af0:	7ff00000 	.word	0x7ff00000
 8003af4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003af6:	1c5f      	adds	r7, r3, #1
 8003af8:	971b      	str	r7, [sp, #108]	; 0x6c
 8003afa:	785b      	ldrb	r3, [r3, #1]
 8003afc:	2b30      	cmp	r3, #48	; 0x30
 8003afe:	d0f9      	beq.n	8003af4 <_strtod_l+0x28c>
 8003b00:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8003b04:	2f08      	cmp	r7, #8
 8003b06:	f63f af7d 	bhi.w	8003a04 <_strtod_l+0x19c>
 8003b0a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8003b0e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003b10:	9309      	str	r3, [sp, #36]	; 0x24
 8003b12:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003b14:	1c5f      	adds	r7, r3, #1
 8003b16:	971b      	str	r7, [sp, #108]	; 0x6c
 8003b18:	785b      	ldrb	r3, [r3, #1]
 8003b1a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8003b1e:	f1b8 0f09 	cmp.w	r8, #9
 8003b22:	d937      	bls.n	8003b94 <_strtod_l+0x32c>
 8003b24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003b26:	1a7f      	subs	r7, r7, r1
 8003b28:	2f08      	cmp	r7, #8
 8003b2a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8003b2e:	dc37      	bgt.n	8003ba0 <_strtod_l+0x338>
 8003b30:	45be      	cmp	lr, r7
 8003b32:	bfa8      	it	ge
 8003b34:	46be      	movge	lr, r7
 8003b36:	f1bc 0f00 	cmp.w	ip, #0
 8003b3a:	d001      	beq.n	8003b40 <_strtod_l+0x2d8>
 8003b3c:	f1ce 0e00 	rsb	lr, lr, #0
 8003b40:	2c00      	cmp	r4, #0
 8003b42:	d151      	bne.n	8003be8 <_strtod_l+0x380>
 8003b44:	2800      	cmp	r0, #0
 8003b46:	f47f aece 	bne.w	80038e6 <_strtod_l+0x7e>
 8003b4a:	9a07      	ldr	r2, [sp, #28]
 8003b4c:	2a00      	cmp	r2, #0
 8003b4e:	f47f aeca 	bne.w	80038e6 <_strtod_l+0x7e>
 8003b52:	9a05      	ldr	r2, [sp, #20]
 8003b54:	2a00      	cmp	r2, #0
 8003b56:	f47f aee4 	bne.w	8003922 <_strtod_l+0xba>
 8003b5a:	2b4e      	cmp	r3, #78	; 0x4e
 8003b5c:	d027      	beq.n	8003bae <_strtod_l+0x346>
 8003b5e:	dc21      	bgt.n	8003ba4 <_strtod_l+0x33c>
 8003b60:	2b49      	cmp	r3, #73	; 0x49
 8003b62:	f47f aede 	bne.w	8003922 <_strtod_l+0xba>
 8003b66:	49a4      	ldr	r1, [pc, #656]	; (8003df8 <_strtod_l+0x590>)
 8003b68:	a81b      	add	r0, sp, #108	; 0x6c
 8003b6a:	f001 fde1 	bl	8005730 <__match>
 8003b6e:	2800      	cmp	r0, #0
 8003b70:	f43f aed7 	beq.w	8003922 <_strtod_l+0xba>
 8003b74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003b76:	49a1      	ldr	r1, [pc, #644]	; (8003dfc <_strtod_l+0x594>)
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	a81b      	add	r0, sp, #108	; 0x6c
 8003b7c:	931b      	str	r3, [sp, #108]	; 0x6c
 8003b7e:	f001 fdd7 	bl	8005730 <__match>
 8003b82:	b910      	cbnz	r0, 8003b8a <_strtod_l+0x322>
 8003b84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003b86:	3301      	adds	r3, #1
 8003b88:	931b      	str	r3, [sp, #108]	; 0x6c
 8003b8a:	f8df a284 	ldr.w	sl, [pc, #644]	; 8003e10 <_strtod_l+0x5a8>
 8003b8e:	f04f 0900 	mov.w	r9, #0
 8003b92:	e6a8      	b.n	80038e6 <_strtod_l+0x7e>
 8003b94:	210a      	movs	r1, #10
 8003b96:	fb01 3e0e 	mla	lr, r1, lr, r3
 8003b9a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8003b9e:	e7b8      	b.n	8003b12 <_strtod_l+0x2aa>
 8003ba0:	46be      	mov	lr, r7
 8003ba2:	e7c8      	b.n	8003b36 <_strtod_l+0x2ce>
 8003ba4:	2b69      	cmp	r3, #105	; 0x69
 8003ba6:	d0de      	beq.n	8003b66 <_strtod_l+0x2fe>
 8003ba8:	2b6e      	cmp	r3, #110	; 0x6e
 8003baa:	f47f aeba 	bne.w	8003922 <_strtod_l+0xba>
 8003bae:	4994      	ldr	r1, [pc, #592]	; (8003e00 <_strtod_l+0x598>)
 8003bb0:	a81b      	add	r0, sp, #108	; 0x6c
 8003bb2:	f001 fdbd 	bl	8005730 <__match>
 8003bb6:	2800      	cmp	r0, #0
 8003bb8:	f43f aeb3 	beq.w	8003922 <_strtod_l+0xba>
 8003bbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	2b28      	cmp	r3, #40	; 0x28
 8003bc2:	d10e      	bne.n	8003be2 <_strtod_l+0x37a>
 8003bc4:	aa1e      	add	r2, sp, #120	; 0x78
 8003bc6:	498f      	ldr	r1, [pc, #572]	; (8003e04 <_strtod_l+0x59c>)
 8003bc8:	a81b      	add	r0, sp, #108	; 0x6c
 8003bca:	f001 fdc5 	bl	8005758 <__hexnan>
 8003bce:	2805      	cmp	r0, #5
 8003bd0:	d107      	bne.n	8003be2 <_strtod_l+0x37a>
 8003bd2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003bd4:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8003bd8:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8003bdc:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8003be0:	e681      	b.n	80038e6 <_strtod_l+0x7e>
 8003be2:	f8df a234 	ldr.w	sl, [pc, #564]	; 8003e18 <_strtod_l+0x5b0>
 8003be6:	e7d2      	b.n	8003b8e <_strtod_l+0x326>
 8003be8:	ebae 0302 	sub.w	r3, lr, r2
 8003bec:	9307      	str	r3, [sp, #28]
 8003bee:	9b04      	ldr	r3, [sp, #16]
 8003bf0:	9806      	ldr	r0, [sp, #24]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	bf08      	it	eq
 8003bf6:	4623      	moveq	r3, r4
 8003bf8:	2c10      	cmp	r4, #16
 8003bfa:	9304      	str	r3, [sp, #16]
 8003bfc:	46a0      	mov	r8, r4
 8003bfe:	bfa8      	it	ge
 8003c00:	f04f 0810 	movge.w	r8, #16
 8003c04:	f7fc fbfe 	bl	8000404 <__aeabi_ui2d>
 8003c08:	2c09      	cmp	r4, #9
 8003c0a:	4681      	mov	r9, r0
 8003c0c:	468a      	mov	sl, r1
 8003c0e:	dc13      	bgt.n	8003c38 <_strtod_l+0x3d0>
 8003c10:	9b07      	ldr	r3, [sp, #28]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f43f ae67 	beq.w	80038e6 <_strtod_l+0x7e>
 8003c18:	9b07      	ldr	r3, [sp, #28]
 8003c1a:	dd7e      	ble.n	8003d1a <_strtod_l+0x4b2>
 8003c1c:	2b16      	cmp	r3, #22
 8003c1e:	dc65      	bgt.n	8003cec <_strtod_l+0x484>
 8003c20:	4a79      	ldr	r2, [pc, #484]	; (8003e08 <_strtod_l+0x5a0>)
 8003c22:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8003c26:	464a      	mov	r2, r9
 8003c28:	e9de 0100 	ldrd	r0, r1, [lr]
 8003c2c:	4653      	mov	r3, sl
 8003c2e:	f7fc fc63 	bl	80004f8 <__aeabi_dmul>
 8003c32:	4681      	mov	r9, r0
 8003c34:	468a      	mov	sl, r1
 8003c36:	e656      	b.n	80038e6 <_strtod_l+0x7e>
 8003c38:	4b73      	ldr	r3, [pc, #460]	; (8003e08 <_strtod_l+0x5a0>)
 8003c3a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8003c3e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8003c42:	f7fc fc59 	bl	80004f8 <__aeabi_dmul>
 8003c46:	4606      	mov	r6, r0
 8003c48:	4628      	mov	r0, r5
 8003c4a:	460f      	mov	r7, r1
 8003c4c:	f7fc fbda 	bl	8000404 <__aeabi_ui2d>
 8003c50:	4602      	mov	r2, r0
 8003c52:	460b      	mov	r3, r1
 8003c54:	4630      	mov	r0, r6
 8003c56:	4639      	mov	r1, r7
 8003c58:	f7fc fa98 	bl	800018c <__adddf3>
 8003c5c:	2c0f      	cmp	r4, #15
 8003c5e:	4681      	mov	r9, r0
 8003c60:	468a      	mov	sl, r1
 8003c62:	ddd5      	ble.n	8003c10 <_strtod_l+0x3a8>
 8003c64:	9b07      	ldr	r3, [sp, #28]
 8003c66:	eba4 0808 	sub.w	r8, r4, r8
 8003c6a:	4498      	add	r8, r3
 8003c6c:	f1b8 0f00 	cmp.w	r8, #0
 8003c70:	f340 809a 	ble.w	8003da8 <_strtod_l+0x540>
 8003c74:	f018 030f 	ands.w	r3, r8, #15
 8003c78:	d00a      	beq.n	8003c90 <_strtod_l+0x428>
 8003c7a:	4963      	ldr	r1, [pc, #396]	; (8003e08 <_strtod_l+0x5a0>)
 8003c7c:	464a      	mov	r2, r9
 8003c7e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003c82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003c86:	4653      	mov	r3, sl
 8003c88:	f7fc fc36 	bl	80004f8 <__aeabi_dmul>
 8003c8c:	4681      	mov	r9, r0
 8003c8e:	468a      	mov	sl, r1
 8003c90:	f038 080f 	bics.w	r8, r8, #15
 8003c94:	d077      	beq.n	8003d86 <_strtod_l+0x51e>
 8003c96:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8003c9a:	dd4b      	ble.n	8003d34 <_strtod_l+0x4cc>
 8003c9c:	f04f 0800 	mov.w	r8, #0
 8003ca0:	f8cd 8010 	str.w	r8, [sp, #16]
 8003ca4:	f8cd 8020 	str.w	r8, [sp, #32]
 8003ca8:	f8cd 8018 	str.w	r8, [sp, #24]
 8003cac:	2322      	movs	r3, #34	; 0x22
 8003cae:	f04f 0900 	mov.w	r9, #0
 8003cb2:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8003e10 <_strtod_l+0x5a8>
 8003cb6:	f8cb 3000 	str.w	r3, [fp]
 8003cba:	9b08      	ldr	r3, [sp, #32]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f43f ae12 	beq.w	80038e6 <_strtod_l+0x7e>
 8003cc2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003cc4:	4658      	mov	r0, fp
 8003cc6:	f001 fe60 	bl	800598a <_Bfree>
 8003cca:	9906      	ldr	r1, [sp, #24]
 8003ccc:	4658      	mov	r0, fp
 8003cce:	f001 fe5c 	bl	800598a <_Bfree>
 8003cd2:	9904      	ldr	r1, [sp, #16]
 8003cd4:	4658      	mov	r0, fp
 8003cd6:	f001 fe58 	bl	800598a <_Bfree>
 8003cda:	9908      	ldr	r1, [sp, #32]
 8003cdc:	4658      	mov	r0, fp
 8003cde:	f001 fe54 	bl	800598a <_Bfree>
 8003ce2:	4641      	mov	r1, r8
 8003ce4:	4658      	mov	r0, fp
 8003ce6:	f001 fe50 	bl	800598a <_Bfree>
 8003cea:	e5fc      	b.n	80038e6 <_strtod_l+0x7e>
 8003cec:	9a07      	ldr	r2, [sp, #28]
 8003cee:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	dbb6      	blt.n	8003c64 <_strtod_l+0x3fc>
 8003cf6:	4d44      	ldr	r5, [pc, #272]	; (8003e08 <_strtod_l+0x5a0>)
 8003cf8:	f1c4 040f 	rsb	r4, r4, #15
 8003cfc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8003d00:	464a      	mov	r2, r9
 8003d02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d06:	4653      	mov	r3, sl
 8003d08:	f7fc fbf6 	bl	80004f8 <__aeabi_dmul>
 8003d0c:	9b07      	ldr	r3, [sp, #28]
 8003d0e:	1b1c      	subs	r4, r3, r4
 8003d10:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8003d14:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003d18:	e789      	b.n	8003c2e <_strtod_l+0x3c6>
 8003d1a:	f113 0f16 	cmn.w	r3, #22
 8003d1e:	dba1      	blt.n	8003c64 <_strtod_l+0x3fc>
 8003d20:	4a39      	ldr	r2, [pc, #228]	; (8003e08 <_strtod_l+0x5a0>)
 8003d22:	4648      	mov	r0, r9
 8003d24:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8003d28:	e9d2 2300 	ldrd	r2, r3, [r2]
 8003d2c:	4651      	mov	r1, sl
 8003d2e:	f7fc fd0d 	bl	800074c <__aeabi_ddiv>
 8003d32:	e77e      	b.n	8003c32 <_strtod_l+0x3ca>
 8003d34:	2300      	movs	r3, #0
 8003d36:	4648      	mov	r0, r9
 8003d38:	4651      	mov	r1, sl
 8003d3a:	461d      	mov	r5, r3
 8003d3c:	4e33      	ldr	r6, [pc, #204]	; (8003e0c <_strtod_l+0x5a4>)
 8003d3e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8003d42:	f1b8 0f01 	cmp.w	r8, #1
 8003d46:	dc21      	bgt.n	8003d8c <_strtod_l+0x524>
 8003d48:	b10b      	cbz	r3, 8003d4e <_strtod_l+0x4e6>
 8003d4a:	4681      	mov	r9, r0
 8003d4c:	468a      	mov	sl, r1
 8003d4e:	4b2f      	ldr	r3, [pc, #188]	; (8003e0c <_strtod_l+0x5a4>)
 8003d50:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8003d54:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8003d58:	464a      	mov	r2, r9
 8003d5a:	e9d5 0100 	ldrd	r0, r1, [r5]
 8003d5e:	4653      	mov	r3, sl
 8003d60:	f7fc fbca 	bl	80004f8 <__aeabi_dmul>
 8003d64:	4b2a      	ldr	r3, [pc, #168]	; (8003e10 <_strtod_l+0x5a8>)
 8003d66:	460a      	mov	r2, r1
 8003d68:	400b      	ands	r3, r1
 8003d6a:	492a      	ldr	r1, [pc, #168]	; (8003e14 <_strtod_l+0x5ac>)
 8003d6c:	4681      	mov	r9, r0
 8003d6e:	428b      	cmp	r3, r1
 8003d70:	d894      	bhi.n	8003c9c <_strtod_l+0x434>
 8003d72:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8003d76:	428b      	cmp	r3, r1
 8003d78:	bf86      	itte	hi
 8003d7a:	f04f 39ff 	movhi.w	r9, #4294967295
 8003d7e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8003e1c <_strtod_l+0x5b4>
 8003d82:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8003d86:	2300      	movs	r3, #0
 8003d88:	9305      	str	r3, [sp, #20]
 8003d8a:	e07b      	b.n	8003e84 <_strtod_l+0x61c>
 8003d8c:	f018 0f01 	tst.w	r8, #1
 8003d90:	d006      	beq.n	8003da0 <_strtod_l+0x538>
 8003d92:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8003d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9a:	f7fc fbad 	bl	80004f8 <__aeabi_dmul>
 8003d9e:	2301      	movs	r3, #1
 8003da0:	3501      	adds	r5, #1
 8003da2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8003da6:	e7cc      	b.n	8003d42 <_strtod_l+0x4da>
 8003da8:	d0ed      	beq.n	8003d86 <_strtod_l+0x51e>
 8003daa:	f1c8 0800 	rsb	r8, r8, #0
 8003dae:	f018 020f 	ands.w	r2, r8, #15
 8003db2:	d00a      	beq.n	8003dca <_strtod_l+0x562>
 8003db4:	4b14      	ldr	r3, [pc, #80]	; (8003e08 <_strtod_l+0x5a0>)
 8003db6:	4648      	mov	r0, r9
 8003db8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003dbc:	4651      	mov	r1, sl
 8003dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc2:	f7fc fcc3 	bl	800074c <__aeabi_ddiv>
 8003dc6:	4681      	mov	r9, r0
 8003dc8:	468a      	mov	sl, r1
 8003dca:	ea5f 1828 	movs.w	r8, r8, asr #4
 8003dce:	d0da      	beq.n	8003d86 <_strtod_l+0x51e>
 8003dd0:	f1b8 0f1f 	cmp.w	r8, #31
 8003dd4:	dd24      	ble.n	8003e20 <_strtod_l+0x5b8>
 8003dd6:	f04f 0800 	mov.w	r8, #0
 8003dda:	f8cd 8010 	str.w	r8, [sp, #16]
 8003dde:	f8cd 8020 	str.w	r8, [sp, #32]
 8003de2:	f8cd 8018 	str.w	r8, [sp, #24]
 8003de6:	2322      	movs	r3, #34	; 0x22
 8003de8:	f04f 0900 	mov.w	r9, #0
 8003dec:	f04f 0a00 	mov.w	sl, #0
 8003df0:	f8cb 3000 	str.w	r3, [fp]
 8003df4:	e761      	b.n	8003cba <_strtod_l+0x452>
 8003df6:	bf00      	nop
 8003df8:	08009a85 	.word	0x08009a85
 8003dfc:	08009b0b 	.word	0x08009b0b
 8003e00:	08009a8d 	.word	0x08009a8d
 8003e04:	08009acc 	.word	0x08009acc
 8003e08:	08009b48 	.word	0x08009b48
 8003e0c:	08009b20 	.word	0x08009b20
 8003e10:	7ff00000 	.word	0x7ff00000
 8003e14:	7ca00000 	.word	0x7ca00000
 8003e18:	fff80000 	.word	0xfff80000
 8003e1c:	7fefffff 	.word	0x7fefffff
 8003e20:	f018 0310 	ands.w	r3, r8, #16
 8003e24:	bf18      	it	ne
 8003e26:	236a      	movne	r3, #106	; 0x6a
 8003e28:	4648      	mov	r0, r9
 8003e2a:	9305      	str	r3, [sp, #20]
 8003e2c:	4651      	mov	r1, sl
 8003e2e:	2300      	movs	r3, #0
 8003e30:	4da1      	ldr	r5, [pc, #644]	; (80040b8 <_strtod_l+0x850>)
 8003e32:	f1b8 0f00 	cmp.w	r8, #0
 8003e36:	f300 8113 	bgt.w	8004060 <_strtod_l+0x7f8>
 8003e3a:	b10b      	cbz	r3, 8003e40 <_strtod_l+0x5d8>
 8003e3c:	4681      	mov	r9, r0
 8003e3e:	468a      	mov	sl, r1
 8003e40:	9b05      	ldr	r3, [sp, #20]
 8003e42:	b1bb      	cbz	r3, 8003e74 <_strtod_l+0x60c>
 8003e44:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8003e48:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	4651      	mov	r1, sl
 8003e50:	dd10      	ble.n	8003e74 <_strtod_l+0x60c>
 8003e52:	2b1f      	cmp	r3, #31
 8003e54:	f340 8110 	ble.w	8004078 <_strtod_l+0x810>
 8003e58:	2b34      	cmp	r3, #52	; 0x34
 8003e5a:	bfd8      	it	le
 8003e5c:	f04f 32ff 	movle.w	r2, #4294967295
 8003e60:	f04f 0900 	mov.w	r9, #0
 8003e64:	bfcf      	iteee	gt
 8003e66:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8003e6a:	3b20      	suble	r3, #32
 8003e6c:	fa02 f303 	lslle.w	r3, r2, r3
 8003e70:	ea03 0a01 	andle.w	sl, r3, r1
 8003e74:	2200      	movs	r2, #0
 8003e76:	2300      	movs	r3, #0
 8003e78:	4648      	mov	r0, r9
 8003e7a:	4651      	mov	r1, sl
 8003e7c:	f7fc fda4 	bl	80009c8 <__aeabi_dcmpeq>
 8003e80:	2800      	cmp	r0, #0
 8003e82:	d1a8      	bne.n	8003dd6 <_strtod_l+0x56e>
 8003e84:	9b06      	ldr	r3, [sp, #24]
 8003e86:	9a04      	ldr	r2, [sp, #16]
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	9908      	ldr	r1, [sp, #32]
 8003e8c:	4623      	mov	r3, r4
 8003e8e:	4658      	mov	r0, fp
 8003e90:	f001 fdcd 	bl	8005a2e <__s2b>
 8003e94:	9008      	str	r0, [sp, #32]
 8003e96:	2800      	cmp	r0, #0
 8003e98:	f43f af00 	beq.w	8003c9c <_strtod_l+0x434>
 8003e9c:	9a07      	ldr	r2, [sp, #28]
 8003e9e:	9b07      	ldr	r3, [sp, #28]
 8003ea0:	2a00      	cmp	r2, #0
 8003ea2:	f1c3 0300 	rsb	r3, r3, #0
 8003ea6:	bfa8      	it	ge
 8003ea8:	2300      	movge	r3, #0
 8003eaa:	f04f 0800 	mov.w	r8, #0
 8003eae:	930e      	str	r3, [sp, #56]	; 0x38
 8003eb0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8003eb4:	9316      	str	r3, [sp, #88]	; 0x58
 8003eb6:	f8cd 8010 	str.w	r8, [sp, #16]
 8003eba:	9b08      	ldr	r3, [sp, #32]
 8003ebc:	4658      	mov	r0, fp
 8003ebe:	6859      	ldr	r1, [r3, #4]
 8003ec0:	f001 fd2f 	bl	8005922 <_Balloc>
 8003ec4:	9006      	str	r0, [sp, #24]
 8003ec6:	2800      	cmp	r0, #0
 8003ec8:	f43f aef0 	beq.w	8003cac <_strtod_l+0x444>
 8003ecc:	9b08      	ldr	r3, [sp, #32]
 8003ece:	300c      	adds	r0, #12
 8003ed0:	691a      	ldr	r2, [r3, #16]
 8003ed2:	f103 010c 	add.w	r1, r3, #12
 8003ed6:	3202      	adds	r2, #2
 8003ed8:	0092      	lsls	r2, r2, #2
 8003eda:	f001 fd17 	bl	800590c <memcpy>
 8003ede:	ab1e      	add	r3, sp, #120	; 0x78
 8003ee0:	9301      	str	r3, [sp, #4]
 8003ee2:	ab1d      	add	r3, sp, #116	; 0x74
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	464a      	mov	r2, r9
 8003ee8:	4653      	mov	r3, sl
 8003eea:	4658      	mov	r0, fp
 8003eec:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8003ef0:	f002 f858 	bl	8005fa4 <__d2b>
 8003ef4:	901c      	str	r0, [sp, #112]	; 0x70
 8003ef6:	2800      	cmp	r0, #0
 8003ef8:	f43f aed8 	beq.w	8003cac <_strtod_l+0x444>
 8003efc:	2101      	movs	r1, #1
 8003efe:	4658      	mov	r0, fp
 8003f00:	f001 fe21 	bl	8005b46 <__i2b>
 8003f04:	9004      	str	r0, [sp, #16]
 8003f06:	4603      	mov	r3, r0
 8003f08:	2800      	cmp	r0, #0
 8003f0a:	f43f aecf 	beq.w	8003cac <_strtod_l+0x444>
 8003f0e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8003f10:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003f12:	2d00      	cmp	r5, #0
 8003f14:	bfab      	itete	ge
 8003f16:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8003f18:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8003f1a:	18ee      	addge	r6, r5, r3
 8003f1c:	1b5c      	sublt	r4, r3, r5
 8003f1e:	9b05      	ldr	r3, [sp, #20]
 8003f20:	bfa8      	it	ge
 8003f22:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8003f24:	eba5 0503 	sub.w	r5, r5, r3
 8003f28:	4415      	add	r5, r2
 8003f2a:	4b64      	ldr	r3, [pc, #400]	; (80040bc <_strtod_l+0x854>)
 8003f2c:	f105 35ff 	add.w	r5, r5, #4294967295
 8003f30:	bfb8      	it	lt
 8003f32:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8003f34:	429d      	cmp	r5, r3
 8003f36:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8003f3a:	f280 80af 	bge.w	800409c <_strtod_l+0x834>
 8003f3e:	1b5b      	subs	r3, r3, r5
 8003f40:	2b1f      	cmp	r3, #31
 8003f42:	eba2 0203 	sub.w	r2, r2, r3
 8003f46:	f04f 0701 	mov.w	r7, #1
 8003f4a:	f300 809c 	bgt.w	8004086 <_strtod_l+0x81e>
 8003f4e:	2500      	movs	r5, #0
 8003f50:	fa07 f303 	lsl.w	r3, r7, r3
 8003f54:	930f      	str	r3, [sp, #60]	; 0x3c
 8003f56:	18b7      	adds	r7, r6, r2
 8003f58:	9b05      	ldr	r3, [sp, #20]
 8003f5a:	42be      	cmp	r6, r7
 8003f5c:	4414      	add	r4, r2
 8003f5e:	441c      	add	r4, r3
 8003f60:	4633      	mov	r3, r6
 8003f62:	bfa8      	it	ge
 8003f64:	463b      	movge	r3, r7
 8003f66:	42a3      	cmp	r3, r4
 8003f68:	bfa8      	it	ge
 8003f6a:	4623      	movge	r3, r4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	bfc2      	ittt	gt
 8003f70:	1aff      	subgt	r7, r7, r3
 8003f72:	1ae4      	subgt	r4, r4, r3
 8003f74:	1af6      	subgt	r6, r6, r3
 8003f76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f78:	b1bb      	cbz	r3, 8003faa <_strtod_l+0x742>
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	9904      	ldr	r1, [sp, #16]
 8003f7e:	4658      	mov	r0, fp
 8003f80:	f001 fe80 	bl	8005c84 <__pow5mult>
 8003f84:	9004      	str	r0, [sp, #16]
 8003f86:	2800      	cmp	r0, #0
 8003f88:	f43f ae90 	beq.w	8003cac <_strtod_l+0x444>
 8003f8c:	4601      	mov	r1, r0
 8003f8e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003f90:	4658      	mov	r0, fp
 8003f92:	f001 fde1 	bl	8005b58 <__multiply>
 8003f96:	9009      	str	r0, [sp, #36]	; 0x24
 8003f98:	2800      	cmp	r0, #0
 8003f9a:	f43f ae87 	beq.w	8003cac <_strtod_l+0x444>
 8003f9e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003fa0:	4658      	mov	r0, fp
 8003fa2:	f001 fcf2 	bl	800598a <_Bfree>
 8003fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fa8:	931c      	str	r3, [sp, #112]	; 0x70
 8003faa:	2f00      	cmp	r7, #0
 8003fac:	dc7a      	bgt.n	80040a4 <_strtod_l+0x83c>
 8003fae:	9b07      	ldr	r3, [sp, #28]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	dd08      	ble.n	8003fc6 <_strtod_l+0x75e>
 8003fb4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003fb6:	9906      	ldr	r1, [sp, #24]
 8003fb8:	4658      	mov	r0, fp
 8003fba:	f001 fe63 	bl	8005c84 <__pow5mult>
 8003fbe:	9006      	str	r0, [sp, #24]
 8003fc0:	2800      	cmp	r0, #0
 8003fc2:	f43f ae73 	beq.w	8003cac <_strtod_l+0x444>
 8003fc6:	2c00      	cmp	r4, #0
 8003fc8:	dd08      	ble.n	8003fdc <_strtod_l+0x774>
 8003fca:	4622      	mov	r2, r4
 8003fcc:	9906      	ldr	r1, [sp, #24]
 8003fce:	4658      	mov	r0, fp
 8003fd0:	f001 fea6 	bl	8005d20 <__lshift>
 8003fd4:	9006      	str	r0, [sp, #24]
 8003fd6:	2800      	cmp	r0, #0
 8003fd8:	f43f ae68 	beq.w	8003cac <_strtod_l+0x444>
 8003fdc:	2e00      	cmp	r6, #0
 8003fde:	dd08      	ble.n	8003ff2 <_strtod_l+0x78a>
 8003fe0:	4632      	mov	r2, r6
 8003fe2:	9904      	ldr	r1, [sp, #16]
 8003fe4:	4658      	mov	r0, fp
 8003fe6:	f001 fe9b 	bl	8005d20 <__lshift>
 8003fea:	9004      	str	r0, [sp, #16]
 8003fec:	2800      	cmp	r0, #0
 8003fee:	f43f ae5d 	beq.w	8003cac <_strtod_l+0x444>
 8003ff2:	9a06      	ldr	r2, [sp, #24]
 8003ff4:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003ff6:	4658      	mov	r0, fp
 8003ff8:	f001 ff00 	bl	8005dfc <__mdiff>
 8003ffc:	4680      	mov	r8, r0
 8003ffe:	2800      	cmp	r0, #0
 8004000:	f43f ae54 	beq.w	8003cac <_strtod_l+0x444>
 8004004:	2400      	movs	r4, #0
 8004006:	68c3      	ldr	r3, [r0, #12]
 8004008:	9904      	ldr	r1, [sp, #16]
 800400a:	60c4      	str	r4, [r0, #12]
 800400c:	930c      	str	r3, [sp, #48]	; 0x30
 800400e:	f001 fedb 	bl	8005dc8 <__mcmp>
 8004012:	42a0      	cmp	r0, r4
 8004014:	da54      	bge.n	80040c0 <_strtod_l+0x858>
 8004016:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004018:	b9f3      	cbnz	r3, 8004058 <_strtod_l+0x7f0>
 800401a:	f1b9 0f00 	cmp.w	r9, #0
 800401e:	d11b      	bne.n	8004058 <_strtod_l+0x7f0>
 8004020:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8004024:	b9c3      	cbnz	r3, 8004058 <_strtod_l+0x7f0>
 8004026:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800402a:	0d1b      	lsrs	r3, r3, #20
 800402c:	051b      	lsls	r3, r3, #20
 800402e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004032:	d911      	bls.n	8004058 <_strtod_l+0x7f0>
 8004034:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8004038:	b91b      	cbnz	r3, 8004042 <_strtod_l+0x7da>
 800403a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800403e:	2b01      	cmp	r3, #1
 8004040:	dd0a      	ble.n	8004058 <_strtod_l+0x7f0>
 8004042:	4641      	mov	r1, r8
 8004044:	2201      	movs	r2, #1
 8004046:	4658      	mov	r0, fp
 8004048:	f001 fe6a 	bl	8005d20 <__lshift>
 800404c:	9904      	ldr	r1, [sp, #16]
 800404e:	4680      	mov	r8, r0
 8004050:	f001 feba 	bl	8005dc8 <__mcmp>
 8004054:	2800      	cmp	r0, #0
 8004056:	dc68      	bgt.n	800412a <_strtod_l+0x8c2>
 8004058:	9b05      	ldr	r3, [sp, #20]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d172      	bne.n	8004144 <_strtod_l+0x8dc>
 800405e:	e630      	b.n	8003cc2 <_strtod_l+0x45a>
 8004060:	f018 0f01 	tst.w	r8, #1
 8004064:	d004      	beq.n	8004070 <_strtod_l+0x808>
 8004066:	e9d5 2300 	ldrd	r2, r3, [r5]
 800406a:	f7fc fa45 	bl	80004f8 <__aeabi_dmul>
 800406e:	2301      	movs	r3, #1
 8004070:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004074:	3508      	adds	r5, #8
 8004076:	e6dc      	b.n	8003e32 <_strtod_l+0x5ca>
 8004078:	f04f 32ff 	mov.w	r2, #4294967295
 800407c:	fa02 f303 	lsl.w	r3, r2, r3
 8004080:	ea03 0909 	and.w	r9, r3, r9
 8004084:	e6f6      	b.n	8003e74 <_strtod_l+0x60c>
 8004086:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800408a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800408e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8004092:	35e2      	adds	r5, #226	; 0xe2
 8004094:	fa07 f505 	lsl.w	r5, r7, r5
 8004098:	970f      	str	r7, [sp, #60]	; 0x3c
 800409a:	e75c      	b.n	8003f56 <_strtod_l+0x6ee>
 800409c:	2301      	movs	r3, #1
 800409e:	2500      	movs	r5, #0
 80040a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80040a2:	e758      	b.n	8003f56 <_strtod_l+0x6ee>
 80040a4:	463a      	mov	r2, r7
 80040a6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80040a8:	4658      	mov	r0, fp
 80040aa:	f001 fe39 	bl	8005d20 <__lshift>
 80040ae:	901c      	str	r0, [sp, #112]	; 0x70
 80040b0:	2800      	cmp	r0, #0
 80040b2:	f47f af7c 	bne.w	8003fae <_strtod_l+0x746>
 80040b6:	e5f9      	b.n	8003cac <_strtod_l+0x444>
 80040b8:	08009ae0 	.word	0x08009ae0
 80040bc:	fffffc02 	.word	0xfffffc02
 80040c0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80040c4:	f040 8089 	bne.w	80041da <_strtod_l+0x972>
 80040c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80040ca:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80040ce:	b342      	cbz	r2, 8004122 <_strtod_l+0x8ba>
 80040d0:	4aaf      	ldr	r2, [pc, #700]	; (8004390 <_strtod_l+0xb28>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d156      	bne.n	8004184 <_strtod_l+0x91c>
 80040d6:	9b05      	ldr	r3, [sp, #20]
 80040d8:	4648      	mov	r0, r9
 80040da:	b1eb      	cbz	r3, 8004118 <_strtod_l+0x8b0>
 80040dc:	4653      	mov	r3, sl
 80040de:	4aad      	ldr	r2, [pc, #692]	; (8004394 <_strtod_l+0xb2c>)
 80040e0:	f04f 31ff 	mov.w	r1, #4294967295
 80040e4:	401a      	ands	r2, r3
 80040e6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80040ea:	d818      	bhi.n	800411e <_strtod_l+0x8b6>
 80040ec:	0d12      	lsrs	r2, r2, #20
 80040ee:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80040f2:	fa01 f303 	lsl.w	r3, r1, r3
 80040f6:	4298      	cmp	r0, r3
 80040f8:	d144      	bne.n	8004184 <_strtod_l+0x91c>
 80040fa:	4ba7      	ldr	r3, [pc, #668]	; (8004398 <_strtod_l+0xb30>)
 80040fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040fe:	429a      	cmp	r2, r3
 8004100:	d102      	bne.n	8004108 <_strtod_l+0x8a0>
 8004102:	3001      	adds	r0, #1
 8004104:	f43f add2 	beq.w	8003cac <_strtod_l+0x444>
 8004108:	4ba2      	ldr	r3, [pc, #648]	; (8004394 <_strtod_l+0xb2c>)
 800410a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800410c:	f04f 0900 	mov.w	r9, #0
 8004110:	401a      	ands	r2, r3
 8004112:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8004116:	e79f      	b.n	8004058 <_strtod_l+0x7f0>
 8004118:	f04f 33ff 	mov.w	r3, #4294967295
 800411c:	e7eb      	b.n	80040f6 <_strtod_l+0x88e>
 800411e:	460b      	mov	r3, r1
 8004120:	e7e9      	b.n	80040f6 <_strtod_l+0x88e>
 8004122:	bb7b      	cbnz	r3, 8004184 <_strtod_l+0x91c>
 8004124:	f1b9 0f00 	cmp.w	r9, #0
 8004128:	d12c      	bne.n	8004184 <_strtod_l+0x91c>
 800412a:	9905      	ldr	r1, [sp, #20]
 800412c:	4653      	mov	r3, sl
 800412e:	4a99      	ldr	r2, [pc, #612]	; (8004394 <_strtod_l+0xb2c>)
 8004130:	b1f1      	cbz	r1, 8004170 <_strtod_l+0x908>
 8004132:	ea02 010a 	and.w	r1, r2, sl
 8004136:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800413a:	dc19      	bgt.n	8004170 <_strtod_l+0x908>
 800413c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004140:	f77f ae51 	ble.w	8003de6 <_strtod_l+0x57e>
 8004144:	2300      	movs	r3, #0
 8004146:	4a95      	ldr	r2, [pc, #596]	; (800439c <_strtod_l+0xb34>)
 8004148:	4648      	mov	r0, r9
 800414a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800414e:	4651      	mov	r1, sl
 8004150:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004154:	f7fc f9d0 	bl	80004f8 <__aeabi_dmul>
 8004158:	4681      	mov	r9, r0
 800415a:	468a      	mov	sl, r1
 800415c:	2900      	cmp	r1, #0
 800415e:	f47f adb0 	bne.w	8003cc2 <_strtod_l+0x45a>
 8004162:	2800      	cmp	r0, #0
 8004164:	f47f adad 	bne.w	8003cc2 <_strtod_l+0x45a>
 8004168:	2322      	movs	r3, #34	; 0x22
 800416a:	f8cb 3000 	str.w	r3, [fp]
 800416e:	e5a8      	b.n	8003cc2 <_strtod_l+0x45a>
 8004170:	4013      	ands	r3, r2
 8004172:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004176:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800417a:	f04f 39ff 	mov.w	r9, #4294967295
 800417e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8004182:	e769      	b.n	8004058 <_strtod_l+0x7f0>
 8004184:	b19d      	cbz	r5, 80041ae <_strtod_l+0x946>
 8004186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004188:	421d      	tst	r5, r3
 800418a:	f43f af65 	beq.w	8004058 <_strtod_l+0x7f0>
 800418e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004190:	9a05      	ldr	r2, [sp, #20]
 8004192:	4648      	mov	r0, r9
 8004194:	4651      	mov	r1, sl
 8004196:	b173      	cbz	r3, 80041b6 <_strtod_l+0x94e>
 8004198:	f7ff fb44 	bl	8003824 <sulp>
 800419c:	4602      	mov	r2, r0
 800419e:	460b      	mov	r3, r1
 80041a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80041a4:	f7fb fff2 	bl	800018c <__adddf3>
 80041a8:	4681      	mov	r9, r0
 80041aa:	468a      	mov	sl, r1
 80041ac:	e754      	b.n	8004058 <_strtod_l+0x7f0>
 80041ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80041b0:	ea13 0f09 	tst.w	r3, r9
 80041b4:	e7e9      	b.n	800418a <_strtod_l+0x922>
 80041b6:	f7ff fb35 	bl	8003824 <sulp>
 80041ba:	4602      	mov	r2, r0
 80041bc:	460b      	mov	r3, r1
 80041be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80041c2:	f7fb ffe1 	bl	8000188 <__aeabi_dsub>
 80041c6:	2200      	movs	r2, #0
 80041c8:	2300      	movs	r3, #0
 80041ca:	4681      	mov	r9, r0
 80041cc:	468a      	mov	sl, r1
 80041ce:	f7fc fbfb 	bl	80009c8 <__aeabi_dcmpeq>
 80041d2:	2800      	cmp	r0, #0
 80041d4:	f47f ae07 	bne.w	8003de6 <_strtod_l+0x57e>
 80041d8:	e73e      	b.n	8004058 <_strtod_l+0x7f0>
 80041da:	9904      	ldr	r1, [sp, #16]
 80041dc:	4640      	mov	r0, r8
 80041de:	f001 ff30 	bl	8006042 <__ratio>
 80041e2:	2200      	movs	r2, #0
 80041e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80041e8:	4606      	mov	r6, r0
 80041ea:	460f      	mov	r7, r1
 80041ec:	f7fc fc00 	bl	80009f0 <__aeabi_dcmple>
 80041f0:	2800      	cmp	r0, #0
 80041f2:	d075      	beq.n	80042e0 <_strtod_l+0xa78>
 80041f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d047      	beq.n	800428a <_strtod_l+0xa22>
 80041fa:	2600      	movs	r6, #0
 80041fc:	4f68      	ldr	r7, [pc, #416]	; (80043a0 <_strtod_l+0xb38>)
 80041fe:	4d68      	ldr	r5, [pc, #416]	; (80043a0 <_strtod_l+0xb38>)
 8004200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004202:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004206:	0d1b      	lsrs	r3, r3, #20
 8004208:	051b      	lsls	r3, r3, #20
 800420a:	930f      	str	r3, [sp, #60]	; 0x3c
 800420c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800420e:	4b65      	ldr	r3, [pc, #404]	; (80043a4 <_strtod_l+0xb3c>)
 8004210:	429a      	cmp	r2, r3
 8004212:	f040 80cf 	bne.w	80043b4 <_strtod_l+0xb4c>
 8004216:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800421a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800421e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004220:	4648      	mov	r0, r9
 8004222:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8004226:	4651      	mov	r1, sl
 8004228:	f001 fe46 	bl	8005eb8 <__ulp>
 800422c:	4602      	mov	r2, r0
 800422e:	460b      	mov	r3, r1
 8004230:	4630      	mov	r0, r6
 8004232:	4639      	mov	r1, r7
 8004234:	f7fc f960 	bl	80004f8 <__aeabi_dmul>
 8004238:	464a      	mov	r2, r9
 800423a:	4653      	mov	r3, sl
 800423c:	f7fb ffa6 	bl	800018c <__adddf3>
 8004240:	460b      	mov	r3, r1
 8004242:	4954      	ldr	r1, [pc, #336]	; (8004394 <_strtod_l+0xb2c>)
 8004244:	4a58      	ldr	r2, [pc, #352]	; (80043a8 <_strtod_l+0xb40>)
 8004246:	4019      	ands	r1, r3
 8004248:	4291      	cmp	r1, r2
 800424a:	4681      	mov	r9, r0
 800424c:	d95e      	bls.n	800430c <_strtod_l+0xaa4>
 800424e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004250:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004254:	4293      	cmp	r3, r2
 8004256:	d103      	bne.n	8004260 <_strtod_l+0x9f8>
 8004258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800425a:	3301      	adds	r3, #1
 800425c:	f43f ad26 	beq.w	8003cac <_strtod_l+0x444>
 8004260:	f04f 39ff 	mov.w	r9, #4294967295
 8004264:	f8df a130 	ldr.w	sl, [pc, #304]	; 8004398 <_strtod_l+0xb30>
 8004268:	991c      	ldr	r1, [sp, #112]	; 0x70
 800426a:	4658      	mov	r0, fp
 800426c:	f001 fb8d 	bl	800598a <_Bfree>
 8004270:	9906      	ldr	r1, [sp, #24]
 8004272:	4658      	mov	r0, fp
 8004274:	f001 fb89 	bl	800598a <_Bfree>
 8004278:	9904      	ldr	r1, [sp, #16]
 800427a:	4658      	mov	r0, fp
 800427c:	f001 fb85 	bl	800598a <_Bfree>
 8004280:	4641      	mov	r1, r8
 8004282:	4658      	mov	r0, fp
 8004284:	f001 fb81 	bl	800598a <_Bfree>
 8004288:	e617      	b.n	8003eba <_strtod_l+0x652>
 800428a:	f1b9 0f00 	cmp.w	r9, #0
 800428e:	d119      	bne.n	80042c4 <_strtod_l+0xa5c>
 8004290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004292:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004296:	b9e3      	cbnz	r3, 80042d2 <_strtod_l+0xa6a>
 8004298:	2200      	movs	r2, #0
 800429a:	4b41      	ldr	r3, [pc, #260]	; (80043a0 <_strtod_l+0xb38>)
 800429c:	4630      	mov	r0, r6
 800429e:	4639      	mov	r1, r7
 80042a0:	f7fc fb9c 	bl	80009dc <__aeabi_dcmplt>
 80042a4:	b9c8      	cbnz	r0, 80042da <_strtod_l+0xa72>
 80042a6:	2200      	movs	r2, #0
 80042a8:	4b40      	ldr	r3, [pc, #256]	; (80043ac <_strtod_l+0xb44>)
 80042aa:	4630      	mov	r0, r6
 80042ac:	4639      	mov	r1, r7
 80042ae:	f7fc f923 	bl	80004f8 <__aeabi_dmul>
 80042b2:	4604      	mov	r4, r0
 80042b4:	460d      	mov	r5, r1
 80042b6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80042ba:	9418      	str	r4, [sp, #96]	; 0x60
 80042bc:	9319      	str	r3, [sp, #100]	; 0x64
 80042be:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80042c2:	e79d      	b.n	8004200 <_strtod_l+0x998>
 80042c4:	f1b9 0f01 	cmp.w	r9, #1
 80042c8:	d103      	bne.n	80042d2 <_strtod_l+0xa6a>
 80042ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f43f ad8a 	beq.w	8003de6 <_strtod_l+0x57e>
 80042d2:	2600      	movs	r6, #0
 80042d4:	4f36      	ldr	r7, [pc, #216]	; (80043b0 <_strtod_l+0xb48>)
 80042d6:	2400      	movs	r4, #0
 80042d8:	e791      	b.n	80041fe <_strtod_l+0x996>
 80042da:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80042dc:	4d33      	ldr	r5, [pc, #204]	; (80043ac <_strtod_l+0xb44>)
 80042de:	e7ea      	b.n	80042b6 <_strtod_l+0xa4e>
 80042e0:	4b32      	ldr	r3, [pc, #200]	; (80043ac <_strtod_l+0xb44>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	4630      	mov	r0, r6
 80042e6:	4639      	mov	r1, r7
 80042e8:	f7fc f906 	bl	80004f8 <__aeabi_dmul>
 80042ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80042ee:	4604      	mov	r4, r0
 80042f0:	460d      	mov	r5, r1
 80042f2:	b933      	cbnz	r3, 8004302 <_strtod_l+0xa9a>
 80042f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80042f8:	9010      	str	r0, [sp, #64]	; 0x40
 80042fa:	9311      	str	r3, [sp, #68]	; 0x44
 80042fc:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004300:	e77e      	b.n	8004200 <_strtod_l+0x998>
 8004302:	4602      	mov	r2, r0
 8004304:	460b      	mov	r3, r1
 8004306:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800430a:	e7f7      	b.n	80042fc <_strtod_l+0xa94>
 800430c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8004310:	9b05      	ldr	r3, [sp, #20]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1a8      	bne.n	8004268 <_strtod_l+0xa00>
 8004316:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800431a:	0d1b      	lsrs	r3, r3, #20
 800431c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800431e:	051b      	lsls	r3, r3, #20
 8004320:	429a      	cmp	r2, r3
 8004322:	4656      	mov	r6, sl
 8004324:	d1a0      	bne.n	8004268 <_strtod_l+0xa00>
 8004326:	4629      	mov	r1, r5
 8004328:	4620      	mov	r0, r4
 800432a:	f7fc fb95 	bl	8000a58 <__aeabi_d2iz>
 800432e:	f7fc f879 	bl	8000424 <__aeabi_i2d>
 8004332:	460b      	mov	r3, r1
 8004334:	4602      	mov	r2, r0
 8004336:	4629      	mov	r1, r5
 8004338:	4620      	mov	r0, r4
 800433a:	f7fb ff25 	bl	8000188 <__aeabi_dsub>
 800433e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004340:	4604      	mov	r4, r0
 8004342:	460d      	mov	r5, r1
 8004344:	b933      	cbnz	r3, 8004354 <_strtod_l+0xaec>
 8004346:	f1b9 0f00 	cmp.w	r9, #0
 800434a:	d103      	bne.n	8004354 <_strtod_l+0xaec>
 800434c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8004350:	2e00      	cmp	r6, #0
 8004352:	d06a      	beq.n	800442a <_strtod_l+0xbc2>
 8004354:	a30a      	add	r3, pc, #40	; (adr r3, 8004380 <_strtod_l+0xb18>)
 8004356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435a:	4620      	mov	r0, r4
 800435c:	4629      	mov	r1, r5
 800435e:	f7fc fb3d 	bl	80009dc <__aeabi_dcmplt>
 8004362:	2800      	cmp	r0, #0
 8004364:	f47f acad 	bne.w	8003cc2 <_strtod_l+0x45a>
 8004368:	a307      	add	r3, pc, #28	; (adr r3, 8004388 <_strtod_l+0xb20>)
 800436a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436e:	4620      	mov	r0, r4
 8004370:	4629      	mov	r1, r5
 8004372:	f7fc fb51 	bl	8000a18 <__aeabi_dcmpgt>
 8004376:	2800      	cmp	r0, #0
 8004378:	f43f af76 	beq.w	8004268 <_strtod_l+0xa00>
 800437c:	e4a1      	b.n	8003cc2 <_strtod_l+0x45a>
 800437e:	bf00      	nop
 8004380:	94a03595 	.word	0x94a03595
 8004384:	3fdfffff 	.word	0x3fdfffff
 8004388:	35afe535 	.word	0x35afe535
 800438c:	3fe00000 	.word	0x3fe00000
 8004390:	000fffff 	.word	0x000fffff
 8004394:	7ff00000 	.word	0x7ff00000
 8004398:	7fefffff 	.word	0x7fefffff
 800439c:	39500000 	.word	0x39500000
 80043a0:	3ff00000 	.word	0x3ff00000
 80043a4:	7fe00000 	.word	0x7fe00000
 80043a8:	7c9fffff 	.word	0x7c9fffff
 80043ac:	3fe00000 	.word	0x3fe00000
 80043b0:	bff00000 	.word	0xbff00000
 80043b4:	9b05      	ldr	r3, [sp, #20]
 80043b6:	b313      	cbz	r3, 80043fe <_strtod_l+0xb96>
 80043b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80043ba:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80043be:	d81e      	bhi.n	80043fe <_strtod_l+0xb96>
 80043c0:	a325      	add	r3, pc, #148	; (adr r3, 8004458 <_strtod_l+0xbf0>)
 80043c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c6:	4620      	mov	r0, r4
 80043c8:	4629      	mov	r1, r5
 80043ca:	f7fc fb11 	bl	80009f0 <__aeabi_dcmple>
 80043ce:	b190      	cbz	r0, 80043f6 <_strtod_l+0xb8e>
 80043d0:	4629      	mov	r1, r5
 80043d2:	4620      	mov	r0, r4
 80043d4:	f7fc fb68 	bl	8000aa8 <__aeabi_d2uiz>
 80043d8:	2800      	cmp	r0, #0
 80043da:	bf08      	it	eq
 80043dc:	2001      	moveq	r0, #1
 80043de:	f7fc f811 	bl	8000404 <__aeabi_ui2d>
 80043e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80043e4:	4604      	mov	r4, r0
 80043e6:	460d      	mov	r5, r1
 80043e8:	b9d3      	cbnz	r3, 8004420 <_strtod_l+0xbb8>
 80043ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80043ee:	9012      	str	r0, [sp, #72]	; 0x48
 80043f0:	9313      	str	r3, [sp, #76]	; 0x4c
 80043f2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80043f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80043f8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80043fc:	1a9f      	subs	r7, r3, r2
 80043fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004402:	f001 fd59 	bl	8005eb8 <__ulp>
 8004406:	4602      	mov	r2, r0
 8004408:	460b      	mov	r3, r1
 800440a:	4630      	mov	r0, r6
 800440c:	4639      	mov	r1, r7
 800440e:	f7fc f873 	bl	80004f8 <__aeabi_dmul>
 8004412:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004416:	f7fb feb9 	bl	800018c <__adddf3>
 800441a:	4681      	mov	r9, r0
 800441c:	468a      	mov	sl, r1
 800441e:	e777      	b.n	8004310 <_strtod_l+0xaa8>
 8004420:	4602      	mov	r2, r0
 8004422:	460b      	mov	r3, r1
 8004424:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004428:	e7e3      	b.n	80043f2 <_strtod_l+0xb8a>
 800442a:	a30d      	add	r3, pc, #52	; (adr r3, 8004460 <_strtod_l+0xbf8>)
 800442c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004430:	f7fc fad4 	bl	80009dc <__aeabi_dcmplt>
 8004434:	e79f      	b.n	8004376 <_strtod_l+0xb0e>
 8004436:	2300      	movs	r3, #0
 8004438:	930d      	str	r3, [sp, #52]	; 0x34
 800443a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800443c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800443e:	6013      	str	r3, [r2, #0]
 8004440:	f7ff ba55 	b.w	80038ee <_strtod_l+0x86>
 8004444:	2b65      	cmp	r3, #101	; 0x65
 8004446:	f04f 0200 	mov.w	r2, #0
 800444a:	f43f ab42 	beq.w	8003ad2 <_strtod_l+0x26a>
 800444e:	2101      	movs	r1, #1
 8004450:	4614      	mov	r4, r2
 8004452:	9105      	str	r1, [sp, #20]
 8004454:	f7ff babf 	b.w	80039d6 <_strtod_l+0x16e>
 8004458:	ffc00000 	.word	0xffc00000
 800445c:	41dfffff 	.word	0x41dfffff
 8004460:	94a03595 	.word	0x94a03595
 8004464:	3fcfffff 	.word	0x3fcfffff

08004468 <_strtod_r>:
 8004468:	4b05      	ldr	r3, [pc, #20]	; (8004480 <_strtod_r+0x18>)
 800446a:	b410      	push	{r4}
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4c05      	ldr	r4, [pc, #20]	; (8004484 <_strtod_r+0x1c>)
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	2b00      	cmp	r3, #0
 8004474:	bf08      	it	eq
 8004476:	4623      	moveq	r3, r4
 8004478:	bc10      	pop	{r4}
 800447a:	f7ff b9f5 	b.w	8003868 <_strtod_l>
 800447e:	bf00      	nop
 8004480:	20000004 	.word	0x20000004
 8004484:	20000068 	.word	0x20000068

08004488 <_strtol_l.isra.0>:
 8004488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800448c:	4680      	mov	r8, r0
 800448e:	4689      	mov	r9, r1
 8004490:	4692      	mov	sl, r2
 8004492:	461e      	mov	r6, r3
 8004494:	460f      	mov	r7, r1
 8004496:	463d      	mov	r5, r7
 8004498:	9808      	ldr	r0, [sp, #32]
 800449a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800449e:	f001 f9eb 	bl	8005878 <__locale_ctype_ptr_l>
 80044a2:	4420      	add	r0, r4
 80044a4:	7843      	ldrb	r3, [r0, #1]
 80044a6:	f013 0308 	ands.w	r3, r3, #8
 80044aa:	d132      	bne.n	8004512 <_strtol_l.isra.0+0x8a>
 80044ac:	2c2d      	cmp	r4, #45	; 0x2d
 80044ae:	d132      	bne.n	8004516 <_strtol_l.isra.0+0x8e>
 80044b0:	2201      	movs	r2, #1
 80044b2:	787c      	ldrb	r4, [r7, #1]
 80044b4:	1cbd      	adds	r5, r7, #2
 80044b6:	2e00      	cmp	r6, #0
 80044b8:	d05d      	beq.n	8004576 <_strtol_l.isra.0+0xee>
 80044ba:	2e10      	cmp	r6, #16
 80044bc:	d109      	bne.n	80044d2 <_strtol_l.isra.0+0x4a>
 80044be:	2c30      	cmp	r4, #48	; 0x30
 80044c0:	d107      	bne.n	80044d2 <_strtol_l.isra.0+0x4a>
 80044c2:	782b      	ldrb	r3, [r5, #0]
 80044c4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80044c8:	2b58      	cmp	r3, #88	; 0x58
 80044ca:	d14f      	bne.n	800456c <_strtol_l.isra.0+0xe4>
 80044cc:	2610      	movs	r6, #16
 80044ce:	786c      	ldrb	r4, [r5, #1]
 80044d0:	3502      	adds	r5, #2
 80044d2:	2a00      	cmp	r2, #0
 80044d4:	bf14      	ite	ne
 80044d6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80044da:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80044de:	2700      	movs	r7, #0
 80044e0:	fbb1 fcf6 	udiv	ip, r1, r6
 80044e4:	4638      	mov	r0, r7
 80044e6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80044ea:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80044ee:	2b09      	cmp	r3, #9
 80044f0:	d817      	bhi.n	8004522 <_strtol_l.isra.0+0x9a>
 80044f2:	461c      	mov	r4, r3
 80044f4:	42a6      	cmp	r6, r4
 80044f6:	dd23      	ble.n	8004540 <_strtol_l.isra.0+0xb8>
 80044f8:	1c7b      	adds	r3, r7, #1
 80044fa:	d007      	beq.n	800450c <_strtol_l.isra.0+0x84>
 80044fc:	4584      	cmp	ip, r0
 80044fe:	d31c      	bcc.n	800453a <_strtol_l.isra.0+0xb2>
 8004500:	d101      	bne.n	8004506 <_strtol_l.isra.0+0x7e>
 8004502:	45a6      	cmp	lr, r4
 8004504:	db19      	blt.n	800453a <_strtol_l.isra.0+0xb2>
 8004506:	2701      	movs	r7, #1
 8004508:	fb00 4006 	mla	r0, r0, r6, r4
 800450c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004510:	e7eb      	b.n	80044ea <_strtol_l.isra.0+0x62>
 8004512:	462f      	mov	r7, r5
 8004514:	e7bf      	b.n	8004496 <_strtol_l.isra.0+0xe>
 8004516:	2c2b      	cmp	r4, #43	; 0x2b
 8004518:	bf04      	itt	eq
 800451a:	1cbd      	addeq	r5, r7, #2
 800451c:	787c      	ldrbeq	r4, [r7, #1]
 800451e:	461a      	mov	r2, r3
 8004520:	e7c9      	b.n	80044b6 <_strtol_l.isra.0+0x2e>
 8004522:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004526:	2b19      	cmp	r3, #25
 8004528:	d801      	bhi.n	800452e <_strtol_l.isra.0+0xa6>
 800452a:	3c37      	subs	r4, #55	; 0x37
 800452c:	e7e2      	b.n	80044f4 <_strtol_l.isra.0+0x6c>
 800452e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8004532:	2b19      	cmp	r3, #25
 8004534:	d804      	bhi.n	8004540 <_strtol_l.isra.0+0xb8>
 8004536:	3c57      	subs	r4, #87	; 0x57
 8004538:	e7dc      	b.n	80044f4 <_strtol_l.isra.0+0x6c>
 800453a:	f04f 37ff 	mov.w	r7, #4294967295
 800453e:	e7e5      	b.n	800450c <_strtol_l.isra.0+0x84>
 8004540:	1c7b      	adds	r3, r7, #1
 8004542:	d108      	bne.n	8004556 <_strtol_l.isra.0+0xce>
 8004544:	2322      	movs	r3, #34	; 0x22
 8004546:	4608      	mov	r0, r1
 8004548:	f8c8 3000 	str.w	r3, [r8]
 800454c:	f1ba 0f00 	cmp.w	sl, #0
 8004550:	d107      	bne.n	8004562 <_strtol_l.isra.0+0xda>
 8004552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004556:	b102      	cbz	r2, 800455a <_strtol_l.isra.0+0xd2>
 8004558:	4240      	negs	r0, r0
 800455a:	f1ba 0f00 	cmp.w	sl, #0
 800455e:	d0f8      	beq.n	8004552 <_strtol_l.isra.0+0xca>
 8004560:	b10f      	cbz	r7, 8004566 <_strtol_l.isra.0+0xde>
 8004562:	f105 39ff 	add.w	r9, r5, #4294967295
 8004566:	f8ca 9000 	str.w	r9, [sl]
 800456a:	e7f2      	b.n	8004552 <_strtol_l.isra.0+0xca>
 800456c:	2430      	movs	r4, #48	; 0x30
 800456e:	2e00      	cmp	r6, #0
 8004570:	d1af      	bne.n	80044d2 <_strtol_l.isra.0+0x4a>
 8004572:	2608      	movs	r6, #8
 8004574:	e7ad      	b.n	80044d2 <_strtol_l.isra.0+0x4a>
 8004576:	2c30      	cmp	r4, #48	; 0x30
 8004578:	d0a3      	beq.n	80044c2 <_strtol_l.isra.0+0x3a>
 800457a:	260a      	movs	r6, #10
 800457c:	e7a9      	b.n	80044d2 <_strtol_l.isra.0+0x4a>
	...

08004580 <_strtol_r>:
 8004580:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004582:	4c06      	ldr	r4, [pc, #24]	; (800459c <_strtol_r+0x1c>)
 8004584:	4d06      	ldr	r5, [pc, #24]	; (80045a0 <_strtol_r+0x20>)
 8004586:	6824      	ldr	r4, [r4, #0]
 8004588:	6a24      	ldr	r4, [r4, #32]
 800458a:	2c00      	cmp	r4, #0
 800458c:	bf08      	it	eq
 800458e:	462c      	moveq	r4, r5
 8004590:	9400      	str	r4, [sp, #0]
 8004592:	f7ff ff79 	bl	8004488 <_strtol_l.isra.0>
 8004596:	b003      	add	sp, #12
 8004598:	bd30      	pop	{r4, r5, pc}
 800459a:	bf00      	nop
 800459c:	20000004 	.word	0x20000004
 80045a0:	20000068 	.word	0x20000068

080045a4 <quorem>:
 80045a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045a8:	6903      	ldr	r3, [r0, #16]
 80045aa:	690c      	ldr	r4, [r1, #16]
 80045ac:	4680      	mov	r8, r0
 80045ae:	42a3      	cmp	r3, r4
 80045b0:	f2c0 8084 	blt.w	80046bc <quorem+0x118>
 80045b4:	3c01      	subs	r4, #1
 80045b6:	f101 0714 	add.w	r7, r1, #20
 80045ba:	f100 0614 	add.w	r6, r0, #20
 80045be:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80045c2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80045c6:	3501      	adds	r5, #1
 80045c8:	fbb0 f5f5 	udiv	r5, r0, r5
 80045cc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80045d0:	eb06 030c 	add.w	r3, r6, ip
 80045d4:	eb07 090c 	add.w	r9, r7, ip
 80045d8:	9301      	str	r3, [sp, #4]
 80045da:	b39d      	cbz	r5, 8004644 <quorem+0xa0>
 80045dc:	f04f 0a00 	mov.w	sl, #0
 80045e0:	4638      	mov	r0, r7
 80045e2:	46b6      	mov	lr, r6
 80045e4:	46d3      	mov	fp, sl
 80045e6:	f850 2b04 	ldr.w	r2, [r0], #4
 80045ea:	b293      	uxth	r3, r2
 80045ec:	fb05 a303 	mla	r3, r5, r3, sl
 80045f0:	0c12      	lsrs	r2, r2, #16
 80045f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80045f6:	fb05 a202 	mla	r2, r5, r2, sl
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	ebab 0303 	sub.w	r3, fp, r3
 8004600:	f8de b000 	ldr.w	fp, [lr]
 8004604:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004608:	fa1f fb8b 	uxth.w	fp, fp
 800460c:	445b      	add	r3, fp
 800460e:	fa1f fb82 	uxth.w	fp, r2
 8004612:	f8de 2000 	ldr.w	r2, [lr]
 8004616:	4581      	cmp	r9, r0
 8004618:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800461c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004620:	b29b      	uxth	r3, r3
 8004622:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004626:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800462a:	f84e 3b04 	str.w	r3, [lr], #4
 800462e:	d2da      	bcs.n	80045e6 <quorem+0x42>
 8004630:	f856 300c 	ldr.w	r3, [r6, ip]
 8004634:	b933      	cbnz	r3, 8004644 <quorem+0xa0>
 8004636:	9b01      	ldr	r3, [sp, #4]
 8004638:	3b04      	subs	r3, #4
 800463a:	429e      	cmp	r6, r3
 800463c:	461a      	mov	r2, r3
 800463e:	d331      	bcc.n	80046a4 <quorem+0x100>
 8004640:	f8c8 4010 	str.w	r4, [r8, #16]
 8004644:	4640      	mov	r0, r8
 8004646:	f001 fbbf 	bl	8005dc8 <__mcmp>
 800464a:	2800      	cmp	r0, #0
 800464c:	db26      	blt.n	800469c <quorem+0xf8>
 800464e:	4630      	mov	r0, r6
 8004650:	f04f 0c00 	mov.w	ip, #0
 8004654:	3501      	adds	r5, #1
 8004656:	f857 1b04 	ldr.w	r1, [r7], #4
 800465a:	f8d0 e000 	ldr.w	lr, [r0]
 800465e:	b28b      	uxth	r3, r1
 8004660:	ebac 0303 	sub.w	r3, ip, r3
 8004664:	fa1f f28e 	uxth.w	r2, lr
 8004668:	4413      	add	r3, r2
 800466a:	0c0a      	lsrs	r2, r1, #16
 800466c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004670:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004674:	b29b      	uxth	r3, r3
 8004676:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800467a:	45b9      	cmp	r9, r7
 800467c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004680:	f840 3b04 	str.w	r3, [r0], #4
 8004684:	d2e7      	bcs.n	8004656 <quorem+0xb2>
 8004686:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800468a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800468e:	b92a      	cbnz	r2, 800469c <quorem+0xf8>
 8004690:	3b04      	subs	r3, #4
 8004692:	429e      	cmp	r6, r3
 8004694:	461a      	mov	r2, r3
 8004696:	d30b      	bcc.n	80046b0 <quorem+0x10c>
 8004698:	f8c8 4010 	str.w	r4, [r8, #16]
 800469c:	4628      	mov	r0, r5
 800469e:	b003      	add	sp, #12
 80046a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046a4:	6812      	ldr	r2, [r2, #0]
 80046a6:	3b04      	subs	r3, #4
 80046a8:	2a00      	cmp	r2, #0
 80046aa:	d1c9      	bne.n	8004640 <quorem+0x9c>
 80046ac:	3c01      	subs	r4, #1
 80046ae:	e7c4      	b.n	800463a <quorem+0x96>
 80046b0:	6812      	ldr	r2, [r2, #0]
 80046b2:	3b04      	subs	r3, #4
 80046b4:	2a00      	cmp	r2, #0
 80046b6:	d1ef      	bne.n	8004698 <quorem+0xf4>
 80046b8:	3c01      	subs	r4, #1
 80046ba:	e7ea      	b.n	8004692 <quorem+0xee>
 80046bc:	2000      	movs	r0, #0
 80046be:	e7ee      	b.n	800469e <quorem+0xfa>

080046c0 <_dtoa_r>:
 80046c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046c4:	4616      	mov	r6, r2
 80046c6:	461f      	mov	r7, r3
 80046c8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80046ca:	b095      	sub	sp, #84	; 0x54
 80046cc:	4604      	mov	r4, r0
 80046ce:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80046d2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80046d6:	b93d      	cbnz	r5, 80046e8 <_dtoa_r+0x28>
 80046d8:	2010      	movs	r0, #16
 80046da:	f001 f8ef 	bl	80058bc <malloc>
 80046de:	6260      	str	r0, [r4, #36]	; 0x24
 80046e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80046e4:	6005      	str	r5, [r0, #0]
 80046e6:	60c5      	str	r5, [r0, #12]
 80046e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80046ea:	6819      	ldr	r1, [r3, #0]
 80046ec:	b151      	cbz	r1, 8004704 <_dtoa_r+0x44>
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	2301      	movs	r3, #1
 80046f2:	4093      	lsls	r3, r2
 80046f4:	604a      	str	r2, [r1, #4]
 80046f6:	608b      	str	r3, [r1, #8]
 80046f8:	4620      	mov	r0, r4
 80046fa:	f001 f946 	bl	800598a <_Bfree>
 80046fe:	2200      	movs	r2, #0
 8004700:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	1e3b      	subs	r3, r7, #0
 8004706:	bfaf      	iteee	ge
 8004708:	2300      	movge	r3, #0
 800470a:	2201      	movlt	r2, #1
 800470c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004710:	9303      	strlt	r3, [sp, #12]
 8004712:	bfac      	ite	ge
 8004714:	f8c8 3000 	strge.w	r3, [r8]
 8004718:	f8c8 2000 	strlt.w	r2, [r8]
 800471c:	4bae      	ldr	r3, [pc, #696]	; (80049d8 <_dtoa_r+0x318>)
 800471e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004722:	ea33 0308 	bics.w	r3, r3, r8
 8004726:	d11b      	bne.n	8004760 <_dtoa_r+0xa0>
 8004728:	f242 730f 	movw	r3, #9999	; 0x270f
 800472c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800472e:	6013      	str	r3, [r2, #0]
 8004730:	9b02      	ldr	r3, [sp, #8]
 8004732:	b923      	cbnz	r3, 800473e <_dtoa_r+0x7e>
 8004734:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004738:	2800      	cmp	r0, #0
 800473a:	f000 8545 	beq.w	80051c8 <_dtoa_r+0xb08>
 800473e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004740:	b953      	cbnz	r3, 8004758 <_dtoa_r+0x98>
 8004742:	4ba6      	ldr	r3, [pc, #664]	; (80049dc <_dtoa_r+0x31c>)
 8004744:	e021      	b.n	800478a <_dtoa_r+0xca>
 8004746:	4ba6      	ldr	r3, [pc, #664]	; (80049e0 <_dtoa_r+0x320>)
 8004748:	9306      	str	r3, [sp, #24]
 800474a:	3308      	adds	r3, #8
 800474c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800474e:	6013      	str	r3, [r2, #0]
 8004750:	9806      	ldr	r0, [sp, #24]
 8004752:	b015      	add	sp, #84	; 0x54
 8004754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004758:	4ba0      	ldr	r3, [pc, #640]	; (80049dc <_dtoa_r+0x31c>)
 800475a:	9306      	str	r3, [sp, #24]
 800475c:	3303      	adds	r3, #3
 800475e:	e7f5      	b.n	800474c <_dtoa_r+0x8c>
 8004760:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004764:	2200      	movs	r2, #0
 8004766:	2300      	movs	r3, #0
 8004768:	4630      	mov	r0, r6
 800476a:	4639      	mov	r1, r7
 800476c:	f7fc f92c 	bl	80009c8 <__aeabi_dcmpeq>
 8004770:	4682      	mov	sl, r0
 8004772:	b160      	cbz	r0, 800478e <_dtoa_r+0xce>
 8004774:	2301      	movs	r3, #1
 8004776:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 8520 	beq.w	80051c2 <_dtoa_r+0xb02>
 8004782:	4b98      	ldr	r3, [pc, #608]	; (80049e4 <_dtoa_r+0x324>)
 8004784:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004786:	6013      	str	r3, [r2, #0]
 8004788:	3b01      	subs	r3, #1
 800478a:	9306      	str	r3, [sp, #24]
 800478c:	e7e0      	b.n	8004750 <_dtoa_r+0x90>
 800478e:	ab12      	add	r3, sp, #72	; 0x48
 8004790:	9301      	str	r3, [sp, #4]
 8004792:	ab13      	add	r3, sp, #76	; 0x4c
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	4632      	mov	r2, r6
 8004798:	463b      	mov	r3, r7
 800479a:	4620      	mov	r0, r4
 800479c:	f001 fc02 	bl	8005fa4 <__d2b>
 80047a0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80047a4:	4683      	mov	fp, r0
 80047a6:	2d00      	cmp	r5, #0
 80047a8:	d07d      	beq.n	80048a6 <_dtoa_r+0x1e6>
 80047aa:	46b0      	mov	r8, r6
 80047ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80047b0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80047b4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80047b8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80047bc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80047c0:	2200      	movs	r2, #0
 80047c2:	4b89      	ldr	r3, [pc, #548]	; (80049e8 <_dtoa_r+0x328>)
 80047c4:	4640      	mov	r0, r8
 80047c6:	4649      	mov	r1, r9
 80047c8:	f7fb fcde 	bl	8000188 <__aeabi_dsub>
 80047cc:	a37c      	add	r3, pc, #496	; (adr r3, 80049c0 <_dtoa_r+0x300>)
 80047ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d2:	f7fb fe91 	bl	80004f8 <__aeabi_dmul>
 80047d6:	a37c      	add	r3, pc, #496	; (adr r3, 80049c8 <_dtoa_r+0x308>)
 80047d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047dc:	f7fb fcd6 	bl	800018c <__adddf3>
 80047e0:	4606      	mov	r6, r0
 80047e2:	4628      	mov	r0, r5
 80047e4:	460f      	mov	r7, r1
 80047e6:	f7fb fe1d 	bl	8000424 <__aeabi_i2d>
 80047ea:	a379      	add	r3, pc, #484	; (adr r3, 80049d0 <_dtoa_r+0x310>)
 80047ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f0:	f7fb fe82 	bl	80004f8 <__aeabi_dmul>
 80047f4:	4602      	mov	r2, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	4630      	mov	r0, r6
 80047fa:	4639      	mov	r1, r7
 80047fc:	f7fb fcc6 	bl	800018c <__adddf3>
 8004800:	4606      	mov	r6, r0
 8004802:	460f      	mov	r7, r1
 8004804:	f7fc f928 	bl	8000a58 <__aeabi_d2iz>
 8004808:	2200      	movs	r2, #0
 800480a:	4682      	mov	sl, r0
 800480c:	2300      	movs	r3, #0
 800480e:	4630      	mov	r0, r6
 8004810:	4639      	mov	r1, r7
 8004812:	f7fc f8e3 	bl	80009dc <__aeabi_dcmplt>
 8004816:	b148      	cbz	r0, 800482c <_dtoa_r+0x16c>
 8004818:	4650      	mov	r0, sl
 800481a:	f7fb fe03 	bl	8000424 <__aeabi_i2d>
 800481e:	4632      	mov	r2, r6
 8004820:	463b      	mov	r3, r7
 8004822:	f7fc f8d1 	bl	80009c8 <__aeabi_dcmpeq>
 8004826:	b908      	cbnz	r0, 800482c <_dtoa_r+0x16c>
 8004828:	f10a 3aff 	add.w	sl, sl, #4294967295
 800482c:	f1ba 0f16 	cmp.w	sl, #22
 8004830:	d85a      	bhi.n	80048e8 <_dtoa_r+0x228>
 8004832:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004836:	496d      	ldr	r1, [pc, #436]	; (80049ec <_dtoa_r+0x32c>)
 8004838:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800483c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004840:	f7fc f8ea 	bl	8000a18 <__aeabi_dcmpgt>
 8004844:	2800      	cmp	r0, #0
 8004846:	d051      	beq.n	80048ec <_dtoa_r+0x22c>
 8004848:	2300      	movs	r3, #0
 800484a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800484e:	930d      	str	r3, [sp, #52]	; 0x34
 8004850:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004852:	1b5d      	subs	r5, r3, r5
 8004854:	1e6b      	subs	r3, r5, #1
 8004856:	9307      	str	r3, [sp, #28]
 8004858:	bf43      	ittte	mi
 800485a:	2300      	movmi	r3, #0
 800485c:	f1c5 0901 	rsbmi	r9, r5, #1
 8004860:	9307      	strmi	r3, [sp, #28]
 8004862:	f04f 0900 	movpl.w	r9, #0
 8004866:	f1ba 0f00 	cmp.w	sl, #0
 800486a:	db41      	blt.n	80048f0 <_dtoa_r+0x230>
 800486c:	9b07      	ldr	r3, [sp, #28]
 800486e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004872:	4453      	add	r3, sl
 8004874:	9307      	str	r3, [sp, #28]
 8004876:	2300      	movs	r3, #0
 8004878:	9308      	str	r3, [sp, #32]
 800487a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800487c:	2b09      	cmp	r3, #9
 800487e:	f200 808f 	bhi.w	80049a0 <_dtoa_r+0x2e0>
 8004882:	2b05      	cmp	r3, #5
 8004884:	bfc4      	itt	gt
 8004886:	3b04      	subgt	r3, #4
 8004888:	931e      	strgt	r3, [sp, #120]	; 0x78
 800488a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800488c:	bfc8      	it	gt
 800488e:	2500      	movgt	r5, #0
 8004890:	f1a3 0302 	sub.w	r3, r3, #2
 8004894:	bfd8      	it	le
 8004896:	2501      	movle	r5, #1
 8004898:	2b03      	cmp	r3, #3
 800489a:	f200 808d 	bhi.w	80049b8 <_dtoa_r+0x2f8>
 800489e:	e8df f003 	tbb	[pc, r3]
 80048a2:	7d7b      	.short	0x7d7b
 80048a4:	6f2f      	.short	0x6f2f
 80048a6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80048aa:	441d      	add	r5, r3
 80048ac:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80048b0:	2820      	cmp	r0, #32
 80048b2:	dd13      	ble.n	80048dc <_dtoa_r+0x21c>
 80048b4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80048b8:	9b02      	ldr	r3, [sp, #8]
 80048ba:	fa08 f800 	lsl.w	r8, r8, r0
 80048be:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80048c2:	fa23 f000 	lsr.w	r0, r3, r0
 80048c6:	ea48 0000 	orr.w	r0, r8, r0
 80048ca:	f7fb fd9b 	bl	8000404 <__aeabi_ui2d>
 80048ce:	2301      	movs	r3, #1
 80048d0:	4680      	mov	r8, r0
 80048d2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80048d6:	3d01      	subs	r5, #1
 80048d8:	9310      	str	r3, [sp, #64]	; 0x40
 80048da:	e771      	b.n	80047c0 <_dtoa_r+0x100>
 80048dc:	9b02      	ldr	r3, [sp, #8]
 80048de:	f1c0 0020 	rsb	r0, r0, #32
 80048e2:	fa03 f000 	lsl.w	r0, r3, r0
 80048e6:	e7f0      	b.n	80048ca <_dtoa_r+0x20a>
 80048e8:	2301      	movs	r3, #1
 80048ea:	e7b0      	b.n	800484e <_dtoa_r+0x18e>
 80048ec:	900d      	str	r0, [sp, #52]	; 0x34
 80048ee:	e7af      	b.n	8004850 <_dtoa_r+0x190>
 80048f0:	f1ca 0300 	rsb	r3, sl, #0
 80048f4:	9308      	str	r3, [sp, #32]
 80048f6:	2300      	movs	r3, #0
 80048f8:	eba9 090a 	sub.w	r9, r9, sl
 80048fc:	930c      	str	r3, [sp, #48]	; 0x30
 80048fe:	e7bc      	b.n	800487a <_dtoa_r+0x1ba>
 8004900:	2301      	movs	r3, #1
 8004902:	9309      	str	r3, [sp, #36]	; 0x24
 8004904:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004906:	2b00      	cmp	r3, #0
 8004908:	dd74      	ble.n	80049f4 <_dtoa_r+0x334>
 800490a:	4698      	mov	r8, r3
 800490c:	9304      	str	r3, [sp, #16]
 800490e:	2200      	movs	r2, #0
 8004910:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004912:	6072      	str	r2, [r6, #4]
 8004914:	2204      	movs	r2, #4
 8004916:	f102 0014 	add.w	r0, r2, #20
 800491a:	4298      	cmp	r0, r3
 800491c:	6871      	ldr	r1, [r6, #4]
 800491e:	d96e      	bls.n	80049fe <_dtoa_r+0x33e>
 8004920:	4620      	mov	r0, r4
 8004922:	f000 fffe 	bl	8005922 <_Balloc>
 8004926:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004928:	6030      	str	r0, [r6, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f1b8 0f0e 	cmp.w	r8, #14
 8004930:	9306      	str	r3, [sp, #24]
 8004932:	f200 80ed 	bhi.w	8004b10 <_dtoa_r+0x450>
 8004936:	2d00      	cmp	r5, #0
 8004938:	f000 80ea 	beq.w	8004b10 <_dtoa_r+0x450>
 800493c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004940:	f1ba 0f00 	cmp.w	sl, #0
 8004944:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004948:	dd77      	ble.n	8004a3a <_dtoa_r+0x37a>
 800494a:	4a28      	ldr	r2, [pc, #160]	; (80049ec <_dtoa_r+0x32c>)
 800494c:	f00a 030f 	and.w	r3, sl, #15
 8004950:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004954:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004958:	06f0      	lsls	r0, r6, #27
 800495a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004962:	d568      	bpl.n	8004a36 <_dtoa_r+0x376>
 8004964:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004968:	4b21      	ldr	r3, [pc, #132]	; (80049f0 <_dtoa_r+0x330>)
 800496a:	2503      	movs	r5, #3
 800496c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004970:	f7fb feec 	bl	800074c <__aeabi_ddiv>
 8004974:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004978:	f006 060f 	and.w	r6, r6, #15
 800497c:	4f1c      	ldr	r7, [pc, #112]	; (80049f0 <_dtoa_r+0x330>)
 800497e:	e04f      	b.n	8004a20 <_dtoa_r+0x360>
 8004980:	2301      	movs	r3, #1
 8004982:	9309      	str	r3, [sp, #36]	; 0x24
 8004984:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004986:	4453      	add	r3, sl
 8004988:	f103 0801 	add.w	r8, r3, #1
 800498c:	9304      	str	r3, [sp, #16]
 800498e:	4643      	mov	r3, r8
 8004990:	2b01      	cmp	r3, #1
 8004992:	bfb8      	it	lt
 8004994:	2301      	movlt	r3, #1
 8004996:	e7ba      	b.n	800490e <_dtoa_r+0x24e>
 8004998:	2300      	movs	r3, #0
 800499a:	e7b2      	b.n	8004902 <_dtoa_r+0x242>
 800499c:	2300      	movs	r3, #0
 800499e:	e7f0      	b.n	8004982 <_dtoa_r+0x2c2>
 80049a0:	2501      	movs	r5, #1
 80049a2:	2300      	movs	r3, #0
 80049a4:	9509      	str	r5, [sp, #36]	; 0x24
 80049a6:	931e      	str	r3, [sp, #120]	; 0x78
 80049a8:	f04f 33ff 	mov.w	r3, #4294967295
 80049ac:	2200      	movs	r2, #0
 80049ae:	9304      	str	r3, [sp, #16]
 80049b0:	4698      	mov	r8, r3
 80049b2:	2312      	movs	r3, #18
 80049b4:	921f      	str	r2, [sp, #124]	; 0x7c
 80049b6:	e7aa      	b.n	800490e <_dtoa_r+0x24e>
 80049b8:	2301      	movs	r3, #1
 80049ba:	9309      	str	r3, [sp, #36]	; 0x24
 80049bc:	e7f4      	b.n	80049a8 <_dtoa_r+0x2e8>
 80049be:	bf00      	nop
 80049c0:	636f4361 	.word	0x636f4361
 80049c4:	3fd287a7 	.word	0x3fd287a7
 80049c8:	8b60c8b3 	.word	0x8b60c8b3
 80049cc:	3fc68a28 	.word	0x3fc68a28
 80049d0:	509f79fb 	.word	0x509f79fb
 80049d4:	3fd34413 	.word	0x3fd34413
 80049d8:	7ff00000 	.word	0x7ff00000
 80049dc:	08009b11 	.word	0x08009b11
 80049e0:	08009b08 	.word	0x08009b08
 80049e4:	08009c44 	.word	0x08009c44
 80049e8:	3ff80000 	.word	0x3ff80000
 80049ec:	08009b48 	.word	0x08009b48
 80049f0:	08009b20 	.word	0x08009b20
 80049f4:	2301      	movs	r3, #1
 80049f6:	9304      	str	r3, [sp, #16]
 80049f8:	4698      	mov	r8, r3
 80049fa:	461a      	mov	r2, r3
 80049fc:	e7da      	b.n	80049b4 <_dtoa_r+0x2f4>
 80049fe:	3101      	adds	r1, #1
 8004a00:	6071      	str	r1, [r6, #4]
 8004a02:	0052      	lsls	r2, r2, #1
 8004a04:	e787      	b.n	8004916 <_dtoa_r+0x256>
 8004a06:	07f1      	lsls	r1, r6, #31
 8004a08:	d508      	bpl.n	8004a1c <_dtoa_r+0x35c>
 8004a0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004a0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a12:	f7fb fd71 	bl	80004f8 <__aeabi_dmul>
 8004a16:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004a1a:	3501      	adds	r5, #1
 8004a1c:	1076      	asrs	r6, r6, #1
 8004a1e:	3708      	adds	r7, #8
 8004a20:	2e00      	cmp	r6, #0
 8004a22:	d1f0      	bne.n	8004a06 <_dtoa_r+0x346>
 8004a24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004a28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a2c:	f7fb fe8e 	bl	800074c <__aeabi_ddiv>
 8004a30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a34:	e01b      	b.n	8004a6e <_dtoa_r+0x3ae>
 8004a36:	2502      	movs	r5, #2
 8004a38:	e7a0      	b.n	800497c <_dtoa_r+0x2bc>
 8004a3a:	f000 80a4 	beq.w	8004b86 <_dtoa_r+0x4c6>
 8004a3e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004a42:	f1ca 0600 	rsb	r6, sl, #0
 8004a46:	4ba0      	ldr	r3, [pc, #640]	; (8004cc8 <_dtoa_r+0x608>)
 8004a48:	f006 020f 	and.w	r2, r6, #15
 8004a4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a54:	f7fb fd50 	bl	80004f8 <__aeabi_dmul>
 8004a58:	2502      	movs	r5, #2
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a60:	4f9a      	ldr	r7, [pc, #616]	; (8004ccc <_dtoa_r+0x60c>)
 8004a62:	1136      	asrs	r6, r6, #4
 8004a64:	2e00      	cmp	r6, #0
 8004a66:	f040 8083 	bne.w	8004b70 <_dtoa_r+0x4b0>
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1e0      	bne.n	8004a30 <_dtoa_r+0x370>
 8004a6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 808a 	beq.w	8004b8a <_dtoa_r+0x4ca>
 8004a76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a7a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004a7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004a82:	2200      	movs	r2, #0
 8004a84:	4b92      	ldr	r3, [pc, #584]	; (8004cd0 <_dtoa_r+0x610>)
 8004a86:	f7fb ffa9 	bl	80009dc <__aeabi_dcmplt>
 8004a8a:	2800      	cmp	r0, #0
 8004a8c:	d07d      	beq.n	8004b8a <_dtoa_r+0x4ca>
 8004a8e:	f1b8 0f00 	cmp.w	r8, #0
 8004a92:	d07a      	beq.n	8004b8a <_dtoa_r+0x4ca>
 8004a94:	9b04      	ldr	r3, [sp, #16]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	dd36      	ble.n	8004b08 <_dtoa_r+0x448>
 8004a9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	4b8c      	ldr	r3, [pc, #560]	; (8004cd4 <_dtoa_r+0x614>)
 8004aa2:	f7fb fd29 	bl	80004f8 <__aeabi_dmul>
 8004aa6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004aaa:	9e04      	ldr	r6, [sp, #16]
 8004aac:	f10a 37ff 	add.w	r7, sl, #4294967295
 8004ab0:	3501      	adds	r5, #1
 8004ab2:	4628      	mov	r0, r5
 8004ab4:	f7fb fcb6 	bl	8000424 <__aeabi_i2d>
 8004ab8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004abc:	f7fb fd1c 	bl	80004f8 <__aeabi_dmul>
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	4b85      	ldr	r3, [pc, #532]	; (8004cd8 <_dtoa_r+0x618>)
 8004ac4:	f7fb fb62 	bl	800018c <__adddf3>
 8004ac8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8004acc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004ad0:	950b      	str	r5, [sp, #44]	; 0x2c
 8004ad2:	2e00      	cmp	r6, #0
 8004ad4:	d15c      	bne.n	8004b90 <_dtoa_r+0x4d0>
 8004ad6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ada:	2200      	movs	r2, #0
 8004adc:	4b7f      	ldr	r3, [pc, #508]	; (8004cdc <_dtoa_r+0x61c>)
 8004ade:	f7fb fb53 	bl	8000188 <__aeabi_dsub>
 8004ae2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ae4:	462b      	mov	r3, r5
 8004ae6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004aea:	f7fb ff95 	bl	8000a18 <__aeabi_dcmpgt>
 8004aee:	2800      	cmp	r0, #0
 8004af0:	f040 8281 	bne.w	8004ff6 <_dtoa_r+0x936>
 8004af4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004af8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004afa:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004afe:	f7fb ff6d 	bl	80009dc <__aeabi_dcmplt>
 8004b02:	2800      	cmp	r0, #0
 8004b04:	f040 8275 	bne.w	8004ff2 <_dtoa_r+0x932>
 8004b08:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004b0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004b10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f2c0 814b 	blt.w	8004dae <_dtoa_r+0x6ee>
 8004b18:	f1ba 0f0e 	cmp.w	sl, #14
 8004b1c:	f300 8147 	bgt.w	8004dae <_dtoa_r+0x6ee>
 8004b20:	4b69      	ldr	r3, [pc, #420]	; (8004cc8 <_dtoa_r+0x608>)
 8004b22:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004b2e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f280 80d7 	bge.w	8004ce4 <_dtoa_r+0x624>
 8004b36:	f1b8 0f00 	cmp.w	r8, #0
 8004b3a:	f300 80d3 	bgt.w	8004ce4 <_dtoa_r+0x624>
 8004b3e:	f040 8257 	bne.w	8004ff0 <_dtoa_r+0x930>
 8004b42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b46:	2200      	movs	r2, #0
 8004b48:	4b64      	ldr	r3, [pc, #400]	; (8004cdc <_dtoa_r+0x61c>)
 8004b4a:	f7fb fcd5 	bl	80004f8 <__aeabi_dmul>
 8004b4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b52:	f7fb ff57 	bl	8000a04 <__aeabi_dcmpge>
 8004b56:	4646      	mov	r6, r8
 8004b58:	4647      	mov	r7, r8
 8004b5a:	2800      	cmp	r0, #0
 8004b5c:	f040 822d 	bne.w	8004fba <_dtoa_r+0x8fa>
 8004b60:	9b06      	ldr	r3, [sp, #24]
 8004b62:	9a06      	ldr	r2, [sp, #24]
 8004b64:	1c5d      	adds	r5, r3, #1
 8004b66:	2331      	movs	r3, #49	; 0x31
 8004b68:	f10a 0a01 	add.w	sl, sl, #1
 8004b6c:	7013      	strb	r3, [r2, #0]
 8004b6e:	e228      	b.n	8004fc2 <_dtoa_r+0x902>
 8004b70:	07f2      	lsls	r2, r6, #31
 8004b72:	d505      	bpl.n	8004b80 <_dtoa_r+0x4c0>
 8004b74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b78:	f7fb fcbe 	bl	80004f8 <__aeabi_dmul>
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	3501      	adds	r5, #1
 8004b80:	1076      	asrs	r6, r6, #1
 8004b82:	3708      	adds	r7, #8
 8004b84:	e76e      	b.n	8004a64 <_dtoa_r+0x3a4>
 8004b86:	2502      	movs	r5, #2
 8004b88:	e771      	b.n	8004a6e <_dtoa_r+0x3ae>
 8004b8a:	4657      	mov	r7, sl
 8004b8c:	4646      	mov	r6, r8
 8004b8e:	e790      	b.n	8004ab2 <_dtoa_r+0x3f2>
 8004b90:	4b4d      	ldr	r3, [pc, #308]	; (8004cc8 <_dtoa_r+0x608>)
 8004b92:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004b96:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004b9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d048      	beq.n	8004c32 <_dtoa_r+0x572>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	2000      	movs	r0, #0
 8004ba6:	494e      	ldr	r1, [pc, #312]	; (8004ce0 <_dtoa_r+0x620>)
 8004ba8:	f7fb fdd0 	bl	800074c <__aeabi_ddiv>
 8004bac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004bb0:	f7fb faea 	bl	8000188 <__aeabi_dsub>
 8004bb4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004bb8:	9d06      	ldr	r5, [sp, #24]
 8004bba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bbe:	f7fb ff4b 	bl	8000a58 <__aeabi_d2iz>
 8004bc2:	9011      	str	r0, [sp, #68]	; 0x44
 8004bc4:	f7fb fc2e 	bl	8000424 <__aeabi_i2d>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	460b      	mov	r3, r1
 8004bcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bd0:	f7fb fada 	bl	8000188 <__aeabi_dsub>
 8004bd4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004bd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bda:	3330      	adds	r3, #48	; 0x30
 8004bdc:	f805 3b01 	strb.w	r3, [r5], #1
 8004be0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004be4:	f7fb fefa 	bl	80009dc <__aeabi_dcmplt>
 8004be8:	2800      	cmp	r0, #0
 8004bea:	d163      	bne.n	8004cb4 <_dtoa_r+0x5f4>
 8004bec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004bf0:	2000      	movs	r0, #0
 8004bf2:	4937      	ldr	r1, [pc, #220]	; (8004cd0 <_dtoa_r+0x610>)
 8004bf4:	f7fb fac8 	bl	8000188 <__aeabi_dsub>
 8004bf8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004bfc:	f7fb feee 	bl	80009dc <__aeabi_dcmplt>
 8004c00:	2800      	cmp	r0, #0
 8004c02:	f040 80b5 	bne.w	8004d70 <_dtoa_r+0x6b0>
 8004c06:	9b06      	ldr	r3, [sp, #24]
 8004c08:	1aeb      	subs	r3, r5, r3
 8004c0a:	429e      	cmp	r6, r3
 8004c0c:	f77f af7c 	ble.w	8004b08 <_dtoa_r+0x448>
 8004c10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004c14:	2200      	movs	r2, #0
 8004c16:	4b2f      	ldr	r3, [pc, #188]	; (8004cd4 <_dtoa_r+0x614>)
 8004c18:	f7fb fc6e 	bl	80004f8 <__aeabi_dmul>
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004c22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c26:	4b2b      	ldr	r3, [pc, #172]	; (8004cd4 <_dtoa_r+0x614>)
 8004c28:	f7fb fc66 	bl	80004f8 <__aeabi_dmul>
 8004c2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c30:	e7c3      	b.n	8004bba <_dtoa_r+0x4fa>
 8004c32:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004c36:	f7fb fc5f 	bl	80004f8 <__aeabi_dmul>
 8004c3a:	9b06      	ldr	r3, [sp, #24]
 8004c3c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004c40:	199d      	adds	r5, r3, r6
 8004c42:	461e      	mov	r6, r3
 8004c44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c48:	f7fb ff06 	bl	8000a58 <__aeabi_d2iz>
 8004c4c:	9011      	str	r0, [sp, #68]	; 0x44
 8004c4e:	f7fb fbe9 	bl	8000424 <__aeabi_i2d>
 8004c52:	4602      	mov	r2, r0
 8004c54:	460b      	mov	r3, r1
 8004c56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c5a:	f7fb fa95 	bl	8000188 <__aeabi_dsub>
 8004c5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c64:	3330      	adds	r3, #48	; 0x30
 8004c66:	f806 3b01 	strb.w	r3, [r6], #1
 8004c6a:	42ae      	cmp	r6, r5
 8004c6c:	f04f 0200 	mov.w	r2, #0
 8004c70:	d124      	bne.n	8004cbc <_dtoa_r+0x5fc>
 8004c72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004c76:	4b1a      	ldr	r3, [pc, #104]	; (8004ce0 <_dtoa_r+0x620>)
 8004c78:	f7fb fa88 	bl	800018c <__adddf3>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	460b      	mov	r3, r1
 8004c80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c84:	f7fb fec8 	bl	8000a18 <__aeabi_dcmpgt>
 8004c88:	2800      	cmp	r0, #0
 8004c8a:	d171      	bne.n	8004d70 <_dtoa_r+0x6b0>
 8004c8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004c90:	2000      	movs	r0, #0
 8004c92:	4913      	ldr	r1, [pc, #76]	; (8004ce0 <_dtoa_r+0x620>)
 8004c94:	f7fb fa78 	bl	8000188 <__aeabi_dsub>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ca0:	f7fb fe9c 	bl	80009dc <__aeabi_dcmplt>
 8004ca4:	2800      	cmp	r0, #0
 8004ca6:	f43f af2f 	beq.w	8004b08 <_dtoa_r+0x448>
 8004caa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004cae:	1e6a      	subs	r2, r5, #1
 8004cb0:	2b30      	cmp	r3, #48	; 0x30
 8004cb2:	d001      	beq.n	8004cb8 <_dtoa_r+0x5f8>
 8004cb4:	46ba      	mov	sl, r7
 8004cb6:	e04a      	b.n	8004d4e <_dtoa_r+0x68e>
 8004cb8:	4615      	mov	r5, r2
 8004cba:	e7f6      	b.n	8004caa <_dtoa_r+0x5ea>
 8004cbc:	4b05      	ldr	r3, [pc, #20]	; (8004cd4 <_dtoa_r+0x614>)
 8004cbe:	f7fb fc1b 	bl	80004f8 <__aeabi_dmul>
 8004cc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004cc6:	e7bd      	b.n	8004c44 <_dtoa_r+0x584>
 8004cc8:	08009b48 	.word	0x08009b48
 8004ccc:	08009b20 	.word	0x08009b20
 8004cd0:	3ff00000 	.word	0x3ff00000
 8004cd4:	40240000 	.word	0x40240000
 8004cd8:	401c0000 	.word	0x401c0000
 8004cdc:	40140000 	.word	0x40140000
 8004ce0:	3fe00000 	.word	0x3fe00000
 8004ce4:	9d06      	ldr	r5, [sp, #24]
 8004ce6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004cea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cee:	4630      	mov	r0, r6
 8004cf0:	4639      	mov	r1, r7
 8004cf2:	f7fb fd2b 	bl	800074c <__aeabi_ddiv>
 8004cf6:	f7fb feaf 	bl	8000a58 <__aeabi_d2iz>
 8004cfa:	4681      	mov	r9, r0
 8004cfc:	f7fb fb92 	bl	8000424 <__aeabi_i2d>
 8004d00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d04:	f7fb fbf8 	bl	80004f8 <__aeabi_dmul>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	4630      	mov	r0, r6
 8004d0e:	4639      	mov	r1, r7
 8004d10:	f7fb fa3a 	bl	8000188 <__aeabi_dsub>
 8004d14:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8004d18:	f805 6b01 	strb.w	r6, [r5], #1
 8004d1c:	9e06      	ldr	r6, [sp, #24]
 8004d1e:	4602      	mov	r2, r0
 8004d20:	1bae      	subs	r6, r5, r6
 8004d22:	45b0      	cmp	r8, r6
 8004d24:	460b      	mov	r3, r1
 8004d26:	d135      	bne.n	8004d94 <_dtoa_r+0x6d4>
 8004d28:	f7fb fa30 	bl	800018c <__adddf3>
 8004d2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d30:	4606      	mov	r6, r0
 8004d32:	460f      	mov	r7, r1
 8004d34:	f7fb fe70 	bl	8000a18 <__aeabi_dcmpgt>
 8004d38:	b9c8      	cbnz	r0, 8004d6e <_dtoa_r+0x6ae>
 8004d3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d3e:	4630      	mov	r0, r6
 8004d40:	4639      	mov	r1, r7
 8004d42:	f7fb fe41 	bl	80009c8 <__aeabi_dcmpeq>
 8004d46:	b110      	cbz	r0, 8004d4e <_dtoa_r+0x68e>
 8004d48:	f019 0f01 	tst.w	r9, #1
 8004d4c:	d10f      	bne.n	8004d6e <_dtoa_r+0x6ae>
 8004d4e:	4659      	mov	r1, fp
 8004d50:	4620      	mov	r0, r4
 8004d52:	f000 fe1a 	bl	800598a <_Bfree>
 8004d56:	2300      	movs	r3, #0
 8004d58:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004d5a:	702b      	strb	r3, [r5, #0]
 8004d5c:	f10a 0301 	add.w	r3, sl, #1
 8004d60:	6013      	str	r3, [r2, #0]
 8004d62:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f43f acf3 	beq.w	8004750 <_dtoa_r+0x90>
 8004d6a:	601d      	str	r5, [r3, #0]
 8004d6c:	e4f0      	b.n	8004750 <_dtoa_r+0x90>
 8004d6e:	4657      	mov	r7, sl
 8004d70:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004d74:	1e6b      	subs	r3, r5, #1
 8004d76:	2a39      	cmp	r2, #57	; 0x39
 8004d78:	d106      	bne.n	8004d88 <_dtoa_r+0x6c8>
 8004d7a:	9a06      	ldr	r2, [sp, #24]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d107      	bne.n	8004d90 <_dtoa_r+0x6d0>
 8004d80:	2330      	movs	r3, #48	; 0x30
 8004d82:	7013      	strb	r3, [r2, #0]
 8004d84:	4613      	mov	r3, r2
 8004d86:	3701      	adds	r7, #1
 8004d88:	781a      	ldrb	r2, [r3, #0]
 8004d8a:	3201      	adds	r2, #1
 8004d8c:	701a      	strb	r2, [r3, #0]
 8004d8e:	e791      	b.n	8004cb4 <_dtoa_r+0x5f4>
 8004d90:	461d      	mov	r5, r3
 8004d92:	e7ed      	b.n	8004d70 <_dtoa_r+0x6b0>
 8004d94:	2200      	movs	r2, #0
 8004d96:	4b99      	ldr	r3, [pc, #612]	; (8004ffc <_dtoa_r+0x93c>)
 8004d98:	f7fb fbae 	bl	80004f8 <__aeabi_dmul>
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	2300      	movs	r3, #0
 8004da0:	4606      	mov	r6, r0
 8004da2:	460f      	mov	r7, r1
 8004da4:	f7fb fe10 	bl	80009c8 <__aeabi_dcmpeq>
 8004da8:	2800      	cmp	r0, #0
 8004daa:	d09e      	beq.n	8004cea <_dtoa_r+0x62a>
 8004dac:	e7cf      	b.n	8004d4e <_dtoa_r+0x68e>
 8004dae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004db0:	2a00      	cmp	r2, #0
 8004db2:	f000 8088 	beq.w	8004ec6 <_dtoa_r+0x806>
 8004db6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004db8:	2a01      	cmp	r2, #1
 8004dba:	dc6d      	bgt.n	8004e98 <_dtoa_r+0x7d8>
 8004dbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004dbe:	2a00      	cmp	r2, #0
 8004dc0:	d066      	beq.n	8004e90 <_dtoa_r+0x7d0>
 8004dc2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004dc6:	464d      	mov	r5, r9
 8004dc8:	9e08      	ldr	r6, [sp, #32]
 8004dca:	9a07      	ldr	r2, [sp, #28]
 8004dcc:	2101      	movs	r1, #1
 8004dce:	441a      	add	r2, r3
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	4499      	add	r9, r3
 8004dd4:	9207      	str	r2, [sp, #28]
 8004dd6:	f000 feb6 	bl	8005b46 <__i2b>
 8004dda:	4607      	mov	r7, r0
 8004ddc:	2d00      	cmp	r5, #0
 8004dde:	dd0b      	ble.n	8004df8 <_dtoa_r+0x738>
 8004de0:	9b07      	ldr	r3, [sp, #28]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	dd08      	ble.n	8004df8 <_dtoa_r+0x738>
 8004de6:	42ab      	cmp	r3, r5
 8004de8:	bfa8      	it	ge
 8004dea:	462b      	movge	r3, r5
 8004dec:	9a07      	ldr	r2, [sp, #28]
 8004dee:	eba9 0903 	sub.w	r9, r9, r3
 8004df2:	1aed      	subs	r5, r5, r3
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	9307      	str	r3, [sp, #28]
 8004df8:	9b08      	ldr	r3, [sp, #32]
 8004dfa:	b1eb      	cbz	r3, 8004e38 <_dtoa_r+0x778>
 8004dfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d065      	beq.n	8004ece <_dtoa_r+0x80e>
 8004e02:	b18e      	cbz	r6, 8004e28 <_dtoa_r+0x768>
 8004e04:	4639      	mov	r1, r7
 8004e06:	4632      	mov	r2, r6
 8004e08:	4620      	mov	r0, r4
 8004e0a:	f000 ff3b 	bl	8005c84 <__pow5mult>
 8004e0e:	465a      	mov	r2, fp
 8004e10:	4601      	mov	r1, r0
 8004e12:	4607      	mov	r7, r0
 8004e14:	4620      	mov	r0, r4
 8004e16:	f000 fe9f 	bl	8005b58 <__multiply>
 8004e1a:	4659      	mov	r1, fp
 8004e1c:	900a      	str	r0, [sp, #40]	; 0x28
 8004e1e:	4620      	mov	r0, r4
 8004e20:	f000 fdb3 	bl	800598a <_Bfree>
 8004e24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e26:	469b      	mov	fp, r3
 8004e28:	9b08      	ldr	r3, [sp, #32]
 8004e2a:	1b9a      	subs	r2, r3, r6
 8004e2c:	d004      	beq.n	8004e38 <_dtoa_r+0x778>
 8004e2e:	4659      	mov	r1, fp
 8004e30:	4620      	mov	r0, r4
 8004e32:	f000 ff27 	bl	8005c84 <__pow5mult>
 8004e36:	4683      	mov	fp, r0
 8004e38:	2101      	movs	r1, #1
 8004e3a:	4620      	mov	r0, r4
 8004e3c:	f000 fe83 	bl	8005b46 <__i2b>
 8004e40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e42:	4606      	mov	r6, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f000 81c6 	beq.w	80051d6 <_dtoa_r+0xb16>
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	4601      	mov	r1, r0
 8004e4e:	4620      	mov	r0, r4
 8004e50:	f000 ff18 	bl	8005c84 <__pow5mult>
 8004e54:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004e56:	4606      	mov	r6, r0
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	dc3e      	bgt.n	8004eda <_dtoa_r+0x81a>
 8004e5c:	9b02      	ldr	r3, [sp, #8]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d137      	bne.n	8004ed2 <_dtoa_r+0x812>
 8004e62:	9b03      	ldr	r3, [sp, #12]
 8004e64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d134      	bne.n	8004ed6 <_dtoa_r+0x816>
 8004e6c:	9b03      	ldr	r3, [sp, #12]
 8004e6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e72:	0d1b      	lsrs	r3, r3, #20
 8004e74:	051b      	lsls	r3, r3, #20
 8004e76:	b12b      	cbz	r3, 8004e84 <_dtoa_r+0x7c4>
 8004e78:	9b07      	ldr	r3, [sp, #28]
 8004e7a:	f109 0901 	add.w	r9, r9, #1
 8004e7e:	3301      	adds	r3, #1
 8004e80:	9307      	str	r3, [sp, #28]
 8004e82:	2301      	movs	r3, #1
 8004e84:	9308      	str	r3, [sp, #32]
 8004e86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d128      	bne.n	8004ede <_dtoa_r+0x81e>
 8004e8c:	2001      	movs	r0, #1
 8004e8e:	e02e      	b.n	8004eee <_dtoa_r+0x82e>
 8004e90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004e92:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004e96:	e796      	b.n	8004dc6 <_dtoa_r+0x706>
 8004e98:	9b08      	ldr	r3, [sp, #32]
 8004e9a:	f108 36ff 	add.w	r6, r8, #4294967295
 8004e9e:	42b3      	cmp	r3, r6
 8004ea0:	bfb7      	itett	lt
 8004ea2:	9b08      	ldrlt	r3, [sp, #32]
 8004ea4:	1b9e      	subge	r6, r3, r6
 8004ea6:	1af2      	sublt	r2, r6, r3
 8004ea8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8004eaa:	bfbf      	itttt	lt
 8004eac:	9608      	strlt	r6, [sp, #32]
 8004eae:	189b      	addlt	r3, r3, r2
 8004eb0:	930c      	strlt	r3, [sp, #48]	; 0x30
 8004eb2:	2600      	movlt	r6, #0
 8004eb4:	f1b8 0f00 	cmp.w	r8, #0
 8004eb8:	bfb9      	ittee	lt
 8004eba:	eba9 0508 	sublt.w	r5, r9, r8
 8004ebe:	2300      	movlt	r3, #0
 8004ec0:	464d      	movge	r5, r9
 8004ec2:	4643      	movge	r3, r8
 8004ec4:	e781      	b.n	8004dca <_dtoa_r+0x70a>
 8004ec6:	9e08      	ldr	r6, [sp, #32]
 8004ec8:	464d      	mov	r5, r9
 8004eca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004ecc:	e786      	b.n	8004ddc <_dtoa_r+0x71c>
 8004ece:	9a08      	ldr	r2, [sp, #32]
 8004ed0:	e7ad      	b.n	8004e2e <_dtoa_r+0x76e>
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	e7d6      	b.n	8004e84 <_dtoa_r+0x7c4>
 8004ed6:	9b02      	ldr	r3, [sp, #8]
 8004ed8:	e7d4      	b.n	8004e84 <_dtoa_r+0x7c4>
 8004eda:	2300      	movs	r3, #0
 8004edc:	9308      	str	r3, [sp, #32]
 8004ede:	6933      	ldr	r3, [r6, #16]
 8004ee0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004ee4:	6918      	ldr	r0, [r3, #16]
 8004ee6:	f000 fde0 	bl	8005aaa <__hi0bits>
 8004eea:	f1c0 0020 	rsb	r0, r0, #32
 8004eee:	9b07      	ldr	r3, [sp, #28]
 8004ef0:	4418      	add	r0, r3
 8004ef2:	f010 001f 	ands.w	r0, r0, #31
 8004ef6:	d047      	beq.n	8004f88 <_dtoa_r+0x8c8>
 8004ef8:	f1c0 0320 	rsb	r3, r0, #32
 8004efc:	2b04      	cmp	r3, #4
 8004efe:	dd3b      	ble.n	8004f78 <_dtoa_r+0x8b8>
 8004f00:	9b07      	ldr	r3, [sp, #28]
 8004f02:	f1c0 001c 	rsb	r0, r0, #28
 8004f06:	4481      	add	r9, r0
 8004f08:	4405      	add	r5, r0
 8004f0a:	4403      	add	r3, r0
 8004f0c:	9307      	str	r3, [sp, #28]
 8004f0e:	f1b9 0f00 	cmp.w	r9, #0
 8004f12:	dd05      	ble.n	8004f20 <_dtoa_r+0x860>
 8004f14:	4659      	mov	r1, fp
 8004f16:	464a      	mov	r2, r9
 8004f18:	4620      	mov	r0, r4
 8004f1a:	f000 ff01 	bl	8005d20 <__lshift>
 8004f1e:	4683      	mov	fp, r0
 8004f20:	9b07      	ldr	r3, [sp, #28]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	dd05      	ble.n	8004f32 <_dtoa_r+0x872>
 8004f26:	4631      	mov	r1, r6
 8004f28:	461a      	mov	r2, r3
 8004f2a:	4620      	mov	r0, r4
 8004f2c:	f000 fef8 	bl	8005d20 <__lshift>
 8004f30:	4606      	mov	r6, r0
 8004f32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f34:	b353      	cbz	r3, 8004f8c <_dtoa_r+0x8cc>
 8004f36:	4631      	mov	r1, r6
 8004f38:	4658      	mov	r0, fp
 8004f3a:	f000 ff45 	bl	8005dc8 <__mcmp>
 8004f3e:	2800      	cmp	r0, #0
 8004f40:	da24      	bge.n	8004f8c <_dtoa_r+0x8cc>
 8004f42:	2300      	movs	r3, #0
 8004f44:	4659      	mov	r1, fp
 8004f46:	220a      	movs	r2, #10
 8004f48:	4620      	mov	r0, r4
 8004f4a:	f000 fd35 	bl	80059b8 <__multadd>
 8004f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f50:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004f54:	4683      	mov	fp, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f000 8144 	beq.w	80051e4 <_dtoa_r+0xb24>
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	4639      	mov	r1, r7
 8004f60:	220a      	movs	r2, #10
 8004f62:	4620      	mov	r0, r4
 8004f64:	f000 fd28 	bl	80059b8 <__multadd>
 8004f68:	9b04      	ldr	r3, [sp, #16]
 8004f6a:	4607      	mov	r7, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	dc4d      	bgt.n	800500c <_dtoa_r+0x94c>
 8004f70:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	dd4a      	ble.n	800500c <_dtoa_r+0x94c>
 8004f76:	e011      	b.n	8004f9c <_dtoa_r+0x8dc>
 8004f78:	d0c9      	beq.n	8004f0e <_dtoa_r+0x84e>
 8004f7a:	9a07      	ldr	r2, [sp, #28]
 8004f7c:	331c      	adds	r3, #28
 8004f7e:	441a      	add	r2, r3
 8004f80:	4499      	add	r9, r3
 8004f82:	441d      	add	r5, r3
 8004f84:	4613      	mov	r3, r2
 8004f86:	e7c1      	b.n	8004f0c <_dtoa_r+0x84c>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	e7f6      	b.n	8004f7a <_dtoa_r+0x8ba>
 8004f8c:	f1b8 0f00 	cmp.w	r8, #0
 8004f90:	dc36      	bgt.n	8005000 <_dtoa_r+0x940>
 8004f92:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	dd33      	ble.n	8005000 <_dtoa_r+0x940>
 8004f98:	f8cd 8010 	str.w	r8, [sp, #16]
 8004f9c:	9b04      	ldr	r3, [sp, #16]
 8004f9e:	b963      	cbnz	r3, 8004fba <_dtoa_r+0x8fa>
 8004fa0:	4631      	mov	r1, r6
 8004fa2:	2205      	movs	r2, #5
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	f000 fd07 	bl	80059b8 <__multadd>
 8004faa:	4601      	mov	r1, r0
 8004fac:	4606      	mov	r6, r0
 8004fae:	4658      	mov	r0, fp
 8004fb0:	f000 ff0a 	bl	8005dc8 <__mcmp>
 8004fb4:	2800      	cmp	r0, #0
 8004fb6:	f73f add3 	bgt.w	8004b60 <_dtoa_r+0x4a0>
 8004fba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004fbc:	9d06      	ldr	r5, [sp, #24]
 8004fbe:	ea6f 0a03 	mvn.w	sl, r3
 8004fc2:	f04f 0900 	mov.w	r9, #0
 8004fc6:	4631      	mov	r1, r6
 8004fc8:	4620      	mov	r0, r4
 8004fca:	f000 fcde 	bl	800598a <_Bfree>
 8004fce:	2f00      	cmp	r7, #0
 8004fd0:	f43f aebd 	beq.w	8004d4e <_dtoa_r+0x68e>
 8004fd4:	f1b9 0f00 	cmp.w	r9, #0
 8004fd8:	d005      	beq.n	8004fe6 <_dtoa_r+0x926>
 8004fda:	45b9      	cmp	r9, r7
 8004fdc:	d003      	beq.n	8004fe6 <_dtoa_r+0x926>
 8004fde:	4649      	mov	r1, r9
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	f000 fcd2 	bl	800598a <_Bfree>
 8004fe6:	4639      	mov	r1, r7
 8004fe8:	4620      	mov	r0, r4
 8004fea:	f000 fcce 	bl	800598a <_Bfree>
 8004fee:	e6ae      	b.n	8004d4e <_dtoa_r+0x68e>
 8004ff0:	2600      	movs	r6, #0
 8004ff2:	4637      	mov	r7, r6
 8004ff4:	e7e1      	b.n	8004fba <_dtoa_r+0x8fa>
 8004ff6:	46ba      	mov	sl, r7
 8004ff8:	4637      	mov	r7, r6
 8004ffa:	e5b1      	b.n	8004b60 <_dtoa_r+0x4a0>
 8004ffc:	40240000 	.word	0x40240000
 8005000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005002:	f8cd 8010 	str.w	r8, [sp, #16]
 8005006:	2b00      	cmp	r3, #0
 8005008:	f000 80f3 	beq.w	80051f2 <_dtoa_r+0xb32>
 800500c:	2d00      	cmp	r5, #0
 800500e:	dd05      	ble.n	800501c <_dtoa_r+0x95c>
 8005010:	4639      	mov	r1, r7
 8005012:	462a      	mov	r2, r5
 8005014:	4620      	mov	r0, r4
 8005016:	f000 fe83 	bl	8005d20 <__lshift>
 800501a:	4607      	mov	r7, r0
 800501c:	9b08      	ldr	r3, [sp, #32]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d04c      	beq.n	80050bc <_dtoa_r+0x9fc>
 8005022:	6879      	ldr	r1, [r7, #4]
 8005024:	4620      	mov	r0, r4
 8005026:	f000 fc7c 	bl	8005922 <_Balloc>
 800502a:	4605      	mov	r5, r0
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	f107 010c 	add.w	r1, r7, #12
 8005032:	3202      	adds	r2, #2
 8005034:	0092      	lsls	r2, r2, #2
 8005036:	300c      	adds	r0, #12
 8005038:	f000 fc68 	bl	800590c <memcpy>
 800503c:	2201      	movs	r2, #1
 800503e:	4629      	mov	r1, r5
 8005040:	4620      	mov	r0, r4
 8005042:	f000 fe6d 	bl	8005d20 <__lshift>
 8005046:	46b9      	mov	r9, r7
 8005048:	4607      	mov	r7, r0
 800504a:	9b06      	ldr	r3, [sp, #24]
 800504c:	9307      	str	r3, [sp, #28]
 800504e:	9b02      	ldr	r3, [sp, #8]
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	9308      	str	r3, [sp, #32]
 8005056:	4631      	mov	r1, r6
 8005058:	4658      	mov	r0, fp
 800505a:	f7ff faa3 	bl	80045a4 <quorem>
 800505e:	4649      	mov	r1, r9
 8005060:	4605      	mov	r5, r0
 8005062:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005066:	4658      	mov	r0, fp
 8005068:	f000 feae 	bl	8005dc8 <__mcmp>
 800506c:	463a      	mov	r2, r7
 800506e:	9002      	str	r0, [sp, #8]
 8005070:	4631      	mov	r1, r6
 8005072:	4620      	mov	r0, r4
 8005074:	f000 fec2 	bl	8005dfc <__mdiff>
 8005078:	68c3      	ldr	r3, [r0, #12]
 800507a:	4602      	mov	r2, r0
 800507c:	bb03      	cbnz	r3, 80050c0 <_dtoa_r+0xa00>
 800507e:	4601      	mov	r1, r0
 8005080:	9009      	str	r0, [sp, #36]	; 0x24
 8005082:	4658      	mov	r0, fp
 8005084:	f000 fea0 	bl	8005dc8 <__mcmp>
 8005088:	4603      	mov	r3, r0
 800508a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800508c:	4611      	mov	r1, r2
 800508e:	4620      	mov	r0, r4
 8005090:	9309      	str	r3, [sp, #36]	; 0x24
 8005092:	f000 fc7a 	bl	800598a <_Bfree>
 8005096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005098:	b9a3      	cbnz	r3, 80050c4 <_dtoa_r+0xa04>
 800509a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800509c:	b992      	cbnz	r2, 80050c4 <_dtoa_r+0xa04>
 800509e:	9a08      	ldr	r2, [sp, #32]
 80050a0:	b982      	cbnz	r2, 80050c4 <_dtoa_r+0xa04>
 80050a2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80050a6:	d029      	beq.n	80050fc <_dtoa_r+0xa3c>
 80050a8:	9b02      	ldr	r3, [sp, #8]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	dd01      	ble.n	80050b2 <_dtoa_r+0x9f2>
 80050ae:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80050b2:	9b07      	ldr	r3, [sp, #28]
 80050b4:	1c5d      	adds	r5, r3, #1
 80050b6:	f883 8000 	strb.w	r8, [r3]
 80050ba:	e784      	b.n	8004fc6 <_dtoa_r+0x906>
 80050bc:	4638      	mov	r0, r7
 80050be:	e7c2      	b.n	8005046 <_dtoa_r+0x986>
 80050c0:	2301      	movs	r3, #1
 80050c2:	e7e3      	b.n	800508c <_dtoa_r+0x9cc>
 80050c4:	9a02      	ldr	r2, [sp, #8]
 80050c6:	2a00      	cmp	r2, #0
 80050c8:	db04      	blt.n	80050d4 <_dtoa_r+0xa14>
 80050ca:	d123      	bne.n	8005114 <_dtoa_r+0xa54>
 80050cc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80050ce:	bb0a      	cbnz	r2, 8005114 <_dtoa_r+0xa54>
 80050d0:	9a08      	ldr	r2, [sp, #32]
 80050d2:	b9fa      	cbnz	r2, 8005114 <_dtoa_r+0xa54>
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	ddec      	ble.n	80050b2 <_dtoa_r+0x9f2>
 80050d8:	4659      	mov	r1, fp
 80050da:	2201      	movs	r2, #1
 80050dc:	4620      	mov	r0, r4
 80050de:	f000 fe1f 	bl	8005d20 <__lshift>
 80050e2:	4631      	mov	r1, r6
 80050e4:	4683      	mov	fp, r0
 80050e6:	f000 fe6f 	bl	8005dc8 <__mcmp>
 80050ea:	2800      	cmp	r0, #0
 80050ec:	dc03      	bgt.n	80050f6 <_dtoa_r+0xa36>
 80050ee:	d1e0      	bne.n	80050b2 <_dtoa_r+0x9f2>
 80050f0:	f018 0f01 	tst.w	r8, #1
 80050f4:	d0dd      	beq.n	80050b2 <_dtoa_r+0x9f2>
 80050f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80050fa:	d1d8      	bne.n	80050ae <_dtoa_r+0x9ee>
 80050fc:	9b07      	ldr	r3, [sp, #28]
 80050fe:	9a07      	ldr	r2, [sp, #28]
 8005100:	1c5d      	adds	r5, r3, #1
 8005102:	2339      	movs	r3, #57	; 0x39
 8005104:	7013      	strb	r3, [r2, #0]
 8005106:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800510a:	1e6a      	subs	r2, r5, #1
 800510c:	2b39      	cmp	r3, #57	; 0x39
 800510e:	d04d      	beq.n	80051ac <_dtoa_r+0xaec>
 8005110:	3301      	adds	r3, #1
 8005112:	e052      	b.n	80051ba <_dtoa_r+0xafa>
 8005114:	9a07      	ldr	r2, [sp, #28]
 8005116:	2b00      	cmp	r3, #0
 8005118:	f102 0501 	add.w	r5, r2, #1
 800511c:	dd06      	ble.n	800512c <_dtoa_r+0xa6c>
 800511e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005122:	d0eb      	beq.n	80050fc <_dtoa_r+0xa3c>
 8005124:	f108 0801 	add.w	r8, r8, #1
 8005128:	9b07      	ldr	r3, [sp, #28]
 800512a:	e7c4      	b.n	80050b6 <_dtoa_r+0x9f6>
 800512c:	9b06      	ldr	r3, [sp, #24]
 800512e:	9a04      	ldr	r2, [sp, #16]
 8005130:	1aeb      	subs	r3, r5, r3
 8005132:	4293      	cmp	r3, r2
 8005134:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005138:	d021      	beq.n	800517e <_dtoa_r+0xabe>
 800513a:	4659      	mov	r1, fp
 800513c:	2300      	movs	r3, #0
 800513e:	220a      	movs	r2, #10
 8005140:	4620      	mov	r0, r4
 8005142:	f000 fc39 	bl	80059b8 <__multadd>
 8005146:	45b9      	cmp	r9, r7
 8005148:	4683      	mov	fp, r0
 800514a:	f04f 0300 	mov.w	r3, #0
 800514e:	f04f 020a 	mov.w	r2, #10
 8005152:	4649      	mov	r1, r9
 8005154:	4620      	mov	r0, r4
 8005156:	d105      	bne.n	8005164 <_dtoa_r+0xaa4>
 8005158:	f000 fc2e 	bl	80059b8 <__multadd>
 800515c:	4681      	mov	r9, r0
 800515e:	4607      	mov	r7, r0
 8005160:	9507      	str	r5, [sp, #28]
 8005162:	e778      	b.n	8005056 <_dtoa_r+0x996>
 8005164:	f000 fc28 	bl	80059b8 <__multadd>
 8005168:	4639      	mov	r1, r7
 800516a:	4681      	mov	r9, r0
 800516c:	2300      	movs	r3, #0
 800516e:	220a      	movs	r2, #10
 8005170:	4620      	mov	r0, r4
 8005172:	f000 fc21 	bl	80059b8 <__multadd>
 8005176:	4607      	mov	r7, r0
 8005178:	e7f2      	b.n	8005160 <_dtoa_r+0xaa0>
 800517a:	f04f 0900 	mov.w	r9, #0
 800517e:	4659      	mov	r1, fp
 8005180:	2201      	movs	r2, #1
 8005182:	4620      	mov	r0, r4
 8005184:	f000 fdcc 	bl	8005d20 <__lshift>
 8005188:	4631      	mov	r1, r6
 800518a:	4683      	mov	fp, r0
 800518c:	f000 fe1c 	bl	8005dc8 <__mcmp>
 8005190:	2800      	cmp	r0, #0
 8005192:	dcb8      	bgt.n	8005106 <_dtoa_r+0xa46>
 8005194:	d102      	bne.n	800519c <_dtoa_r+0xadc>
 8005196:	f018 0f01 	tst.w	r8, #1
 800519a:	d1b4      	bne.n	8005106 <_dtoa_r+0xa46>
 800519c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80051a0:	1e6a      	subs	r2, r5, #1
 80051a2:	2b30      	cmp	r3, #48	; 0x30
 80051a4:	f47f af0f 	bne.w	8004fc6 <_dtoa_r+0x906>
 80051a8:	4615      	mov	r5, r2
 80051aa:	e7f7      	b.n	800519c <_dtoa_r+0xadc>
 80051ac:	9b06      	ldr	r3, [sp, #24]
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d105      	bne.n	80051be <_dtoa_r+0xafe>
 80051b2:	2331      	movs	r3, #49	; 0x31
 80051b4:	9a06      	ldr	r2, [sp, #24]
 80051b6:	f10a 0a01 	add.w	sl, sl, #1
 80051ba:	7013      	strb	r3, [r2, #0]
 80051bc:	e703      	b.n	8004fc6 <_dtoa_r+0x906>
 80051be:	4615      	mov	r5, r2
 80051c0:	e7a1      	b.n	8005106 <_dtoa_r+0xa46>
 80051c2:	4b17      	ldr	r3, [pc, #92]	; (8005220 <_dtoa_r+0xb60>)
 80051c4:	f7ff bae1 	b.w	800478a <_dtoa_r+0xca>
 80051c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f47f aabb 	bne.w	8004746 <_dtoa_r+0x86>
 80051d0:	4b14      	ldr	r3, [pc, #80]	; (8005224 <_dtoa_r+0xb64>)
 80051d2:	f7ff bada 	b.w	800478a <_dtoa_r+0xca>
 80051d6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80051d8:	2b01      	cmp	r3, #1
 80051da:	f77f ae3f 	ble.w	8004e5c <_dtoa_r+0x79c>
 80051de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80051e0:	9308      	str	r3, [sp, #32]
 80051e2:	e653      	b.n	8004e8c <_dtoa_r+0x7cc>
 80051e4:	9b04      	ldr	r3, [sp, #16]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	dc03      	bgt.n	80051f2 <_dtoa_r+0xb32>
 80051ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	f73f aed5 	bgt.w	8004f9c <_dtoa_r+0x8dc>
 80051f2:	9d06      	ldr	r5, [sp, #24]
 80051f4:	4631      	mov	r1, r6
 80051f6:	4658      	mov	r0, fp
 80051f8:	f7ff f9d4 	bl	80045a4 <quorem>
 80051fc:	9b06      	ldr	r3, [sp, #24]
 80051fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005202:	f805 8b01 	strb.w	r8, [r5], #1
 8005206:	9a04      	ldr	r2, [sp, #16]
 8005208:	1aeb      	subs	r3, r5, r3
 800520a:	429a      	cmp	r2, r3
 800520c:	ddb5      	ble.n	800517a <_dtoa_r+0xaba>
 800520e:	4659      	mov	r1, fp
 8005210:	2300      	movs	r3, #0
 8005212:	220a      	movs	r2, #10
 8005214:	4620      	mov	r0, r4
 8005216:	f000 fbcf 	bl	80059b8 <__multadd>
 800521a:	4683      	mov	fp, r0
 800521c:	e7ea      	b.n	80051f4 <_dtoa_r+0xb34>
 800521e:	bf00      	nop
 8005220:	08009c43 	.word	0x08009c43
 8005224:	08009b08 	.word	0x08009b08

08005228 <rshift>:
 8005228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800522a:	6906      	ldr	r6, [r0, #16]
 800522c:	114b      	asrs	r3, r1, #5
 800522e:	429e      	cmp	r6, r3
 8005230:	f100 0414 	add.w	r4, r0, #20
 8005234:	dd31      	ble.n	800529a <rshift+0x72>
 8005236:	f011 011f 	ands.w	r1, r1, #31
 800523a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800523e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8005242:	d108      	bne.n	8005256 <rshift+0x2e>
 8005244:	4621      	mov	r1, r4
 8005246:	42b2      	cmp	r2, r6
 8005248:	460b      	mov	r3, r1
 800524a:	d211      	bcs.n	8005270 <rshift+0x48>
 800524c:	f852 3b04 	ldr.w	r3, [r2], #4
 8005250:	f841 3b04 	str.w	r3, [r1], #4
 8005254:	e7f7      	b.n	8005246 <rshift+0x1e>
 8005256:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800525a:	4623      	mov	r3, r4
 800525c:	f1c1 0c20 	rsb	ip, r1, #32
 8005260:	40cd      	lsrs	r5, r1
 8005262:	3204      	adds	r2, #4
 8005264:	42b2      	cmp	r2, r6
 8005266:	4617      	mov	r7, r2
 8005268:	d30d      	bcc.n	8005286 <rshift+0x5e>
 800526a:	601d      	str	r5, [r3, #0]
 800526c:	b105      	cbz	r5, 8005270 <rshift+0x48>
 800526e:	3304      	adds	r3, #4
 8005270:	42a3      	cmp	r3, r4
 8005272:	eba3 0204 	sub.w	r2, r3, r4
 8005276:	bf08      	it	eq
 8005278:	2300      	moveq	r3, #0
 800527a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800527e:	6102      	str	r2, [r0, #16]
 8005280:	bf08      	it	eq
 8005282:	6143      	streq	r3, [r0, #20]
 8005284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005286:	683f      	ldr	r7, [r7, #0]
 8005288:	fa07 f70c 	lsl.w	r7, r7, ip
 800528c:	433d      	orrs	r5, r7
 800528e:	f843 5b04 	str.w	r5, [r3], #4
 8005292:	f852 5b04 	ldr.w	r5, [r2], #4
 8005296:	40cd      	lsrs	r5, r1
 8005298:	e7e4      	b.n	8005264 <rshift+0x3c>
 800529a:	4623      	mov	r3, r4
 800529c:	e7e8      	b.n	8005270 <rshift+0x48>

0800529e <__hexdig_fun>:
 800529e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80052a2:	2b09      	cmp	r3, #9
 80052a4:	d802      	bhi.n	80052ac <__hexdig_fun+0xe>
 80052a6:	3820      	subs	r0, #32
 80052a8:	b2c0      	uxtb	r0, r0
 80052aa:	4770      	bx	lr
 80052ac:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80052b0:	2b05      	cmp	r3, #5
 80052b2:	d801      	bhi.n	80052b8 <__hexdig_fun+0x1a>
 80052b4:	3847      	subs	r0, #71	; 0x47
 80052b6:	e7f7      	b.n	80052a8 <__hexdig_fun+0xa>
 80052b8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80052bc:	2b05      	cmp	r3, #5
 80052be:	d801      	bhi.n	80052c4 <__hexdig_fun+0x26>
 80052c0:	3827      	subs	r0, #39	; 0x27
 80052c2:	e7f1      	b.n	80052a8 <__hexdig_fun+0xa>
 80052c4:	2000      	movs	r0, #0
 80052c6:	4770      	bx	lr

080052c8 <__gethex>:
 80052c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052cc:	b08b      	sub	sp, #44	; 0x2c
 80052ce:	9002      	str	r0, [sp, #8]
 80052d0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80052d2:	468a      	mov	sl, r1
 80052d4:	4690      	mov	r8, r2
 80052d6:	9306      	str	r3, [sp, #24]
 80052d8:	f000 fae0 	bl	800589c <__localeconv_l>
 80052dc:	6803      	ldr	r3, [r0, #0]
 80052de:	f04f 0b00 	mov.w	fp, #0
 80052e2:	4618      	mov	r0, r3
 80052e4:	9303      	str	r3, [sp, #12]
 80052e6:	f7fa ff43 	bl	8000170 <strlen>
 80052ea:	9b03      	ldr	r3, [sp, #12]
 80052ec:	9001      	str	r0, [sp, #4]
 80052ee:	4403      	add	r3, r0
 80052f0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80052f4:	9307      	str	r3, [sp, #28]
 80052f6:	f8da 3000 	ldr.w	r3, [sl]
 80052fa:	3302      	adds	r3, #2
 80052fc:	461f      	mov	r7, r3
 80052fe:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005302:	2830      	cmp	r0, #48	; 0x30
 8005304:	d06c      	beq.n	80053e0 <__gethex+0x118>
 8005306:	f7ff ffca 	bl	800529e <__hexdig_fun>
 800530a:	4604      	mov	r4, r0
 800530c:	2800      	cmp	r0, #0
 800530e:	d16a      	bne.n	80053e6 <__gethex+0x11e>
 8005310:	9a01      	ldr	r2, [sp, #4]
 8005312:	9903      	ldr	r1, [sp, #12]
 8005314:	4638      	mov	r0, r7
 8005316:	f001 fc46 	bl	8006ba6 <strncmp>
 800531a:	2800      	cmp	r0, #0
 800531c:	d166      	bne.n	80053ec <__gethex+0x124>
 800531e:	9b01      	ldr	r3, [sp, #4]
 8005320:	5cf8      	ldrb	r0, [r7, r3]
 8005322:	18fe      	adds	r6, r7, r3
 8005324:	f7ff ffbb 	bl	800529e <__hexdig_fun>
 8005328:	2800      	cmp	r0, #0
 800532a:	d062      	beq.n	80053f2 <__gethex+0x12a>
 800532c:	4633      	mov	r3, r6
 800532e:	7818      	ldrb	r0, [r3, #0]
 8005330:	461f      	mov	r7, r3
 8005332:	2830      	cmp	r0, #48	; 0x30
 8005334:	f103 0301 	add.w	r3, r3, #1
 8005338:	d0f9      	beq.n	800532e <__gethex+0x66>
 800533a:	f7ff ffb0 	bl	800529e <__hexdig_fun>
 800533e:	fab0 f580 	clz	r5, r0
 8005342:	4634      	mov	r4, r6
 8005344:	f04f 0b01 	mov.w	fp, #1
 8005348:	096d      	lsrs	r5, r5, #5
 800534a:	463a      	mov	r2, r7
 800534c:	4616      	mov	r6, r2
 800534e:	7830      	ldrb	r0, [r6, #0]
 8005350:	3201      	adds	r2, #1
 8005352:	f7ff ffa4 	bl	800529e <__hexdig_fun>
 8005356:	2800      	cmp	r0, #0
 8005358:	d1f8      	bne.n	800534c <__gethex+0x84>
 800535a:	9a01      	ldr	r2, [sp, #4]
 800535c:	9903      	ldr	r1, [sp, #12]
 800535e:	4630      	mov	r0, r6
 8005360:	f001 fc21 	bl	8006ba6 <strncmp>
 8005364:	b950      	cbnz	r0, 800537c <__gethex+0xb4>
 8005366:	b954      	cbnz	r4, 800537e <__gethex+0xb6>
 8005368:	9b01      	ldr	r3, [sp, #4]
 800536a:	18f4      	adds	r4, r6, r3
 800536c:	4622      	mov	r2, r4
 800536e:	4616      	mov	r6, r2
 8005370:	7830      	ldrb	r0, [r6, #0]
 8005372:	3201      	adds	r2, #1
 8005374:	f7ff ff93 	bl	800529e <__hexdig_fun>
 8005378:	2800      	cmp	r0, #0
 800537a:	d1f8      	bne.n	800536e <__gethex+0xa6>
 800537c:	b10c      	cbz	r4, 8005382 <__gethex+0xba>
 800537e:	1ba4      	subs	r4, r4, r6
 8005380:	00a4      	lsls	r4, r4, #2
 8005382:	7833      	ldrb	r3, [r6, #0]
 8005384:	2b50      	cmp	r3, #80	; 0x50
 8005386:	d001      	beq.n	800538c <__gethex+0xc4>
 8005388:	2b70      	cmp	r3, #112	; 0x70
 800538a:	d140      	bne.n	800540e <__gethex+0x146>
 800538c:	7873      	ldrb	r3, [r6, #1]
 800538e:	2b2b      	cmp	r3, #43	; 0x2b
 8005390:	d031      	beq.n	80053f6 <__gethex+0x12e>
 8005392:	2b2d      	cmp	r3, #45	; 0x2d
 8005394:	d033      	beq.n	80053fe <__gethex+0x136>
 8005396:	f04f 0900 	mov.w	r9, #0
 800539a:	1c71      	adds	r1, r6, #1
 800539c:	7808      	ldrb	r0, [r1, #0]
 800539e:	f7ff ff7e 	bl	800529e <__hexdig_fun>
 80053a2:	1e43      	subs	r3, r0, #1
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b18      	cmp	r3, #24
 80053a8:	d831      	bhi.n	800540e <__gethex+0x146>
 80053aa:	f1a0 0210 	sub.w	r2, r0, #16
 80053ae:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80053b2:	f7ff ff74 	bl	800529e <__hexdig_fun>
 80053b6:	1e43      	subs	r3, r0, #1
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b18      	cmp	r3, #24
 80053bc:	d922      	bls.n	8005404 <__gethex+0x13c>
 80053be:	f1b9 0f00 	cmp.w	r9, #0
 80053c2:	d000      	beq.n	80053c6 <__gethex+0xfe>
 80053c4:	4252      	negs	r2, r2
 80053c6:	4414      	add	r4, r2
 80053c8:	f8ca 1000 	str.w	r1, [sl]
 80053cc:	b30d      	cbz	r5, 8005412 <__gethex+0x14a>
 80053ce:	f1bb 0f00 	cmp.w	fp, #0
 80053d2:	bf0c      	ite	eq
 80053d4:	2706      	moveq	r7, #6
 80053d6:	2700      	movne	r7, #0
 80053d8:	4638      	mov	r0, r7
 80053da:	b00b      	add	sp, #44	; 0x2c
 80053dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053e0:	f10b 0b01 	add.w	fp, fp, #1
 80053e4:	e78a      	b.n	80052fc <__gethex+0x34>
 80053e6:	2500      	movs	r5, #0
 80053e8:	462c      	mov	r4, r5
 80053ea:	e7ae      	b.n	800534a <__gethex+0x82>
 80053ec:	463e      	mov	r6, r7
 80053ee:	2501      	movs	r5, #1
 80053f0:	e7c7      	b.n	8005382 <__gethex+0xba>
 80053f2:	4604      	mov	r4, r0
 80053f4:	e7fb      	b.n	80053ee <__gethex+0x126>
 80053f6:	f04f 0900 	mov.w	r9, #0
 80053fa:	1cb1      	adds	r1, r6, #2
 80053fc:	e7ce      	b.n	800539c <__gethex+0xd4>
 80053fe:	f04f 0901 	mov.w	r9, #1
 8005402:	e7fa      	b.n	80053fa <__gethex+0x132>
 8005404:	230a      	movs	r3, #10
 8005406:	fb03 0202 	mla	r2, r3, r2, r0
 800540a:	3a10      	subs	r2, #16
 800540c:	e7cf      	b.n	80053ae <__gethex+0xe6>
 800540e:	4631      	mov	r1, r6
 8005410:	e7da      	b.n	80053c8 <__gethex+0x100>
 8005412:	4629      	mov	r1, r5
 8005414:	1bf3      	subs	r3, r6, r7
 8005416:	3b01      	subs	r3, #1
 8005418:	2b07      	cmp	r3, #7
 800541a:	dc49      	bgt.n	80054b0 <__gethex+0x1e8>
 800541c:	9802      	ldr	r0, [sp, #8]
 800541e:	f000 fa80 	bl	8005922 <_Balloc>
 8005422:	f04f 0b00 	mov.w	fp, #0
 8005426:	4605      	mov	r5, r0
 8005428:	46da      	mov	sl, fp
 800542a:	9b01      	ldr	r3, [sp, #4]
 800542c:	f100 0914 	add.w	r9, r0, #20
 8005430:	f1c3 0301 	rsb	r3, r3, #1
 8005434:	f8cd 9010 	str.w	r9, [sp, #16]
 8005438:	9308      	str	r3, [sp, #32]
 800543a:	42b7      	cmp	r7, r6
 800543c:	d33b      	bcc.n	80054b6 <__gethex+0x1ee>
 800543e:	9804      	ldr	r0, [sp, #16]
 8005440:	f840 ab04 	str.w	sl, [r0], #4
 8005444:	eba0 0009 	sub.w	r0, r0, r9
 8005448:	1080      	asrs	r0, r0, #2
 800544a:	6128      	str	r0, [r5, #16]
 800544c:	0147      	lsls	r7, r0, #5
 800544e:	4650      	mov	r0, sl
 8005450:	f000 fb2b 	bl	8005aaa <__hi0bits>
 8005454:	f8d8 6000 	ldr.w	r6, [r8]
 8005458:	1a3f      	subs	r7, r7, r0
 800545a:	42b7      	cmp	r7, r6
 800545c:	dd64      	ble.n	8005528 <__gethex+0x260>
 800545e:	1bbf      	subs	r7, r7, r6
 8005460:	4639      	mov	r1, r7
 8005462:	4628      	mov	r0, r5
 8005464:	f000 fe35 	bl	80060d2 <__any_on>
 8005468:	4682      	mov	sl, r0
 800546a:	b178      	cbz	r0, 800548c <__gethex+0x1c4>
 800546c:	f04f 0a01 	mov.w	sl, #1
 8005470:	1e7b      	subs	r3, r7, #1
 8005472:	1159      	asrs	r1, r3, #5
 8005474:	f003 021f 	and.w	r2, r3, #31
 8005478:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800547c:	fa0a f202 	lsl.w	r2, sl, r2
 8005480:	420a      	tst	r2, r1
 8005482:	d003      	beq.n	800548c <__gethex+0x1c4>
 8005484:	4553      	cmp	r3, sl
 8005486:	dc46      	bgt.n	8005516 <__gethex+0x24e>
 8005488:	f04f 0a02 	mov.w	sl, #2
 800548c:	4639      	mov	r1, r7
 800548e:	4628      	mov	r0, r5
 8005490:	f7ff feca 	bl	8005228 <rshift>
 8005494:	443c      	add	r4, r7
 8005496:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800549a:	42a3      	cmp	r3, r4
 800549c:	da52      	bge.n	8005544 <__gethex+0x27c>
 800549e:	4629      	mov	r1, r5
 80054a0:	9802      	ldr	r0, [sp, #8]
 80054a2:	f000 fa72 	bl	800598a <_Bfree>
 80054a6:	2300      	movs	r3, #0
 80054a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80054aa:	27a3      	movs	r7, #163	; 0xa3
 80054ac:	6013      	str	r3, [r2, #0]
 80054ae:	e793      	b.n	80053d8 <__gethex+0x110>
 80054b0:	3101      	adds	r1, #1
 80054b2:	105b      	asrs	r3, r3, #1
 80054b4:	e7b0      	b.n	8005418 <__gethex+0x150>
 80054b6:	1e73      	subs	r3, r6, #1
 80054b8:	9305      	str	r3, [sp, #20]
 80054ba:	9a07      	ldr	r2, [sp, #28]
 80054bc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d018      	beq.n	80054f6 <__gethex+0x22e>
 80054c4:	f1bb 0f20 	cmp.w	fp, #32
 80054c8:	d107      	bne.n	80054da <__gethex+0x212>
 80054ca:	9b04      	ldr	r3, [sp, #16]
 80054cc:	f8c3 a000 	str.w	sl, [r3]
 80054d0:	f04f 0a00 	mov.w	sl, #0
 80054d4:	46d3      	mov	fp, sl
 80054d6:	3304      	adds	r3, #4
 80054d8:	9304      	str	r3, [sp, #16]
 80054da:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80054de:	f7ff fede 	bl	800529e <__hexdig_fun>
 80054e2:	f000 000f 	and.w	r0, r0, #15
 80054e6:	fa00 f00b 	lsl.w	r0, r0, fp
 80054ea:	ea4a 0a00 	orr.w	sl, sl, r0
 80054ee:	f10b 0b04 	add.w	fp, fp, #4
 80054f2:	9b05      	ldr	r3, [sp, #20]
 80054f4:	e00d      	b.n	8005512 <__gethex+0x24a>
 80054f6:	9b05      	ldr	r3, [sp, #20]
 80054f8:	9a08      	ldr	r2, [sp, #32]
 80054fa:	4413      	add	r3, r2
 80054fc:	42bb      	cmp	r3, r7
 80054fe:	d3e1      	bcc.n	80054c4 <__gethex+0x1fc>
 8005500:	4618      	mov	r0, r3
 8005502:	9a01      	ldr	r2, [sp, #4]
 8005504:	9903      	ldr	r1, [sp, #12]
 8005506:	9309      	str	r3, [sp, #36]	; 0x24
 8005508:	f001 fb4d 	bl	8006ba6 <strncmp>
 800550c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800550e:	2800      	cmp	r0, #0
 8005510:	d1d8      	bne.n	80054c4 <__gethex+0x1fc>
 8005512:	461e      	mov	r6, r3
 8005514:	e791      	b.n	800543a <__gethex+0x172>
 8005516:	1eb9      	subs	r1, r7, #2
 8005518:	4628      	mov	r0, r5
 800551a:	f000 fdda 	bl	80060d2 <__any_on>
 800551e:	2800      	cmp	r0, #0
 8005520:	d0b2      	beq.n	8005488 <__gethex+0x1c0>
 8005522:	f04f 0a03 	mov.w	sl, #3
 8005526:	e7b1      	b.n	800548c <__gethex+0x1c4>
 8005528:	da09      	bge.n	800553e <__gethex+0x276>
 800552a:	1bf7      	subs	r7, r6, r7
 800552c:	4629      	mov	r1, r5
 800552e:	463a      	mov	r2, r7
 8005530:	9802      	ldr	r0, [sp, #8]
 8005532:	f000 fbf5 	bl	8005d20 <__lshift>
 8005536:	4605      	mov	r5, r0
 8005538:	1be4      	subs	r4, r4, r7
 800553a:	f100 0914 	add.w	r9, r0, #20
 800553e:	f04f 0a00 	mov.w	sl, #0
 8005542:	e7a8      	b.n	8005496 <__gethex+0x1ce>
 8005544:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005548:	42a0      	cmp	r0, r4
 800554a:	dd6b      	ble.n	8005624 <__gethex+0x35c>
 800554c:	1b04      	subs	r4, r0, r4
 800554e:	42a6      	cmp	r6, r4
 8005550:	dc2e      	bgt.n	80055b0 <__gethex+0x2e8>
 8005552:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005556:	2b02      	cmp	r3, #2
 8005558:	d022      	beq.n	80055a0 <__gethex+0x2d8>
 800555a:	2b03      	cmp	r3, #3
 800555c:	d024      	beq.n	80055a8 <__gethex+0x2e0>
 800555e:	2b01      	cmp	r3, #1
 8005560:	d115      	bne.n	800558e <__gethex+0x2c6>
 8005562:	42a6      	cmp	r6, r4
 8005564:	d113      	bne.n	800558e <__gethex+0x2c6>
 8005566:	2e01      	cmp	r6, #1
 8005568:	dc0b      	bgt.n	8005582 <__gethex+0x2ba>
 800556a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800556e:	9a06      	ldr	r2, [sp, #24]
 8005570:	2762      	movs	r7, #98	; 0x62
 8005572:	6013      	str	r3, [r2, #0]
 8005574:	2301      	movs	r3, #1
 8005576:	612b      	str	r3, [r5, #16]
 8005578:	f8c9 3000 	str.w	r3, [r9]
 800557c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800557e:	601d      	str	r5, [r3, #0]
 8005580:	e72a      	b.n	80053d8 <__gethex+0x110>
 8005582:	1e71      	subs	r1, r6, #1
 8005584:	4628      	mov	r0, r5
 8005586:	f000 fda4 	bl	80060d2 <__any_on>
 800558a:	2800      	cmp	r0, #0
 800558c:	d1ed      	bne.n	800556a <__gethex+0x2a2>
 800558e:	4629      	mov	r1, r5
 8005590:	9802      	ldr	r0, [sp, #8]
 8005592:	f000 f9fa 	bl	800598a <_Bfree>
 8005596:	2300      	movs	r3, #0
 8005598:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800559a:	2750      	movs	r7, #80	; 0x50
 800559c:	6013      	str	r3, [r2, #0]
 800559e:	e71b      	b.n	80053d8 <__gethex+0x110>
 80055a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d0e1      	beq.n	800556a <__gethex+0x2a2>
 80055a6:	e7f2      	b.n	800558e <__gethex+0x2c6>
 80055a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1dd      	bne.n	800556a <__gethex+0x2a2>
 80055ae:	e7ee      	b.n	800558e <__gethex+0x2c6>
 80055b0:	1e67      	subs	r7, r4, #1
 80055b2:	f1ba 0f00 	cmp.w	sl, #0
 80055b6:	d132      	bne.n	800561e <__gethex+0x356>
 80055b8:	b127      	cbz	r7, 80055c4 <__gethex+0x2fc>
 80055ba:	4639      	mov	r1, r7
 80055bc:	4628      	mov	r0, r5
 80055be:	f000 fd88 	bl	80060d2 <__any_on>
 80055c2:	4682      	mov	sl, r0
 80055c4:	2301      	movs	r3, #1
 80055c6:	117a      	asrs	r2, r7, #5
 80055c8:	f007 071f 	and.w	r7, r7, #31
 80055cc:	fa03 f707 	lsl.w	r7, r3, r7
 80055d0:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80055d4:	4621      	mov	r1, r4
 80055d6:	421f      	tst	r7, r3
 80055d8:	f04f 0702 	mov.w	r7, #2
 80055dc:	4628      	mov	r0, r5
 80055de:	bf18      	it	ne
 80055e0:	f04a 0a02 	orrne.w	sl, sl, #2
 80055e4:	1b36      	subs	r6, r6, r4
 80055e6:	f7ff fe1f 	bl	8005228 <rshift>
 80055ea:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80055ee:	f1ba 0f00 	cmp.w	sl, #0
 80055f2:	d048      	beq.n	8005686 <__gethex+0x3be>
 80055f4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d015      	beq.n	8005628 <__gethex+0x360>
 80055fc:	2b03      	cmp	r3, #3
 80055fe:	d017      	beq.n	8005630 <__gethex+0x368>
 8005600:	2b01      	cmp	r3, #1
 8005602:	d109      	bne.n	8005618 <__gethex+0x350>
 8005604:	f01a 0f02 	tst.w	sl, #2
 8005608:	d006      	beq.n	8005618 <__gethex+0x350>
 800560a:	f8d9 3000 	ldr.w	r3, [r9]
 800560e:	ea4a 0a03 	orr.w	sl, sl, r3
 8005612:	f01a 0f01 	tst.w	sl, #1
 8005616:	d10e      	bne.n	8005636 <__gethex+0x36e>
 8005618:	f047 0710 	orr.w	r7, r7, #16
 800561c:	e033      	b.n	8005686 <__gethex+0x3be>
 800561e:	f04f 0a01 	mov.w	sl, #1
 8005622:	e7cf      	b.n	80055c4 <__gethex+0x2fc>
 8005624:	2701      	movs	r7, #1
 8005626:	e7e2      	b.n	80055ee <__gethex+0x326>
 8005628:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800562a:	f1c3 0301 	rsb	r3, r3, #1
 800562e:	9315      	str	r3, [sp, #84]	; 0x54
 8005630:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005632:	2b00      	cmp	r3, #0
 8005634:	d0f0      	beq.n	8005618 <__gethex+0x350>
 8005636:	f04f 0c00 	mov.w	ip, #0
 800563a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800563e:	f105 0314 	add.w	r3, r5, #20
 8005642:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8005646:	eb03 010a 	add.w	r1, r3, sl
 800564a:	4618      	mov	r0, r3
 800564c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005650:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005654:	d01c      	beq.n	8005690 <__gethex+0x3c8>
 8005656:	3201      	adds	r2, #1
 8005658:	6002      	str	r2, [r0, #0]
 800565a:	2f02      	cmp	r7, #2
 800565c:	f105 0314 	add.w	r3, r5, #20
 8005660:	d138      	bne.n	80056d4 <__gethex+0x40c>
 8005662:	f8d8 2000 	ldr.w	r2, [r8]
 8005666:	3a01      	subs	r2, #1
 8005668:	42b2      	cmp	r2, r6
 800566a:	d10a      	bne.n	8005682 <__gethex+0x3ba>
 800566c:	2201      	movs	r2, #1
 800566e:	1171      	asrs	r1, r6, #5
 8005670:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005674:	f006 061f 	and.w	r6, r6, #31
 8005678:	fa02 f606 	lsl.w	r6, r2, r6
 800567c:	421e      	tst	r6, r3
 800567e:	bf18      	it	ne
 8005680:	4617      	movne	r7, r2
 8005682:	f047 0720 	orr.w	r7, r7, #32
 8005686:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005688:	601d      	str	r5, [r3, #0]
 800568a:	9b06      	ldr	r3, [sp, #24]
 800568c:	601c      	str	r4, [r3, #0]
 800568e:	e6a3      	b.n	80053d8 <__gethex+0x110>
 8005690:	4299      	cmp	r1, r3
 8005692:	f843 cc04 	str.w	ip, [r3, #-4]
 8005696:	d8d8      	bhi.n	800564a <__gethex+0x382>
 8005698:	68ab      	ldr	r3, [r5, #8]
 800569a:	4599      	cmp	r9, r3
 800569c:	db12      	blt.n	80056c4 <__gethex+0x3fc>
 800569e:	6869      	ldr	r1, [r5, #4]
 80056a0:	9802      	ldr	r0, [sp, #8]
 80056a2:	3101      	adds	r1, #1
 80056a4:	f000 f93d 	bl	8005922 <_Balloc>
 80056a8:	4683      	mov	fp, r0
 80056aa:	692a      	ldr	r2, [r5, #16]
 80056ac:	f105 010c 	add.w	r1, r5, #12
 80056b0:	3202      	adds	r2, #2
 80056b2:	0092      	lsls	r2, r2, #2
 80056b4:	300c      	adds	r0, #12
 80056b6:	f000 f929 	bl	800590c <memcpy>
 80056ba:	4629      	mov	r1, r5
 80056bc:	9802      	ldr	r0, [sp, #8]
 80056be:	f000 f964 	bl	800598a <_Bfree>
 80056c2:	465d      	mov	r5, fp
 80056c4:	692b      	ldr	r3, [r5, #16]
 80056c6:	1c5a      	adds	r2, r3, #1
 80056c8:	612a      	str	r2, [r5, #16]
 80056ca:	2201      	movs	r2, #1
 80056cc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80056d0:	615a      	str	r2, [r3, #20]
 80056d2:	e7c2      	b.n	800565a <__gethex+0x392>
 80056d4:	692a      	ldr	r2, [r5, #16]
 80056d6:	454a      	cmp	r2, r9
 80056d8:	dd0b      	ble.n	80056f2 <__gethex+0x42a>
 80056da:	2101      	movs	r1, #1
 80056dc:	4628      	mov	r0, r5
 80056de:	f7ff fda3 	bl	8005228 <rshift>
 80056e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80056e6:	3401      	adds	r4, #1
 80056e8:	42a3      	cmp	r3, r4
 80056ea:	f6ff aed8 	blt.w	800549e <__gethex+0x1d6>
 80056ee:	2701      	movs	r7, #1
 80056f0:	e7c7      	b.n	8005682 <__gethex+0x3ba>
 80056f2:	f016 061f 	ands.w	r6, r6, #31
 80056f6:	d0fa      	beq.n	80056ee <__gethex+0x426>
 80056f8:	449a      	add	sl, r3
 80056fa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80056fe:	f000 f9d4 	bl	8005aaa <__hi0bits>
 8005702:	f1c6 0620 	rsb	r6, r6, #32
 8005706:	42b0      	cmp	r0, r6
 8005708:	dbe7      	blt.n	80056da <__gethex+0x412>
 800570a:	e7f0      	b.n	80056ee <__gethex+0x426>

0800570c <L_shift>:
 800570c:	f1c2 0208 	rsb	r2, r2, #8
 8005710:	0092      	lsls	r2, r2, #2
 8005712:	b570      	push	{r4, r5, r6, lr}
 8005714:	f1c2 0620 	rsb	r6, r2, #32
 8005718:	6843      	ldr	r3, [r0, #4]
 800571a:	6804      	ldr	r4, [r0, #0]
 800571c:	fa03 f506 	lsl.w	r5, r3, r6
 8005720:	432c      	orrs	r4, r5
 8005722:	40d3      	lsrs	r3, r2
 8005724:	6004      	str	r4, [r0, #0]
 8005726:	f840 3f04 	str.w	r3, [r0, #4]!
 800572a:	4288      	cmp	r0, r1
 800572c:	d3f4      	bcc.n	8005718 <L_shift+0xc>
 800572e:	bd70      	pop	{r4, r5, r6, pc}

08005730 <__match>:
 8005730:	b530      	push	{r4, r5, lr}
 8005732:	6803      	ldr	r3, [r0, #0]
 8005734:	3301      	adds	r3, #1
 8005736:	f811 4b01 	ldrb.w	r4, [r1], #1
 800573a:	b914      	cbnz	r4, 8005742 <__match+0x12>
 800573c:	6003      	str	r3, [r0, #0]
 800573e:	2001      	movs	r0, #1
 8005740:	bd30      	pop	{r4, r5, pc}
 8005742:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005746:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800574a:	2d19      	cmp	r5, #25
 800574c:	bf98      	it	ls
 800574e:	3220      	addls	r2, #32
 8005750:	42a2      	cmp	r2, r4
 8005752:	d0f0      	beq.n	8005736 <__match+0x6>
 8005754:	2000      	movs	r0, #0
 8005756:	e7f3      	b.n	8005740 <__match+0x10>

08005758 <__hexnan>:
 8005758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800575c:	2500      	movs	r5, #0
 800575e:	680b      	ldr	r3, [r1, #0]
 8005760:	4682      	mov	sl, r0
 8005762:	115f      	asrs	r7, r3, #5
 8005764:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8005768:	f013 031f 	ands.w	r3, r3, #31
 800576c:	bf18      	it	ne
 800576e:	3704      	addne	r7, #4
 8005770:	1f3e      	subs	r6, r7, #4
 8005772:	4690      	mov	r8, r2
 8005774:	46b1      	mov	r9, r6
 8005776:	4634      	mov	r4, r6
 8005778:	46ab      	mov	fp, r5
 800577a:	b087      	sub	sp, #28
 800577c:	6801      	ldr	r1, [r0, #0]
 800577e:	9301      	str	r3, [sp, #4]
 8005780:	f847 5c04 	str.w	r5, [r7, #-4]
 8005784:	9502      	str	r5, [sp, #8]
 8005786:	784a      	ldrb	r2, [r1, #1]
 8005788:	1c4b      	adds	r3, r1, #1
 800578a:	9303      	str	r3, [sp, #12]
 800578c:	b342      	cbz	r2, 80057e0 <__hexnan+0x88>
 800578e:	4610      	mov	r0, r2
 8005790:	9105      	str	r1, [sp, #20]
 8005792:	9204      	str	r2, [sp, #16]
 8005794:	f7ff fd83 	bl	800529e <__hexdig_fun>
 8005798:	2800      	cmp	r0, #0
 800579a:	d143      	bne.n	8005824 <__hexnan+0xcc>
 800579c:	9a04      	ldr	r2, [sp, #16]
 800579e:	9905      	ldr	r1, [sp, #20]
 80057a0:	2a20      	cmp	r2, #32
 80057a2:	d818      	bhi.n	80057d6 <__hexnan+0x7e>
 80057a4:	9b02      	ldr	r3, [sp, #8]
 80057a6:	459b      	cmp	fp, r3
 80057a8:	dd13      	ble.n	80057d2 <__hexnan+0x7a>
 80057aa:	454c      	cmp	r4, r9
 80057ac:	d206      	bcs.n	80057bc <__hexnan+0x64>
 80057ae:	2d07      	cmp	r5, #7
 80057b0:	dc04      	bgt.n	80057bc <__hexnan+0x64>
 80057b2:	462a      	mov	r2, r5
 80057b4:	4649      	mov	r1, r9
 80057b6:	4620      	mov	r0, r4
 80057b8:	f7ff ffa8 	bl	800570c <L_shift>
 80057bc:	4544      	cmp	r4, r8
 80057be:	d944      	bls.n	800584a <__hexnan+0xf2>
 80057c0:	2300      	movs	r3, #0
 80057c2:	f1a4 0904 	sub.w	r9, r4, #4
 80057c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80057ca:	461d      	mov	r5, r3
 80057cc:	464c      	mov	r4, r9
 80057ce:	f8cd b008 	str.w	fp, [sp, #8]
 80057d2:	9903      	ldr	r1, [sp, #12]
 80057d4:	e7d7      	b.n	8005786 <__hexnan+0x2e>
 80057d6:	2a29      	cmp	r2, #41	; 0x29
 80057d8:	d14a      	bne.n	8005870 <__hexnan+0x118>
 80057da:	3102      	adds	r1, #2
 80057dc:	f8ca 1000 	str.w	r1, [sl]
 80057e0:	f1bb 0f00 	cmp.w	fp, #0
 80057e4:	d044      	beq.n	8005870 <__hexnan+0x118>
 80057e6:	454c      	cmp	r4, r9
 80057e8:	d206      	bcs.n	80057f8 <__hexnan+0xa0>
 80057ea:	2d07      	cmp	r5, #7
 80057ec:	dc04      	bgt.n	80057f8 <__hexnan+0xa0>
 80057ee:	462a      	mov	r2, r5
 80057f0:	4649      	mov	r1, r9
 80057f2:	4620      	mov	r0, r4
 80057f4:	f7ff ff8a 	bl	800570c <L_shift>
 80057f8:	4544      	cmp	r4, r8
 80057fa:	d928      	bls.n	800584e <__hexnan+0xf6>
 80057fc:	4643      	mov	r3, r8
 80057fe:	f854 2b04 	ldr.w	r2, [r4], #4
 8005802:	42a6      	cmp	r6, r4
 8005804:	f843 2b04 	str.w	r2, [r3], #4
 8005808:	d2f9      	bcs.n	80057fe <__hexnan+0xa6>
 800580a:	2200      	movs	r2, #0
 800580c:	f843 2b04 	str.w	r2, [r3], #4
 8005810:	429e      	cmp	r6, r3
 8005812:	d2fb      	bcs.n	800580c <__hexnan+0xb4>
 8005814:	6833      	ldr	r3, [r6, #0]
 8005816:	b91b      	cbnz	r3, 8005820 <__hexnan+0xc8>
 8005818:	4546      	cmp	r6, r8
 800581a:	d127      	bne.n	800586c <__hexnan+0x114>
 800581c:	2301      	movs	r3, #1
 800581e:	6033      	str	r3, [r6, #0]
 8005820:	2005      	movs	r0, #5
 8005822:	e026      	b.n	8005872 <__hexnan+0x11a>
 8005824:	3501      	adds	r5, #1
 8005826:	2d08      	cmp	r5, #8
 8005828:	f10b 0b01 	add.w	fp, fp, #1
 800582c:	dd06      	ble.n	800583c <__hexnan+0xe4>
 800582e:	4544      	cmp	r4, r8
 8005830:	d9cf      	bls.n	80057d2 <__hexnan+0x7a>
 8005832:	2300      	movs	r3, #0
 8005834:	2501      	movs	r5, #1
 8005836:	f844 3c04 	str.w	r3, [r4, #-4]
 800583a:	3c04      	subs	r4, #4
 800583c:	6822      	ldr	r2, [r4, #0]
 800583e:	f000 000f 	and.w	r0, r0, #15
 8005842:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8005846:	6020      	str	r0, [r4, #0]
 8005848:	e7c3      	b.n	80057d2 <__hexnan+0x7a>
 800584a:	2508      	movs	r5, #8
 800584c:	e7c1      	b.n	80057d2 <__hexnan+0x7a>
 800584e:	9b01      	ldr	r3, [sp, #4]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d0df      	beq.n	8005814 <__hexnan+0xbc>
 8005854:	f04f 32ff 	mov.w	r2, #4294967295
 8005858:	f1c3 0320 	rsb	r3, r3, #32
 800585c:	fa22 f303 	lsr.w	r3, r2, r3
 8005860:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8005864:	401a      	ands	r2, r3
 8005866:	f847 2c04 	str.w	r2, [r7, #-4]
 800586a:	e7d3      	b.n	8005814 <__hexnan+0xbc>
 800586c:	3e04      	subs	r6, #4
 800586e:	e7d1      	b.n	8005814 <__hexnan+0xbc>
 8005870:	2004      	movs	r0, #4
 8005872:	b007      	add	sp, #28
 8005874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005878 <__locale_ctype_ptr_l>:
 8005878:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800587c:	4770      	bx	lr
	...

08005880 <__locale_ctype_ptr>:
 8005880:	4b04      	ldr	r3, [pc, #16]	; (8005894 <__locale_ctype_ptr+0x14>)
 8005882:	4a05      	ldr	r2, [pc, #20]	; (8005898 <__locale_ctype_ptr+0x18>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	2b00      	cmp	r3, #0
 800588a:	bf08      	it	eq
 800588c:	4613      	moveq	r3, r2
 800588e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8005892:	4770      	bx	lr
 8005894:	20000004 	.word	0x20000004
 8005898:	20000068 	.word	0x20000068

0800589c <__localeconv_l>:
 800589c:	30f0      	adds	r0, #240	; 0xf0
 800589e:	4770      	bx	lr

080058a0 <_localeconv_r>:
 80058a0:	4b04      	ldr	r3, [pc, #16]	; (80058b4 <_localeconv_r+0x14>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6a18      	ldr	r0, [r3, #32]
 80058a6:	4b04      	ldr	r3, [pc, #16]	; (80058b8 <_localeconv_r+0x18>)
 80058a8:	2800      	cmp	r0, #0
 80058aa:	bf08      	it	eq
 80058ac:	4618      	moveq	r0, r3
 80058ae:	30f0      	adds	r0, #240	; 0xf0
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	20000004 	.word	0x20000004
 80058b8:	20000068 	.word	0x20000068

080058bc <malloc>:
 80058bc:	4b02      	ldr	r3, [pc, #8]	; (80058c8 <malloc+0xc>)
 80058be:	4601      	mov	r1, r0
 80058c0:	6818      	ldr	r0, [r3, #0]
 80058c2:	f000 bc81 	b.w	80061c8 <_malloc_r>
 80058c6:	bf00      	nop
 80058c8:	20000004 	.word	0x20000004

080058cc <__ascii_mbtowc>:
 80058cc:	b082      	sub	sp, #8
 80058ce:	b901      	cbnz	r1, 80058d2 <__ascii_mbtowc+0x6>
 80058d0:	a901      	add	r1, sp, #4
 80058d2:	b142      	cbz	r2, 80058e6 <__ascii_mbtowc+0x1a>
 80058d4:	b14b      	cbz	r3, 80058ea <__ascii_mbtowc+0x1e>
 80058d6:	7813      	ldrb	r3, [r2, #0]
 80058d8:	600b      	str	r3, [r1, #0]
 80058da:	7812      	ldrb	r2, [r2, #0]
 80058dc:	1c10      	adds	r0, r2, #0
 80058de:	bf18      	it	ne
 80058e0:	2001      	movne	r0, #1
 80058e2:	b002      	add	sp, #8
 80058e4:	4770      	bx	lr
 80058e6:	4610      	mov	r0, r2
 80058e8:	e7fb      	b.n	80058e2 <__ascii_mbtowc+0x16>
 80058ea:	f06f 0001 	mvn.w	r0, #1
 80058ee:	e7f8      	b.n	80058e2 <__ascii_mbtowc+0x16>

080058f0 <memchr>:
 80058f0:	b510      	push	{r4, lr}
 80058f2:	b2c9      	uxtb	r1, r1
 80058f4:	4402      	add	r2, r0
 80058f6:	4290      	cmp	r0, r2
 80058f8:	4603      	mov	r3, r0
 80058fa:	d101      	bne.n	8005900 <memchr+0x10>
 80058fc:	2300      	movs	r3, #0
 80058fe:	e003      	b.n	8005908 <memchr+0x18>
 8005900:	781c      	ldrb	r4, [r3, #0]
 8005902:	3001      	adds	r0, #1
 8005904:	428c      	cmp	r4, r1
 8005906:	d1f6      	bne.n	80058f6 <memchr+0x6>
 8005908:	4618      	mov	r0, r3
 800590a:	bd10      	pop	{r4, pc}

0800590c <memcpy>:
 800590c:	b510      	push	{r4, lr}
 800590e:	1e43      	subs	r3, r0, #1
 8005910:	440a      	add	r2, r1
 8005912:	4291      	cmp	r1, r2
 8005914:	d100      	bne.n	8005918 <memcpy+0xc>
 8005916:	bd10      	pop	{r4, pc}
 8005918:	f811 4b01 	ldrb.w	r4, [r1], #1
 800591c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005920:	e7f7      	b.n	8005912 <memcpy+0x6>

08005922 <_Balloc>:
 8005922:	b570      	push	{r4, r5, r6, lr}
 8005924:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005926:	4604      	mov	r4, r0
 8005928:	460e      	mov	r6, r1
 800592a:	b93d      	cbnz	r5, 800593c <_Balloc+0x1a>
 800592c:	2010      	movs	r0, #16
 800592e:	f7ff ffc5 	bl	80058bc <malloc>
 8005932:	6260      	str	r0, [r4, #36]	; 0x24
 8005934:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005938:	6005      	str	r5, [r0, #0]
 800593a:	60c5      	str	r5, [r0, #12]
 800593c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800593e:	68eb      	ldr	r3, [r5, #12]
 8005940:	b183      	cbz	r3, 8005964 <_Balloc+0x42>
 8005942:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800594a:	b9b8      	cbnz	r0, 800597c <_Balloc+0x5a>
 800594c:	2101      	movs	r1, #1
 800594e:	fa01 f506 	lsl.w	r5, r1, r6
 8005952:	1d6a      	adds	r2, r5, #5
 8005954:	0092      	lsls	r2, r2, #2
 8005956:	4620      	mov	r0, r4
 8005958:	f000 fbdc 	bl	8006114 <_calloc_r>
 800595c:	b160      	cbz	r0, 8005978 <_Balloc+0x56>
 800595e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005962:	e00e      	b.n	8005982 <_Balloc+0x60>
 8005964:	2221      	movs	r2, #33	; 0x21
 8005966:	2104      	movs	r1, #4
 8005968:	4620      	mov	r0, r4
 800596a:	f000 fbd3 	bl	8006114 <_calloc_r>
 800596e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005970:	60e8      	str	r0, [r5, #12]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1e4      	bne.n	8005942 <_Balloc+0x20>
 8005978:	2000      	movs	r0, #0
 800597a:	bd70      	pop	{r4, r5, r6, pc}
 800597c:	6802      	ldr	r2, [r0, #0]
 800597e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005982:	2300      	movs	r3, #0
 8005984:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005988:	e7f7      	b.n	800597a <_Balloc+0x58>

0800598a <_Bfree>:
 800598a:	b570      	push	{r4, r5, r6, lr}
 800598c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800598e:	4606      	mov	r6, r0
 8005990:	460d      	mov	r5, r1
 8005992:	b93c      	cbnz	r4, 80059a4 <_Bfree+0x1a>
 8005994:	2010      	movs	r0, #16
 8005996:	f7ff ff91 	bl	80058bc <malloc>
 800599a:	6270      	str	r0, [r6, #36]	; 0x24
 800599c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80059a0:	6004      	str	r4, [r0, #0]
 80059a2:	60c4      	str	r4, [r0, #12]
 80059a4:	b13d      	cbz	r5, 80059b6 <_Bfree+0x2c>
 80059a6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80059a8:	686a      	ldr	r2, [r5, #4]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80059b0:	6029      	str	r1, [r5, #0]
 80059b2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80059b6:	bd70      	pop	{r4, r5, r6, pc}

080059b8 <__multadd>:
 80059b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059bc:	461f      	mov	r7, r3
 80059be:	4606      	mov	r6, r0
 80059c0:	460c      	mov	r4, r1
 80059c2:	2300      	movs	r3, #0
 80059c4:	690d      	ldr	r5, [r1, #16]
 80059c6:	f101 0c14 	add.w	ip, r1, #20
 80059ca:	f8dc 0000 	ldr.w	r0, [ip]
 80059ce:	3301      	adds	r3, #1
 80059d0:	b281      	uxth	r1, r0
 80059d2:	fb02 7101 	mla	r1, r2, r1, r7
 80059d6:	0c00      	lsrs	r0, r0, #16
 80059d8:	0c0f      	lsrs	r7, r1, #16
 80059da:	fb02 7000 	mla	r0, r2, r0, r7
 80059de:	b289      	uxth	r1, r1
 80059e0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80059e4:	429d      	cmp	r5, r3
 80059e6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80059ea:	f84c 1b04 	str.w	r1, [ip], #4
 80059ee:	dcec      	bgt.n	80059ca <__multadd+0x12>
 80059f0:	b1d7      	cbz	r7, 8005a28 <__multadd+0x70>
 80059f2:	68a3      	ldr	r3, [r4, #8]
 80059f4:	42ab      	cmp	r3, r5
 80059f6:	dc12      	bgt.n	8005a1e <__multadd+0x66>
 80059f8:	6861      	ldr	r1, [r4, #4]
 80059fa:	4630      	mov	r0, r6
 80059fc:	3101      	adds	r1, #1
 80059fe:	f7ff ff90 	bl	8005922 <_Balloc>
 8005a02:	4680      	mov	r8, r0
 8005a04:	6922      	ldr	r2, [r4, #16]
 8005a06:	f104 010c 	add.w	r1, r4, #12
 8005a0a:	3202      	adds	r2, #2
 8005a0c:	0092      	lsls	r2, r2, #2
 8005a0e:	300c      	adds	r0, #12
 8005a10:	f7ff ff7c 	bl	800590c <memcpy>
 8005a14:	4621      	mov	r1, r4
 8005a16:	4630      	mov	r0, r6
 8005a18:	f7ff ffb7 	bl	800598a <_Bfree>
 8005a1c:	4644      	mov	r4, r8
 8005a1e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005a22:	3501      	adds	r5, #1
 8005a24:	615f      	str	r7, [r3, #20]
 8005a26:	6125      	str	r5, [r4, #16]
 8005a28:	4620      	mov	r0, r4
 8005a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005a2e <__s2b>:
 8005a2e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a32:	4615      	mov	r5, r2
 8005a34:	2209      	movs	r2, #9
 8005a36:	461f      	mov	r7, r3
 8005a38:	3308      	adds	r3, #8
 8005a3a:	460c      	mov	r4, r1
 8005a3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a40:	4606      	mov	r6, r0
 8005a42:	2201      	movs	r2, #1
 8005a44:	2100      	movs	r1, #0
 8005a46:	429a      	cmp	r2, r3
 8005a48:	db20      	blt.n	8005a8c <__s2b+0x5e>
 8005a4a:	4630      	mov	r0, r6
 8005a4c:	f7ff ff69 	bl	8005922 <_Balloc>
 8005a50:	9b08      	ldr	r3, [sp, #32]
 8005a52:	2d09      	cmp	r5, #9
 8005a54:	6143      	str	r3, [r0, #20]
 8005a56:	f04f 0301 	mov.w	r3, #1
 8005a5a:	6103      	str	r3, [r0, #16]
 8005a5c:	dd19      	ble.n	8005a92 <__s2b+0x64>
 8005a5e:	f104 0809 	add.w	r8, r4, #9
 8005a62:	46c1      	mov	r9, r8
 8005a64:	442c      	add	r4, r5
 8005a66:	f819 3b01 	ldrb.w	r3, [r9], #1
 8005a6a:	4601      	mov	r1, r0
 8005a6c:	3b30      	subs	r3, #48	; 0x30
 8005a6e:	220a      	movs	r2, #10
 8005a70:	4630      	mov	r0, r6
 8005a72:	f7ff ffa1 	bl	80059b8 <__multadd>
 8005a76:	45a1      	cmp	r9, r4
 8005a78:	d1f5      	bne.n	8005a66 <__s2b+0x38>
 8005a7a:	eb08 0405 	add.w	r4, r8, r5
 8005a7e:	3c08      	subs	r4, #8
 8005a80:	1b2d      	subs	r5, r5, r4
 8005a82:	1963      	adds	r3, r4, r5
 8005a84:	42bb      	cmp	r3, r7
 8005a86:	db07      	blt.n	8005a98 <__s2b+0x6a>
 8005a88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a8c:	0052      	lsls	r2, r2, #1
 8005a8e:	3101      	adds	r1, #1
 8005a90:	e7d9      	b.n	8005a46 <__s2b+0x18>
 8005a92:	340a      	adds	r4, #10
 8005a94:	2509      	movs	r5, #9
 8005a96:	e7f3      	b.n	8005a80 <__s2b+0x52>
 8005a98:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005a9c:	4601      	mov	r1, r0
 8005a9e:	3b30      	subs	r3, #48	; 0x30
 8005aa0:	220a      	movs	r2, #10
 8005aa2:	4630      	mov	r0, r6
 8005aa4:	f7ff ff88 	bl	80059b8 <__multadd>
 8005aa8:	e7eb      	b.n	8005a82 <__s2b+0x54>

08005aaa <__hi0bits>:
 8005aaa:	0c02      	lsrs	r2, r0, #16
 8005aac:	0412      	lsls	r2, r2, #16
 8005aae:	4603      	mov	r3, r0
 8005ab0:	b9b2      	cbnz	r2, 8005ae0 <__hi0bits+0x36>
 8005ab2:	0403      	lsls	r3, r0, #16
 8005ab4:	2010      	movs	r0, #16
 8005ab6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005aba:	bf04      	itt	eq
 8005abc:	021b      	lsleq	r3, r3, #8
 8005abe:	3008      	addeq	r0, #8
 8005ac0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005ac4:	bf04      	itt	eq
 8005ac6:	011b      	lsleq	r3, r3, #4
 8005ac8:	3004      	addeq	r0, #4
 8005aca:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005ace:	bf04      	itt	eq
 8005ad0:	009b      	lsleq	r3, r3, #2
 8005ad2:	3002      	addeq	r0, #2
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	db06      	blt.n	8005ae6 <__hi0bits+0x3c>
 8005ad8:	005b      	lsls	r3, r3, #1
 8005ada:	d503      	bpl.n	8005ae4 <__hi0bits+0x3a>
 8005adc:	3001      	adds	r0, #1
 8005ade:	4770      	bx	lr
 8005ae0:	2000      	movs	r0, #0
 8005ae2:	e7e8      	b.n	8005ab6 <__hi0bits+0xc>
 8005ae4:	2020      	movs	r0, #32
 8005ae6:	4770      	bx	lr

08005ae8 <__lo0bits>:
 8005ae8:	6803      	ldr	r3, [r0, #0]
 8005aea:	4601      	mov	r1, r0
 8005aec:	f013 0207 	ands.w	r2, r3, #7
 8005af0:	d00b      	beq.n	8005b0a <__lo0bits+0x22>
 8005af2:	07da      	lsls	r2, r3, #31
 8005af4:	d423      	bmi.n	8005b3e <__lo0bits+0x56>
 8005af6:	0798      	lsls	r0, r3, #30
 8005af8:	bf49      	itett	mi
 8005afa:	085b      	lsrmi	r3, r3, #1
 8005afc:	089b      	lsrpl	r3, r3, #2
 8005afe:	2001      	movmi	r0, #1
 8005b00:	600b      	strmi	r3, [r1, #0]
 8005b02:	bf5c      	itt	pl
 8005b04:	600b      	strpl	r3, [r1, #0]
 8005b06:	2002      	movpl	r0, #2
 8005b08:	4770      	bx	lr
 8005b0a:	b298      	uxth	r0, r3
 8005b0c:	b9a8      	cbnz	r0, 8005b3a <__lo0bits+0x52>
 8005b0e:	2010      	movs	r0, #16
 8005b10:	0c1b      	lsrs	r3, r3, #16
 8005b12:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005b16:	bf04      	itt	eq
 8005b18:	0a1b      	lsreq	r3, r3, #8
 8005b1a:	3008      	addeq	r0, #8
 8005b1c:	071a      	lsls	r2, r3, #28
 8005b1e:	bf04      	itt	eq
 8005b20:	091b      	lsreq	r3, r3, #4
 8005b22:	3004      	addeq	r0, #4
 8005b24:	079a      	lsls	r2, r3, #30
 8005b26:	bf04      	itt	eq
 8005b28:	089b      	lsreq	r3, r3, #2
 8005b2a:	3002      	addeq	r0, #2
 8005b2c:	07da      	lsls	r2, r3, #31
 8005b2e:	d402      	bmi.n	8005b36 <__lo0bits+0x4e>
 8005b30:	085b      	lsrs	r3, r3, #1
 8005b32:	d006      	beq.n	8005b42 <__lo0bits+0x5a>
 8005b34:	3001      	adds	r0, #1
 8005b36:	600b      	str	r3, [r1, #0]
 8005b38:	4770      	bx	lr
 8005b3a:	4610      	mov	r0, r2
 8005b3c:	e7e9      	b.n	8005b12 <__lo0bits+0x2a>
 8005b3e:	2000      	movs	r0, #0
 8005b40:	4770      	bx	lr
 8005b42:	2020      	movs	r0, #32
 8005b44:	4770      	bx	lr

08005b46 <__i2b>:
 8005b46:	b510      	push	{r4, lr}
 8005b48:	460c      	mov	r4, r1
 8005b4a:	2101      	movs	r1, #1
 8005b4c:	f7ff fee9 	bl	8005922 <_Balloc>
 8005b50:	2201      	movs	r2, #1
 8005b52:	6144      	str	r4, [r0, #20]
 8005b54:	6102      	str	r2, [r0, #16]
 8005b56:	bd10      	pop	{r4, pc}

08005b58 <__multiply>:
 8005b58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b5c:	4614      	mov	r4, r2
 8005b5e:	690a      	ldr	r2, [r1, #16]
 8005b60:	6923      	ldr	r3, [r4, #16]
 8005b62:	4688      	mov	r8, r1
 8005b64:	429a      	cmp	r2, r3
 8005b66:	bfbe      	ittt	lt
 8005b68:	460b      	movlt	r3, r1
 8005b6a:	46a0      	movlt	r8, r4
 8005b6c:	461c      	movlt	r4, r3
 8005b6e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005b72:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005b76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005b7a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005b7e:	eb07 0609 	add.w	r6, r7, r9
 8005b82:	42b3      	cmp	r3, r6
 8005b84:	bfb8      	it	lt
 8005b86:	3101      	addlt	r1, #1
 8005b88:	f7ff fecb 	bl	8005922 <_Balloc>
 8005b8c:	f100 0514 	add.w	r5, r0, #20
 8005b90:	462b      	mov	r3, r5
 8005b92:	2200      	movs	r2, #0
 8005b94:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005b98:	4573      	cmp	r3, lr
 8005b9a:	d316      	bcc.n	8005bca <__multiply+0x72>
 8005b9c:	f104 0214 	add.w	r2, r4, #20
 8005ba0:	f108 0114 	add.w	r1, r8, #20
 8005ba4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005ba8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005bac:	9300      	str	r3, [sp, #0]
 8005bae:	9b00      	ldr	r3, [sp, #0]
 8005bb0:	9201      	str	r2, [sp, #4]
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d80c      	bhi.n	8005bd0 <__multiply+0x78>
 8005bb6:	2e00      	cmp	r6, #0
 8005bb8:	dd03      	ble.n	8005bc2 <__multiply+0x6a>
 8005bba:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d05d      	beq.n	8005c7e <__multiply+0x126>
 8005bc2:	6106      	str	r6, [r0, #16]
 8005bc4:	b003      	add	sp, #12
 8005bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bca:	f843 2b04 	str.w	r2, [r3], #4
 8005bce:	e7e3      	b.n	8005b98 <__multiply+0x40>
 8005bd0:	f8b2 b000 	ldrh.w	fp, [r2]
 8005bd4:	f1bb 0f00 	cmp.w	fp, #0
 8005bd8:	d023      	beq.n	8005c22 <__multiply+0xca>
 8005bda:	4689      	mov	r9, r1
 8005bdc:	46ac      	mov	ip, r5
 8005bde:	f04f 0800 	mov.w	r8, #0
 8005be2:	f859 4b04 	ldr.w	r4, [r9], #4
 8005be6:	f8dc a000 	ldr.w	sl, [ip]
 8005bea:	b2a3      	uxth	r3, r4
 8005bec:	fa1f fa8a 	uxth.w	sl, sl
 8005bf0:	fb0b a303 	mla	r3, fp, r3, sl
 8005bf4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005bf8:	f8dc 4000 	ldr.w	r4, [ip]
 8005bfc:	4443      	add	r3, r8
 8005bfe:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005c02:	fb0b 840a 	mla	r4, fp, sl, r8
 8005c06:	46e2      	mov	sl, ip
 8005c08:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005c12:	454f      	cmp	r7, r9
 8005c14:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005c18:	f84a 3b04 	str.w	r3, [sl], #4
 8005c1c:	d82b      	bhi.n	8005c76 <__multiply+0x11e>
 8005c1e:	f8cc 8004 	str.w	r8, [ip, #4]
 8005c22:	9b01      	ldr	r3, [sp, #4]
 8005c24:	3204      	adds	r2, #4
 8005c26:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005c2a:	f1ba 0f00 	cmp.w	sl, #0
 8005c2e:	d020      	beq.n	8005c72 <__multiply+0x11a>
 8005c30:	4689      	mov	r9, r1
 8005c32:	46a8      	mov	r8, r5
 8005c34:	f04f 0b00 	mov.w	fp, #0
 8005c38:	682b      	ldr	r3, [r5, #0]
 8005c3a:	f8b9 c000 	ldrh.w	ip, [r9]
 8005c3e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	fb0a 440c 	mla	r4, sl, ip, r4
 8005c48:	46c4      	mov	ip, r8
 8005c4a:	445c      	add	r4, fp
 8005c4c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005c50:	f84c 3b04 	str.w	r3, [ip], #4
 8005c54:	f859 3b04 	ldr.w	r3, [r9], #4
 8005c58:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005c5c:	0c1b      	lsrs	r3, r3, #16
 8005c5e:	fb0a b303 	mla	r3, sl, r3, fp
 8005c62:	454f      	cmp	r7, r9
 8005c64:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005c68:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005c6c:	d805      	bhi.n	8005c7a <__multiply+0x122>
 8005c6e:	f8c8 3004 	str.w	r3, [r8, #4]
 8005c72:	3504      	adds	r5, #4
 8005c74:	e79b      	b.n	8005bae <__multiply+0x56>
 8005c76:	46d4      	mov	ip, sl
 8005c78:	e7b3      	b.n	8005be2 <__multiply+0x8a>
 8005c7a:	46e0      	mov	r8, ip
 8005c7c:	e7dd      	b.n	8005c3a <__multiply+0xe2>
 8005c7e:	3e01      	subs	r6, #1
 8005c80:	e799      	b.n	8005bb6 <__multiply+0x5e>
	...

08005c84 <__pow5mult>:
 8005c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c88:	4615      	mov	r5, r2
 8005c8a:	f012 0203 	ands.w	r2, r2, #3
 8005c8e:	4606      	mov	r6, r0
 8005c90:	460f      	mov	r7, r1
 8005c92:	d007      	beq.n	8005ca4 <__pow5mult+0x20>
 8005c94:	4c21      	ldr	r4, [pc, #132]	; (8005d1c <__pow5mult+0x98>)
 8005c96:	3a01      	subs	r2, #1
 8005c98:	2300      	movs	r3, #0
 8005c9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005c9e:	f7ff fe8b 	bl	80059b8 <__multadd>
 8005ca2:	4607      	mov	r7, r0
 8005ca4:	10ad      	asrs	r5, r5, #2
 8005ca6:	d035      	beq.n	8005d14 <__pow5mult+0x90>
 8005ca8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005caa:	b93c      	cbnz	r4, 8005cbc <__pow5mult+0x38>
 8005cac:	2010      	movs	r0, #16
 8005cae:	f7ff fe05 	bl	80058bc <malloc>
 8005cb2:	6270      	str	r0, [r6, #36]	; 0x24
 8005cb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005cb8:	6004      	str	r4, [r0, #0]
 8005cba:	60c4      	str	r4, [r0, #12]
 8005cbc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005cc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005cc4:	b94c      	cbnz	r4, 8005cda <__pow5mult+0x56>
 8005cc6:	f240 2171 	movw	r1, #625	; 0x271
 8005cca:	4630      	mov	r0, r6
 8005ccc:	f7ff ff3b 	bl	8005b46 <__i2b>
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	4604      	mov	r4, r0
 8005cd4:	f8c8 0008 	str.w	r0, [r8, #8]
 8005cd8:	6003      	str	r3, [r0, #0]
 8005cda:	f04f 0800 	mov.w	r8, #0
 8005cde:	07eb      	lsls	r3, r5, #31
 8005ce0:	d50a      	bpl.n	8005cf8 <__pow5mult+0x74>
 8005ce2:	4639      	mov	r1, r7
 8005ce4:	4622      	mov	r2, r4
 8005ce6:	4630      	mov	r0, r6
 8005ce8:	f7ff ff36 	bl	8005b58 <__multiply>
 8005cec:	4681      	mov	r9, r0
 8005cee:	4639      	mov	r1, r7
 8005cf0:	4630      	mov	r0, r6
 8005cf2:	f7ff fe4a 	bl	800598a <_Bfree>
 8005cf6:	464f      	mov	r7, r9
 8005cf8:	106d      	asrs	r5, r5, #1
 8005cfa:	d00b      	beq.n	8005d14 <__pow5mult+0x90>
 8005cfc:	6820      	ldr	r0, [r4, #0]
 8005cfe:	b938      	cbnz	r0, 8005d10 <__pow5mult+0x8c>
 8005d00:	4622      	mov	r2, r4
 8005d02:	4621      	mov	r1, r4
 8005d04:	4630      	mov	r0, r6
 8005d06:	f7ff ff27 	bl	8005b58 <__multiply>
 8005d0a:	6020      	str	r0, [r4, #0]
 8005d0c:	f8c0 8000 	str.w	r8, [r0]
 8005d10:	4604      	mov	r4, r0
 8005d12:	e7e4      	b.n	8005cde <__pow5mult+0x5a>
 8005d14:	4638      	mov	r0, r7
 8005d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d1a:	bf00      	nop
 8005d1c:	08009c10 	.word	0x08009c10

08005d20 <__lshift>:
 8005d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d24:	460c      	mov	r4, r1
 8005d26:	4607      	mov	r7, r0
 8005d28:	4616      	mov	r6, r2
 8005d2a:	6923      	ldr	r3, [r4, #16]
 8005d2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005d30:	eb0a 0903 	add.w	r9, sl, r3
 8005d34:	6849      	ldr	r1, [r1, #4]
 8005d36:	68a3      	ldr	r3, [r4, #8]
 8005d38:	f109 0501 	add.w	r5, r9, #1
 8005d3c:	42ab      	cmp	r3, r5
 8005d3e:	db32      	blt.n	8005da6 <__lshift+0x86>
 8005d40:	4638      	mov	r0, r7
 8005d42:	f7ff fdee 	bl	8005922 <_Balloc>
 8005d46:	2300      	movs	r3, #0
 8005d48:	4680      	mov	r8, r0
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	f100 0114 	add.w	r1, r0, #20
 8005d50:	4553      	cmp	r3, sl
 8005d52:	db2b      	blt.n	8005dac <__lshift+0x8c>
 8005d54:	6920      	ldr	r0, [r4, #16]
 8005d56:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005d5a:	f104 0314 	add.w	r3, r4, #20
 8005d5e:	f016 021f 	ands.w	r2, r6, #31
 8005d62:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005d66:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005d6a:	d025      	beq.n	8005db8 <__lshift+0x98>
 8005d6c:	2000      	movs	r0, #0
 8005d6e:	f1c2 0e20 	rsb	lr, r2, #32
 8005d72:	468a      	mov	sl, r1
 8005d74:	681e      	ldr	r6, [r3, #0]
 8005d76:	4096      	lsls	r6, r2
 8005d78:	4330      	orrs	r0, r6
 8005d7a:	f84a 0b04 	str.w	r0, [sl], #4
 8005d7e:	f853 0b04 	ldr.w	r0, [r3], #4
 8005d82:	459c      	cmp	ip, r3
 8005d84:	fa20 f00e 	lsr.w	r0, r0, lr
 8005d88:	d814      	bhi.n	8005db4 <__lshift+0x94>
 8005d8a:	6048      	str	r0, [r1, #4]
 8005d8c:	b108      	cbz	r0, 8005d92 <__lshift+0x72>
 8005d8e:	f109 0502 	add.w	r5, r9, #2
 8005d92:	3d01      	subs	r5, #1
 8005d94:	4638      	mov	r0, r7
 8005d96:	f8c8 5010 	str.w	r5, [r8, #16]
 8005d9a:	4621      	mov	r1, r4
 8005d9c:	f7ff fdf5 	bl	800598a <_Bfree>
 8005da0:	4640      	mov	r0, r8
 8005da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005da6:	3101      	adds	r1, #1
 8005da8:	005b      	lsls	r3, r3, #1
 8005daa:	e7c7      	b.n	8005d3c <__lshift+0x1c>
 8005dac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005db0:	3301      	adds	r3, #1
 8005db2:	e7cd      	b.n	8005d50 <__lshift+0x30>
 8005db4:	4651      	mov	r1, sl
 8005db6:	e7dc      	b.n	8005d72 <__lshift+0x52>
 8005db8:	3904      	subs	r1, #4
 8005dba:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dbe:	459c      	cmp	ip, r3
 8005dc0:	f841 2f04 	str.w	r2, [r1, #4]!
 8005dc4:	d8f9      	bhi.n	8005dba <__lshift+0x9a>
 8005dc6:	e7e4      	b.n	8005d92 <__lshift+0x72>

08005dc8 <__mcmp>:
 8005dc8:	6903      	ldr	r3, [r0, #16]
 8005dca:	690a      	ldr	r2, [r1, #16]
 8005dcc:	b530      	push	{r4, r5, lr}
 8005dce:	1a9b      	subs	r3, r3, r2
 8005dd0:	d10c      	bne.n	8005dec <__mcmp+0x24>
 8005dd2:	0092      	lsls	r2, r2, #2
 8005dd4:	3014      	adds	r0, #20
 8005dd6:	3114      	adds	r1, #20
 8005dd8:	1884      	adds	r4, r0, r2
 8005dda:	4411      	add	r1, r2
 8005ddc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005de0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005de4:	4295      	cmp	r5, r2
 8005de6:	d003      	beq.n	8005df0 <__mcmp+0x28>
 8005de8:	d305      	bcc.n	8005df6 <__mcmp+0x2e>
 8005dea:	2301      	movs	r3, #1
 8005dec:	4618      	mov	r0, r3
 8005dee:	bd30      	pop	{r4, r5, pc}
 8005df0:	42a0      	cmp	r0, r4
 8005df2:	d3f3      	bcc.n	8005ddc <__mcmp+0x14>
 8005df4:	e7fa      	b.n	8005dec <__mcmp+0x24>
 8005df6:	f04f 33ff 	mov.w	r3, #4294967295
 8005dfa:	e7f7      	b.n	8005dec <__mcmp+0x24>

08005dfc <__mdiff>:
 8005dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e00:	460d      	mov	r5, r1
 8005e02:	4607      	mov	r7, r0
 8005e04:	4611      	mov	r1, r2
 8005e06:	4628      	mov	r0, r5
 8005e08:	4614      	mov	r4, r2
 8005e0a:	f7ff ffdd 	bl	8005dc8 <__mcmp>
 8005e0e:	1e06      	subs	r6, r0, #0
 8005e10:	d108      	bne.n	8005e24 <__mdiff+0x28>
 8005e12:	4631      	mov	r1, r6
 8005e14:	4638      	mov	r0, r7
 8005e16:	f7ff fd84 	bl	8005922 <_Balloc>
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e24:	bfa4      	itt	ge
 8005e26:	4623      	movge	r3, r4
 8005e28:	462c      	movge	r4, r5
 8005e2a:	4638      	mov	r0, r7
 8005e2c:	6861      	ldr	r1, [r4, #4]
 8005e2e:	bfa6      	itte	ge
 8005e30:	461d      	movge	r5, r3
 8005e32:	2600      	movge	r6, #0
 8005e34:	2601      	movlt	r6, #1
 8005e36:	f7ff fd74 	bl	8005922 <_Balloc>
 8005e3a:	f04f 0e00 	mov.w	lr, #0
 8005e3e:	60c6      	str	r6, [r0, #12]
 8005e40:	692b      	ldr	r3, [r5, #16]
 8005e42:	6926      	ldr	r6, [r4, #16]
 8005e44:	f104 0214 	add.w	r2, r4, #20
 8005e48:	f105 0914 	add.w	r9, r5, #20
 8005e4c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005e50:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005e54:	f100 0114 	add.w	r1, r0, #20
 8005e58:	f852 ab04 	ldr.w	sl, [r2], #4
 8005e5c:	f859 5b04 	ldr.w	r5, [r9], #4
 8005e60:	fa1f f38a 	uxth.w	r3, sl
 8005e64:	4473      	add	r3, lr
 8005e66:	b2ac      	uxth	r4, r5
 8005e68:	1b1b      	subs	r3, r3, r4
 8005e6a:	0c2c      	lsrs	r4, r5, #16
 8005e6c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8005e70:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8005e7a:	45c8      	cmp	r8, r9
 8005e7c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8005e80:	4694      	mov	ip, r2
 8005e82:	f841 4b04 	str.w	r4, [r1], #4
 8005e86:	d8e7      	bhi.n	8005e58 <__mdiff+0x5c>
 8005e88:	45bc      	cmp	ip, r7
 8005e8a:	d304      	bcc.n	8005e96 <__mdiff+0x9a>
 8005e8c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005e90:	b183      	cbz	r3, 8005eb4 <__mdiff+0xb8>
 8005e92:	6106      	str	r6, [r0, #16]
 8005e94:	e7c4      	b.n	8005e20 <__mdiff+0x24>
 8005e96:	f85c 4b04 	ldr.w	r4, [ip], #4
 8005e9a:	b2a2      	uxth	r2, r4
 8005e9c:	4472      	add	r2, lr
 8005e9e:	1413      	asrs	r3, r2, #16
 8005ea0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005ea4:	b292      	uxth	r2, r2
 8005ea6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005eaa:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005eae:	f841 2b04 	str.w	r2, [r1], #4
 8005eb2:	e7e9      	b.n	8005e88 <__mdiff+0x8c>
 8005eb4:	3e01      	subs	r6, #1
 8005eb6:	e7e9      	b.n	8005e8c <__mdiff+0x90>

08005eb8 <__ulp>:
 8005eb8:	4b10      	ldr	r3, [pc, #64]	; (8005efc <__ulp+0x44>)
 8005eba:	400b      	ands	r3, r1
 8005ebc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	dd02      	ble.n	8005eca <__ulp+0x12>
 8005ec4:	2000      	movs	r0, #0
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	4770      	bx	lr
 8005eca:	425b      	negs	r3, r3
 8005ecc:	151b      	asrs	r3, r3, #20
 8005ece:	2b13      	cmp	r3, #19
 8005ed0:	f04f 0000 	mov.w	r0, #0
 8005ed4:	f04f 0100 	mov.w	r1, #0
 8005ed8:	dc04      	bgt.n	8005ee4 <__ulp+0x2c>
 8005eda:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005ede:	fa42 f103 	asr.w	r1, r2, r3
 8005ee2:	4770      	bx	lr
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	3b14      	subs	r3, #20
 8005ee8:	2b1e      	cmp	r3, #30
 8005eea:	bfce      	itee	gt
 8005eec:	4613      	movgt	r3, r2
 8005eee:	f1c3 031f 	rsble	r3, r3, #31
 8005ef2:	fa02 f303 	lslle.w	r3, r2, r3
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	7ff00000 	.word	0x7ff00000

08005f00 <__b2d>:
 8005f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f04:	6907      	ldr	r7, [r0, #16]
 8005f06:	f100 0914 	add.w	r9, r0, #20
 8005f0a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8005f0e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8005f12:	f1a7 0804 	sub.w	r8, r7, #4
 8005f16:	4630      	mov	r0, r6
 8005f18:	f7ff fdc7 	bl	8005aaa <__hi0bits>
 8005f1c:	f1c0 0320 	rsb	r3, r0, #32
 8005f20:	280a      	cmp	r0, #10
 8005f22:	600b      	str	r3, [r1, #0]
 8005f24:	491e      	ldr	r1, [pc, #120]	; (8005fa0 <__b2d+0xa0>)
 8005f26:	dc17      	bgt.n	8005f58 <__b2d+0x58>
 8005f28:	45c1      	cmp	r9, r8
 8005f2a:	bf28      	it	cs
 8005f2c:	2200      	movcs	r2, #0
 8005f2e:	f1c0 0c0b 	rsb	ip, r0, #11
 8005f32:	fa26 f30c 	lsr.w	r3, r6, ip
 8005f36:	bf38      	it	cc
 8005f38:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8005f3c:	ea43 0501 	orr.w	r5, r3, r1
 8005f40:	f100 0315 	add.w	r3, r0, #21
 8005f44:	fa06 f303 	lsl.w	r3, r6, r3
 8005f48:	fa22 f20c 	lsr.w	r2, r2, ip
 8005f4c:	ea43 0402 	orr.w	r4, r3, r2
 8005f50:	4620      	mov	r0, r4
 8005f52:	4629      	mov	r1, r5
 8005f54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f58:	45c1      	cmp	r9, r8
 8005f5a:	bf3a      	itte	cc
 8005f5c:	f1a7 0808 	subcc.w	r8, r7, #8
 8005f60:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8005f64:	2200      	movcs	r2, #0
 8005f66:	f1b0 030b 	subs.w	r3, r0, #11
 8005f6a:	d015      	beq.n	8005f98 <__b2d+0x98>
 8005f6c:	409e      	lsls	r6, r3
 8005f6e:	f1c3 0720 	rsb	r7, r3, #32
 8005f72:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8005f76:	fa22 f107 	lsr.w	r1, r2, r7
 8005f7a:	45c8      	cmp	r8, r9
 8005f7c:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8005f80:	ea46 0501 	orr.w	r5, r6, r1
 8005f84:	bf94      	ite	ls
 8005f86:	2100      	movls	r1, #0
 8005f88:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8005f8c:	fa02 f003 	lsl.w	r0, r2, r3
 8005f90:	40f9      	lsrs	r1, r7
 8005f92:	ea40 0401 	orr.w	r4, r0, r1
 8005f96:	e7db      	b.n	8005f50 <__b2d+0x50>
 8005f98:	ea46 0501 	orr.w	r5, r6, r1
 8005f9c:	4614      	mov	r4, r2
 8005f9e:	e7d7      	b.n	8005f50 <__b2d+0x50>
 8005fa0:	3ff00000 	.word	0x3ff00000

08005fa4 <__d2b>:
 8005fa4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005fa8:	461c      	mov	r4, r3
 8005faa:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8005fae:	2101      	movs	r1, #1
 8005fb0:	4690      	mov	r8, r2
 8005fb2:	f7ff fcb6 	bl	8005922 <_Balloc>
 8005fb6:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8005fba:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005fbe:	4607      	mov	r7, r0
 8005fc0:	bb34      	cbnz	r4, 8006010 <__d2b+0x6c>
 8005fc2:	9201      	str	r2, [sp, #4]
 8005fc4:	f1b8 0200 	subs.w	r2, r8, #0
 8005fc8:	d027      	beq.n	800601a <__d2b+0x76>
 8005fca:	a802      	add	r0, sp, #8
 8005fcc:	f840 2d08 	str.w	r2, [r0, #-8]!
 8005fd0:	f7ff fd8a 	bl	8005ae8 <__lo0bits>
 8005fd4:	9900      	ldr	r1, [sp, #0]
 8005fd6:	b1f0      	cbz	r0, 8006016 <__d2b+0x72>
 8005fd8:	9a01      	ldr	r2, [sp, #4]
 8005fda:	f1c0 0320 	rsb	r3, r0, #32
 8005fde:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe2:	430b      	orrs	r3, r1
 8005fe4:	40c2      	lsrs	r2, r0
 8005fe6:	617b      	str	r3, [r7, #20]
 8005fe8:	9201      	str	r2, [sp, #4]
 8005fea:	9b01      	ldr	r3, [sp, #4]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	bf14      	ite	ne
 8005ff0:	2102      	movne	r1, #2
 8005ff2:	2101      	moveq	r1, #1
 8005ff4:	61bb      	str	r3, [r7, #24]
 8005ff6:	6139      	str	r1, [r7, #16]
 8005ff8:	b1c4      	cbz	r4, 800602c <__d2b+0x88>
 8005ffa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005ffe:	4404      	add	r4, r0
 8006000:	6034      	str	r4, [r6, #0]
 8006002:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006006:	6028      	str	r0, [r5, #0]
 8006008:	4638      	mov	r0, r7
 800600a:	b002      	add	sp, #8
 800600c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006010:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006014:	e7d5      	b.n	8005fc2 <__d2b+0x1e>
 8006016:	6179      	str	r1, [r7, #20]
 8006018:	e7e7      	b.n	8005fea <__d2b+0x46>
 800601a:	a801      	add	r0, sp, #4
 800601c:	f7ff fd64 	bl	8005ae8 <__lo0bits>
 8006020:	2101      	movs	r1, #1
 8006022:	9b01      	ldr	r3, [sp, #4]
 8006024:	6139      	str	r1, [r7, #16]
 8006026:	617b      	str	r3, [r7, #20]
 8006028:	3020      	adds	r0, #32
 800602a:	e7e5      	b.n	8005ff8 <__d2b+0x54>
 800602c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006030:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006034:	6030      	str	r0, [r6, #0]
 8006036:	6918      	ldr	r0, [r3, #16]
 8006038:	f7ff fd37 	bl	8005aaa <__hi0bits>
 800603c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006040:	e7e1      	b.n	8006006 <__d2b+0x62>

08006042 <__ratio>:
 8006042:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006046:	4688      	mov	r8, r1
 8006048:	4669      	mov	r1, sp
 800604a:	4681      	mov	r9, r0
 800604c:	f7ff ff58 	bl	8005f00 <__b2d>
 8006050:	468b      	mov	fp, r1
 8006052:	4606      	mov	r6, r0
 8006054:	460f      	mov	r7, r1
 8006056:	4640      	mov	r0, r8
 8006058:	a901      	add	r1, sp, #4
 800605a:	f7ff ff51 	bl	8005f00 <__b2d>
 800605e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006062:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006066:	460d      	mov	r5, r1
 8006068:	eba3 0c02 	sub.w	ip, r3, r2
 800606c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006070:	1a9b      	subs	r3, r3, r2
 8006072:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006076:	2b00      	cmp	r3, #0
 8006078:	bfd5      	itete	le
 800607a:	460a      	movle	r2, r1
 800607c:	463a      	movgt	r2, r7
 800607e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006082:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8006086:	bfd8      	it	le
 8006088:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 800608c:	462b      	mov	r3, r5
 800608e:	4602      	mov	r2, r0
 8006090:	4659      	mov	r1, fp
 8006092:	4630      	mov	r0, r6
 8006094:	f7fa fb5a 	bl	800074c <__aeabi_ddiv>
 8006098:	b003      	add	sp, #12
 800609a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800609e <__copybits>:
 800609e:	3901      	subs	r1, #1
 80060a0:	b510      	push	{r4, lr}
 80060a2:	1149      	asrs	r1, r1, #5
 80060a4:	6914      	ldr	r4, [r2, #16]
 80060a6:	3101      	adds	r1, #1
 80060a8:	f102 0314 	add.w	r3, r2, #20
 80060ac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80060b0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80060b4:	42a3      	cmp	r3, r4
 80060b6:	4602      	mov	r2, r0
 80060b8:	d303      	bcc.n	80060c2 <__copybits+0x24>
 80060ba:	2300      	movs	r3, #0
 80060bc:	428a      	cmp	r2, r1
 80060be:	d305      	bcc.n	80060cc <__copybits+0x2e>
 80060c0:	bd10      	pop	{r4, pc}
 80060c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80060c6:	f840 2b04 	str.w	r2, [r0], #4
 80060ca:	e7f3      	b.n	80060b4 <__copybits+0x16>
 80060cc:	f842 3b04 	str.w	r3, [r2], #4
 80060d0:	e7f4      	b.n	80060bc <__copybits+0x1e>

080060d2 <__any_on>:
 80060d2:	f100 0214 	add.w	r2, r0, #20
 80060d6:	6900      	ldr	r0, [r0, #16]
 80060d8:	114b      	asrs	r3, r1, #5
 80060da:	4298      	cmp	r0, r3
 80060dc:	b510      	push	{r4, lr}
 80060de:	db11      	blt.n	8006104 <__any_on+0x32>
 80060e0:	dd0a      	ble.n	80060f8 <__any_on+0x26>
 80060e2:	f011 011f 	ands.w	r1, r1, #31
 80060e6:	d007      	beq.n	80060f8 <__any_on+0x26>
 80060e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80060ec:	fa24 f001 	lsr.w	r0, r4, r1
 80060f0:	fa00 f101 	lsl.w	r1, r0, r1
 80060f4:	428c      	cmp	r4, r1
 80060f6:	d10b      	bne.n	8006110 <__any_on+0x3e>
 80060f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d803      	bhi.n	8006108 <__any_on+0x36>
 8006100:	2000      	movs	r0, #0
 8006102:	bd10      	pop	{r4, pc}
 8006104:	4603      	mov	r3, r0
 8006106:	e7f7      	b.n	80060f8 <__any_on+0x26>
 8006108:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800610c:	2900      	cmp	r1, #0
 800610e:	d0f5      	beq.n	80060fc <__any_on+0x2a>
 8006110:	2001      	movs	r0, #1
 8006112:	e7f6      	b.n	8006102 <__any_on+0x30>

08006114 <_calloc_r>:
 8006114:	b538      	push	{r3, r4, r5, lr}
 8006116:	fb02 f401 	mul.w	r4, r2, r1
 800611a:	4621      	mov	r1, r4
 800611c:	f000 f854 	bl	80061c8 <_malloc_r>
 8006120:	4605      	mov	r5, r0
 8006122:	b118      	cbz	r0, 800612c <_calloc_r+0x18>
 8006124:	4622      	mov	r2, r4
 8006126:	2100      	movs	r1, #0
 8006128:	f7fc fcc0 	bl	8002aac <memset>
 800612c:	4628      	mov	r0, r5
 800612e:	bd38      	pop	{r3, r4, r5, pc}

08006130 <_free_r>:
 8006130:	b538      	push	{r3, r4, r5, lr}
 8006132:	4605      	mov	r5, r0
 8006134:	2900      	cmp	r1, #0
 8006136:	d043      	beq.n	80061c0 <_free_r+0x90>
 8006138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800613c:	1f0c      	subs	r4, r1, #4
 800613e:	2b00      	cmp	r3, #0
 8006140:	bfb8      	it	lt
 8006142:	18e4      	addlt	r4, r4, r3
 8006144:	f000 fe2e 	bl	8006da4 <__malloc_lock>
 8006148:	4a1e      	ldr	r2, [pc, #120]	; (80061c4 <_free_r+0x94>)
 800614a:	6813      	ldr	r3, [r2, #0]
 800614c:	4610      	mov	r0, r2
 800614e:	b933      	cbnz	r3, 800615e <_free_r+0x2e>
 8006150:	6063      	str	r3, [r4, #4]
 8006152:	6014      	str	r4, [r2, #0]
 8006154:	4628      	mov	r0, r5
 8006156:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800615a:	f000 be29 	b.w	8006db0 <__malloc_unlock>
 800615e:	42a3      	cmp	r3, r4
 8006160:	d90b      	bls.n	800617a <_free_r+0x4a>
 8006162:	6821      	ldr	r1, [r4, #0]
 8006164:	1862      	adds	r2, r4, r1
 8006166:	4293      	cmp	r3, r2
 8006168:	bf01      	itttt	eq
 800616a:	681a      	ldreq	r2, [r3, #0]
 800616c:	685b      	ldreq	r3, [r3, #4]
 800616e:	1852      	addeq	r2, r2, r1
 8006170:	6022      	streq	r2, [r4, #0]
 8006172:	6063      	str	r3, [r4, #4]
 8006174:	6004      	str	r4, [r0, #0]
 8006176:	e7ed      	b.n	8006154 <_free_r+0x24>
 8006178:	4613      	mov	r3, r2
 800617a:	685a      	ldr	r2, [r3, #4]
 800617c:	b10a      	cbz	r2, 8006182 <_free_r+0x52>
 800617e:	42a2      	cmp	r2, r4
 8006180:	d9fa      	bls.n	8006178 <_free_r+0x48>
 8006182:	6819      	ldr	r1, [r3, #0]
 8006184:	1858      	adds	r0, r3, r1
 8006186:	42a0      	cmp	r0, r4
 8006188:	d10b      	bne.n	80061a2 <_free_r+0x72>
 800618a:	6820      	ldr	r0, [r4, #0]
 800618c:	4401      	add	r1, r0
 800618e:	1858      	adds	r0, r3, r1
 8006190:	4282      	cmp	r2, r0
 8006192:	6019      	str	r1, [r3, #0]
 8006194:	d1de      	bne.n	8006154 <_free_r+0x24>
 8006196:	6810      	ldr	r0, [r2, #0]
 8006198:	6852      	ldr	r2, [r2, #4]
 800619a:	4401      	add	r1, r0
 800619c:	6019      	str	r1, [r3, #0]
 800619e:	605a      	str	r2, [r3, #4]
 80061a0:	e7d8      	b.n	8006154 <_free_r+0x24>
 80061a2:	d902      	bls.n	80061aa <_free_r+0x7a>
 80061a4:	230c      	movs	r3, #12
 80061a6:	602b      	str	r3, [r5, #0]
 80061a8:	e7d4      	b.n	8006154 <_free_r+0x24>
 80061aa:	6820      	ldr	r0, [r4, #0]
 80061ac:	1821      	adds	r1, r4, r0
 80061ae:	428a      	cmp	r2, r1
 80061b0:	bf01      	itttt	eq
 80061b2:	6811      	ldreq	r1, [r2, #0]
 80061b4:	6852      	ldreq	r2, [r2, #4]
 80061b6:	1809      	addeq	r1, r1, r0
 80061b8:	6021      	streq	r1, [r4, #0]
 80061ba:	6062      	str	r2, [r4, #4]
 80061bc:	605c      	str	r4, [r3, #4]
 80061be:	e7c9      	b.n	8006154 <_free_r+0x24>
 80061c0:	bd38      	pop	{r3, r4, r5, pc}
 80061c2:	bf00      	nop
 80061c4:	20000314 	.word	0x20000314

080061c8 <_malloc_r>:
 80061c8:	b570      	push	{r4, r5, r6, lr}
 80061ca:	1ccd      	adds	r5, r1, #3
 80061cc:	f025 0503 	bic.w	r5, r5, #3
 80061d0:	3508      	adds	r5, #8
 80061d2:	2d0c      	cmp	r5, #12
 80061d4:	bf38      	it	cc
 80061d6:	250c      	movcc	r5, #12
 80061d8:	2d00      	cmp	r5, #0
 80061da:	4606      	mov	r6, r0
 80061dc:	db01      	blt.n	80061e2 <_malloc_r+0x1a>
 80061de:	42a9      	cmp	r1, r5
 80061e0:	d903      	bls.n	80061ea <_malloc_r+0x22>
 80061e2:	230c      	movs	r3, #12
 80061e4:	6033      	str	r3, [r6, #0]
 80061e6:	2000      	movs	r0, #0
 80061e8:	bd70      	pop	{r4, r5, r6, pc}
 80061ea:	f000 fddb 	bl	8006da4 <__malloc_lock>
 80061ee:	4a21      	ldr	r2, [pc, #132]	; (8006274 <_malloc_r+0xac>)
 80061f0:	6814      	ldr	r4, [r2, #0]
 80061f2:	4621      	mov	r1, r4
 80061f4:	b991      	cbnz	r1, 800621c <_malloc_r+0x54>
 80061f6:	4c20      	ldr	r4, [pc, #128]	; (8006278 <_malloc_r+0xb0>)
 80061f8:	6823      	ldr	r3, [r4, #0]
 80061fa:	b91b      	cbnz	r3, 8006204 <_malloc_r+0x3c>
 80061fc:	4630      	mov	r0, r6
 80061fe:	f000 fc91 	bl	8006b24 <_sbrk_r>
 8006202:	6020      	str	r0, [r4, #0]
 8006204:	4629      	mov	r1, r5
 8006206:	4630      	mov	r0, r6
 8006208:	f000 fc8c 	bl	8006b24 <_sbrk_r>
 800620c:	1c43      	adds	r3, r0, #1
 800620e:	d124      	bne.n	800625a <_malloc_r+0x92>
 8006210:	230c      	movs	r3, #12
 8006212:	4630      	mov	r0, r6
 8006214:	6033      	str	r3, [r6, #0]
 8006216:	f000 fdcb 	bl	8006db0 <__malloc_unlock>
 800621a:	e7e4      	b.n	80061e6 <_malloc_r+0x1e>
 800621c:	680b      	ldr	r3, [r1, #0]
 800621e:	1b5b      	subs	r3, r3, r5
 8006220:	d418      	bmi.n	8006254 <_malloc_r+0x8c>
 8006222:	2b0b      	cmp	r3, #11
 8006224:	d90f      	bls.n	8006246 <_malloc_r+0x7e>
 8006226:	600b      	str	r3, [r1, #0]
 8006228:	18cc      	adds	r4, r1, r3
 800622a:	50cd      	str	r5, [r1, r3]
 800622c:	4630      	mov	r0, r6
 800622e:	f000 fdbf 	bl	8006db0 <__malloc_unlock>
 8006232:	f104 000b 	add.w	r0, r4, #11
 8006236:	1d23      	adds	r3, r4, #4
 8006238:	f020 0007 	bic.w	r0, r0, #7
 800623c:	1ac3      	subs	r3, r0, r3
 800623e:	d0d3      	beq.n	80061e8 <_malloc_r+0x20>
 8006240:	425a      	negs	r2, r3
 8006242:	50e2      	str	r2, [r4, r3]
 8006244:	e7d0      	b.n	80061e8 <_malloc_r+0x20>
 8006246:	684b      	ldr	r3, [r1, #4]
 8006248:	428c      	cmp	r4, r1
 800624a:	bf16      	itet	ne
 800624c:	6063      	strne	r3, [r4, #4]
 800624e:	6013      	streq	r3, [r2, #0]
 8006250:	460c      	movne	r4, r1
 8006252:	e7eb      	b.n	800622c <_malloc_r+0x64>
 8006254:	460c      	mov	r4, r1
 8006256:	6849      	ldr	r1, [r1, #4]
 8006258:	e7cc      	b.n	80061f4 <_malloc_r+0x2c>
 800625a:	1cc4      	adds	r4, r0, #3
 800625c:	f024 0403 	bic.w	r4, r4, #3
 8006260:	42a0      	cmp	r0, r4
 8006262:	d005      	beq.n	8006270 <_malloc_r+0xa8>
 8006264:	1a21      	subs	r1, r4, r0
 8006266:	4630      	mov	r0, r6
 8006268:	f000 fc5c 	bl	8006b24 <_sbrk_r>
 800626c:	3001      	adds	r0, #1
 800626e:	d0cf      	beq.n	8006210 <_malloc_r+0x48>
 8006270:	6025      	str	r5, [r4, #0]
 8006272:	e7db      	b.n	800622c <_malloc_r+0x64>
 8006274:	20000314 	.word	0x20000314
 8006278:	20000318 	.word	0x20000318

0800627c <__ssputs_r>:
 800627c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006280:	688e      	ldr	r6, [r1, #8]
 8006282:	4682      	mov	sl, r0
 8006284:	429e      	cmp	r6, r3
 8006286:	460c      	mov	r4, r1
 8006288:	4690      	mov	r8, r2
 800628a:	4699      	mov	r9, r3
 800628c:	d837      	bhi.n	80062fe <__ssputs_r+0x82>
 800628e:	898a      	ldrh	r2, [r1, #12]
 8006290:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006294:	d031      	beq.n	80062fa <__ssputs_r+0x7e>
 8006296:	2302      	movs	r3, #2
 8006298:	6825      	ldr	r5, [r4, #0]
 800629a:	6909      	ldr	r1, [r1, #16]
 800629c:	1a6f      	subs	r7, r5, r1
 800629e:	6965      	ldr	r5, [r4, #20]
 80062a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80062a4:	fb95 f5f3 	sdiv	r5, r5, r3
 80062a8:	f109 0301 	add.w	r3, r9, #1
 80062ac:	443b      	add	r3, r7
 80062ae:	429d      	cmp	r5, r3
 80062b0:	bf38      	it	cc
 80062b2:	461d      	movcc	r5, r3
 80062b4:	0553      	lsls	r3, r2, #21
 80062b6:	d530      	bpl.n	800631a <__ssputs_r+0x9e>
 80062b8:	4629      	mov	r1, r5
 80062ba:	f7ff ff85 	bl	80061c8 <_malloc_r>
 80062be:	4606      	mov	r6, r0
 80062c0:	b950      	cbnz	r0, 80062d8 <__ssputs_r+0x5c>
 80062c2:	230c      	movs	r3, #12
 80062c4:	f04f 30ff 	mov.w	r0, #4294967295
 80062c8:	f8ca 3000 	str.w	r3, [sl]
 80062cc:	89a3      	ldrh	r3, [r4, #12]
 80062ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062d2:	81a3      	strh	r3, [r4, #12]
 80062d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062d8:	463a      	mov	r2, r7
 80062da:	6921      	ldr	r1, [r4, #16]
 80062dc:	f7ff fb16 	bl	800590c <memcpy>
 80062e0:	89a3      	ldrh	r3, [r4, #12]
 80062e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80062e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ea:	81a3      	strh	r3, [r4, #12]
 80062ec:	6126      	str	r6, [r4, #16]
 80062ee:	443e      	add	r6, r7
 80062f0:	6026      	str	r6, [r4, #0]
 80062f2:	464e      	mov	r6, r9
 80062f4:	6165      	str	r5, [r4, #20]
 80062f6:	1bed      	subs	r5, r5, r7
 80062f8:	60a5      	str	r5, [r4, #8]
 80062fa:	454e      	cmp	r6, r9
 80062fc:	d900      	bls.n	8006300 <__ssputs_r+0x84>
 80062fe:	464e      	mov	r6, r9
 8006300:	4632      	mov	r2, r6
 8006302:	4641      	mov	r1, r8
 8006304:	6820      	ldr	r0, [r4, #0]
 8006306:	f000 fd34 	bl	8006d72 <memmove>
 800630a:	68a3      	ldr	r3, [r4, #8]
 800630c:	2000      	movs	r0, #0
 800630e:	1b9b      	subs	r3, r3, r6
 8006310:	60a3      	str	r3, [r4, #8]
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	441e      	add	r6, r3
 8006316:	6026      	str	r6, [r4, #0]
 8006318:	e7dc      	b.n	80062d4 <__ssputs_r+0x58>
 800631a:	462a      	mov	r2, r5
 800631c:	f000 fd4e 	bl	8006dbc <_realloc_r>
 8006320:	4606      	mov	r6, r0
 8006322:	2800      	cmp	r0, #0
 8006324:	d1e2      	bne.n	80062ec <__ssputs_r+0x70>
 8006326:	6921      	ldr	r1, [r4, #16]
 8006328:	4650      	mov	r0, sl
 800632a:	f7ff ff01 	bl	8006130 <_free_r>
 800632e:	e7c8      	b.n	80062c2 <__ssputs_r+0x46>

08006330 <_svfiprintf_r>:
 8006330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006334:	461d      	mov	r5, r3
 8006336:	898b      	ldrh	r3, [r1, #12]
 8006338:	b09d      	sub	sp, #116	; 0x74
 800633a:	061f      	lsls	r7, r3, #24
 800633c:	4680      	mov	r8, r0
 800633e:	460c      	mov	r4, r1
 8006340:	4616      	mov	r6, r2
 8006342:	d50f      	bpl.n	8006364 <_svfiprintf_r+0x34>
 8006344:	690b      	ldr	r3, [r1, #16]
 8006346:	b96b      	cbnz	r3, 8006364 <_svfiprintf_r+0x34>
 8006348:	2140      	movs	r1, #64	; 0x40
 800634a:	f7ff ff3d 	bl	80061c8 <_malloc_r>
 800634e:	6020      	str	r0, [r4, #0]
 8006350:	6120      	str	r0, [r4, #16]
 8006352:	b928      	cbnz	r0, 8006360 <_svfiprintf_r+0x30>
 8006354:	230c      	movs	r3, #12
 8006356:	f8c8 3000 	str.w	r3, [r8]
 800635a:	f04f 30ff 	mov.w	r0, #4294967295
 800635e:	e0c8      	b.n	80064f2 <_svfiprintf_r+0x1c2>
 8006360:	2340      	movs	r3, #64	; 0x40
 8006362:	6163      	str	r3, [r4, #20]
 8006364:	2300      	movs	r3, #0
 8006366:	9309      	str	r3, [sp, #36]	; 0x24
 8006368:	2320      	movs	r3, #32
 800636a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800636e:	2330      	movs	r3, #48	; 0x30
 8006370:	f04f 0b01 	mov.w	fp, #1
 8006374:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006378:	9503      	str	r5, [sp, #12]
 800637a:	4637      	mov	r7, r6
 800637c:	463d      	mov	r5, r7
 800637e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006382:	b10b      	cbz	r3, 8006388 <_svfiprintf_r+0x58>
 8006384:	2b25      	cmp	r3, #37	; 0x25
 8006386:	d13e      	bne.n	8006406 <_svfiprintf_r+0xd6>
 8006388:	ebb7 0a06 	subs.w	sl, r7, r6
 800638c:	d00b      	beq.n	80063a6 <_svfiprintf_r+0x76>
 800638e:	4653      	mov	r3, sl
 8006390:	4632      	mov	r2, r6
 8006392:	4621      	mov	r1, r4
 8006394:	4640      	mov	r0, r8
 8006396:	f7ff ff71 	bl	800627c <__ssputs_r>
 800639a:	3001      	adds	r0, #1
 800639c:	f000 80a4 	beq.w	80064e8 <_svfiprintf_r+0x1b8>
 80063a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063a2:	4453      	add	r3, sl
 80063a4:	9309      	str	r3, [sp, #36]	; 0x24
 80063a6:	783b      	ldrb	r3, [r7, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f000 809d 	beq.w	80064e8 <_svfiprintf_r+0x1b8>
 80063ae:	2300      	movs	r3, #0
 80063b0:	f04f 32ff 	mov.w	r2, #4294967295
 80063b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063b8:	9304      	str	r3, [sp, #16]
 80063ba:	9307      	str	r3, [sp, #28]
 80063bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063c0:	931a      	str	r3, [sp, #104]	; 0x68
 80063c2:	462f      	mov	r7, r5
 80063c4:	2205      	movs	r2, #5
 80063c6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80063ca:	4850      	ldr	r0, [pc, #320]	; (800650c <_svfiprintf_r+0x1dc>)
 80063cc:	f7ff fa90 	bl	80058f0 <memchr>
 80063d0:	9b04      	ldr	r3, [sp, #16]
 80063d2:	b9d0      	cbnz	r0, 800640a <_svfiprintf_r+0xda>
 80063d4:	06d9      	lsls	r1, r3, #27
 80063d6:	bf44      	itt	mi
 80063d8:	2220      	movmi	r2, #32
 80063da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80063de:	071a      	lsls	r2, r3, #28
 80063e0:	bf44      	itt	mi
 80063e2:	222b      	movmi	r2, #43	; 0x2b
 80063e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80063e8:	782a      	ldrb	r2, [r5, #0]
 80063ea:	2a2a      	cmp	r2, #42	; 0x2a
 80063ec:	d015      	beq.n	800641a <_svfiprintf_r+0xea>
 80063ee:	462f      	mov	r7, r5
 80063f0:	2000      	movs	r0, #0
 80063f2:	250a      	movs	r5, #10
 80063f4:	9a07      	ldr	r2, [sp, #28]
 80063f6:	4639      	mov	r1, r7
 80063f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063fc:	3b30      	subs	r3, #48	; 0x30
 80063fe:	2b09      	cmp	r3, #9
 8006400:	d94d      	bls.n	800649e <_svfiprintf_r+0x16e>
 8006402:	b1b8      	cbz	r0, 8006434 <_svfiprintf_r+0x104>
 8006404:	e00f      	b.n	8006426 <_svfiprintf_r+0xf6>
 8006406:	462f      	mov	r7, r5
 8006408:	e7b8      	b.n	800637c <_svfiprintf_r+0x4c>
 800640a:	4a40      	ldr	r2, [pc, #256]	; (800650c <_svfiprintf_r+0x1dc>)
 800640c:	463d      	mov	r5, r7
 800640e:	1a80      	subs	r0, r0, r2
 8006410:	fa0b f000 	lsl.w	r0, fp, r0
 8006414:	4318      	orrs	r0, r3
 8006416:	9004      	str	r0, [sp, #16]
 8006418:	e7d3      	b.n	80063c2 <_svfiprintf_r+0x92>
 800641a:	9a03      	ldr	r2, [sp, #12]
 800641c:	1d11      	adds	r1, r2, #4
 800641e:	6812      	ldr	r2, [r2, #0]
 8006420:	9103      	str	r1, [sp, #12]
 8006422:	2a00      	cmp	r2, #0
 8006424:	db01      	blt.n	800642a <_svfiprintf_r+0xfa>
 8006426:	9207      	str	r2, [sp, #28]
 8006428:	e004      	b.n	8006434 <_svfiprintf_r+0x104>
 800642a:	4252      	negs	r2, r2
 800642c:	f043 0302 	orr.w	r3, r3, #2
 8006430:	9207      	str	r2, [sp, #28]
 8006432:	9304      	str	r3, [sp, #16]
 8006434:	783b      	ldrb	r3, [r7, #0]
 8006436:	2b2e      	cmp	r3, #46	; 0x2e
 8006438:	d10c      	bne.n	8006454 <_svfiprintf_r+0x124>
 800643a:	787b      	ldrb	r3, [r7, #1]
 800643c:	2b2a      	cmp	r3, #42	; 0x2a
 800643e:	d133      	bne.n	80064a8 <_svfiprintf_r+0x178>
 8006440:	9b03      	ldr	r3, [sp, #12]
 8006442:	3702      	adds	r7, #2
 8006444:	1d1a      	adds	r2, r3, #4
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	9203      	str	r2, [sp, #12]
 800644a:	2b00      	cmp	r3, #0
 800644c:	bfb8      	it	lt
 800644e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006452:	9305      	str	r3, [sp, #20]
 8006454:	4d2e      	ldr	r5, [pc, #184]	; (8006510 <_svfiprintf_r+0x1e0>)
 8006456:	2203      	movs	r2, #3
 8006458:	7839      	ldrb	r1, [r7, #0]
 800645a:	4628      	mov	r0, r5
 800645c:	f7ff fa48 	bl	80058f0 <memchr>
 8006460:	b138      	cbz	r0, 8006472 <_svfiprintf_r+0x142>
 8006462:	2340      	movs	r3, #64	; 0x40
 8006464:	1b40      	subs	r0, r0, r5
 8006466:	fa03 f000 	lsl.w	r0, r3, r0
 800646a:	9b04      	ldr	r3, [sp, #16]
 800646c:	3701      	adds	r7, #1
 800646e:	4303      	orrs	r3, r0
 8006470:	9304      	str	r3, [sp, #16]
 8006472:	7839      	ldrb	r1, [r7, #0]
 8006474:	2206      	movs	r2, #6
 8006476:	4827      	ldr	r0, [pc, #156]	; (8006514 <_svfiprintf_r+0x1e4>)
 8006478:	1c7e      	adds	r6, r7, #1
 800647a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800647e:	f7ff fa37 	bl	80058f0 <memchr>
 8006482:	2800      	cmp	r0, #0
 8006484:	d038      	beq.n	80064f8 <_svfiprintf_r+0x1c8>
 8006486:	4b24      	ldr	r3, [pc, #144]	; (8006518 <_svfiprintf_r+0x1e8>)
 8006488:	bb13      	cbnz	r3, 80064d0 <_svfiprintf_r+0x1a0>
 800648a:	9b03      	ldr	r3, [sp, #12]
 800648c:	3307      	adds	r3, #7
 800648e:	f023 0307 	bic.w	r3, r3, #7
 8006492:	3308      	adds	r3, #8
 8006494:	9303      	str	r3, [sp, #12]
 8006496:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006498:	444b      	add	r3, r9
 800649a:	9309      	str	r3, [sp, #36]	; 0x24
 800649c:	e76d      	b.n	800637a <_svfiprintf_r+0x4a>
 800649e:	fb05 3202 	mla	r2, r5, r2, r3
 80064a2:	2001      	movs	r0, #1
 80064a4:	460f      	mov	r7, r1
 80064a6:	e7a6      	b.n	80063f6 <_svfiprintf_r+0xc6>
 80064a8:	2300      	movs	r3, #0
 80064aa:	250a      	movs	r5, #10
 80064ac:	4619      	mov	r1, r3
 80064ae:	3701      	adds	r7, #1
 80064b0:	9305      	str	r3, [sp, #20]
 80064b2:	4638      	mov	r0, r7
 80064b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064b8:	3a30      	subs	r2, #48	; 0x30
 80064ba:	2a09      	cmp	r2, #9
 80064bc:	d903      	bls.n	80064c6 <_svfiprintf_r+0x196>
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d0c8      	beq.n	8006454 <_svfiprintf_r+0x124>
 80064c2:	9105      	str	r1, [sp, #20]
 80064c4:	e7c6      	b.n	8006454 <_svfiprintf_r+0x124>
 80064c6:	fb05 2101 	mla	r1, r5, r1, r2
 80064ca:	2301      	movs	r3, #1
 80064cc:	4607      	mov	r7, r0
 80064ce:	e7f0      	b.n	80064b2 <_svfiprintf_r+0x182>
 80064d0:	ab03      	add	r3, sp, #12
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	4622      	mov	r2, r4
 80064d6:	4b11      	ldr	r3, [pc, #68]	; (800651c <_svfiprintf_r+0x1ec>)
 80064d8:	a904      	add	r1, sp, #16
 80064da:	4640      	mov	r0, r8
 80064dc:	f7fc fb80 	bl	8002be0 <_printf_float>
 80064e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80064e4:	4681      	mov	r9, r0
 80064e6:	d1d6      	bne.n	8006496 <_svfiprintf_r+0x166>
 80064e8:	89a3      	ldrh	r3, [r4, #12]
 80064ea:	065b      	lsls	r3, r3, #25
 80064ec:	f53f af35 	bmi.w	800635a <_svfiprintf_r+0x2a>
 80064f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064f2:	b01d      	add	sp, #116	; 0x74
 80064f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064f8:	ab03      	add	r3, sp, #12
 80064fa:	9300      	str	r3, [sp, #0]
 80064fc:	4622      	mov	r2, r4
 80064fe:	4b07      	ldr	r3, [pc, #28]	; (800651c <_svfiprintf_r+0x1ec>)
 8006500:	a904      	add	r1, sp, #16
 8006502:	4640      	mov	r0, r8
 8006504:	f7fc fe18 	bl	8003138 <_printf_i>
 8006508:	e7ea      	b.n	80064e0 <_svfiprintf_r+0x1b0>
 800650a:	bf00      	nop
 800650c:	08009c1c 	.word	0x08009c1c
 8006510:	08009c22 	.word	0x08009c22
 8006514:	08009c26 	.word	0x08009c26
 8006518:	08002be1 	.word	0x08002be1
 800651c:	0800627d 	.word	0x0800627d

08006520 <_sungetc_r>:
 8006520:	b538      	push	{r3, r4, r5, lr}
 8006522:	1c4b      	adds	r3, r1, #1
 8006524:	4614      	mov	r4, r2
 8006526:	d103      	bne.n	8006530 <_sungetc_r+0x10>
 8006528:	f04f 35ff 	mov.w	r5, #4294967295
 800652c:	4628      	mov	r0, r5
 800652e:	bd38      	pop	{r3, r4, r5, pc}
 8006530:	8993      	ldrh	r3, [r2, #12]
 8006532:	b2cd      	uxtb	r5, r1
 8006534:	f023 0320 	bic.w	r3, r3, #32
 8006538:	8193      	strh	r3, [r2, #12]
 800653a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800653c:	6852      	ldr	r2, [r2, #4]
 800653e:	b18b      	cbz	r3, 8006564 <_sungetc_r+0x44>
 8006540:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006542:	4293      	cmp	r3, r2
 8006544:	dd08      	ble.n	8006558 <_sungetc_r+0x38>
 8006546:	6823      	ldr	r3, [r4, #0]
 8006548:	1e5a      	subs	r2, r3, #1
 800654a:	6022      	str	r2, [r4, #0]
 800654c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006550:	6863      	ldr	r3, [r4, #4]
 8006552:	3301      	adds	r3, #1
 8006554:	6063      	str	r3, [r4, #4]
 8006556:	e7e9      	b.n	800652c <_sungetc_r+0xc>
 8006558:	4621      	mov	r1, r4
 800655a:	f000 fbc3 	bl	8006ce4 <__submore>
 800655e:	2800      	cmp	r0, #0
 8006560:	d0f1      	beq.n	8006546 <_sungetc_r+0x26>
 8006562:	e7e1      	b.n	8006528 <_sungetc_r+0x8>
 8006564:	6921      	ldr	r1, [r4, #16]
 8006566:	6823      	ldr	r3, [r4, #0]
 8006568:	b151      	cbz	r1, 8006580 <_sungetc_r+0x60>
 800656a:	4299      	cmp	r1, r3
 800656c:	d208      	bcs.n	8006580 <_sungetc_r+0x60>
 800656e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8006572:	42a9      	cmp	r1, r5
 8006574:	d104      	bne.n	8006580 <_sungetc_r+0x60>
 8006576:	3b01      	subs	r3, #1
 8006578:	3201      	adds	r2, #1
 800657a:	6023      	str	r3, [r4, #0]
 800657c:	6062      	str	r2, [r4, #4]
 800657e:	e7d5      	b.n	800652c <_sungetc_r+0xc>
 8006580:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8006584:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006588:	6363      	str	r3, [r4, #52]	; 0x34
 800658a:	2303      	movs	r3, #3
 800658c:	63a3      	str	r3, [r4, #56]	; 0x38
 800658e:	4623      	mov	r3, r4
 8006590:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006594:	6023      	str	r3, [r4, #0]
 8006596:	2301      	movs	r3, #1
 8006598:	e7dc      	b.n	8006554 <_sungetc_r+0x34>

0800659a <__ssrefill_r>:
 800659a:	b510      	push	{r4, lr}
 800659c:	460c      	mov	r4, r1
 800659e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80065a0:	b169      	cbz	r1, 80065be <__ssrefill_r+0x24>
 80065a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065a6:	4299      	cmp	r1, r3
 80065a8:	d001      	beq.n	80065ae <__ssrefill_r+0x14>
 80065aa:	f7ff fdc1 	bl	8006130 <_free_r>
 80065ae:	2000      	movs	r0, #0
 80065b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80065b2:	6360      	str	r0, [r4, #52]	; 0x34
 80065b4:	6063      	str	r3, [r4, #4]
 80065b6:	b113      	cbz	r3, 80065be <__ssrefill_r+0x24>
 80065b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80065ba:	6023      	str	r3, [r4, #0]
 80065bc:	bd10      	pop	{r4, pc}
 80065be:	6923      	ldr	r3, [r4, #16]
 80065c0:	f04f 30ff 	mov.w	r0, #4294967295
 80065c4:	6023      	str	r3, [r4, #0]
 80065c6:	2300      	movs	r3, #0
 80065c8:	6063      	str	r3, [r4, #4]
 80065ca:	89a3      	ldrh	r3, [r4, #12]
 80065cc:	f043 0320 	orr.w	r3, r3, #32
 80065d0:	81a3      	strh	r3, [r4, #12]
 80065d2:	e7f3      	b.n	80065bc <__ssrefill_r+0x22>

080065d4 <__ssvfiscanf_r>:
 80065d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d8:	460c      	mov	r4, r1
 80065da:	2100      	movs	r1, #0
 80065dc:	4606      	mov	r6, r0
 80065de:	4692      	mov	sl, r2
 80065e0:	270a      	movs	r7, #10
 80065e2:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80065e6:	9144      	str	r1, [sp, #272]	; 0x110
 80065e8:	9145      	str	r1, [sp, #276]	; 0x114
 80065ea:	499e      	ldr	r1, [pc, #632]	; (8006864 <__ssvfiscanf_r+0x290>)
 80065ec:	f10d 0804 	add.w	r8, sp, #4
 80065f0:	91a0      	str	r1, [sp, #640]	; 0x280
 80065f2:	499d      	ldr	r1, [pc, #628]	; (8006868 <__ssvfiscanf_r+0x294>)
 80065f4:	f8df 9274 	ldr.w	r9, [pc, #628]	; 800686c <__ssvfiscanf_r+0x298>
 80065f8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80065fc:	91a1      	str	r1, [sp, #644]	; 0x284
 80065fe:	9300      	str	r3, [sp, #0]
 8006600:	f89a 3000 	ldrb.w	r3, [sl]
 8006604:	2b00      	cmp	r3, #0
 8006606:	f000 812a 	beq.w	800685e <__ssvfiscanf_r+0x28a>
 800660a:	4655      	mov	r5, sl
 800660c:	f7ff f938 	bl	8005880 <__locale_ctype_ptr>
 8006610:	f815 bb01 	ldrb.w	fp, [r5], #1
 8006614:	4458      	add	r0, fp
 8006616:	7843      	ldrb	r3, [r0, #1]
 8006618:	f013 0308 	ands.w	r3, r3, #8
 800661c:	d01c      	beq.n	8006658 <__ssvfiscanf_r+0x84>
 800661e:	6863      	ldr	r3, [r4, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	dd12      	ble.n	800664a <__ssvfiscanf_r+0x76>
 8006624:	f7ff f92c 	bl	8005880 <__locale_ctype_ptr>
 8006628:	6823      	ldr	r3, [r4, #0]
 800662a:	781a      	ldrb	r2, [r3, #0]
 800662c:	4410      	add	r0, r2
 800662e:	7842      	ldrb	r2, [r0, #1]
 8006630:	0712      	lsls	r2, r2, #28
 8006632:	d401      	bmi.n	8006638 <__ssvfiscanf_r+0x64>
 8006634:	46aa      	mov	sl, r5
 8006636:	e7e3      	b.n	8006600 <__ssvfiscanf_r+0x2c>
 8006638:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800663a:	3301      	adds	r3, #1
 800663c:	3201      	adds	r2, #1
 800663e:	9245      	str	r2, [sp, #276]	; 0x114
 8006640:	6862      	ldr	r2, [r4, #4]
 8006642:	6023      	str	r3, [r4, #0]
 8006644:	3a01      	subs	r2, #1
 8006646:	6062      	str	r2, [r4, #4]
 8006648:	e7e9      	b.n	800661e <__ssvfiscanf_r+0x4a>
 800664a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800664c:	4621      	mov	r1, r4
 800664e:	4630      	mov	r0, r6
 8006650:	4798      	blx	r3
 8006652:	2800      	cmp	r0, #0
 8006654:	d0e6      	beq.n	8006624 <__ssvfiscanf_r+0x50>
 8006656:	e7ed      	b.n	8006634 <__ssvfiscanf_r+0x60>
 8006658:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 800665c:	f040 8082 	bne.w	8006764 <__ssvfiscanf_r+0x190>
 8006660:	9343      	str	r3, [sp, #268]	; 0x10c
 8006662:	9341      	str	r3, [sp, #260]	; 0x104
 8006664:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8006668:	2b2a      	cmp	r3, #42	; 0x2a
 800666a:	d103      	bne.n	8006674 <__ssvfiscanf_r+0xa0>
 800666c:	2310      	movs	r3, #16
 800666e:	f10a 0502 	add.w	r5, sl, #2
 8006672:	9341      	str	r3, [sp, #260]	; 0x104
 8006674:	46aa      	mov	sl, r5
 8006676:	f815 1b01 	ldrb.w	r1, [r5], #1
 800667a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800667e:	2a09      	cmp	r2, #9
 8006680:	d922      	bls.n	80066c8 <__ssvfiscanf_r+0xf4>
 8006682:	2203      	movs	r2, #3
 8006684:	4879      	ldr	r0, [pc, #484]	; (800686c <__ssvfiscanf_r+0x298>)
 8006686:	f7ff f933 	bl	80058f0 <memchr>
 800668a:	b138      	cbz	r0, 800669c <__ssvfiscanf_r+0xc8>
 800668c:	eba0 0309 	sub.w	r3, r0, r9
 8006690:	2001      	movs	r0, #1
 8006692:	46aa      	mov	sl, r5
 8006694:	4098      	lsls	r0, r3
 8006696:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006698:	4318      	orrs	r0, r3
 800669a:	9041      	str	r0, [sp, #260]	; 0x104
 800669c:	f89a 3000 	ldrb.w	r3, [sl]
 80066a0:	f10a 0501 	add.w	r5, sl, #1
 80066a4:	2b67      	cmp	r3, #103	; 0x67
 80066a6:	d82b      	bhi.n	8006700 <__ssvfiscanf_r+0x12c>
 80066a8:	2b65      	cmp	r3, #101	; 0x65
 80066aa:	f080 809f 	bcs.w	80067ec <__ssvfiscanf_r+0x218>
 80066ae:	2b47      	cmp	r3, #71	; 0x47
 80066b0:	d810      	bhi.n	80066d4 <__ssvfiscanf_r+0x100>
 80066b2:	2b45      	cmp	r3, #69	; 0x45
 80066b4:	f080 809a 	bcs.w	80067ec <__ssvfiscanf_r+0x218>
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d06c      	beq.n	8006796 <__ssvfiscanf_r+0x1c2>
 80066bc:	2b25      	cmp	r3, #37	; 0x25
 80066be:	d051      	beq.n	8006764 <__ssvfiscanf_r+0x190>
 80066c0:	2303      	movs	r3, #3
 80066c2:	9742      	str	r7, [sp, #264]	; 0x108
 80066c4:	9347      	str	r3, [sp, #284]	; 0x11c
 80066c6:	e027      	b.n	8006718 <__ssvfiscanf_r+0x144>
 80066c8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80066ca:	fb07 1303 	mla	r3, r7, r3, r1
 80066ce:	3b30      	subs	r3, #48	; 0x30
 80066d0:	9343      	str	r3, [sp, #268]	; 0x10c
 80066d2:	e7cf      	b.n	8006674 <__ssvfiscanf_r+0xa0>
 80066d4:	2b5b      	cmp	r3, #91	; 0x5b
 80066d6:	d06a      	beq.n	80067ae <__ssvfiscanf_r+0x1da>
 80066d8:	d80c      	bhi.n	80066f4 <__ssvfiscanf_r+0x120>
 80066da:	2b58      	cmp	r3, #88	; 0x58
 80066dc:	d1f0      	bne.n	80066c0 <__ssvfiscanf_r+0xec>
 80066de:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80066e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066e4:	9241      	str	r2, [sp, #260]	; 0x104
 80066e6:	2210      	movs	r2, #16
 80066e8:	9242      	str	r2, [sp, #264]	; 0x108
 80066ea:	2b6e      	cmp	r3, #110	; 0x6e
 80066ec:	bf8c      	ite	hi
 80066ee:	2304      	movhi	r3, #4
 80066f0:	2303      	movls	r3, #3
 80066f2:	e010      	b.n	8006716 <__ssvfiscanf_r+0x142>
 80066f4:	2b63      	cmp	r3, #99	; 0x63
 80066f6:	d065      	beq.n	80067c4 <__ssvfiscanf_r+0x1f0>
 80066f8:	2b64      	cmp	r3, #100	; 0x64
 80066fa:	d1e1      	bne.n	80066c0 <__ssvfiscanf_r+0xec>
 80066fc:	9742      	str	r7, [sp, #264]	; 0x108
 80066fe:	e7f4      	b.n	80066ea <__ssvfiscanf_r+0x116>
 8006700:	2b70      	cmp	r3, #112	; 0x70
 8006702:	d04b      	beq.n	800679c <__ssvfiscanf_r+0x1c8>
 8006704:	d826      	bhi.n	8006754 <__ssvfiscanf_r+0x180>
 8006706:	2b6e      	cmp	r3, #110	; 0x6e
 8006708:	d062      	beq.n	80067d0 <__ssvfiscanf_r+0x1fc>
 800670a:	d84c      	bhi.n	80067a6 <__ssvfiscanf_r+0x1d2>
 800670c:	2b69      	cmp	r3, #105	; 0x69
 800670e:	d1d7      	bne.n	80066c0 <__ssvfiscanf_r+0xec>
 8006710:	2300      	movs	r3, #0
 8006712:	9342      	str	r3, [sp, #264]	; 0x108
 8006714:	2303      	movs	r3, #3
 8006716:	9347      	str	r3, [sp, #284]	; 0x11c
 8006718:	6863      	ldr	r3, [r4, #4]
 800671a:	2b00      	cmp	r3, #0
 800671c:	dd68      	ble.n	80067f0 <__ssvfiscanf_r+0x21c>
 800671e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006720:	0659      	lsls	r1, r3, #25
 8006722:	d407      	bmi.n	8006734 <__ssvfiscanf_r+0x160>
 8006724:	f7ff f8ac 	bl	8005880 <__locale_ctype_ptr>
 8006728:	6823      	ldr	r3, [r4, #0]
 800672a:	781a      	ldrb	r2, [r3, #0]
 800672c:	4410      	add	r0, r2
 800672e:	7842      	ldrb	r2, [r0, #1]
 8006730:	0712      	lsls	r2, r2, #28
 8006732:	d464      	bmi.n	80067fe <__ssvfiscanf_r+0x22a>
 8006734:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006736:	2b02      	cmp	r3, #2
 8006738:	dc73      	bgt.n	8006822 <__ssvfiscanf_r+0x24e>
 800673a:	466b      	mov	r3, sp
 800673c:	4622      	mov	r2, r4
 800673e:	a941      	add	r1, sp, #260	; 0x104
 8006740:	4630      	mov	r0, r6
 8006742:	f000 f897 	bl	8006874 <_scanf_chars>
 8006746:	2801      	cmp	r0, #1
 8006748:	f000 8089 	beq.w	800685e <__ssvfiscanf_r+0x28a>
 800674c:	2802      	cmp	r0, #2
 800674e:	f47f af71 	bne.w	8006634 <__ssvfiscanf_r+0x60>
 8006752:	e01d      	b.n	8006790 <__ssvfiscanf_r+0x1bc>
 8006754:	2b75      	cmp	r3, #117	; 0x75
 8006756:	d0d1      	beq.n	80066fc <__ssvfiscanf_r+0x128>
 8006758:	2b78      	cmp	r3, #120	; 0x78
 800675a:	d0c0      	beq.n	80066de <__ssvfiscanf_r+0x10a>
 800675c:	2b73      	cmp	r3, #115	; 0x73
 800675e:	d1af      	bne.n	80066c0 <__ssvfiscanf_r+0xec>
 8006760:	2302      	movs	r3, #2
 8006762:	e7d8      	b.n	8006716 <__ssvfiscanf_r+0x142>
 8006764:	6863      	ldr	r3, [r4, #4]
 8006766:	2b00      	cmp	r3, #0
 8006768:	dd0c      	ble.n	8006784 <__ssvfiscanf_r+0x1b0>
 800676a:	6823      	ldr	r3, [r4, #0]
 800676c:	781a      	ldrb	r2, [r3, #0]
 800676e:	455a      	cmp	r2, fp
 8006770:	d175      	bne.n	800685e <__ssvfiscanf_r+0x28a>
 8006772:	3301      	adds	r3, #1
 8006774:	6862      	ldr	r2, [r4, #4]
 8006776:	6023      	str	r3, [r4, #0]
 8006778:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800677a:	3a01      	subs	r2, #1
 800677c:	3301      	adds	r3, #1
 800677e:	6062      	str	r2, [r4, #4]
 8006780:	9345      	str	r3, [sp, #276]	; 0x114
 8006782:	e757      	b.n	8006634 <__ssvfiscanf_r+0x60>
 8006784:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006786:	4621      	mov	r1, r4
 8006788:	4630      	mov	r0, r6
 800678a:	4798      	blx	r3
 800678c:	2800      	cmp	r0, #0
 800678e:	d0ec      	beq.n	800676a <__ssvfiscanf_r+0x196>
 8006790:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006792:	2800      	cmp	r0, #0
 8006794:	d159      	bne.n	800684a <__ssvfiscanf_r+0x276>
 8006796:	f04f 30ff 	mov.w	r0, #4294967295
 800679a:	e05c      	b.n	8006856 <__ssvfiscanf_r+0x282>
 800679c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800679e:	f042 0220 	orr.w	r2, r2, #32
 80067a2:	9241      	str	r2, [sp, #260]	; 0x104
 80067a4:	e79b      	b.n	80066de <__ssvfiscanf_r+0x10a>
 80067a6:	2308      	movs	r3, #8
 80067a8:	9342      	str	r3, [sp, #264]	; 0x108
 80067aa:	2304      	movs	r3, #4
 80067ac:	e7b3      	b.n	8006716 <__ssvfiscanf_r+0x142>
 80067ae:	4629      	mov	r1, r5
 80067b0:	4640      	mov	r0, r8
 80067b2:	f000 f9c7 	bl	8006b44 <__sccl>
 80067b6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80067b8:	4605      	mov	r5, r0
 80067ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067be:	9341      	str	r3, [sp, #260]	; 0x104
 80067c0:	2301      	movs	r3, #1
 80067c2:	e7a8      	b.n	8006716 <__ssvfiscanf_r+0x142>
 80067c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80067c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067ca:	9341      	str	r3, [sp, #260]	; 0x104
 80067cc:	2300      	movs	r3, #0
 80067ce:	e7a2      	b.n	8006716 <__ssvfiscanf_r+0x142>
 80067d0:	9841      	ldr	r0, [sp, #260]	; 0x104
 80067d2:	06c3      	lsls	r3, r0, #27
 80067d4:	f53f af2e 	bmi.w	8006634 <__ssvfiscanf_r+0x60>
 80067d8:	9b00      	ldr	r3, [sp, #0]
 80067da:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80067dc:	1d19      	adds	r1, r3, #4
 80067de:	9100      	str	r1, [sp, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	07c0      	lsls	r0, r0, #31
 80067e4:	bf4c      	ite	mi
 80067e6:	801a      	strhmi	r2, [r3, #0]
 80067e8:	601a      	strpl	r2, [r3, #0]
 80067ea:	e723      	b.n	8006634 <__ssvfiscanf_r+0x60>
 80067ec:	2305      	movs	r3, #5
 80067ee:	e792      	b.n	8006716 <__ssvfiscanf_r+0x142>
 80067f0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80067f2:	4621      	mov	r1, r4
 80067f4:	4630      	mov	r0, r6
 80067f6:	4798      	blx	r3
 80067f8:	2800      	cmp	r0, #0
 80067fa:	d090      	beq.n	800671e <__ssvfiscanf_r+0x14a>
 80067fc:	e7c8      	b.n	8006790 <__ssvfiscanf_r+0x1bc>
 80067fe:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006800:	3201      	adds	r2, #1
 8006802:	9245      	str	r2, [sp, #276]	; 0x114
 8006804:	6862      	ldr	r2, [r4, #4]
 8006806:	3a01      	subs	r2, #1
 8006808:	2a00      	cmp	r2, #0
 800680a:	6062      	str	r2, [r4, #4]
 800680c:	dd02      	ble.n	8006814 <__ssvfiscanf_r+0x240>
 800680e:	3301      	adds	r3, #1
 8006810:	6023      	str	r3, [r4, #0]
 8006812:	e787      	b.n	8006724 <__ssvfiscanf_r+0x150>
 8006814:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006816:	4621      	mov	r1, r4
 8006818:	4630      	mov	r0, r6
 800681a:	4798      	blx	r3
 800681c:	2800      	cmp	r0, #0
 800681e:	d081      	beq.n	8006724 <__ssvfiscanf_r+0x150>
 8006820:	e7b6      	b.n	8006790 <__ssvfiscanf_r+0x1bc>
 8006822:	2b04      	cmp	r3, #4
 8006824:	dc06      	bgt.n	8006834 <__ssvfiscanf_r+0x260>
 8006826:	466b      	mov	r3, sp
 8006828:	4622      	mov	r2, r4
 800682a:	a941      	add	r1, sp, #260	; 0x104
 800682c:	4630      	mov	r0, r6
 800682e:	f000 f883 	bl	8006938 <_scanf_i>
 8006832:	e788      	b.n	8006746 <__ssvfiscanf_r+0x172>
 8006834:	4b0e      	ldr	r3, [pc, #56]	; (8006870 <__ssvfiscanf_r+0x29c>)
 8006836:	2b00      	cmp	r3, #0
 8006838:	f43f aefc 	beq.w	8006634 <__ssvfiscanf_r+0x60>
 800683c:	466b      	mov	r3, sp
 800683e:	4622      	mov	r2, r4
 8006840:	a941      	add	r1, sp, #260	; 0x104
 8006842:	4630      	mov	r0, r6
 8006844:	f7fc fd8a 	bl	800335c <_scanf_float>
 8006848:	e77d      	b.n	8006746 <__ssvfiscanf_r+0x172>
 800684a:	89a3      	ldrh	r3, [r4, #12]
 800684c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006850:	bf18      	it	ne
 8006852:	f04f 30ff 	movne.w	r0, #4294967295
 8006856:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800685a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800685e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006860:	e7f9      	b.n	8006856 <__ssvfiscanf_r+0x282>
 8006862:	bf00      	nop
 8006864:	08006521 	.word	0x08006521
 8006868:	0800659b 	.word	0x0800659b
 800686c:	08009c22 	.word	0x08009c22
 8006870:	0800335d 	.word	0x0800335d

08006874 <_scanf_chars>:
 8006874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006878:	4615      	mov	r5, r2
 800687a:	688a      	ldr	r2, [r1, #8]
 800687c:	4680      	mov	r8, r0
 800687e:	460c      	mov	r4, r1
 8006880:	b932      	cbnz	r2, 8006890 <_scanf_chars+0x1c>
 8006882:	698a      	ldr	r2, [r1, #24]
 8006884:	2a00      	cmp	r2, #0
 8006886:	bf14      	ite	ne
 8006888:	f04f 32ff 	movne.w	r2, #4294967295
 800688c:	2201      	moveq	r2, #1
 800688e:	608a      	str	r2, [r1, #8]
 8006890:	2600      	movs	r6, #0
 8006892:	6822      	ldr	r2, [r4, #0]
 8006894:	06d1      	lsls	r1, r2, #27
 8006896:	bf5f      	itttt	pl
 8006898:	681a      	ldrpl	r2, [r3, #0]
 800689a:	1d11      	addpl	r1, r2, #4
 800689c:	6019      	strpl	r1, [r3, #0]
 800689e:	6817      	ldrpl	r7, [r2, #0]
 80068a0:	69a3      	ldr	r3, [r4, #24]
 80068a2:	b1db      	cbz	r3, 80068dc <_scanf_chars+0x68>
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d107      	bne.n	80068b8 <_scanf_chars+0x44>
 80068a8:	682b      	ldr	r3, [r5, #0]
 80068aa:	6962      	ldr	r2, [r4, #20]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	5cd3      	ldrb	r3, [r2, r3]
 80068b0:	b9a3      	cbnz	r3, 80068dc <_scanf_chars+0x68>
 80068b2:	2e00      	cmp	r6, #0
 80068b4:	d131      	bne.n	800691a <_scanf_chars+0xa6>
 80068b6:	e006      	b.n	80068c6 <_scanf_chars+0x52>
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d007      	beq.n	80068cc <_scanf_chars+0x58>
 80068bc:	2e00      	cmp	r6, #0
 80068be:	d12c      	bne.n	800691a <_scanf_chars+0xa6>
 80068c0:	69a3      	ldr	r3, [r4, #24]
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d129      	bne.n	800691a <_scanf_chars+0xa6>
 80068c6:	2001      	movs	r0, #1
 80068c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068cc:	f7fe ffd8 	bl	8005880 <__locale_ctype_ptr>
 80068d0:	682b      	ldr	r3, [r5, #0]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	4418      	add	r0, r3
 80068d6:	7843      	ldrb	r3, [r0, #1]
 80068d8:	071b      	lsls	r3, r3, #28
 80068da:	d4ef      	bmi.n	80068bc <_scanf_chars+0x48>
 80068dc:	6823      	ldr	r3, [r4, #0]
 80068de:	3601      	adds	r6, #1
 80068e0:	06da      	lsls	r2, r3, #27
 80068e2:	bf5e      	ittt	pl
 80068e4:	682b      	ldrpl	r3, [r5, #0]
 80068e6:	781b      	ldrbpl	r3, [r3, #0]
 80068e8:	703b      	strbpl	r3, [r7, #0]
 80068ea:	682a      	ldr	r2, [r5, #0]
 80068ec:	686b      	ldr	r3, [r5, #4]
 80068ee:	f102 0201 	add.w	r2, r2, #1
 80068f2:	602a      	str	r2, [r5, #0]
 80068f4:	68a2      	ldr	r2, [r4, #8]
 80068f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80068fa:	f102 32ff 	add.w	r2, r2, #4294967295
 80068fe:	606b      	str	r3, [r5, #4]
 8006900:	bf58      	it	pl
 8006902:	3701      	addpl	r7, #1
 8006904:	60a2      	str	r2, [r4, #8]
 8006906:	b142      	cbz	r2, 800691a <_scanf_chars+0xa6>
 8006908:	2b00      	cmp	r3, #0
 800690a:	dcc9      	bgt.n	80068a0 <_scanf_chars+0x2c>
 800690c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006910:	4629      	mov	r1, r5
 8006912:	4640      	mov	r0, r8
 8006914:	4798      	blx	r3
 8006916:	2800      	cmp	r0, #0
 8006918:	d0c2      	beq.n	80068a0 <_scanf_chars+0x2c>
 800691a:	6823      	ldr	r3, [r4, #0]
 800691c:	f013 0310 	ands.w	r3, r3, #16
 8006920:	d105      	bne.n	800692e <_scanf_chars+0xba>
 8006922:	68e2      	ldr	r2, [r4, #12]
 8006924:	3201      	adds	r2, #1
 8006926:	60e2      	str	r2, [r4, #12]
 8006928:	69a2      	ldr	r2, [r4, #24]
 800692a:	b102      	cbz	r2, 800692e <_scanf_chars+0xba>
 800692c:	703b      	strb	r3, [r7, #0]
 800692e:	6923      	ldr	r3, [r4, #16]
 8006930:	2000      	movs	r0, #0
 8006932:	441e      	add	r6, r3
 8006934:	6126      	str	r6, [r4, #16]
 8006936:	e7c7      	b.n	80068c8 <_scanf_chars+0x54>

08006938 <_scanf_i>:
 8006938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800693c:	460c      	mov	r4, r1
 800693e:	469a      	mov	sl, r3
 8006940:	4b74      	ldr	r3, [pc, #464]	; (8006b14 <_scanf_i+0x1dc>)
 8006942:	b087      	sub	sp, #28
 8006944:	4683      	mov	fp, r0
 8006946:	4616      	mov	r6, r2
 8006948:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800694c:	ab03      	add	r3, sp, #12
 800694e:	68a7      	ldr	r7, [r4, #8]
 8006950:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006954:	4b70      	ldr	r3, [pc, #448]	; (8006b18 <_scanf_i+0x1e0>)
 8006956:	69a1      	ldr	r1, [r4, #24]
 8006958:	4a70      	ldr	r2, [pc, #448]	; (8006b1c <_scanf_i+0x1e4>)
 800695a:	f104 091c 	add.w	r9, r4, #28
 800695e:	2903      	cmp	r1, #3
 8006960:	bf08      	it	eq
 8006962:	461a      	moveq	r2, r3
 8006964:	1e7b      	subs	r3, r7, #1
 8006966:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800696a:	bf84      	itt	hi
 800696c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006970:	60a3      	strhi	r3, [r4, #8]
 8006972:	6823      	ldr	r3, [r4, #0]
 8006974:	bf88      	it	hi
 8006976:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800697a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800697e:	6023      	str	r3, [r4, #0]
 8006980:	bf98      	it	ls
 8006982:	2700      	movls	r7, #0
 8006984:	464b      	mov	r3, r9
 8006986:	f04f 0800 	mov.w	r8, #0
 800698a:	9200      	str	r2, [sp, #0]
 800698c:	bf88      	it	hi
 800698e:	197f      	addhi	r7, r7, r5
 8006990:	6831      	ldr	r1, [r6, #0]
 8006992:	9301      	str	r3, [sp, #4]
 8006994:	ab03      	add	r3, sp, #12
 8006996:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800699a:	2202      	movs	r2, #2
 800699c:	7809      	ldrb	r1, [r1, #0]
 800699e:	f7fe ffa7 	bl	80058f0 <memchr>
 80069a2:	9b01      	ldr	r3, [sp, #4]
 80069a4:	b330      	cbz	r0, 80069f4 <_scanf_i+0xbc>
 80069a6:	f1b8 0f01 	cmp.w	r8, #1
 80069aa:	d15a      	bne.n	8006a62 <_scanf_i+0x12a>
 80069ac:	6862      	ldr	r2, [r4, #4]
 80069ae:	b92a      	cbnz	r2, 80069bc <_scanf_i+0x84>
 80069b0:	2108      	movs	r1, #8
 80069b2:	6822      	ldr	r2, [r4, #0]
 80069b4:	6061      	str	r1, [r4, #4]
 80069b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069ba:	6022      	str	r2, [r4, #0]
 80069bc:	6822      	ldr	r2, [r4, #0]
 80069be:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80069c2:	6022      	str	r2, [r4, #0]
 80069c4:	68a2      	ldr	r2, [r4, #8]
 80069c6:	1e51      	subs	r1, r2, #1
 80069c8:	60a1      	str	r1, [r4, #8]
 80069ca:	b19a      	cbz	r2, 80069f4 <_scanf_i+0xbc>
 80069cc:	6832      	ldr	r2, [r6, #0]
 80069ce:	1c5d      	adds	r5, r3, #1
 80069d0:	1c51      	adds	r1, r2, #1
 80069d2:	6031      	str	r1, [r6, #0]
 80069d4:	7812      	ldrb	r2, [r2, #0]
 80069d6:	701a      	strb	r2, [r3, #0]
 80069d8:	6873      	ldr	r3, [r6, #4]
 80069da:	3b01      	subs	r3, #1
 80069dc:	2b00      	cmp	r3, #0
 80069de:	6073      	str	r3, [r6, #4]
 80069e0:	dc07      	bgt.n	80069f2 <_scanf_i+0xba>
 80069e2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80069e6:	4631      	mov	r1, r6
 80069e8:	4658      	mov	r0, fp
 80069ea:	4798      	blx	r3
 80069ec:	2800      	cmp	r0, #0
 80069ee:	f040 8087 	bne.w	8006b00 <_scanf_i+0x1c8>
 80069f2:	462b      	mov	r3, r5
 80069f4:	f108 0801 	add.w	r8, r8, #1
 80069f8:	f1b8 0f03 	cmp.w	r8, #3
 80069fc:	d1c8      	bne.n	8006990 <_scanf_i+0x58>
 80069fe:	6862      	ldr	r2, [r4, #4]
 8006a00:	b90a      	cbnz	r2, 8006a06 <_scanf_i+0xce>
 8006a02:	220a      	movs	r2, #10
 8006a04:	6062      	str	r2, [r4, #4]
 8006a06:	6862      	ldr	r2, [r4, #4]
 8006a08:	4945      	ldr	r1, [pc, #276]	; (8006b20 <_scanf_i+0x1e8>)
 8006a0a:	6960      	ldr	r0, [r4, #20]
 8006a0c:	1a89      	subs	r1, r1, r2
 8006a0e:	9301      	str	r3, [sp, #4]
 8006a10:	f000 f898 	bl	8006b44 <__sccl>
 8006a14:	9b01      	ldr	r3, [sp, #4]
 8006a16:	f04f 0800 	mov.w	r8, #0
 8006a1a:	461d      	mov	r5, r3
 8006a1c:	68a3      	ldr	r3, [r4, #8]
 8006a1e:	6822      	ldr	r2, [r4, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d03b      	beq.n	8006a9c <_scanf_i+0x164>
 8006a24:	6831      	ldr	r1, [r6, #0]
 8006a26:	6960      	ldr	r0, [r4, #20]
 8006a28:	f891 c000 	ldrb.w	ip, [r1]
 8006a2c:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006a30:	2800      	cmp	r0, #0
 8006a32:	d033      	beq.n	8006a9c <_scanf_i+0x164>
 8006a34:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8006a38:	d121      	bne.n	8006a7e <_scanf_i+0x146>
 8006a3a:	0510      	lsls	r0, r2, #20
 8006a3c:	d51f      	bpl.n	8006a7e <_scanf_i+0x146>
 8006a3e:	f108 0801 	add.w	r8, r8, #1
 8006a42:	b117      	cbz	r7, 8006a4a <_scanf_i+0x112>
 8006a44:	3301      	adds	r3, #1
 8006a46:	3f01      	subs	r7, #1
 8006a48:	60a3      	str	r3, [r4, #8]
 8006a4a:	6873      	ldr	r3, [r6, #4]
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	6073      	str	r3, [r6, #4]
 8006a52:	dd1c      	ble.n	8006a8e <_scanf_i+0x156>
 8006a54:	6833      	ldr	r3, [r6, #0]
 8006a56:	3301      	adds	r3, #1
 8006a58:	6033      	str	r3, [r6, #0]
 8006a5a:	68a3      	ldr	r3, [r4, #8]
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	60a3      	str	r3, [r4, #8]
 8006a60:	e7dc      	b.n	8006a1c <_scanf_i+0xe4>
 8006a62:	f1b8 0f02 	cmp.w	r8, #2
 8006a66:	d1ad      	bne.n	80069c4 <_scanf_i+0x8c>
 8006a68:	6822      	ldr	r2, [r4, #0]
 8006a6a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006a6e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006a72:	d1bf      	bne.n	80069f4 <_scanf_i+0xbc>
 8006a74:	2110      	movs	r1, #16
 8006a76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a7a:	6061      	str	r1, [r4, #4]
 8006a7c:	e7a1      	b.n	80069c2 <_scanf_i+0x8a>
 8006a7e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8006a82:	6022      	str	r2, [r4, #0]
 8006a84:	780b      	ldrb	r3, [r1, #0]
 8006a86:	3501      	adds	r5, #1
 8006a88:	f805 3c01 	strb.w	r3, [r5, #-1]
 8006a8c:	e7dd      	b.n	8006a4a <_scanf_i+0x112>
 8006a8e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006a92:	4631      	mov	r1, r6
 8006a94:	4658      	mov	r0, fp
 8006a96:	4798      	blx	r3
 8006a98:	2800      	cmp	r0, #0
 8006a9a:	d0de      	beq.n	8006a5a <_scanf_i+0x122>
 8006a9c:	6823      	ldr	r3, [r4, #0]
 8006a9e:	05d9      	lsls	r1, r3, #23
 8006aa0:	d50c      	bpl.n	8006abc <_scanf_i+0x184>
 8006aa2:	454d      	cmp	r5, r9
 8006aa4:	d908      	bls.n	8006ab8 <_scanf_i+0x180>
 8006aa6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006aaa:	1e6f      	subs	r7, r5, #1
 8006aac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ab0:	4632      	mov	r2, r6
 8006ab2:	4658      	mov	r0, fp
 8006ab4:	4798      	blx	r3
 8006ab6:	463d      	mov	r5, r7
 8006ab8:	454d      	cmp	r5, r9
 8006aba:	d029      	beq.n	8006b10 <_scanf_i+0x1d8>
 8006abc:	6822      	ldr	r2, [r4, #0]
 8006abe:	f012 0210 	ands.w	r2, r2, #16
 8006ac2:	d113      	bne.n	8006aec <_scanf_i+0x1b4>
 8006ac4:	702a      	strb	r2, [r5, #0]
 8006ac6:	6863      	ldr	r3, [r4, #4]
 8006ac8:	4649      	mov	r1, r9
 8006aca:	4658      	mov	r0, fp
 8006acc:	9e00      	ldr	r6, [sp, #0]
 8006ace:	47b0      	blx	r6
 8006ad0:	f8da 3000 	ldr.w	r3, [sl]
 8006ad4:	6821      	ldr	r1, [r4, #0]
 8006ad6:	1d1a      	adds	r2, r3, #4
 8006ad8:	f8ca 2000 	str.w	r2, [sl]
 8006adc:	f011 0f20 	tst.w	r1, #32
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	d010      	beq.n	8006b06 <_scanf_i+0x1ce>
 8006ae4:	6018      	str	r0, [r3, #0]
 8006ae6:	68e3      	ldr	r3, [r4, #12]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	60e3      	str	r3, [r4, #12]
 8006aec:	2000      	movs	r0, #0
 8006aee:	eba5 0509 	sub.w	r5, r5, r9
 8006af2:	44a8      	add	r8, r5
 8006af4:	6925      	ldr	r5, [r4, #16]
 8006af6:	4445      	add	r5, r8
 8006af8:	6125      	str	r5, [r4, #16]
 8006afa:	b007      	add	sp, #28
 8006afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b00:	f04f 0800 	mov.w	r8, #0
 8006b04:	e7ca      	b.n	8006a9c <_scanf_i+0x164>
 8006b06:	07ca      	lsls	r2, r1, #31
 8006b08:	bf4c      	ite	mi
 8006b0a:	8018      	strhmi	r0, [r3, #0]
 8006b0c:	6018      	strpl	r0, [r3, #0]
 8006b0e:	e7ea      	b.n	8006ae6 <_scanf_i+0x1ae>
 8006b10:	2001      	movs	r0, #1
 8006b12:	e7f2      	b.n	8006afa <_scanf_i+0x1c2>
 8006b14:	08009a18 	.word	0x08009a18
 8006b18:	08004581 	.word	0x08004581
 8006b1c:	08006cc1 	.word	0x08006cc1
 8006b20:	08009c3d 	.word	0x08009c3d

08006b24 <_sbrk_r>:
 8006b24:	b538      	push	{r3, r4, r5, lr}
 8006b26:	2300      	movs	r3, #0
 8006b28:	4c05      	ldr	r4, [pc, #20]	; (8006b40 <_sbrk_r+0x1c>)
 8006b2a:	4605      	mov	r5, r0
 8006b2c:	4608      	mov	r0, r1
 8006b2e:	6023      	str	r3, [r4, #0]
 8006b30:	f7fb ff78 	bl	8002a24 <_sbrk>
 8006b34:	1c43      	adds	r3, r0, #1
 8006b36:	d102      	bne.n	8006b3e <_sbrk_r+0x1a>
 8006b38:	6823      	ldr	r3, [r4, #0]
 8006b3a:	b103      	cbz	r3, 8006b3e <_sbrk_r+0x1a>
 8006b3c:	602b      	str	r3, [r5, #0]
 8006b3e:	bd38      	pop	{r3, r4, r5, pc}
 8006b40:	20000544 	.word	0x20000544

08006b44 <__sccl>:
 8006b44:	b570      	push	{r4, r5, r6, lr}
 8006b46:	780b      	ldrb	r3, [r1, #0]
 8006b48:	1e44      	subs	r4, r0, #1
 8006b4a:	2b5e      	cmp	r3, #94	; 0x5e
 8006b4c:	bf13      	iteet	ne
 8006b4e:	1c4a      	addne	r2, r1, #1
 8006b50:	1c8a      	addeq	r2, r1, #2
 8006b52:	784b      	ldrbeq	r3, [r1, #1]
 8006b54:	2100      	movne	r1, #0
 8006b56:	bf08      	it	eq
 8006b58:	2101      	moveq	r1, #1
 8006b5a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8006b5e:	f804 1f01 	strb.w	r1, [r4, #1]!
 8006b62:	42ac      	cmp	r4, r5
 8006b64:	d1fb      	bne.n	8006b5e <__sccl+0x1a>
 8006b66:	b913      	cbnz	r3, 8006b6e <__sccl+0x2a>
 8006b68:	3a01      	subs	r2, #1
 8006b6a:	4610      	mov	r0, r2
 8006b6c:	bd70      	pop	{r4, r5, r6, pc}
 8006b6e:	f081 0401 	eor.w	r4, r1, #1
 8006b72:	54c4      	strb	r4, [r0, r3]
 8006b74:	1c51      	adds	r1, r2, #1
 8006b76:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8006b7a:	1e4e      	subs	r6, r1, #1
 8006b7c:	2d2d      	cmp	r5, #45	; 0x2d
 8006b7e:	460a      	mov	r2, r1
 8006b80:	d006      	beq.n	8006b90 <__sccl+0x4c>
 8006b82:	2d5d      	cmp	r5, #93	; 0x5d
 8006b84:	d0f1      	beq.n	8006b6a <__sccl+0x26>
 8006b86:	b90d      	cbnz	r5, 8006b8c <__sccl+0x48>
 8006b88:	4632      	mov	r2, r6
 8006b8a:	e7ee      	b.n	8006b6a <__sccl+0x26>
 8006b8c:	462b      	mov	r3, r5
 8006b8e:	e7f0      	b.n	8006b72 <__sccl+0x2e>
 8006b90:	780e      	ldrb	r6, [r1, #0]
 8006b92:	2e5d      	cmp	r6, #93	; 0x5d
 8006b94:	d0fa      	beq.n	8006b8c <__sccl+0x48>
 8006b96:	42b3      	cmp	r3, r6
 8006b98:	dcf8      	bgt.n	8006b8c <__sccl+0x48>
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	429e      	cmp	r6, r3
 8006b9e:	54c4      	strb	r4, [r0, r3]
 8006ba0:	dcfb      	bgt.n	8006b9a <__sccl+0x56>
 8006ba2:	3102      	adds	r1, #2
 8006ba4:	e7e7      	b.n	8006b76 <__sccl+0x32>

08006ba6 <strncmp>:
 8006ba6:	b510      	push	{r4, lr}
 8006ba8:	b16a      	cbz	r2, 8006bc6 <strncmp+0x20>
 8006baa:	3901      	subs	r1, #1
 8006bac:	1884      	adds	r4, r0, r2
 8006bae:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006bb2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d103      	bne.n	8006bc2 <strncmp+0x1c>
 8006bba:	42a0      	cmp	r0, r4
 8006bbc:	d001      	beq.n	8006bc2 <strncmp+0x1c>
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d1f5      	bne.n	8006bae <strncmp+0x8>
 8006bc2:	1a98      	subs	r0, r3, r2
 8006bc4:	bd10      	pop	{r4, pc}
 8006bc6:	4610      	mov	r0, r2
 8006bc8:	e7fc      	b.n	8006bc4 <strncmp+0x1e>

08006bca <_strtoul_l.isra.0>:
 8006bca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bce:	4680      	mov	r8, r0
 8006bd0:	4689      	mov	r9, r1
 8006bd2:	4692      	mov	sl, r2
 8006bd4:	461e      	mov	r6, r3
 8006bd6:	460f      	mov	r7, r1
 8006bd8:	463d      	mov	r5, r7
 8006bda:	9808      	ldr	r0, [sp, #32]
 8006bdc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006be0:	f7fe fe4a 	bl	8005878 <__locale_ctype_ptr_l>
 8006be4:	4420      	add	r0, r4
 8006be6:	7843      	ldrb	r3, [r0, #1]
 8006be8:	f013 0308 	ands.w	r3, r3, #8
 8006bec:	d130      	bne.n	8006c50 <_strtoul_l.isra.0+0x86>
 8006bee:	2c2d      	cmp	r4, #45	; 0x2d
 8006bf0:	d130      	bne.n	8006c54 <_strtoul_l.isra.0+0x8a>
 8006bf2:	2101      	movs	r1, #1
 8006bf4:	787c      	ldrb	r4, [r7, #1]
 8006bf6:	1cbd      	adds	r5, r7, #2
 8006bf8:	2e00      	cmp	r6, #0
 8006bfa:	d05c      	beq.n	8006cb6 <_strtoul_l.isra.0+0xec>
 8006bfc:	2e10      	cmp	r6, #16
 8006bfe:	d109      	bne.n	8006c14 <_strtoul_l.isra.0+0x4a>
 8006c00:	2c30      	cmp	r4, #48	; 0x30
 8006c02:	d107      	bne.n	8006c14 <_strtoul_l.isra.0+0x4a>
 8006c04:	782b      	ldrb	r3, [r5, #0]
 8006c06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006c0a:	2b58      	cmp	r3, #88	; 0x58
 8006c0c:	d14e      	bne.n	8006cac <_strtoul_l.isra.0+0xe2>
 8006c0e:	2610      	movs	r6, #16
 8006c10:	786c      	ldrb	r4, [r5, #1]
 8006c12:	3502      	adds	r5, #2
 8006c14:	f04f 32ff 	mov.w	r2, #4294967295
 8006c18:	fbb2 f2f6 	udiv	r2, r2, r6
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	fb06 fc02 	mul.w	ip, r6, r2
 8006c22:	4618      	mov	r0, r3
 8006c24:	ea6f 0c0c 	mvn.w	ip, ip
 8006c28:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006c2c:	2f09      	cmp	r7, #9
 8006c2e:	d817      	bhi.n	8006c60 <_strtoul_l.isra.0+0x96>
 8006c30:	463c      	mov	r4, r7
 8006c32:	42a6      	cmp	r6, r4
 8006c34:	dd23      	ble.n	8006c7e <_strtoul_l.isra.0+0xb4>
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	db1e      	blt.n	8006c78 <_strtoul_l.isra.0+0xae>
 8006c3a:	4282      	cmp	r2, r0
 8006c3c:	d31c      	bcc.n	8006c78 <_strtoul_l.isra.0+0xae>
 8006c3e:	d101      	bne.n	8006c44 <_strtoul_l.isra.0+0x7a>
 8006c40:	45a4      	cmp	ip, r4
 8006c42:	db19      	blt.n	8006c78 <_strtoul_l.isra.0+0xae>
 8006c44:	2301      	movs	r3, #1
 8006c46:	fb00 4006 	mla	r0, r0, r6, r4
 8006c4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c4e:	e7eb      	b.n	8006c28 <_strtoul_l.isra.0+0x5e>
 8006c50:	462f      	mov	r7, r5
 8006c52:	e7c1      	b.n	8006bd8 <_strtoul_l.isra.0+0xe>
 8006c54:	2c2b      	cmp	r4, #43	; 0x2b
 8006c56:	bf04      	itt	eq
 8006c58:	1cbd      	addeq	r5, r7, #2
 8006c5a:	787c      	ldrbeq	r4, [r7, #1]
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	e7cb      	b.n	8006bf8 <_strtoul_l.isra.0+0x2e>
 8006c60:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006c64:	2f19      	cmp	r7, #25
 8006c66:	d801      	bhi.n	8006c6c <_strtoul_l.isra.0+0xa2>
 8006c68:	3c37      	subs	r4, #55	; 0x37
 8006c6a:	e7e2      	b.n	8006c32 <_strtoul_l.isra.0+0x68>
 8006c6c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006c70:	2f19      	cmp	r7, #25
 8006c72:	d804      	bhi.n	8006c7e <_strtoul_l.isra.0+0xb4>
 8006c74:	3c57      	subs	r4, #87	; 0x57
 8006c76:	e7dc      	b.n	8006c32 <_strtoul_l.isra.0+0x68>
 8006c78:	f04f 33ff 	mov.w	r3, #4294967295
 8006c7c:	e7e5      	b.n	8006c4a <_strtoul_l.isra.0+0x80>
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	da09      	bge.n	8006c96 <_strtoul_l.isra.0+0xcc>
 8006c82:	2322      	movs	r3, #34	; 0x22
 8006c84:	f04f 30ff 	mov.w	r0, #4294967295
 8006c88:	f8c8 3000 	str.w	r3, [r8]
 8006c8c:	f1ba 0f00 	cmp.w	sl, #0
 8006c90:	d107      	bne.n	8006ca2 <_strtoul_l.isra.0+0xd8>
 8006c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c96:	b101      	cbz	r1, 8006c9a <_strtoul_l.isra.0+0xd0>
 8006c98:	4240      	negs	r0, r0
 8006c9a:	f1ba 0f00 	cmp.w	sl, #0
 8006c9e:	d0f8      	beq.n	8006c92 <_strtoul_l.isra.0+0xc8>
 8006ca0:	b10b      	cbz	r3, 8006ca6 <_strtoul_l.isra.0+0xdc>
 8006ca2:	f105 39ff 	add.w	r9, r5, #4294967295
 8006ca6:	f8ca 9000 	str.w	r9, [sl]
 8006caa:	e7f2      	b.n	8006c92 <_strtoul_l.isra.0+0xc8>
 8006cac:	2430      	movs	r4, #48	; 0x30
 8006cae:	2e00      	cmp	r6, #0
 8006cb0:	d1b0      	bne.n	8006c14 <_strtoul_l.isra.0+0x4a>
 8006cb2:	2608      	movs	r6, #8
 8006cb4:	e7ae      	b.n	8006c14 <_strtoul_l.isra.0+0x4a>
 8006cb6:	2c30      	cmp	r4, #48	; 0x30
 8006cb8:	d0a4      	beq.n	8006c04 <_strtoul_l.isra.0+0x3a>
 8006cba:	260a      	movs	r6, #10
 8006cbc:	e7aa      	b.n	8006c14 <_strtoul_l.isra.0+0x4a>
	...

08006cc0 <_strtoul_r>:
 8006cc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006cc2:	4c06      	ldr	r4, [pc, #24]	; (8006cdc <_strtoul_r+0x1c>)
 8006cc4:	4d06      	ldr	r5, [pc, #24]	; (8006ce0 <_strtoul_r+0x20>)
 8006cc6:	6824      	ldr	r4, [r4, #0]
 8006cc8:	6a24      	ldr	r4, [r4, #32]
 8006cca:	2c00      	cmp	r4, #0
 8006ccc:	bf08      	it	eq
 8006cce:	462c      	moveq	r4, r5
 8006cd0:	9400      	str	r4, [sp, #0]
 8006cd2:	f7ff ff7a 	bl	8006bca <_strtoul_l.isra.0>
 8006cd6:	b003      	add	sp, #12
 8006cd8:	bd30      	pop	{r4, r5, pc}
 8006cda:	bf00      	nop
 8006cdc:	20000004 	.word	0x20000004
 8006ce0:	20000068 	.word	0x20000068

08006ce4 <__submore>:
 8006ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ce8:	460c      	mov	r4, r1
 8006cea:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006cec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cf0:	4299      	cmp	r1, r3
 8006cf2:	d11b      	bne.n	8006d2c <__submore+0x48>
 8006cf4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006cf8:	f7ff fa66 	bl	80061c8 <_malloc_r>
 8006cfc:	b918      	cbnz	r0, 8006d06 <__submore+0x22>
 8006cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8006d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d0a:	63a3      	str	r3, [r4, #56]	; 0x38
 8006d0c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006d10:	6360      	str	r0, [r4, #52]	; 0x34
 8006d12:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006d16:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006d1a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006d1e:	7043      	strb	r3, [r0, #1]
 8006d20:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006d24:	7003      	strb	r3, [r0, #0]
 8006d26:	6020      	str	r0, [r4, #0]
 8006d28:	2000      	movs	r0, #0
 8006d2a:	e7ea      	b.n	8006d02 <__submore+0x1e>
 8006d2c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006d2e:	0077      	lsls	r7, r6, #1
 8006d30:	463a      	mov	r2, r7
 8006d32:	f000 f843 	bl	8006dbc <_realloc_r>
 8006d36:	4605      	mov	r5, r0
 8006d38:	2800      	cmp	r0, #0
 8006d3a:	d0e0      	beq.n	8006cfe <__submore+0x1a>
 8006d3c:	eb00 0806 	add.w	r8, r0, r6
 8006d40:	4601      	mov	r1, r0
 8006d42:	4632      	mov	r2, r6
 8006d44:	4640      	mov	r0, r8
 8006d46:	f7fe fde1 	bl	800590c <memcpy>
 8006d4a:	f8c4 8000 	str.w	r8, [r4]
 8006d4e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8006d52:	e7e9      	b.n	8006d28 <__submore+0x44>

08006d54 <__ascii_wctomb>:
 8006d54:	b149      	cbz	r1, 8006d6a <__ascii_wctomb+0x16>
 8006d56:	2aff      	cmp	r2, #255	; 0xff
 8006d58:	bf8b      	itete	hi
 8006d5a:	238a      	movhi	r3, #138	; 0x8a
 8006d5c:	700a      	strbls	r2, [r1, #0]
 8006d5e:	6003      	strhi	r3, [r0, #0]
 8006d60:	2001      	movls	r0, #1
 8006d62:	bf88      	it	hi
 8006d64:	f04f 30ff 	movhi.w	r0, #4294967295
 8006d68:	4770      	bx	lr
 8006d6a:	4608      	mov	r0, r1
 8006d6c:	4770      	bx	lr

08006d6e <__retarget_lock_acquire_recursive>:
 8006d6e:	4770      	bx	lr

08006d70 <__retarget_lock_release_recursive>:
 8006d70:	4770      	bx	lr

08006d72 <memmove>:
 8006d72:	4288      	cmp	r0, r1
 8006d74:	b510      	push	{r4, lr}
 8006d76:	eb01 0302 	add.w	r3, r1, r2
 8006d7a:	d807      	bhi.n	8006d8c <memmove+0x1a>
 8006d7c:	1e42      	subs	r2, r0, #1
 8006d7e:	4299      	cmp	r1, r3
 8006d80:	d00a      	beq.n	8006d98 <memmove+0x26>
 8006d82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d86:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006d8a:	e7f8      	b.n	8006d7e <memmove+0xc>
 8006d8c:	4283      	cmp	r3, r0
 8006d8e:	d9f5      	bls.n	8006d7c <memmove+0xa>
 8006d90:	1881      	adds	r1, r0, r2
 8006d92:	1ad2      	subs	r2, r2, r3
 8006d94:	42d3      	cmn	r3, r2
 8006d96:	d100      	bne.n	8006d9a <memmove+0x28>
 8006d98:	bd10      	pop	{r4, pc}
 8006d9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d9e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006da2:	e7f7      	b.n	8006d94 <memmove+0x22>

08006da4 <__malloc_lock>:
 8006da4:	4801      	ldr	r0, [pc, #4]	; (8006dac <__malloc_lock+0x8>)
 8006da6:	f7ff bfe2 	b.w	8006d6e <__retarget_lock_acquire_recursive>
 8006daa:	bf00      	nop
 8006dac:	2000054c 	.word	0x2000054c

08006db0 <__malloc_unlock>:
 8006db0:	4801      	ldr	r0, [pc, #4]	; (8006db8 <__malloc_unlock+0x8>)
 8006db2:	f7ff bfdd 	b.w	8006d70 <__retarget_lock_release_recursive>
 8006db6:	bf00      	nop
 8006db8:	2000054c 	.word	0x2000054c

08006dbc <_realloc_r>:
 8006dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dbe:	4607      	mov	r7, r0
 8006dc0:	4614      	mov	r4, r2
 8006dc2:	460e      	mov	r6, r1
 8006dc4:	b921      	cbnz	r1, 8006dd0 <_realloc_r+0x14>
 8006dc6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006dca:	4611      	mov	r1, r2
 8006dcc:	f7ff b9fc 	b.w	80061c8 <_malloc_r>
 8006dd0:	b922      	cbnz	r2, 8006ddc <_realloc_r+0x20>
 8006dd2:	f7ff f9ad 	bl	8006130 <_free_r>
 8006dd6:	4625      	mov	r5, r4
 8006dd8:	4628      	mov	r0, r5
 8006dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ddc:	f000 f814 	bl	8006e08 <_malloc_usable_size_r>
 8006de0:	42a0      	cmp	r0, r4
 8006de2:	d20f      	bcs.n	8006e04 <_realloc_r+0x48>
 8006de4:	4621      	mov	r1, r4
 8006de6:	4638      	mov	r0, r7
 8006de8:	f7ff f9ee 	bl	80061c8 <_malloc_r>
 8006dec:	4605      	mov	r5, r0
 8006dee:	2800      	cmp	r0, #0
 8006df0:	d0f2      	beq.n	8006dd8 <_realloc_r+0x1c>
 8006df2:	4631      	mov	r1, r6
 8006df4:	4622      	mov	r2, r4
 8006df6:	f7fe fd89 	bl	800590c <memcpy>
 8006dfa:	4631      	mov	r1, r6
 8006dfc:	4638      	mov	r0, r7
 8006dfe:	f7ff f997 	bl	8006130 <_free_r>
 8006e02:	e7e9      	b.n	8006dd8 <_realloc_r+0x1c>
 8006e04:	4635      	mov	r5, r6
 8006e06:	e7e7      	b.n	8006dd8 <_realloc_r+0x1c>

08006e08 <_malloc_usable_size_r>:
 8006e08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e0c:	1f18      	subs	r0, r3, #4
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	bfbc      	itt	lt
 8006e12:	580b      	ldrlt	r3, [r1, r0]
 8006e14:	18c0      	addlt	r0, r0, r3
 8006e16:	4770      	bx	lr

08006e18 <_init>:
 8006e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e1a:	bf00      	nop
 8006e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e1e:	bc08      	pop	{r3}
 8006e20:	469e      	mov	lr, r3
 8006e22:	4770      	bx	lr

08006e24 <_fini>:
 8006e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e26:	bf00      	nop
 8006e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e2a:	bc08      	pop	{r3}
 8006e2c:	469e      	mov	lr, r3
 8006e2e:	4770      	bx	lr
